
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c5c  08003c5c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003c5c  08003c5c  00013c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c64  08003c64  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c64  08003c64  00013c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c68  08003c68  00013c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000070  08003cdc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08003cdc  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000059c3  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001315  00000000  00000000  00025aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005f8  00000000  00000000  00026dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000468  00000000  00000000  000273b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015137  00000000  00000000  00027820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000071f2  00000000  00000000  0003c957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008348e  00000000  00000000  00043b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002240  00000000  00000000  000c6fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c9218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b90 	.word	0x08003b90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003b90 	.word	0x08003b90

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b5b0      	push	{r4, r5, r7, lr}
 800058e:	b08e      	sub	sp, #56	; 0x38
 8000590:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fba3 	bl	8000cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f8a1 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f93f 	bl	800081c <MX_GPIO_Init>
  MX_SPI1_Init();
 800059e:	f000 f907 	bl	80007b0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  initialise_monitor_handles();
 80005a2:	f002 fae7 	bl	8002b74 <initialise_monitor_handles>

  uint8_t wys[] = {0b10001111,0b10100110,0b10100000, 0b10101000, 0b10101001, 0b10101010, 0b10101011, 0b10101100, 0b10101101};
 80005a6:	4a47      	ldr	r2, [pc, #284]	; (80006c4 <main+0x138>)
 80005a8:	f107 0318 	add.w	r3, r7, #24
 80005ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80005ae:	c303      	stmia	r3!, {r0, r1}
 80005b0:	701a      	strb	r2, [r3, #0]
  uint8_t odebrane[9]={0,0,0,0,0,0,0,0,0};
 80005b2:	4a45      	ldr	r2, [pc, #276]	; (80006c8 <main+0x13c>)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80005ba:	c303      	stmia	r3!, {r0, r1}
 80005bc:	701a      	strb	r2, [r3, #0]
  uint8_t c = 0b00100000;
 80005be:	2320      	movs	r3, #32
 80005c0:	72fb      	strb	r3, [r7, #11]
  uint8_t p = 0b00001111;
 80005c2:	230f      	movs	r3, #15
 80005c4:	72bb      	strb	r3, [r7, #10]
  uint16_t mag[3] ={0,0,0};
 80005c6:	2300      	movs	r3, #0
 80005c8:	80bb      	strh	r3, [r7, #4]
 80005ca:	2300      	movs	r3, #0
 80005cc:	80fb      	strh	r3, [r7, #6]
 80005ce:	2300      	movs	r3, #0
 80005d0:	813b      	strh	r3, [r7, #8]
  	 HAL_GPIO_WritePin(naszCS_GPIO_Port, naszCS_Pin, 1);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2108      	movs	r1, #8
 80005d6:	483d      	ldr	r0, [pc, #244]	; (80006cc <main+0x140>)
 80005d8:	f000 fe80 	bl	80012dc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005dc:	2001      	movs	r0, #1
 80005de:	f000 fbef 	bl	8000dc0 <HAL_Delay>

	HAL_GPIO_WritePin(naszCS_GPIO_Port, naszCS_Pin, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2108      	movs	r1, #8
 80005e6:	4839      	ldr	r0, [pc, #228]	; (80006cc <main+0x140>)
 80005e8:	f000 fe78 	bl	80012dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&c,1,100);
 80005ec:	f107 010b 	add.w	r1, r7, #11
 80005f0:	2364      	movs	r3, #100	; 0x64
 80005f2:	2201      	movs	r2, #1
 80005f4:	4836      	ldr	r0, [pc, #216]	; (80006d0 <main+0x144>)
 80005f6:	f001 fb78 	bl	8001cea <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&p,1,100);
 80005fa:	f107 010a 	add.w	r1, r7, #10
 80005fe:	2364      	movs	r3, #100	; 0x64
 8000600:	2201      	movs	r2, #1
 8000602:	4833      	ldr	r0, [pc, #204]	; (80006d0 <main+0x144>)
 8000604:	f001 fb71 	bl	8001cea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(naszCS_GPIO_Port, naszCS_Pin, 1);
 8000608:	2201      	movs	r2, #1
 800060a:	2108      	movs	r1, #8
 800060c:	482f      	ldr	r0, [pc, #188]	; (80006cc <main+0x140>)
 800060e:	f000 fe65 	bl	80012dc <HAL_GPIO_WritePin>
	printf(" Who am I\t temp\t ctrl1\t x\t y\t z\n");
 8000612:	4830      	ldr	r0, [pc, #192]	; (80006d4 <main+0x148>)
 8000614:	f002 fc52 	bl	8002ebc <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i =0; i < 9 ; i++)
 8000618:	2300      	movs	r3, #0
 800061a:	627b      	str	r3, [r7, #36]	; 0x24
 800061c:	e01e      	b.n	800065c <main+0xd0>
	  {
		  HAL_GPIO_WritePin(naszCS_GPIO_Port, naszCS_Pin, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2108      	movs	r1, #8
 8000622:	482a      	ldr	r0, [pc, #168]	; (80006cc <main+0x140>)
 8000624:	f000 fe5a 	bl	80012dc <HAL_GPIO_WritePin>
		  HAL_SPI_Transmit(&hspi1,&wys[i],1,100);
 8000628:	f107 0218 	add.w	r2, r7, #24
 800062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062e:	18d1      	adds	r1, r2, r3
 8000630:	2364      	movs	r3, #100	; 0x64
 8000632:	2201      	movs	r2, #1
 8000634:	4826      	ldr	r0, [pc, #152]	; (80006d0 <main+0x144>)
 8000636:	f001 fb58 	bl	8001cea <HAL_SPI_Transmit>

		  HAL_SPI_Receive(&hspi1, &odebrane[i], 1, 100);
 800063a:	f107 020c 	add.w	r2, r7, #12
 800063e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000640:	18d1      	adds	r1, r2, r3
 8000642:	2364      	movs	r3, #100	; 0x64
 8000644:	2201      	movs	r2, #1
 8000646:	4822      	ldr	r0, [pc, #136]	; (80006d0 <main+0x144>)
 8000648:	f001 fc8b 	bl	8001f62 <HAL_SPI_Receive>
		  HAL_GPIO_WritePin(naszCS_GPIO_Port, naszCS_Pin, 1);
 800064c:	2201      	movs	r2, #1
 800064e:	2108      	movs	r1, #8
 8000650:	481e      	ldr	r0, [pc, #120]	; (80006cc <main+0x140>)
 8000652:	f000 fe43 	bl	80012dc <HAL_GPIO_WritePin>
	  for (int i =0; i < 9 ; i++)
 8000656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000658:	3301      	adds	r3, #1
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
 800065c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065e:	2b08      	cmp	r3, #8
 8000660:	dddd      	ble.n	800061e <main+0x92>
	  }

	  mag[0]= (uint16_t)((odebrane[4] << 8) | odebrane[5]);
 8000662:	7c3b      	ldrb	r3, [r7, #16]
 8000664:	021b      	lsls	r3, r3, #8
 8000666:	b21a      	sxth	r2, r3
 8000668:	7c7b      	ldrb	r3, [r7, #17]
 800066a:	b21b      	sxth	r3, r3
 800066c:	4313      	orrs	r3, r2
 800066e:	b21b      	sxth	r3, r3
 8000670:	b29b      	uxth	r3, r3
 8000672:	80bb      	strh	r3, [r7, #4]
	  mag[1]= (uint16_t)((odebrane[6] << 8) | odebrane[7]);
 8000674:	7cbb      	ldrb	r3, [r7, #18]
 8000676:	021b      	lsls	r3, r3, #8
 8000678:	b21a      	sxth	r2, r3
 800067a:	7cfb      	ldrb	r3, [r7, #19]
 800067c:	b21b      	sxth	r3, r3
 800067e:	4313      	orrs	r3, r2
 8000680:	b21b      	sxth	r3, r3
 8000682:	b29b      	uxth	r3, r3
 8000684:	80fb      	strh	r3, [r7, #6]
	  mag[2]= (uint16_t)((odebrane[8] << 8) | odebrane[9]);
 8000686:	7d3b      	ldrb	r3, [r7, #20]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	b21a      	sxth	r2, r3
 800068c:	7d7b      	ldrb	r3, [r7, #21]
 800068e:	b21b      	sxth	r3, r3
 8000690:	4313      	orrs	r3, r2
 8000692:	b21b      	sxth	r3, r3
 8000694:	b29b      	uxth	r3, r3
 8000696:	813b      	strh	r3, [r7, #8]

	  printf("%d \t %d\t %d\t %d\t %d\t %d\n", odebrane[0], odebrane[1], odebrane[2], mag[0], mag[1], mag[2]);
 8000698:	7b3b      	ldrb	r3, [r7, #12]
 800069a:	4618      	mov	r0, r3
 800069c:	7b7b      	ldrb	r3, [r7, #13]
 800069e:	461c      	mov	r4, r3
 80006a0:	7bbb      	ldrb	r3, [r7, #14]
 80006a2:	461d      	mov	r5, r3
 80006a4:	88bb      	ldrh	r3, [r7, #4]
 80006a6:	88fa      	ldrh	r2, [r7, #6]
 80006a8:	8939      	ldrh	r1, [r7, #8]
 80006aa:	9102      	str	r1, [sp, #8]
 80006ac:	9201      	str	r2, [sp, #4]
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	462b      	mov	r3, r5
 80006b2:	4622      	mov	r2, r4
 80006b4:	4601      	mov	r1, r0
 80006b6:	4808      	ldr	r0, [pc, #32]	; (80006d8 <main+0x14c>)
 80006b8:	f002 fb9a 	bl	8002df0 <iprintf>
	  HAL_Delay(1);
 80006bc:	2001      	movs	r0, #1
 80006be:	f000 fb7f 	bl	8000dc0 <HAL_Delay>
	  for (int i =0; i < 9 ; i++)
 80006c2:	e7a9      	b.n	8000618 <main+0x8c>
 80006c4:	08003be4 	.word	0x08003be4
 80006c8:	08003bf0 	.word	0x08003bf0
 80006cc:	40021000 	.word	0x40021000
 80006d0:	2000008c 	.word	0x2000008c
 80006d4:	08003ba8 	.word	0x08003ba8
 80006d8:	08003bc8 	.word	0x08003bc8

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	; 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fcc6 	bl	800307c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <SystemClock_Config+0xcc>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a27      	ldr	r2, [pc, #156]	; (80007a8 <SystemClock_Config+0xcc>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <SystemClock_Config+0xcc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b22      	ldr	r3, [pc, #136]	; (80007ac <SystemClock_Config+0xd0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemClock_Config+0xd0>)
 8000726:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <SystemClock_Config+0xd0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073c:	2301      	movs	r3, #1
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000740:	2310      	movs	r3, #16
 8000742:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000744:	2302      	movs	r3, #2
 8000746:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000748:	2300      	movs	r3, #0
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800074c:	2308      	movs	r3, #8
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000750:	23c0      	movs	r3, #192	; 0xc0
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000754:	2304      	movs	r3, #4
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000758:	2308      	movs	r3, #8
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4618      	mov	r0, r3
 8000762:	f000 fdd5 	bl	8001310 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800076c:	f000 f9a4 	bl	8000ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2302      	movs	r3, #2
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2103      	movs	r1, #3
 800078e:	4618      	mov	r0, r3
 8000790:	f001 f836 	bl	8001800 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800079a:	f000 f98d 	bl	8000ab8 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	; 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007b4:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_SPI1_Init+0x64>)
 80007b6:	4a18      	ldr	r2, [pc, #96]	; (8000818 <MX_SPI1_Init+0x68>)
 80007b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ba:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_SPI1_Init+0x64>)
 80007bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_SPI1_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_SPI1_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_SPI1_Init+0x64>)
 80007dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_SPI1_Init+0x64>)
 80007e4:	2230      	movs	r2, #48	; 0x30
 80007e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_SPI1_Init+0x64>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <MX_SPI1_Init+0x64>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_SPI1_Init+0x64>)
 80007fc:	220a      	movs	r2, #10
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_SPI1_Init+0x64>)
 8000802:	f001 f9e9 	bl	8001bd8 <HAL_SPI_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800080c:	f000 f954 	bl	8000ab8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	2000008c 	.word	0x2000008c
 8000818:	40013000 	.word	0x40013000

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	; 0x30
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
 8000836:	4b9a      	ldr	r3, [pc, #616]	; (8000aa0 <MX_GPIO_Init+0x284>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a99      	ldr	r2, [pc, #612]	; (8000aa0 <MX_GPIO_Init+0x284>)
 800083c:	f043 0310 	orr.w	r3, r3, #16
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b97      	ldr	r3, [pc, #604]	; (8000aa0 <MX_GPIO_Init+0x284>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0310 	and.w	r3, r3, #16
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
 8000852:	4b93      	ldr	r3, [pc, #588]	; (8000aa0 <MX_GPIO_Init+0x284>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a92      	ldr	r2, [pc, #584]	; (8000aa0 <MX_GPIO_Init+0x284>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b90      	ldr	r3, [pc, #576]	; (8000aa0 <MX_GPIO_Init+0x284>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b8c      	ldr	r3, [pc, #560]	; (8000aa0 <MX_GPIO_Init+0x284>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a8b      	ldr	r2, [pc, #556]	; (8000aa0 <MX_GPIO_Init+0x284>)
 8000874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b89      	ldr	r3, [pc, #548]	; (8000aa0 <MX_GPIO_Init+0x284>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b85      	ldr	r3, [pc, #532]	; (8000aa0 <MX_GPIO_Init+0x284>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a84      	ldr	r2, [pc, #528]	; (8000aa0 <MX_GPIO_Init+0x284>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b82      	ldr	r3, [pc, #520]	; (8000aa0 <MX_GPIO_Init+0x284>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	4b7e      	ldr	r3, [pc, #504]	; (8000aa0 <MX_GPIO_Init+0x284>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a7d      	ldr	r2, [pc, #500]	; (8000aa0 <MX_GPIO_Init+0x284>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b7b      	ldr	r3, [pc, #492]	; (8000aa0 <MX_GPIO_Init+0x284>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	4b77      	ldr	r3, [pc, #476]	; (8000aa0 <MX_GPIO_Init+0x284>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a76      	ldr	r2, [pc, #472]	; (8000aa0 <MX_GPIO_Init+0x284>)
 80008c8:	f043 0308 	orr.w	r3, r3, #8
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b74      	ldr	r3, [pc, #464]	; (8000aa0 <MX_GPIO_Init+0x284>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(naszCS_GPIO_Port, naszCS_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2108      	movs	r1, #8
 80008de:	4871      	ldr	r0, [pc, #452]	; (8000aa4 <MX_GPIO_Init+0x288>)
 80008e0:	f000 fcfc 	bl	80012dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008e4:	2201      	movs	r2, #1
 80008e6:	2101      	movs	r1, #1
 80008e8:	486f      	ldr	r0, [pc, #444]	; (8000aa8 <MX_GPIO_Init+0x28c>)
 80008ea:	f000 fcf7 	bl	80012dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ee:	2200      	movs	r2, #0
 80008f0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008f4:	486d      	ldr	r0, [pc, #436]	; (8000aac <MX_GPIO_Init+0x290>)
 80008f6:	f000 fcf1 	bl	80012dc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008fa:	2304      	movs	r3, #4
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4865      	ldr	r0, [pc, #404]	; (8000aa4 <MX_GPIO_Init+0x288>)
 800090e:	f000 fb61 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : naszCS_Pin */
  GPIO_InitStruct.Pin = naszCS_Pin;
 8000912:	2308      	movs	r3, #8
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(naszCS_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	485e      	ldr	r0, [pc, #376]	; (8000aa4 <MX_GPIO_Init+0x288>)
 800092a:	f000 fb53 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 800092e:	2332      	movs	r3, #50	; 0x32
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000932:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4858      	ldr	r0, [pc, #352]	; (8000aa4 <MX_GPIO_Init+0x288>)
 8000944:	f000 fb46 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000948:	2301      	movs	r3, #1
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094c:	2301      	movs	r3, #1
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2300      	movs	r3, #0
 8000956:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4852      	ldr	r0, [pc, #328]	; (8000aa8 <MX_GPIO_Init+0x28c>)
 8000960:	f000 fb38 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000964:	2308      	movs	r3, #8
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000974:	2305      	movs	r3, #5
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	484a      	ldr	r0, [pc, #296]	; (8000aa8 <MX_GPIO_Init+0x28c>)
 8000980:	f000 fb28 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000984:	2301      	movs	r3, #1
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000988:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800098c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4845      	ldr	r0, [pc, #276]	; (8000ab0 <MX_GPIO_Init+0x294>)
 800099a:	f000 fb1b 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800099e:	2310      	movs	r3, #16
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ae:	2306      	movs	r3, #6
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	483d      	ldr	r0, [pc, #244]	; (8000ab0 <MX_GPIO_Init+0x294>)
 80009ba:	f000 fb0b 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80009be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009d0:	2305      	movs	r3, #5
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4836      	ldr	r0, [pc, #216]	; (8000ab4 <MX_GPIO_Init+0x298>)
 80009dc:	f000 fafa 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009e0:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009e4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	482c      	ldr	r0, [pc, #176]	; (8000aac <MX_GPIO_Init+0x290>)
 80009fa:	f000 faeb 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009fe:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a10:	2306      	movs	r3, #6
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4823      	ldr	r0, [pc, #140]	; (8000aa8 <MX_GPIO_Init+0x28c>)
 8000a1c:	f000 fada 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	481e      	ldr	r0, [pc, #120]	; (8000ab0 <MX_GPIO_Init+0x294>)
 8000a36:	f000 facd 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a3a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a4c:	230a      	movs	r3, #10
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <MX_GPIO_Init+0x294>)
 8000a58:	f000 fabc 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 031c 	add.w	r3, r7, #28
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480f      	ldr	r0, [pc, #60]	; (8000aac <MX_GPIO_Init+0x290>)
 8000a70:	f000 fab0 	bl	8000fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a74:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a7a:	2312      	movs	r3, #18
 8000a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a86:	2304      	movs	r3, #4
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <MX_GPIO_Init+0x298>)
 8000a92:	f000 fa9f 	bl	8000fd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a96:	bf00      	nop
 8000a98:	3730      	adds	r7, #48	; 0x30
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	40020800 	.word	0x40020800
 8000aac:	40020c00 	.word	0x40020c00
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40020400 	.word	0x40020400

08000ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000abc:	b672      	cpsid	i
}
 8000abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <Error_Handler+0x8>
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <HAL_MspInit+0x4c>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	603b      	str	r3, [r7, #0]
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_MspInit+0x4c>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	6413      	str	r3, [r2, #64]	; 0x40
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_MspInit+0x4c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b02:	2007      	movs	r0, #7
 8000b04:	f000 fa32 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40023800 	.word	0x40023800

08000b14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_SPI_MspInit+0x84>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d12b      	bne.n	8000b8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b44:	6453      	str	r3, [r2, #68]	; 0x44
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a10      	ldr	r2, [pc, #64]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <HAL_SPI_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b6e:	23e0      	movs	r3, #224	; 0xe0
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b7e:	2305      	movs	r3, #5
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <HAL_SPI_MspInit+0x8c>)
 8000b8a:	f000 fa23 	bl	8000fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40013000 	.word	0x40013000
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf0:	f000 f8c6 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d207      	bcs.n	8000c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c28:	f002 fa76 	bl	8003118 <__errno>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <_sbrk+0x64>)
 8000c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20020000 	.word	0x20020000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	200000e4 	.word	0x200000e4
 8000c60:	200002e8 	.word	0x200002e8

08000c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <SystemInit+0x20>)
 8000c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <SystemInit+0x20>)
 8000c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c8c:	480d      	ldr	r0, [pc, #52]	; (8000cc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c8e:	490e      	ldr	r1, [pc, #56]	; (8000cc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c90:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c94:	e002      	b.n	8000c9c <LoopCopyDataInit>

08000c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c9a:	3304      	adds	r3, #4

08000c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ca0:	d3f9      	bcc.n	8000c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ca4:	4c0b      	ldr	r4, [pc, #44]	; (8000cd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca8:	e001      	b.n	8000cae <LoopFillZerobss>

08000caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cac:	3204      	adds	r2, #4

08000cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cb0:	d3fb      	bcc.n	8000caa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb2:	f7ff ffd7 	bl	8000c64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f002 fa35 	bl	8003124 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cba:	f7ff fc67 	bl	800058c <main>
  bx  lr    
 8000cbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ccc:	08003c6c 	.word	0x08003c6c
  ldr r2, =_sbss
 8000cd0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cd4:	200002e4 	.word	0x200002e4

08000cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>
	...

08000cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <HAL_Init+0x40>)
 8000ce6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <HAL_Init+0x40>)
 8000cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_Init+0x40>)
 8000cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 f931 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f808 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f7ff fed8 	bl	8000ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023c00 	.word	0x40023c00

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_InitTick+0x54>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_InitTick+0x58>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f93b 	bl	8000fba <HAL_SYSTICK_Config>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00e      	b.n	8000d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d80a      	bhi.n	8000d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f000 f911 	bl	8000f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d60:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <HAL_InitTick+0x5c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e000      	b.n	8000d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000000 	.word	0x20000000
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000004 	.word	0x20000004

08000d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x20>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x24>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_IncTick+0x24>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000008 	.word	0x20000008
 8000da4:	200000e8 	.word	0x200000e8

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_GetTick+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	200000e8 	.word	0x200000e8

08000dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc8:	f7ff ffee 	bl	8000da8 <HAL_GetTick>
 8000dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd8:	d005      	beq.n	8000de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_Delay+0x44>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000de6:	bf00      	nop
 8000de8:	f7ff ffde 	bl	8000da8 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d8f7      	bhi.n	8000de8 <HAL_Delay+0x28>
  {
  }
}
 8000df8:	bf00      	nop
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000008 	.word	0x20000008

08000e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e3a:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	60d3      	str	r3, [r2, #12]
}
 8000e40:	bf00      	nop
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <__NVIC_GetPriorityGrouping+0x18>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	0a1b      	lsrs	r3, r3, #8
 8000e5a:	f003 0307 	and.w	r3, r3, #7
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	; 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f38:	d301      	bcc.n	8000f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00f      	b.n	8000f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <SysTick_Config+0x40>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f46:	210f      	movs	r1, #15
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f7ff ff8e 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <SysTick_Config+0x40>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <SysTick_Config+0x40>)
 8000f58:	2207      	movs	r2, #7
 8000f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff47 	bl	8000e08 <__NVIC_SetPriorityGrouping>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f94:	f7ff ff5c 	bl	8000e50 <__NVIC_GetPriorityGrouping>
 8000f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	6978      	ldr	r0, [r7, #20]
 8000fa0:	f7ff ff8e 	bl	8000ec0 <NVIC_EncodePriority>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff5d 	bl	8000e6c <__NVIC_SetPriority>
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffb0 	bl	8000f28 <SysTick_Config>
 8000fc8:	4603      	mov	r3, r0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
 8000fee:	e159      	b.n	80012a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	697a      	ldr	r2, [r7, #20]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	429a      	cmp	r2, r3
 800100a:	f040 8148 	bne.w	800129e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b01      	cmp	r3, #1
 8001018:	d005      	beq.n	8001026 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001022:	2b02      	cmp	r3, #2
 8001024:	d130      	bne.n	8001088 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	68da      	ldr	r2, [r3, #12]
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4313      	orrs	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	091b      	lsrs	r3, r3, #4
 8001072:	f003 0201 	and.w	r2, r3, #1
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b03      	cmp	r3, #3
 8001092:	d017      	beq.n	80010c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 0303 	and.w	r3, r3, #3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d123      	bne.n	8001118 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	08da      	lsrs	r2, r3, #3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3208      	adds	r2, #8
 80010d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	08da      	lsrs	r2, r3, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3208      	adds	r2, #8
 8001112:	69b9      	ldr	r1, [r7, #24]
 8001114:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	2203      	movs	r2, #3
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0203 	and.w	r2, r3, #3
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80a2 	beq.w	800129e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b57      	ldr	r3, [pc, #348]	; (80012bc <HAL_GPIO_Init+0x2e8>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a56      	ldr	r2, [pc, #344]	; (80012bc <HAL_GPIO_Init+0x2e8>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b54      	ldr	r3, [pc, #336]	; (80012bc <HAL_GPIO_Init+0x2e8>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001176:	4a52      	ldr	r2, [pc, #328]	; (80012c0 <HAL_GPIO_Init+0x2ec>)
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3302      	adds	r3, #2
 800117e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a49      	ldr	r2, [pc, #292]	; (80012c4 <HAL_GPIO_Init+0x2f0>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_GPIO_Init+0x202>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a48      	ldr	r2, [pc, #288]	; (80012c8 <HAL_GPIO_Init+0x2f4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x1fe>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a47      	ldr	r2, [pc, #284]	; (80012cc <HAL_GPIO_Init+0x2f8>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x1fa>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a46      	ldr	r2, [pc, #280]	; (80012d0 <HAL_GPIO_Init+0x2fc>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x1f6>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a45      	ldr	r2, [pc, #276]	; (80012d4 <HAL_GPIO_Init+0x300>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x1f2>
 80011c2:	2304      	movs	r3, #4
 80011c4:	e008      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011c6:	2307      	movs	r3, #7
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011ca:	2303      	movs	r3, #3
 80011cc:	e004      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_GPIO_Init+0x204>
 80011d6:	2300      	movs	r3, #0
 80011d8:	69fa      	ldr	r2, [r7, #28]
 80011da:	f002 0203 	and.w	r2, r2, #3
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4093      	lsls	r3, r2
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e8:	4935      	ldr	r1, [pc, #212]	; (80012c0 <HAL_GPIO_Init+0x2ec>)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f6:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <HAL_GPIO_Init+0x304>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800121a:	4a2f      	ldr	r2, [pc, #188]	; (80012d8 <HAL_GPIO_Init+0x304>)
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001220:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <HAL_GPIO_Init+0x304>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001244:	4a24      	ldr	r2, [pc, #144]	; (80012d8 <HAL_GPIO_Init+0x304>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800124a:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <HAL_GPIO_Init+0x304>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800126e:	4a1a      	ldr	r2, [pc, #104]	; (80012d8 <HAL_GPIO_Init+0x304>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <HAL_GPIO_Init+0x304>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001298:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <HAL_GPIO_Init+0x304>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3301      	adds	r3, #1
 80012a2:	61fb      	str	r3, [r7, #28]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	2b0f      	cmp	r3, #15
 80012a8:	f67f aea2 	bls.w	8000ff0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40013800 	.word	0x40013800
 80012c4:	40020000 	.word	0x40020000
 80012c8:	40020400 	.word	0x40020400
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020c00 	.word	0x40020c00
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40013c00 	.word	0x40013c00

080012dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	807b      	strh	r3, [r7, #2]
 80012e8:	4613      	mov	r3, r2
 80012ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ec:	787b      	ldrb	r3, [r7, #1]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012f2:	887a      	ldrh	r2, [r7, #2]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f8:	e003      	b.n	8001302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	041a      	lsls	r2, r3, #16
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	619a      	str	r2, [r3, #24]
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e267      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	d075      	beq.n	800141a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800132e:	4b88      	ldr	r3, [pc, #544]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b04      	cmp	r3, #4
 8001338:	d00c      	beq.n	8001354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800133a:	4b85      	ldr	r3, [pc, #532]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001342:	2b08      	cmp	r3, #8
 8001344:	d112      	bne.n	800136c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001346:	4b82      	ldr	r3, [pc, #520]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001352:	d10b      	bne.n	800136c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	4b7e      	ldr	r3, [pc, #504]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d05b      	beq.n	8001418 <HAL_RCC_OscConfig+0x108>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d157      	bne.n	8001418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e242      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001374:	d106      	bne.n	8001384 <HAL_RCC_OscConfig+0x74>
 8001376:	4b76      	ldr	r3, [pc, #472]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a75      	ldr	r2, [pc, #468]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 800137c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e01d      	b.n	80013c0 <HAL_RCC_OscConfig+0xb0>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800138c:	d10c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x98>
 800138e:	4b70      	ldr	r3, [pc, #448]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a6f      	ldr	r2, [pc, #444]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4b6d      	ldr	r3, [pc, #436]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a6c      	ldr	r2, [pc, #432]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80013a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e00b      	b.n	80013c0 <HAL_RCC_OscConfig+0xb0>
 80013a8:	4b69      	ldr	r3, [pc, #420]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a68      	ldr	r2, [pc, #416]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80013ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b66      	ldr	r3, [pc, #408]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a65      	ldr	r2, [pc, #404]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80013ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d013      	beq.n	80013f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fcee 	bl	8000da8 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff fcea 	bl	8000da8 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	; 0x64
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e207      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e2:	4b5b      	ldr	r3, [pc, #364]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0xc0>
 80013ee:	e014      	b.n	800141a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fcda 	bl	8000da8 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff fcd6 	bl	8000da8 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	; 0x64
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e1f3      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140a:	4b51      	ldr	r3, [pc, #324]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0xe8>
 8001416:	e000      	b.n	800141a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d063      	beq.n	80014ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001426:	4b4a      	ldr	r3, [pc, #296]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00b      	beq.n	800144a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001432:	4b47      	ldr	r3, [pc, #284]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800143a:	2b08      	cmp	r3, #8
 800143c:	d11c      	bne.n	8001478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800143e:	4b44      	ldr	r3, [pc, #272]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d116      	bne.n	8001478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144a:	4b41      	ldr	r3, [pc, #260]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d005      	beq.n	8001462 <HAL_RCC_OscConfig+0x152>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d001      	beq.n	8001462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e1c7      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001462:	4b3b      	ldr	r3, [pc, #236]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4937      	ldr	r1, [pc, #220]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001476:	e03a      	b.n	80014ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d020      	beq.n	80014c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001480:	4b34      	ldr	r3, [pc, #208]	; (8001554 <HAL_RCC_OscConfig+0x244>)
 8001482:	2201      	movs	r2, #1
 8001484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001486:	f7ff fc8f 	bl	8000da8 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800148e:	f7ff fc8b 	bl	8000da8 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e1a8      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a0:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4925      	ldr	r1, [pc, #148]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]
 80014c0:	e015      	b.n	80014ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c2:	4b24      	ldr	r3, [pc, #144]	; (8001554 <HAL_RCC_OscConfig+0x244>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fc6e 	bl	8000da8 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d0:	f7ff fc6a 	bl	8000da8 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e187      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d036      	beq.n	8001568 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d016      	beq.n	8001530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_RCC_OscConfig+0x248>)
 8001504:	2201      	movs	r2, #1
 8001506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001508:	f7ff fc4e 	bl	8000da8 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001510:	f7ff fc4a 	bl	8000da8 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e167      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001522:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <HAL_RCC_OscConfig+0x240>)
 8001524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x200>
 800152e:	e01b      	b.n	8001568 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_RCC_OscConfig+0x248>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001536:	f7ff fc37 	bl	8000da8 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800153c:	e00e      	b.n	800155c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153e:	f7ff fc33 	bl	8000da8 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d907      	bls.n	800155c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e150      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
 8001550:	40023800 	.word	0x40023800
 8001554:	42470000 	.word	0x42470000
 8001558:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800155c:	4b88      	ldr	r3, [pc, #544]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800155e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1ea      	bne.n	800153e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 8097 	beq.w	80016a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800157a:	4b81      	ldr	r3, [pc, #516]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10f      	bne.n	80015a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	4b7d      	ldr	r3, [pc, #500]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a7c      	ldr	r2, [pc, #496]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b7a      	ldr	r3, [pc, #488]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015a2:	2301      	movs	r3, #1
 80015a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a6:	4b77      	ldr	r3, [pc, #476]	; (8001784 <HAL_RCC_OscConfig+0x474>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d118      	bne.n	80015e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b2:	4b74      	ldr	r3, [pc, #464]	; (8001784 <HAL_RCC_OscConfig+0x474>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a73      	ldr	r2, [pc, #460]	; (8001784 <HAL_RCC_OscConfig+0x474>)
 80015b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015be:	f7ff fbf3 	bl	8000da8 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c6:	f7ff fbef 	bl	8000da8 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e10c      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d8:	4b6a      	ldr	r3, [pc, #424]	; (8001784 <HAL_RCC_OscConfig+0x474>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d106      	bne.n	80015fa <HAL_RCC_OscConfig+0x2ea>
 80015ec:	4b64      	ldr	r3, [pc, #400]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 80015ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f0:	4a63      	ldr	r2, [pc, #396]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 80015f2:	f043 0301 	orr.w	r3, r3, #1
 80015f6:	6713      	str	r3, [r2, #112]	; 0x70
 80015f8:	e01c      	b.n	8001634 <HAL_RCC_OscConfig+0x324>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	2b05      	cmp	r3, #5
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0x30c>
 8001602:	4b5f      	ldr	r3, [pc, #380]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001606:	4a5e      	ldr	r2, [pc, #376]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	6713      	str	r3, [r2, #112]	; 0x70
 800160e:	4b5c      	ldr	r3, [pc, #368]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001612:	4a5b      	ldr	r2, [pc, #364]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6713      	str	r3, [r2, #112]	; 0x70
 800161a:	e00b      	b.n	8001634 <HAL_RCC_OscConfig+0x324>
 800161c:	4b58      	ldr	r3, [pc, #352]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	4a57      	ldr	r2, [pc, #348]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	6713      	str	r3, [r2, #112]	; 0x70
 8001628:	4b55      	ldr	r3, [pc, #340]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800162a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162c:	4a54      	ldr	r2, [pc, #336]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800162e:	f023 0304 	bic.w	r3, r3, #4
 8001632:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d015      	beq.n	8001668 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163c:	f7ff fbb4 	bl	8000da8 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001642:	e00a      	b.n	800165a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001644:	f7ff fbb0 	bl	8000da8 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e0cb      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165a:	4b49      	ldr	r3, [pc, #292]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0ee      	beq.n	8001644 <HAL_RCC_OscConfig+0x334>
 8001666:	e014      	b.n	8001692 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001668:	f7ff fb9e 	bl	8000da8 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800166e:	e00a      	b.n	8001686 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001670:	f7ff fb9a 	bl	8000da8 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e0b5      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001686:	4b3e      	ldr	r3, [pc, #248]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1ee      	bne.n	8001670 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001692:	7dfb      	ldrb	r3, [r7, #23]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d105      	bne.n	80016a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001698:	4b39      	ldr	r3, [pc, #228]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	4a38      	ldr	r2, [pc, #224]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800169e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80a1 	beq.w	80017f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016ae:	4b34      	ldr	r3, [pc, #208]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d05c      	beq.n	8001774 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d141      	bne.n	8001746 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c2:	4b31      	ldr	r3, [pc, #196]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff fb6e 	bl	8000da8 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d0:	f7ff fb6a 	bl	8000da8 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e087      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e2:	4b27      	ldr	r3, [pc, #156]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69da      	ldr	r2, [r3, #28]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	019b      	lsls	r3, r3, #6
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	085b      	lsrs	r3, r3, #1
 8001706:	3b01      	subs	r3, #1
 8001708:	041b      	lsls	r3, r3, #16
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	061b      	lsls	r3, r3, #24
 8001712:	491b      	ldr	r1, [pc, #108]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff fb43 	bl	8000da8 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001726:	f7ff fb3f 	bl	8000da8 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e05c      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x416>
 8001744:	e054      	b.n	80017f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <HAL_RCC_OscConfig+0x478>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff fb2c 	bl	8000da8 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001754:	f7ff fb28 	bl	8000da8 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e045      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_RCC_OscConfig+0x470>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x444>
 8001772:	e03d      	b.n	80017f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d107      	bne.n	800178c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e038      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
 8001780:	40023800 	.word	0x40023800
 8001784:	40007000 	.word	0x40007000
 8001788:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <HAL_RCC_OscConfig+0x4ec>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d028      	beq.n	80017ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d121      	bne.n	80017ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d11a      	bne.n	80017ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017bc:	4013      	ands	r3, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d111      	bne.n	80017ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d2:	085b      	lsrs	r3, r3, #1
 80017d4:	3b01      	subs	r3, #1
 80017d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017d8:	429a      	cmp	r2, r3
 80017da:	d107      	bne.n	80017ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800

08001800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0cc      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001814:	4b68      	ldr	r3, [pc, #416]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d90c      	bls.n	800183c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001822:	4b65      	ldr	r3, [pc, #404]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0b8      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d020      	beq.n	800188a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001854:	4b59      	ldr	r3, [pc, #356]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4a58      	ldr	r2, [pc, #352]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 800185a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800185e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800186c:	4b53      	ldr	r3, [pc, #332]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	4a52      	ldr	r2, [pc, #328]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001878:	4b50      	ldr	r3, [pc, #320]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	494d      	ldr	r1, [pc, #308]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d044      	beq.n	8001920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b47      	ldr	r3, [pc, #284]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d119      	bne.n	80018de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e07f      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d003      	beq.n	80018be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d107      	bne.n	80018ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018be:	4b3f      	ldr	r3, [pc, #252]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d109      	bne.n	80018de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e06f      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ce:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e067      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018de:	4b37      	ldr	r3, [pc, #220]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f023 0203 	bic.w	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4934      	ldr	r1, [pc, #208]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018f0:	f7ff fa5a 	bl	8000da8 <HAL_GetTick>
 80018f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f6:	e00a      	b.n	800190e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f8:	f7ff fa56 	bl	8000da8 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	f241 3288 	movw	r2, #5000	; 0x1388
 8001906:	4293      	cmp	r3, r2
 8001908:	d901      	bls.n	800190e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e04f      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190e:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 020c 	and.w	r2, r3, #12
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	429a      	cmp	r2, r3
 800191e:	d1eb      	bne.n	80018f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001920:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d20c      	bcs.n	8001948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b20      	ldr	r3, [pc, #128]	; (80019b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e032      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d008      	beq.n	8001966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	4916      	ldr	r1, [pc, #88]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d009      	beq.n	8001986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001972:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	490e      	ldr	r1, [pc, #56]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001986:	f000 f821 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 800198a:	4602      	mov	r2, r0
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	490a      	ldr	r1, [pc, #40]	; (80019c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	5ccb      	ldrb	r3, [r1, r3]
 800199a:	fa22 f303 	lsr.w	r3, r2, r3
 800199e:	4a09      	ldr	r2, [pc, #36]	; (80019c4 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_RCC_ClockConfig+0x1c8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff f9ba 	bl	8000d20 <HAL_InitTick>

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023c00 	.word	0x40023c00
 80019bc:	40023800 	.word	0x40023800
 80019c0:	08003bfc 	.word	0x08003bfc
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019d0:	b094      	sub	sp, #80	; 0x50
 80019d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	647b      	str	r3, [r7, #68]	; 0x44
 80019d8:	2300      	movs	r3, #0
 80019da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019dc:	2300      	movs	r3, #0
 80019de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019e4:	4b79      	ldr	r3, [pc, #484]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x200>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d00d      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0x40>
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	f200 80e1 	bhi.w	8001bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <HAL_RCC_GetSysClockFreq+0x34>
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d003      	beq.n	8001a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80019fe:	e0db      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a00:	4b73      	ldr	r3, [pc, #460]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a02:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a04:	e0db      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a06:	4b73      	ldr	r3, [pc, #460]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a0a:	e0d8      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a0c:	4b6f      	ldr	r3, [pc, #444]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a14:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a16:	4b6d      	ldr	r3, [pc, #436]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d063      	beq.n	8001aea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a22:	4b6a      	ldr	r3, [pc, #424]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	099b      	lsrs	r3, r3, #6
 8001a28:	2200      	movs	r2, #0
 8001a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
 8001a36:	2300      	movs	r3, #0
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
 8001a3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a3e:	4622      	mov	r2, r4
 8001a40:	462b      	mov	r3, r5
 8001a42:	f04f 0000 	mov.w	r0, #0
 8001a46:	f04f 0100 	mov.w	r1, #0
 8001a4a:	0159      	lsls	r1, r3, #5
 8001a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a50:	0150      	lsls	r0, r2, #5
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4621      	mov	r1, r4
 8001a58:	1a51      	subs	r1, r2, r1
 8001a5a:	6139      	str	r1, [r7, #16]
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a70:	4659      	mov	r1, fp
 8001a72:	018b      	lsls	r3, r1, #6
 8001a74:	4651      	mov	r1, sl
 8001a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a7a:	4651      	mov	r1, sl
 8001a7c:	018a      	lsls	r2, r1, #6
 8001a7e:	4651      	mov	r1, sl
 8001a80:	ebb2 0801 	subs.w	r8, r2, r1
 8001a84:	4659      	mov	r1, fp
 8001a86:	eb63 0901 	sbc.w	r9, r3, r1
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a9e:	4690      	mov	r8, r2
 8001aa0:	4699      	mov	r9, r3
 8001aa2:	4623      	mov	r3, r4
 8001aa4:	eb18 0303 	adds.w	r3, r8, r3
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	462b      	mov	r3, r5
 8001aac:	eb49 0303 	adc.w	r3, r9, r3
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001abe:	4629      	mov	r1, r5
 8001ac0:	024b      	lsls	r3, r1, #9
 8001ac2:	4621      	mov	r1, r4
 8001ac4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ac8:	4621      	mov	r1, r4
 8001aca:	024a      	lsls	r2, r1, #9
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ad8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001adc:	f7fe fbd8 	bl	8000290 <__aeabi_uldivmod>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ae8:	e058      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aea:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	099b      	lsrs	r3, r3, #6
 8001af0:	2200      	movs	r2, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	4611      	mov	r1, r2
 8001af6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001afa:	623b      	str	r3, [r7, #32]
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
 8001b00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b04:	4642      	mov	r2, r8
 8001b06:	464b      	mov	r3, r9
 8001b08:	f04f 0000 	mov.w	r0, #0
 8001b0c:	f04f 0100 	mov.w	r1, #0
 8001b10:	0159      	lsls	r1, r3, #5
 8001b12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b16:	0150      	lsls	r0, r2, #5
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4641      	mov	r1, r8
 8001b1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b22:	4649      	mov	r1, r9
 8001b24:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b3c:	ebb2 040a 	subs.w	r4, r2, sl
 8001b40:	eb63 050b 	sbc.w	r5, r3, fp
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	00eb      	lsls	r3, r5, #3
 8001b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b52:	00e2      	lsls	r2, r4, #3
 8001b54:	4614      	mov	r4, r2
 8001b56:	461d      	mov	r5, r3
 8001b58:	4643      	mov	r3, r8
 8001b5a:	18e3      	adds	r3, r4, r3
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	464b      	mov	r3, r9
 8001b60:	eb45 0303 	adc.w	r3, r5, r3
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b72:	4629      	mov	r1, r5
 8001b74:	028b      	lsls	r3, r1, #10
 8001b76:	4621      	mov	r1, r4
 8001b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	028a      	lsls	r2, r1, #10
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b86:	2200      	movs	r2, #0
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	61fa      	str	r2, [r7, #28]
 8001b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b90:	f7fe fb7e 	bl	8000290 <__aeabi_uldivmod>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4613      	mov	r3, r2
 8001b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	0c1b      	lsrs	r3, r3, #16
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bb6:	e002      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3750      	adds	r7, #80	; 0x50
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	00f42400 	.word	0x00f42400
 8001bd4:	007a1200 	.word	0x007a1200

08001bd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e07b      	b.n	8001ce2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d108      	bne.n	8001c04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bfa:	d009      	beq.n	8001c10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61da      	str	r2, [r3, #28]
 8001c02:	e005      	b.n	8001c10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d106      	bne.n	8001c30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe ff72 	bl	8000b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c94:	ea42 0103 	orr.w	r1, r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	0c1b      	lsrs	r3, r3, #16
 8001cae:	f003 0104 	and.w	r1, r3, #4
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	f003 0210 	and.w	r2, r3, #16
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	69da      	ldr	r2, [r3, #28]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b088      	sub	sp, #32
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_SPI_Transmit+0x22>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e126      	b.n	8001f5a <HAL_SPI_Transmit+0x270>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d14:	f7ff f848 	bl	8000da8 <HAL_GetTick>
 8001d18:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d002      	beq.n	8001d30 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d2e:	e10b      	b.n	8001f48 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <HAL_SPI_Transmit+0x52>
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d102      	bne.n	8001d42 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001d40:	e102      	b.n	8001f48 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2203      	movs	r2, #3
 8001d46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	88fa      	ldrh	r2, [r7, #6]
 8001d5a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	88fa      	ldrh	r2, [r7, #6]
 8001d60:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d88:	d10f      	bne.n	8001daa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001da8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db4:	2b40      	cmp	r3, #64	; 0x40
 8001db6:	d007      	beq.n	8001dc8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dd0:	d14b      	bne.n	8001e6a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <HAL_SPI_Transmit+0xf6>
 8001dda:	8afb      	ldrh	r3, [r7, #22]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d13e      	bne.n	8001e5e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	881a      	ldrh	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	1c9a      	adds	r2, r3, #2
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e04:	e02b      	b.n	8001e5e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d112      	bne.n	8001e3a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	881a      	ldrh	r2, [r3, #0]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	1c9a      	adds	r2, r3, #2
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	3b01      	subs	r3, #1
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e38:	e011      	b.n	8001e5e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e3a:	f7fe ffb5 	bl	8000da8 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d803      	bhi.n	8001e52 <HAL_SPI_Transmit+0x168>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e50:	d102      	bne.n	8001e58 <HAL_SPI_Transmit+0x16e>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d102      	bne.n	8001e5e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e5c:	e074      	b.n	8001f48 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1ce      	bne.n	8001e06 <HAL_SPI_Transmit+0x11c>
 8001e68:	e04c      	b.n	8001f04 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <HAL_SPI_Transmit+0x18e>
 8001e72:	8afb      	ldrh	r3, [r7, #22]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d140      	bne.n	8001efa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	330c      	adds	r3, #12
 8001e82:	7812      	ldrb	r2, [r2, #0]
 8001e84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	3b01      	subs	r3, #1
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e9e:	e02c      	b.n	8001efa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d113      	bne.n	8001ed6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	330c      	adds	r3, #12
 8001eb8:	7812      	ldrb	r2, [r2, #0]
 8001eba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ed4:	e011      	b.n	8001efa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ed6:	f7fe ff67 	bl	8000da8 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d803      	bhi.n	8001eee <HAL_SPI_Transmit+0x204>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	d102      	bne.n	8001ef4 <HAL_SPI_Transmit+0x20a>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001ef8:	e026      	b.n	8001f48 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1cd      	bne.n	8001ea0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	6839      	ldr	r1, [r7, #0]
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 fbcb 	bl	80026a4 <SPI_EndRxTxTransaction>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d002      	beq.n	8001f1a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2220      	movs	r2, #32
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10a      	bne.n	8001f38 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d002      	beq.n	8001f46 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	77fb      	strb	r3, [r7, #31]
 8001f44:	e000      	b.n	8001f48 <HAL_SPI_Transmit+0x25e>
  }

error:
 8001f46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f58:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3720      	adds	r7, #32
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b088      	sub	sp, #32
 8001f66:	af02      	add	r7, sp, #8
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f72:	2300      	movs	r3, #0
 8001f74:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f7e:	d112      	bne.n	8001fa6 <HAL_SPI_Receive+0x44>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10e      	bne.n	8001fa6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f90:	88fa      	ldrh	r2, [r7, #6]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	4613      	mov	r3, r2
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	68b9      	ldr	r1, [r7, #8]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f8f1 	bl	8002184 <HAL_SPI_TransmitReceive>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	e0ea      	b.n	800217c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_SPI_Receive+0x52>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e0e3      	b.n	800217c <HAL_SPI_Receive+0x21a>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fbc:	f7fe fef4 	bl	8000da8 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d002      	beq.n	8001fd4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001fd2:	e0ca      	b.n	800216a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <HAL_SPI_Receive+0x7e>
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d102      	bne.n	8001fe6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001fe4:	e0c1      	b.n	800216a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2204      	movs	r2, #4
 8001fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	88fa      	ldrh	r2, [r7, #6]
 8001ffe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	88fa      	ldrh	r2, [r7, #6]
 8002004:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2200      	movs	r2, #0
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800202c:	d10f      	bne.n	800204e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800203c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800204c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002058:	2b40      	cmp	r3, #64	; 0x40
 800205a:	d007      	beq.n	800206c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800206a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d162      	bne.n	800213a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002074:	e02e      	b.n	80020d4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b01      	cmp	r3, #1
 8002082:	d115      	bne.n	80020b0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f103 020c 	add.w	r2, r3, #12
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002090:	7812      	ldrb	r2, [r2, #0]
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	3b01      	subs	r3, #1
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020ae:	e011      	b.n	80020d4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020b0:	f7fe fe7a 	bl	8000da8 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d803      	bhi.n	80020c8 <HAL_SPI_Receive+0x166>
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c6:	d102      	bne.n	80020ce <HAL_SPI_Receive+0x16c>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d102      	bne.n	80020d4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80020d2:	e04a      	b.n	800216a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1cb      	bne.n	8002076 <HAL_SPI_Receive+0x114>
 80020de:	e031      	b.n	8002144 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d113      	bne.n	8002116 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f8:	b292      	uxth	r2, r2
 80020fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002100:	1c9a      	adds	r2, r3, #2
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002114:	e011      	b.n	800213a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002116:	f7fe fe47 	bl	8000da8 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d803      	bhi.n	800212e <HAL_SPI_Receive+0x1cc>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212c:	d102      	bne.n	8002134 <HAL_SPI_Receive+0x1d2>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d102      	bne.n	800213a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002138:	e017      	b.n	800216a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800213e:	b29b      	uxth	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1cd      	bne.n	80020e0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	6839      	ldr	r1, [r7, #0]
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 fa45 	bl	80025d8 <SPI_EndRxTransaction>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2220      	movs	r2, #32
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	75fb      	strb	r3, [r7, #23]
 8002166:	e000      	b.n	800216a <HAL_SPI_Receive+0x208>
  }

error :
 8002168:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800217a:	7dfb      	ldrb	r3, [r7, #23]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08c      	sub	sp, #48	; 0x30
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002192:	2301      	movs	r3, #1
 8002194:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_SPI_TransmitReceive+0x26>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e18a      	b.n	80024c0 <HAL_SPI_TransmitReceive+0x33c>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021b2:	f7fe fdf9 	bl	8000da8 <HAL_GetTick>
 80021b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80021be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80021c8:	887b      	ldrh	r3, [r7, #2]
 80021ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d00f      	beq.n	80021f4 <HAL_SPI_TransmitReceive+0x70>
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021da:	d107      	bne.n	80021ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d103      	bne.n	80021ec <HAL_SPI_TransmitReceive+0x68>
 80021e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d003      	beq.n	80021f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80021ec:	2302      	movs	r3, #2
 80021ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80021f2:	e15b      	b.n	80024ac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d005      	beq.n	8002206 <HAL_SPI_TransmitReceive+0x82>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <HAL_SPI_TransmitReceive+0x82>
 8002200:	887b      	ldrh	r3, [r7, #2]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d103      	bne.n	800220e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800220c:	e14e      	b.n	80024ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b04      	cmp	r3, #4
 8002218:	d003      	beq.n	8002222 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2205      	movs	r2, #5
 800221e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	887a      	ldrh	r2, [r7, #2]
 8002232:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	887a      	ldrh	r2, [r7, #2]
 8002238:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	887a      	ldrh	r2, [r7, #2]
 8002244:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	887a      	ldrh	r2, [r7, #2]
 800224a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002262:	2b40      	cmp	r3, #64	; 0x40
 8002264:	d007      	beq.n	8002276 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002274:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800227e:	d178      	bne.n	8002372 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <HAL_SPI_TransmitReceive+0x10a>
 8002288:	8b7b      	ldrh	r3, [r7, #26]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d166      	bne.n	800235c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	881a      	ldrh	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	1c9a      	adds	r2, r3, #2
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022b2:	e053      	b.n	800235c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d11b      	bne.n	80022fa <HAL_SPI_TransmitReceive+0x176>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d016      	beq.n	80022fa <HAL_SPI_TransmitReceive+0x176>
 80022cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d113      	bne.n	80022fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	881a      	ldrh	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	1c9a      	adds	r2, r3, #2
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	3b01      	subs	r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d119      	bne.n	800233c <HAL_SPI_TransmitReceive+0x1b8>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d014      	beq.n	800233c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68da      	ldr	r2, [r3, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231c:	b292      	uxth	r2, r2
 800231e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002324:	1c9a      	adds	r2, r3, #2
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002338:	2301      	movs	r3, #1
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800233c:	f7fe fd34 	bl	8000da8 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002348:	429a      	cmp	r2, r3
 800234a:	d807      	bhi.n	800235c <HAL_SPI_TransmitReceive+0x1d8>
 800234c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002352:	d003      	beq.n	800235c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800235a:	e0a7      	b.n	80024ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002360:	b29b      	uxth	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1a6      	bne.n	80022b4 <HAL_SPI_TransmitReceive+0x130>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800236a:	b29b      	uxth	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1a1      	bne.n	80022b4 <HAL_SPI_TransmitReceive+0x130>
 8002370:	e07c      	b.n	800246c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <HAL_SPI_TransmitReceive+0x1fc>
 800237a:	8b7b      	ldrh	r3, [r7, #26]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d16b      	bne.n	8002458 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	330c      	adds	r3, #12
 800238a:	7812      	ldrb	r2, [r2, #0]
 800238c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800239c:	b29b      	uxth	r3, r3
 800239e:	3b01      	subs	r3, #1
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023a6:	e057      	b.n	8002458 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d11c      	bne.n	80023f0 <HAL_SPI_TransmitReceive+0x26c>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d017      	beq.n	80023f0 <HAL_SPI_TransmitReceive+0x26c>
 80023c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d114      	bne.n	80023f0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	330c      	adds	r3, #12
 80023d0:	7812      	ldrb	r2, [r2, #0]
 80023d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d119      	bne.n	8002432 <HAL_SPI_TransmitReceive+0x2ae>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002402:	b29b      	uxth	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d014      	beq.n	8002432 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	68da      	ldr	r2, [r3, #12]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002424:	b29b      	uxth	r3, r3
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800242e:	2301      	movs	r3, #1
 8002430:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002432:	f7fe fcb9 	bl	8000da8 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800243e:	429a      	cmp	r2, r3
 8002440:	d803      	bhi.n	800244a <HAL_SPI_TransmitReceive+0x2c6>
 8002442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002448:	d102      	bne.n	8002450 <HAL_SPI_TransmitReceive+0x2cc>
 800244a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244c:	2b00      	cmp	r3, #0
 800244e:	d103      	bne.n	8002458 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002456:	e029      	b.n	80024ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1a2      	bne.n	80023a8 <HAL_SPI_TransmitReceive+0x224>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002466:	b29b      	uxth	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d19d      	bne.n	80023a8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800246c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 f917 	bl	80026a4 <SPI_EndRxTxTransaction>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d006      	beq.n	800248a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2220      	movs	r2, #32
 8002486:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002488:	e010      	b.n	80024ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10b      	bne.n	80024aa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	e000      	b.n	80024ac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80024aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80024bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3730      	adds	r7, #48	; 0x30
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024d8:	f7fe fc66 	bl	8000da8 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	4413      	add	r3, r2
 80024e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024e8:	f7fe fc5e 	bl	8000da8 <HAL_GetTick>
 80024ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024ee:	4b39      	ldr	r3, [pc, #228]	; (80025d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	015b      	lsls	r3, r3, #5
 80024f4:	0d1b      	lsrs	r3, r3, #20
 80024f6:	69fa      	ldr	r2, [r7, #28]
 80024f8:	fb02 f303 	mul.w	r3, r2, r3
 80024fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024fe:	e054      	b.n	80025aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002506:	d050      	beq.n	80025aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002508:	f7fe fc4e 	bl	8000da8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	429a      	cmp	r2, r3
 8002516:	d902      	bls.n	800251e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d13d      	bne.n	800259a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800252c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002536:	d111      	bne.n	800255c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002540:	d004      	beq.n	800254c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800254a:	d107      	bne.n	800255c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800255a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002564:	d10f      	bne.n	8002586 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002584:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e017      	b.n	80025ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4013      	ands	r3, r2
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	bf0c      	ite	eq
 80025ba:	2301      	moveq	r3, #1
 80025bc:	2300      	movne	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d19b      	bne.n	8002500 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3720      	adds	r7, #32
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000000 	.word	0x20000000

080025d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af02      	add	r7, sp, #8
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025ec:	d111      	bne.n	8002612 <SPI_EndRxTransaction+0x3a>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025f6:	d004      	beq.n	8002602 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002600:	d107      	bne.n	8002612 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002610:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800261a:	d12a      	bne.n	8002672 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002624:	d012      	beq.n	800264c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2200      	movs	r2, #0
 800262e:	2180      	movs	r1, #128	; 0x80
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f7ff ff49 	bl	80024c8 <SPI_WaitFlagStateUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d02d      	beq.n	8002698 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002640:	f043 0220 	orr.w	r2, r3, #32
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e026      	b.n	800269a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2200      	movs	r2, #0
 8002654:	2101      	movs	r1, #1
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f7ff ff36 	bl	80024c8 <SPI_WaitFlagStateUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d01a      	beq.n	8002698 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002666:	f043 0220 	orr.w	r2, r3, #32
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e013      	b.n	800269a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2200      	movs	r2, #0
 800267a:	2101      	movs	r1, #1
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f7ff ff23 	bl	80024c8 <SPI_WaitFlagStateUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d007      	beq.n	8002698 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268c:	f043 0220 	orr.w	r2, r3, #32
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e000      	b.n	800269a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80026b0:	4b1b      	ldr	r3, [pc, #108]	; (8002720 <SPI_EndRxTxTransaction+0x7c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1b      	ldr	r2, [pc, #108]	; (8002724 <SPI_EndRxTxTransaction+0x80>)
 80026b6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ba:	0d5b      	lsrs	r3, r3, #21
 80026bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026c0:	fb02 f303 	mul.w	r3, r2, r3
 80026c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ce:	d112      	bne.n	80026f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2200      	movs	r2, #0
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f7ff fef4 	bl	80024c8 <SPI_WaitFlagStateUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d016      	beq.n	8002714 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ea:	f043 0220 	orr.w	r2, r3, #32
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e00f      	b.n	8002716 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00a      	beq.n	8002712 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	3b01      	subs	r3, #1
 8002700:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270c:	2b80      	cmp	r3, #128	; 0x80
 800270e:	d0f2      	beq.n	80026f6 <SPI_EndRxTxTransaction+0x52>
 8002710:	e000      	b.n	8002714 <SPI_EndRxTxTransaction+0x70>
        break;
 8002712:	bf00      	nop
  }

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000000 	.word	0x20000000
 8002724:	165e9f81 	.word	0x165e9f81

08002728 <findslot>:
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <findslot+0x2c>)
 800272a:	b510      	push	{r4, lr}
 800272c:	4604      	mov	r4, r0
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	b118      	cbz	r0, 800273a <findslot+0x12>
 8002732:	6a03      	ldr	r3, [r0, #32]
 8002734:	b90b      	cbnz	r3, 800273a <findslot+0x12>
 8002736:	f000 fb25 	bl	8002d84 <__sinit>
 800273a:	2c13      	cmp	r4, #19
 800273c:	d807      	bhi.n	800274e <findslot+0x26>
 800273e:	4806      	ldr	r0, [pc, #24]	; (8002758 <findslot+0x30>)
 8002740:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002744:	3201      	adds	r2, #1
 8002746:	d002      	beq.n	800274e <findslot+0x26>
 8002748:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800274c:	bd10      	pop	{r4, pc}
 800274e:	2000      	movs	r0, #0
 8002750:	e7fc      	b.n	800274c <findslot+0x24>
 8002752:	bf00      	nop
 8002754:	2000006c 	.word	0x2000006c
 8002758:	200000f8 	.word	0x200000f8

0800275c <error>:
 800275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275e:	4604      	mov	r4, r0
 8002760:	f000 fcda 	bl	8003118 <__errno>
 8002764:	2613      	movs	r6, #19
 8002766:	4605      	mov	r5, r0
 8002768:	2700      	movs	r7, #0
 800276a:	4630      	mov	r0, r6
 800276c:	4639      	mov	r1, r7
 800276e:	beab      	bkpt	0x00ab
 8002770:	4606      	mov	r6, r0
 8002772:	602e      	str	r6, [r5, #0]
 8002774:	4620      	mov	r0, r4
 8002776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002778 <checkerror>:
 8002778:	1c43      	adds	r3, r0, #1
 800277a:	d101      	bne.n	8002780 <checkerror+0x8>
 800277c:	f7ff bfee 	b.w	800275c <error>
 8002780:	4770      	bx	lr

08002782 <_swiread>:
 8002782:	b530      	push	{r4, r5, lr}
 8002784:	b085      	sub	sp, #20
 8002786:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800278a:	9203      	str	r2, [sp, #12]
 800278c:	2406      	movs	r4, #6
 800278e:	ad01      	add	r5, sp, #4
 8002790:	4620      	mov	r0, r4
 8002792:	4629      	mov	r1, r5
 8002794:	beab      	bkpt	0x00ab
 8002796:	4604      	mov	r4, r0
 8002798:	4620      	mov	r0, r4
 800279a:	f7ff ffed 	bl	8002778 <checkerror>
 800279e:	b005      	add	sp, #20
 80027a0:	bd30      	pop	{r4, r5, pc}

080027a2 <_read>:
 80027a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80027a4:	4615      	mov	r5, r2
 80027a6:	9101      	str	r1, [sp, #4]
 80027a8:	f7ff ffbe 	bl	8002728 <findslot>
 80027ac:	9901      	ldr	r1, [sp, #4]
 80027ae:	4604      	mov	r4, r0
 80027b0:	b938      	cbnz	r0, 80027c2 <_read+0x20>
 80027b2:	f000 fcb1 	bl	8003118 <__errno>
 80027b6:	2309      	movs	r3, #9
 80027b8:	6003      	str	r3, [r0, #0]
 80027ba:	f04f 30ff 	mov.w	r0, #4294967295
 80027be:	b003      	add	sp, #12
 80027c0:	bd30      	pop	{r4, r5, pc}
 80027c2:	6800      	ldr	r0, [r0, #0]
 80027c4:	462a      	mov	r2, r5
 80027c6:	f7ff ffdc 	bl	8002782 <_swiread>
 80027ca:	1c43      	adds	r3, r0, #1
 80027cc:	d0f7      	beq.n	80027be <_read+0x1c>
 80027ce:	6863      	ldr	r3, [r4, #4]
 80027d0:	1a2a      	subs	r2, r5, r0
 80027d2:	4413      	add	r3, r2
 80027d4:	6063      	str	r3, [r4, #4]
 80027d6:	4610      	mov	r0, r2
 80027d8:	e7f1      	b.n	80027be <_read+0x1c>

080027da <_swilseek>:
 80027da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027dc:	460c      	mov	r4, r1
 80027de:	4616      	mov	r6, r2
 80027e0:	f7ff ffa2 	bl	8002728 <findslot>
 80027e4:	4605      	mov	r5, r0
 80027e6:	b940      	cbnz	r0, 80027fa <_swilseek+0x20>
 80027e8:	f000 fc96 	bl	8003118 <__errno>
 80027ec:	2309      	movs	r3, #9
 80027ee:	6003      	str	r3, [r0, #0]
 80027f0:	f04f 34ff 	mov.w	r4, #4294967295
 80027f4:	4620      	mov	r0, r4
 80027f6:	b003      	add	sp, #12
 80027f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027fa:	2e02      	cmp	r6, #2
 80027fc:	d903      	bls.n	8002806 <_swilseek+0x2c>
 80027fe:	f000 fc8b 	bl	8003118 <__errno>
 8002802:	2316      	movs	r3, #22
 8002804:	e7f3      	b.n	80027ee <_swilseek+0x14>
 8002806:	2e01      	cmp	r6, #1
 8002808:	d112      	bne.n	8002830 <_swilseek+0x56>
 800280a:	6843      	ldr	r3, [r0, #4]
 800280c:	18e4      	adds	r4, r4, r3
 800280e:	d4f6      	bmi.n	80027fe <_swilseek+0x24>
 8002810:	682b      	ldr	r3, [r5, #0]
 8002812:	260a      	movs	r6, #10
 8002814:	e9cd 3400 	strd	r3, r4, [sp]
 8002818:	466f      	mov	r7, sp
 800281a:	4630      	mov	r0, r6
 800281c:	4639      	mov	r1, r7
 800281e:	beab      	bkpt	0x00ab
 8002820:	4606      	mov	r6, r0
 8002822:	4630      	mov	r0, r6
 8002824:	f7ff ffa8 	bl	8002778 <checkerror>
 8002828:	2800      	cmp	r0, #0
 800282a:	dbe1      	blt.n	80027f0 <_swilseek+0x16>
 800282c:	606c      	str	r4, [r5, #4]
 800282e:	e7e1      	b.n	80027f4 <_swilseek+0x1a>
 8002830:	2e02      	cmp	r6, #2
 8002832:	6803      	ldr	r3, [r0, #0]
 8002834:	d1ec      	bne.n	8002810 <_swilseek+0x36>
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	260c      	movs	r6, #12
 800283a:	466f      	mov	r7, sp
 800283c:	4630      	mov	r0, r6
 800283e:	4639      	mov	r1, r7
 8002840:	beab      	bkpt	0x00ab
 8002842:	4606      	mov	r6, r0
 8002844:	4630      	mov	r0, r6
 8002846:	f7ff ff97 	bl	8002778 <checkerror>
 800284a:	1c43      	adds	r3, r0, #1
 800284c:	d0d0      	beq.n	80027f0 <_swilseek+0x16>
 800284e:	4404      	add	r4, r0
 8002850:	e7de      	b.n	8002810 <_swilseek+0x36>

08002852 <_lseek>:
 8002852:	f7ff bfc2 	b.w	80027da <_swilseek>

08002856 <_swiwrite>:
 8002856:	b530      	push	{r4, r5, lr}
 8002858:	b085      	sub	sp, #20
 800285a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800285e:	9203      	str	r2, [sp, #12]
 8002860:	2405      	movs	r4, #5
 8002862:	ad01      	add	r5, sp, #4
 8002864:	4620      	mov	r0, r4
 8002866:	4629      	mov	r1, r5
 8002868:	beab      	bkpt	0x00ab
 800286a:	4604      	mov	r4, r0
 800286c:	4620      	mov	r0, r4
 800286e:	f7ff ff83 	bl	8002778 <checkerror>
 8002872:	b005      	add	sp, #20
 8002874:	bd30      	pop	{r4, r5, pc}

08002876 <_write>:
 8002876:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002878:	4615      	mov	r5, r2
 800287a:	9101      	str	r1, [sp, #4]
 800287c:	f7ff ff54 	bl	8002728 <findslot>
 8002880:	9901      	ldr	r1, [sp, #4]
 8002882:	4604      	mov	r4, r0
 8002884:	b930      	cbnz	r0, 8002894 <_write+0x1e>
 8002886:	f000 fc47 	bl	8003118 <__errno>
 800288a:	2309      	movs	r3, #9
 800288c:	6003      	str	r3, [r0, #0]
 800288e:	f04f 30ff 	mov.w	r0, #4294967295
 8002892:	e012      	b.n	80028ba <_write+0x44>
 8002894:	6800      	ldr	r0, [r0, #0]
 8002896:	462a      	mov	r2, r5
 8002898:	f7ff ffdd 	bl	8002856 <_swiwrite>
 800289c:	2800      	cmp	r0, #0
 800289e:	dbf6      	blt.n	800288e <_write+0x18>
 80028a0:	6862      	ldr	r2, [r4, #4]
 80028a2:	1a2b      	subs	r3, r5, r0
 80028a4:	441a      	add	r2, r3
 80028a6:	42a8      	cmp	r0, r5
 80028a8:	6062      	str	r2, [r4, #4]
 80028aa:	d105      	bne.n	80028b8 <_write+0x42>
 80028ac:	2000      	movs	r0, #0
 80028ae:	b003      	add	sp, #12
 80028b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80028b4:	f7ff bf52 	b.w	800275c <error>
 80028b8:	4618      	mov	r0, r3
 80028ba:	b003      	add	sp, #12
 80028bc:	bd30      	pop	{r4, r5, pc}

080028be <_swiclose>:
 80028be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80028c0:	2402      	movs	r4, #2
 80028c2:	9001      	str	r0, [sp, #4]
 80028c4:	ad01      	add	r5, sp, #4
 80028c6:	4620      	mov	r0, r4
 80028c8:	4629      	mov	r1, r5
 80028ca:	beab      	bkpt	0x00ab
 80028cc:	4604      	mov	r4, r0
 80028ce:	4620      	mov	r0, r4
 80028d0:	f7ff ff52 	bl	8002778 <checkerror>
 80028d4:	b003      	add	sp, #12
 80028d6:	bd30      	pop	{r4, r5, pc}

080028d8 <_close>:
 80028d8:	b538      	push	{r3, r4, r5, lr}
 80028da:	4605      	mov	r5, r0
 80028dc:	f7ff ff24 	bl	8002728 <findslot>
 80028e0:	4604      	mov	r4, r0
 80028e2:	b930      	cbnz	r0, 80028f2 <_close+0x1a>
 80028e4:	f000 fc18 	bl	8003118 <__errno>
 80028e8:	2309      	movs	r3, #9
 80028ea:	6003      	str	r3, [r0, #0]
 80028ec:	f04f 30ff 	mov.w	r0, #4294967295
 80028f0:	bd38      	pop	{r3, r4, r5, pc}
 80028f2:	3d01      	subs	r5, #1
 80028f4:	2d01      	cmp	r5, #1
 80028f6:	d809      	bhi.n	800290c <_close+0x34>
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <_close+0x48>)
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d104      	bne.n	800290c <_close+0x34>
 8002902:	f04f 33ff 	mov.w	r3, #4294967295
 8002906:	6003      	str	r3, [r0, #0]
 8002908:	2000      	movs	r0, #0
 800290a:	e7f1      	b.n	80028f0 <_close+0x18>
 800290c:	6820      	ldr	r0, [r4, #0]
 800290e:	f7ff ffd6 	bl	80028be <_swiclose>
 8002912:	2800      	cmp	r0, #0
 8002914:	d1ec      	bne.n	80028f0 <_close+0x18>
 8002916:	f04f 33ff 	mov.w	r3, #4294967295
 800291a:	6023      	str	r3, [r4, #0]
 800291c:	e7e8      	b.n	80028f0 <_close+0x18>
 800291e:	bf00      	nop
 8002920:	200000f8 	.word	0x200000f8

08002924 <_swistat>:
 8002924:	b570      	push	{r4, r5, r6, lr}
 8002926:	460c      	mov	r4, r1
 8002928:	f7ff fefe 	bl	8002728 <findslot>
 800292c:	4605      	mov	r5, r0
 800292e:	b930      	cbnz	r0, 800293e <_swistat+0x1a>
 8002930:	f000 fbf2 	bl	8003118 <__errno>
 8002934:	2309      	movs	r3, #9
 8002936:	6003      	str	r3, [r0, #0]
 8002938:	f04f 30ff 	mov.w	r0, #4294967295
 800293c:	bd70      	pop	{r4, r5, r6, pc}
 800293e:	6863      	ldr	r3, [r4, #4]
 8002940:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002944:	6063      	str	r3, [r4, #4]
 8002946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800294a:	64a3      	str	r3, [r4, #72]	; 0x48
 800294c:	260c      	movs	r6, #12
 800294e:	4630      	mov	r0, r6
 8002950:	4629      	mov	r1, r5
 8002952:	beab      	bkpt	0x00ab
 8002954:	4605      	mov	r5, r0
 8002956:	4628      	mov	r0, r5
 8002958:	f7ff ff0e 	bl	8002778 <checkerror>
 800295c:	1c43      	adds	r3, r0, #1
 800295e:	bf1c      	itt	ne
 8002960:	6120      	strne	r0, [r4, #16]
 8002962:	2000      	movne	r0, #0
 8002964:	e7ea      	b.n	800293c <_swistat+0x18>

08002966 <_fstat>:
 8002966:	460b      	mov	r3, r1
 8002968:	b510      	push	{r4, lr}
 800296a:	2100      	movs	r1, #0
 800296c:	4604      	mov	r4, r0
 800296e:	2258      	movs	r2, #88	; 0x58
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fb83 	bl	800307c <memset>
 8002976:	4601      	mov	r1, r0
 8002978:	4620      	mov	r0, r4
 800297a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800297e:	f7ff bfd1 	b.w	8002924 <_swistat>

08002982 <_stat>:
 8002982:	b538      	push	{r3, r4, r5, lr}
 8002984:	460d      	mov	r5, r1
 8002986:	4604      	mov	r4, r0
 8002988:	2258      	movs	r2, #88	; 0x58
 800298a:	2100      	movs	r1, #0
 800298c:	4628      	mov	r0, r5
 800298e:	f000 fb75 	bl	800307c <memset>
 8002992:	4620      	mov	r0, r4
 8002994:	2100      	movs	r1, #0
 8002996:	f000 f811 	bl	80029bc <_swiopen>
 800299a:	1c43      	adds	r3, r0, #1
 800299c:	4604      	mov	r4, r0
 800299e:	d00b      	beq.n	80029b8 <_stat+0x36>
 80029a0:	686b      	ldr	r3, [r5, #4]
 80029a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80029a6:	606b      	str	r3, [r5, #4]
 80029a8:	4629      	mov	r1, r5
 80029aa:	f7ff ffbb 	bl	8002924 <_swistat>
 80029ae:	4605      	mov	r5, r0
 80029b0:	4620      	mov	r0, r4
 80029b2:	f7ff ff91 	bl	80028d8 <_close>
 80029b6:	462c      	mov	r4, r5
 80029b8:	4620      	mov	r0, r4
 80029ba:	bd38      	pop	{r3, r4, r5, pc}

080029bc <_swiopen>:
 80029bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029c0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002a6c <_swiopen+0xb0>
 80029c4:	b097      	sub	sp, #92	; 0x5c
 80029c6:	4607      	mov	r7, r0
 80029c8:	460e      	mov	r6, r1
 80029ca:	2500      	movs	r5, #0
 80029cc:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80029d0:	1c61      	adds	r1, r4, #1
 80029d2:	d037      	beq.n	8002a44 <_swiopen+0x88>
 80029d4:	3501      	adds	r5, #1
 80029d6:	2d14      	cmp	r5, #20
 80029d8:	d1f8      	bne.n	80029cc <_swiopen+0x10>
 80029da:	f000 fb9d 	bl	8003118 <__errno>
 80029de:	2318      	movs	r3, #24
 80029e0:	6003      	str	r3, [r0, #0]
 80029e2:	f04f 34ff 	mov.w	r4, #4294967295
 80029e6:	e03d      	b.n	8002a64 <_swiopen+0xa8>
 80029e8:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80029ec:	f240 6301 	movw	r3, #1537	; 0x601
 80029f0:	07b2      	lsls	r2, r6, #30
 80029f2:	bf48      	it	mi
 80029f4:	f044 0402 	orrmi.w	r4, r4, #2
 80029f8:	421e      	tst	r6, r3
 80029fa:	bf18      	it	ne
 80029fc:	f044 0404 	orrne.w	r4, r4, #4
 8002a00:	0733      	lsls	r3, r6, #28
 8002a02:	bf48      	it	mi
 8002a04:	f024 0404 	bicmi.w	r4, r4, #4
 8002a08:	4638      	mov	r0, r7
 8002a0a:	bf48      	it	mi
 8002a0c:	f044 0408 	orrmi.w	r4, r4, #8
 8002a10:	9700      	str	r7, [sp, #0]
 8002a12:	f7fd fbe5 	bl	80001e0 <strlen>
 8002a16:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002a1a:	2401      	movs	r4, #1
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	4649      	mov	r1, r9
 8002a20:	beab      	bkpt	0x00ab
 8002a22:	4604      	mov	r4, r0
 8002a24:	2c00      	cmp	r4, #0
 8002a26:	db08      	blt.n	8002a3a <_swiopen+0x7e>
 8002a28:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002a2c:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c8 3004 	str.w	r3, [r8, #4]
 8002a36:	462c      	mov	r4, r5
 8002a38:	e014      	b.n	8002a64 <_swiopen+0xa8>
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	f7ff fe8e 	bl	800275c <error>
 8002a40:	4604      	mov	r4, r0
 8002a42:	e00f      	b.n	8002a64 <_swiopen+0xa8>
 8002a44:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002a48:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002a4c:	46e9      	mov	r9, sp
 8002a4e:	d1cb      	bne.n	80029e8 <_swiopen+0x2c>
 8002a50:	4649      	mov	r1, r9
 8002a52:	4638      	mov	r0, r7
 8002a54:	f7ff ff95 	bl	8002982 <_stat>
 8002a58:	3001      	adds	r0, #1
 8002a5a:	d0c5      	beq.n	80029e8 <_swiopen+0x2c>
 8002a5c:	f000 fb5c 	bl	8003118 <__errno>
 8002a60:	2311      	movs	r3, #17
 8002a62:	6003      	str	r3, [r0, #0]
 8002a64:	4620      	mov	r0, r4
 8002a66:	b017      	add	sp, #92	; 0x5c
 8002a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a6c:	200000f8 	.word	0x200000f8

08002a70 <_get_semihosting_exts>:
 8002a70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002a74:	4606      	mov	r6, r0
 8002a76:	460f      	mov	r7, r1
 8002a78:	482a      	ldr	r0, [pc, #168]	; (8002b24 <_get_semihosting_exts+0xb4>)
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4615      	mov	r5, r2
 8002a7e:	f7ff ff9d 	bl	80029bc <_swiopen>
 8002a82:	462a      	mov	r2, r5
 8002a84:	4604      	mov	r4, r0
 8002a86:	2100      	movs	r1, #0
 8002a88:	4630      	mov	r0, r6
 8002a8a:	f000 faf7 	bl	800307c <memset>
 8002a8e:	1c63      	adds	r3, r4, #1
 8002a90:	d016      	beq.n	8002ac0 <_get_semihosting_exts+0x50>
 8002a92:	4620      	mov	r0, r4
 8002a94:	f7ff fe48 	bl	8002728 <findslot>
 8002a98:	f04f 080c 	mov.w	r8, #12
 8002a9c:	4681      	mov	r9, r0
 8002a9e:	4640      	mov	r0, r8
 8002aa0:	4649      	mov	r1, r9
 8002aa2:	beab      	bkpt	0x00ab
 8002aa4:	4680      	mov	r8, r0
 8002aa6:	4640      	mov	r0, r8
 8002aa8:	f7ff fe66 	bl	8002778 <checkerror>
 8002aac:	2803      	cmp	r0, #3
 8002aae:	dd02      	ble.n	8002ab6 <_get_semihosting_exts+0x46>
 8002ab0:	1ec3      	subs	r3, r0, #3
 8002ab2:	42ab      	cmp	r3, r5
 8002ab4:	dc08      	bgt.n	8002ac8 <_get_semihosting_exts+0x58>
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f7ff ff0e 	bl	80028d8 <_close>
 8002abc:	f04f 34ff 	mov.w	r4, #4294967295
 8002ac0:	4620      	mov	r0, r4
 8002ac2:	b003      	add	sp, #12
 8002ac4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ac8:	2204      	movs	r2, #4
 8002aca:	eb0d 0102 	add.w	r1, sp, r2
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f7ff fe67 	bl	80027a2 <_read>
 8002ad4:	2803      	cmp	r0, #3
 8002ad6:	ddee      	ble.n	8002ab6 <_get_semihosting_exts+0x46>
 8002ad8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002adc:	2b53      	cmp	r3, #83	; 0x53
 8002ade:	d1ea      	bne.n	8002ab6 <_get_semihosting_exts+0x46>
 8002ae0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002ae4:	2b48      	cmp	r3, #72	; 0x48
 8002ae6:	d1e6      	bne.n	8002ab6 <_get_semihosting_exts+0x46>
 8002ae8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002aec:	2b46      	cmp	r3, #70	; 0x46
 8002aee:	d1e2      	bne.n	8002ab6 <_get_semihosting_exts+0x46>
 8002af0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002af4:	2b42      	cmp	r3, #66	; 0x42
 8002af6:	d1de      	bne.n	8002ab6 <_get_semihosting_exts+0x46>
 8002af8:	2201      	movs	r2, #1
 8002afa:	4639      	mov	r1, r7
 8002afc:	4620      	mov	r0, r4
 8002afe:	f7ff fe6c 	bl	80027da <_swilseek>
 8002b02:	2800      	cmp	r0, #0
 8002b04:	dbd7      	blt.n	8002ab6 <_get_semihosting_exts+0x46>
 8002b06:	462a      	mov	r2, r5
 8002b08:	4631      	mov	r1, r6
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	f7ff fe49 	bl	80027a2 <_read>
 8002b10:	4605      	mov	r5, r0
 8002b12:	4620      	mov	r0, r4
 8002b14:	f7ff fee0 	bl	80028d8 <_close>
 8002b18:	4628      	mov	r0, r5
 8002b1a:	f7ff fe2d 	bl	8002778 <checkerror>
 8002b1e:	4604      	mov	r4, r0
 8002b20:	e7ce      	b.n	8002ac0 <_get_semihosting_exts+0x50>
 8002b22:	bf00      	nop
 8002b24:	08003c0c 	.word	0x08003c0c

08002b28 <initialise_semihosting_exts>:
 8002b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b2a:	4d0a      	ldr	r5, [pc, #40]	; (8002b54 <initialise_semihosting_exts+0x2c>)
 8002b2c:	4c0a      	ldr	r4, [pc, #40]	; (8002b58 <initialise_semihosting_exts+0x30>)
 8002b2e:	2100      	movs	r1, #0
 8002b30:	2201      	movs	r2, #1
 8002b32:	a801      	add	r0, sp, #4
 8002b34:	6029      	str	r1, [r5, #0]
 8002b36:	6022      	str	r2, [r4, #0]
 8002b38:	f7ff ff9a 	bl	8002a70 <_get_semihosting_exts>
 8002b3c:	2800      	cmp	r0, #0
 8002b3e:	dd07      	ble.n	8002b50 <initialise_semihosting_exts+0x28>
 8002b40:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b44:	f003 0201 	and.w	r2, r3, #1
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	602a      	str	r2, [r5, #0]
 8002b4e:	6023      	str	r3, [r4, #0]
 8002b50:	b003      	add	sp, #12
 8002b52:	bd30      	pop	{r4, r5, pc}
 8002b54:	2000000c 	.word	0x2000000c
 8002b58:	20000010 	.word	0x20000010

08002b5c <_has_ext_stdout_stderr>:
 8002b5c:	b510      	push	{r4, lr}
 8002b5e:	4c04      	ldr	r4, [pc, #16]	; (8002b70 <_has_ext_stdout_stderr+0x14>)
 8002b60:	6823      	ldr	r3, [r4, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	da01      	bge.n	8002b6a <_has_ext_stdout_stderr+0xe>
 8002b66:	f7ff ffdf 	bl	8002b28 <initialise_semihosting_exts>
 8002b6a:	6820      	ldr	r0, [r4, #0]
 8002b6c:	bd10      	pop	{r4, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000010 	.word	0x20000010

08002b74 <initialise_monitor_handles>:
 8002b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b78:	b085      	sub	sp, #20
 8002b7a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002c2c <initialise_monitor_handles+0xb8>
 8002b7e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002b82:	2303      	movs	r3, #3
 8002b84:	2400      	movs	r4, #0
 8002b86:	9303      	str	r3, [sp, #12]
 8002b88:	af01      	add	r7, sp, #4
 8002b8a:	9402      	str	r4, [sp, #8]
 8002b8c:	2501      	movs	r5, #1
 8002b8e:	4628      	mov	r0, r5
 8002b90:	4639      	mov	r1, r7
 8002b92:	beab      	bkpt	0x00ab
 8002b94:	4605      	mov	r5, r0
 8002b96:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002c30 <initialise_monitor_handles+0xbc>
 8002b9a:	4623      	mov	r3, r4
 8002b9c:	4c20      	ldr	r4, [pc, #128]	; (8002c20 <initialise_monitor_handles+0xac>)
 8002b9e:	f8c8 5000 	str.w	r5, [r8]
 8002ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002baa:	3301      	adds	r3, #1
 8002bac:	2b14      	cmp	r3, #20
 8002bae:	d1fa      	bne.n	8002ba6 <initialise_monitor_handles+0x32>
 8002bb0:	f7ff ffd4 	bl	8002b5c <_has_ext_stdout_stderr>
 8002bb4:	4d1b      	ldr	r5, [pc, #108]	; (8002c24 <initialise_monitor_handles+0xb0>)
 8002bb6:	b1d0      	cbz	r0, 8002bee <initialise_monitor_handles+0x7a>
 8002bb8:	f04f 0a03 	mov.w	sl, #3
 8002bbc:	2304      	movs	r3, #4
 8002bbe:	f8cd 9004 	str.w	r9, [sp, #4]
 8002bc2:	2601      	movs	r6, #1
 8002bc4:	f8cd a00c 	str.w	sl, [sp, #12]
 8002bc8:	9302      	str	r3, [sp, #8]
 8002bca:	4630      	mov	r0, r6
 8002bcc:	4639      	mov	r1, r7
 8002bce:	beab      	bkpt	0x00ab
 8002bd0:	4683      	mov	fp, r0
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <initialise_monitor_handles+0xb4>)
 8002bd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8002bd8:	f8c3 b000 	str.w	fp, [r3]
 8002bdc:	2308      	movs	r3, #8
 8002bde:	f8cd a00c 	str.w	sl, [sp, #12]
 8002be2:	9302      	str	r3, [sp, #8]
 8002be4:	4630      	mov	r0, r6
 8002be6:	4639      	mov	r1, r7
 8002be8:	beab      	bkpt	0x00ab
 8002bea:	4606      	mov	r6, r0
 8002bec:	602e      	str	r6, [r5, #0]
 8002bee:	682b      	ldr	r3, [r5, #0]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	bf02      	ittt	eq
 8002bf4:	4b0c      	ldreq	r3, [pc, #48]	; (8002c28 <initialise_monitor_handles+0xb4>)
 8002bf6:	681b      	ldreq	r3, [r3, #0]
 8002bf8:	602b      	streq	r3, [r5, #0]
 8002bfa:	2600      	movs	r6, #0
 8002bfc:	f8d8 3000 	ldr.w	r3, [r8]
 8002c00:	6023      	str	r3, [r4, #0]
 8002c02:	6066      	str	r6, [r4, #4]
 8002c04:	f7ff ffaa 	bl	8002b5c <_has_ext_stdout_stderr>
 8002c08:	b130      	cbz	r0, 8002c18 <initialise_monitor_handles+0xa4>
 8002c0a:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <initialise_monitor_handles+0xb4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002c12:	682b      	ldr	r3, [r5, #0]
 8002c14:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002c18:	b005      	add	sp, #20
 8002c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c1e:	bf00      	nop
 8002c20:	200000f8 	.word	0x200000f8
 8002c24:	200000ec 	.word	0x200000ec
 8002c28:	200000f4 	.word	0x200000f4
 8002c2c:	08003c22 	.word	0x08003c22
 8002c30:	200000f0 	.word	0x200000f0

08002c34 <_isatty>:
 8002c34:	b570      	push	{r4, r5, r6, lr}
 8002c36:	f7ff fd77 	bl	8002728 <findslot>
 8002c3a:	2509      	movs	r5, #9
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	b920      	cbnz	r0, 8002c4a <_isatty+0x16>
 8002c40:	f000 fa6a 	bl	8003118 <__errno>
 8002c44:	6005      	str	r5, [r0, #0]
 8002c46:	4620      	mov	r0, r4
 8002c48:	bd70      	pop	{r4, r5, r6, pc}
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	beab      	bkpt	0x00ab
 8002c50:	4604      	mov	r4, r0
 8002c52:	2c01      	cmp	r4, #1
 8002c54:	d0f7      	beq.n	8002c46 <_isatty+0x12>
 8002c56:	f000 fa5f 	bl	8003118 <__errno>
 8002c5a:	2400      	movs	r4, #0
 8002c5c:	4605      	mov	r5, r0
 8002c5e:	2613      	movs	r6, #19
 8002c60:	4630      	mov	r0, r6
 8002c62:	4621      	mov	r1, r4
 8002c64:	beab      	bkpt	0x00ab
 8002c66:	4606      	mov	r6, r0
 8002c68:	602e      	str	r6, [r5, #0]
 8002c6a:	e7ec      	b.n	8002c46 <_isatty+0x12>

08002c6c <std>:
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	b510      	push	{r4, lr}
 8002c70:	4604      	mov	r4, r0
 8002c72:	e9c0 3300 	strd	r3, r3, [r0]
 8002c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c7a:	6083      	str	r3, [r0, #8]
 8002c7c:	8181      	strh	r1, [r0, #12]
 8002c7e:	6643      	str	r3, [r0, #100]	; 0x64
 8002c80:	81c2      	strh	r2, [r0, #14]
 8002c82:	6183      	str	r3, [r0, #24]
 8002c84:	4619      	mov	r1, r3
 8002c86:	2208      	movs	r2, #8
 8002c88:	305c      	adds	r0, #92	; 0x5c
 8002c8a:	f000 f9f7 	bl	800307c <memset>
 8002c8e:	4b0d      	ldr	r3, [pc, #52]	; (8002cc4 <std+0x58>)
 8002c90:	6263      	str	r3, [r4, #36]	; 0x24
 8002c92:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <std+0x5c>)
 8002c94:	62a3      	str	r3, [r4, #40]	; 0x28
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <std+0x60>)
 8002c98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <std+0x64>)
 8002c9c:	6323      	str	r3, [r4, #48]	; 0x30
 8002c9e:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <std+0x68>)
 8002ca0:	6224      	str	r4, [r4, #32]
 8002ca2:	429c      	cmp	r4, r3
 8002ca4:	d006      	beq.n	8002cb4 <std+0x48>
 8002ca6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002caa:	4294      	cmp	r4, r2
 8002cac:	d002      	beq.n	8002cb4 <std+0x48>
 8002cae:	33d0      	adds	r3, #208	; 0xd0
 8002cb0:	429c      	cmp	r4, r3
 8002cb2:	d105      	bne.n	8002cc0 <std+0x54>
 8002cb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cbc:	f000 ba56 	b.w	800316c <__retarget_lock_init_recursive>
 8002cc0:	bd10      	pop	{r4, pc}
 8002cc2:	bf00      	nop
 8002cc4:	08002ecd 	.word	0x08002ecd
 8002cc8:	08002eef 	.word	0x08002eef
 8002ccc:	08002f27 	.word	0x08002f27
 8002cd0:	08002f4b 	.word	0x08002f4b
 8002cd4:	20000198 	.word	0x20000198

08002cd8 <stdio_exit_handler>:
 8002cd8:	4a02      	ldr	r2, [pc, #8]	; (8002ce4 <stdio_exit_handler+0xc>)
 8002cda:	4903      	ldr	r1, [pc, #12]	; (8002ce8 <stdio_exit_handler+0x10>)
 8002cdc:	4803      	ldr	r0, [pc, #12]	; (8002cec <stdio_exit_handler+0x14>)
 8002cde:	f000 b869 	b.w	8002db4 <_fwalk_sglue>
 8002ce2:	bf00      	nop
 8002ce4:	20000014 	.word	0x20000014
 8002ce8:	08003a19 	.word	0x08003a19
 8002cec:	20000020 	.word	0x20000020

08002cf0 <cleanup_stdio>:
 8002cf0:	6841      	ldr	r1, [r0, #4]
 8002cf2:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <cleanup_stdio+0x34>)
 8002cf4:	4299      	cmp	r1, r3
 8002cf6:	b510      	push	{r4, lr}
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	d001      	beq.n	8002d00 <cleanup_stdio+0x10>
 8002cfc:	f000 fe8c 	bl	8003a18 <_fflush_r>
 8002d00:	68a1      	ldr	r1, [r4, #8]
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <cleanup_stdio+0x38>)
 8002d04:	4299      	cmp	r1, r3
 8002d06:	d002      	beq.n	8002d0e <cleanup_stdio+0x1e>
 8002d08:	4620      	mov	r0, r4
 8002d0a:	f000 fe85 	bl	8003a18 <_fflush_r>
 8002d0e:	68e1      	ldr	r1, [r4, #12]
 8002d10:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <cleanup_stdio+0x3c>)
 8002d12:	4299      	cmp	r1, r3
 8002d14:	d004      	beq.n	8002d20 <cleanup_stdio+0x30>
 8002d16:	4620      	mov	r0, r4
 8002d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d1c:	f000 be7c 	b.w	8003a18 <_fflush_r>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	bf00      	nop
 8002d24:	20000198 	.word	0x20000198
 8002d28:	20000200 	.word	0x20000200
 8002d2c:	20000268 	.word	0x20000268

08002d30 <global_stdio_init.part.0>:
 8002d30:	b510      	push	{r4, lr}
 8002d32:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <global_stdio_init.part.0+0x30>)
 8002d34:	4c0b      	ldr	r4, [pc, #44]	; (8002d64 <global_stdio_init.part.0+0x34>)
 8002d36:	4a0c      	ldr	r2, [pc, #48]	; (8002d68 <global_stdio_init.part.0+0x38>)
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2104      	movs	r1, #4
 8002d40:	f7ff ff94 	bl	8002c6c <std>
 8002d44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002d48:	2201      	movs	r2, #1
 8002d4a:	2109      	movs	r1, #9
 8002d4c:	f7ff ff8e 	bl	8002c6c <std>
 8002d50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002d54:	2202      	movs	r2, #2
 8002d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d5a:	2112      	movs	r1, #18
 8002d5c:	f7ff bf86 	b.w	8002c6c <std>
 8002d60:	200002d0 	.word	0x200002d0
 8002d64:	20000198 	.word	0x20000198
 8002d68:	08002cd9 	.word	0x08002cd9

08002d6c <__sfp_lock_acquire>:
 8002d6c:	4801      	ldr	r0, [pc, #4]	; (8002d74 <__sfp_lock_acquire+0x8>)
 8002d6e:	f000 b9fe 	b.w	800316e <__retarget_lock_acquire_recursive>
 8002d72:	bf00      	nop
 8002d74:	200002d9 	.word	0x200002d9

08002d78 <__sfp_lock_release>:
 8002d78:	4801      	ldr	r0, [pc, #4]	; (8002d80 <__sfp_lock_release+0x8>)
 8002d7a:	f000 b9f9 	b.w	8003170 <__retarget_lock_release_recursive>
 8002d7e:	bf00      	nop
 8002d80:	200002d9 	.word	0x200002d9

08002d84 <__sinit>:
 8002d84:	b510      	push	{r4, lr}
 8002d86:	4604      	mov	r4, r0
 8002d88:	f7ff fff0 	bl	8002d6c <__sfp_lock_acquire>
 8002d8c:	6a23      	ldr	r3, [r4, #32]
 8002d8e:	b11b      	cbz	r3, 8002d98 <__sinit+0x14>
 8002d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d94:	f7ff bff0 	b.w	8002d78 <__sfp_lock_release>
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <__sinit+0x28>)
 8002d9a:	6223      	str	r3, [r4, #32]
 8002d9c:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <__sinit+0x2c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f5      	bne.n	8002d90 <__sinit+0xc>
 8002da4:	f7ff ffc4 	bl	8002d30 <global_stdio_init.part.0>
 8002da8:	e7f2      	b.n	8002d90 <__sinit+0xc>
 8002daa:	bf00      	nop
 8002dac:	08002cf1 	.word	0x08002cf1
 8002db0:	200002d0 	.word	0x200002d0

08002db4 <_fwalk_sglue>:
 8002db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002db8:	4607      	mov	r7, r0
 8002dba:	4688      	mov	r8, r1
 8002dbc:	4614      	mov	r4, r2
 8002dbe:	2600      	movs	r6, #0
 8002dc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002dc4:	f1b9 0901 	subs.w	r9, r9, #1
 8002dc8:	d505      	bpl.n	8002dd6 <_fwalk_sglue+0x22>
 8002dca:	6824      	ldr	r4, [r4, #0]
 8002dcc:	2c00      	cmp	r4, #0
 8002dce:	d1f7      	bne.n	8002dc0 <_fwalk_sglue+0xc>
 8002dd0:	4630      	mov	r0, r6
 8002dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002dd6:	89ab      	ldrh	r3, [r5, #12]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d907      	bls.n	8002dec <_fwalk_sglue+0x38>
 8002ddc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002de0:	3301      	adds	r3, #1
 8002de2:	d003      	beq.n	8002dec <_fwalk_sglue+0x38>
 8002de4:	4629      	mov	r1, r5
 8002de6:	4638      	mov	r0, r7
 8002de8:	47c0      	blx	r8
 8002dea:	4306      	orrs	r6, r0
 8002dec:	3568      	adds	r5, #104	; 0x68
 8002dee:	e7e9      	b.n	8002dc4 <_fwalk_sglue+0x10>

08002df0 <iprintf>:
 8002df0:	b40f      	push	{r0, r1, r2, r3}
 8002df2:	b507      	push	{r0, r1, r2, lr}
 8002df4:	4906      	ldr	r1, [pc, #24]	; (8002e10 <iprintf+0x20>)
 8002df6:	ab04      	add	r3, sp, #16
 8002df8:	6808      	ldr	r0, [r1, #0]
 8002dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8002dfe:	6881      	ldr	r1, [r0, #8]
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	f000 fad9 	bl	80033b8 <_vfiprintf_r>
 8002e06:	b003      	add	sp, #12
 8002e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e0c:	b004      	add	sp, #16
 8002e0e:	4770      	bx	lr
 8002e10:	2000006c 	.word	0x2000006c

08002e14 <_puts_r>:
 8002e14:	6a03      	ldr	r3, [r0, #32]
 8002e16:	b570      	push	{r4, r5, r6, lr}
 8002e18:	6884      	ldr	r4, [r0, #8]
 8002e1a:	4605      	mov	r5, r0
 8002e1c:	460e      	mov	r6, r1
 8002e1e:	b90b      	cbnz	r3, 8002e24 <_puts_r+0x10>
 8002e20:	f7ff ffb0 	bl	8002d84 <__sinit>
 8002e24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e26:	07db      	lsls	r3, r3, #31
 8002e28:	d405      	bmi.n	8002e36 <_puts_r+0x22>
 8002e2a:	89a3      	ldrh	r3, [r4, #12]
 8002e2c:	0598      	lsls	r0, r3, #22
 8002e2e:	d402      	bmi.n	8002e36 <_puts_r+0x22>
 8002e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e32:	f000 f99c 	bl	800316e <__retarget_lock_acquire_recursive>
 8002e36:	89a3      	ldrh	r3, [r4, #12]
 8002e38:	0719      	lsls	r1, r3, #28
 8002e3a:	d513      	bpl.n	8002e64 <_puts_r+0x50>
 8002e3c:	6923      	ldr	r3, [r4, #16]
 8002e3e:	b18b      	cbz	r3, 8002e64 <_puts_r+0x50>
 8002e40:	3e01      	subs	r6, #1
 8002e42:	68a3      	ldr	r3, [r4, #8]
 8002e44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	60a3      	str	r3, [r4, #8]
 8002e4c:	b9e9      	cbnz	r1, 8002e8a <_puts_r+0x76>
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	da2e      	bge.n	8002eb0 <_puts_r+0x9c>
 8002e52:	4622      	mov	r2, r4
 8002e54:	210a      	movs	r1, #10
 8002e56:	4628      	mov	r0, r5
 8002e58:	f000 f87b 	bl	8002f52 <__swbuf_r>
 8002e5c:	3001      	adds	r0, #1
 8002e5e:	d007      	beq.n	8002e70 <_puts_r+0x5c>
 8002e60:	250a      	movs	r5, #10
 8002e62:	e007      	b.n	8002e74 <_puts_r+0x60>
 8002e64:	4621      	mov	r1, r4
 8002e66:	4628      	mov	r0, r5
 8002e68:	f000 f8b0 	bl	8002fcc <__swsetup_r>
 8002e6c:	2800      	cmp	r0, #0
 8002e6e:	d0e7      	beq.n	8002e40 <_puts_r+0x2c>
 8002e70:	f04f 35ff 	mov.w	r5, #4294967295
 8002e74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e76:	07da      	lsls	r2, r3, #31
 8002e78:	d405      	bmi.n	8002e86 <_puts_r+0x72>
 8002e7a:	89a3      	ldrh	r3, [r4, #12]
 8002e7c:	059b      	lsls	r3, r3, #22
 8002e7e:	d402      	bmi.n	8002e86 <_puts_r+0x72>
 8002e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e82:	f000 f975 	bl	8003170 <__retarget_lock_release_recursive>
 8002e86:	4628      	mov	r0, r5
 8002e88:	bd70      	pop	{r4, r5, r6, pc}
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	da04      	bge.n	8002e98 <_puts_r+0x84>
 8002e8e:	69a2      	ldr	r2, [r4, #24]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	dc06      	bgt.n	8002ea2 <_puts_r+0x8e>
 8002e94:	290a      	cmp	r1, #10
 8002e96:	d004      	beq.n	8002ea2 <_puts_r+0x8e>
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	6022      	str	r2, [r4, #0]
 8002e9e:	7019      	strb	r1, [r3, #0]
 8002ea0:	e7cf      	b.n	8002e42 <_puts_r+0x2e>
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	4628      	mov	r0, r5
 8002ea6:	f000 f854 	bl	8002f52 <__swbuf_r>
 8002eaa:	3001      	adds	r0, #1
 8002eac:	d1c9      	bne.n	8002e42 <_puts_r+0x2e>
 8002eae:	e7df      	b.n	8002e70 <_puts_r+0x5c>
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	250a      	movs	r5, #10
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	6022      	str	r2, [r4, #0]
 8002eb8:	701d      	strb	r5, [r3, #0]
 8002eba:	e7db      	b.n	8002e74 <_puts_r+0x60>

08002ebc <puts>:
 8002ebc:	4b02      	ldr	r3, [pc, #8]	; (8002ec8 <puts+0xc>)
 8002ebe:	4601      	mov	r1, r0
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	f7ff bfa7 	b.w	8002e14 <_puts_r>
 8002ec6:	bf00      	nop
 8002ec8:	2000006c 	.word	0x2000006c

08002ecc <__sread>:
 8002ecc:	b510      	push	{r4, lr}
 8002ece:	460c      	mov	r4, r1
 8002ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ed4:	f000 f8fc 	bl	80030d0 <_read_r>
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	bfab      	itete	ge
 8002edc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002ede:	89a3      	ldrhlt	r3, [r4, #12]
 8002ee0:	181b      	addge	r3, r3, r0
 8002ee2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ee6:	bfac      	ite	ge
 8002ee8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002eea:	81a3      	strhlt	r3, [r4, #12]
 8002eec:	bd10      	pop	{r4, pc}

08002eee <__swrite>:
 8002eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ef2:	461f      	mov	r7, r3
 8002ef4:	898b      	ldrh	r3, [r1, #12]
 8002ef6:	05db      	lsls	r3, r3, #23
 8002ef8:	4605      	mov	r5, r0
 8002efa:	460c      	mov	r4, r1
 8002efc:	4616      	mov	r6, r2
 8002efe:	d505      	bpl.n	8002f0c <__swrite+0x1e>
 8002f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f04:	2302      	movs	r3, #2
 8002f06:	2200      	movs	r2, #0
 8002f08:	f000 f8d0 	bl	80030ac <_lseek_r>
 8002f0c:	89a3      	ldrh	r3, [r4, #12]
 8002f0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f16:	81a3      	strh	r3, [r4, #12]
 8002f18:	4632      	mov	r2, r6
 8002f1a:	463b      	mov	r3, r7
 8002f1c:	4628      	mov	r0, r5
 8002f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f22:	f000 b8e7 	b.w	80030f4 <_write_r>

08002f26 <__sseek>:
 8002f26:	b510      	push	{r4, lr}
 8002f28:	460c      	mov	r4, r1
 8002f2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f2e:	f000 f8bd 	bl	80030ac <_lseek_r>
 8002f32:	1c43      	adds	r3, r0, #1
 8002f34:	89a3      	ldrh	r3, [r4, #12]
 8002f36:	bf15      	itete	ne
 8002f38:	6560      	strne	r0, [r4, #84]	; 0x54
 8002f3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002f3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002f42:	81a3      	strheq	r3, [r4, #12]
 8002f44:	bf18      	it	ne
 8002f46:	81a3      	strhne	r3, [r4, #12]
 8002f48:	bd10      	pop	{r4, pc}

08002f4a <__sclose>:
 8002f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f4e:	f000 b89d 	b.w	800308c <_close_r>

08002f52 <__swbuf_r>:
 8002f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f54:	460e      	mov	r6, r1
 8002f56:	4614      	mov	r4, r2
 8002f58:	4605      	mov	r5, r0
 8002f5a:	b118      	cbz	r0, 8002f64 <__swbuf_r+0x12>
 8002f5c:	6a03      	ldr	r3, [r0, #32]
 8002f5e:	b90b      	cbnz	r3, 8002f64 <__swbuf_r+0x12>
 8002f60:	f7ff ff10 	bl	8002d84 <__sinit>
 8002f64:	69a3      	ldr	r3, [r4, #24]
 8002f66:	60a3      	str	r3, [r4, #8]
 8002f68:	89a3      	ldrh	r3, [r4, #12]
 8002f6a:	071a      	lsls	r2, r3, #28
 8002f6c:	d525      	bpl.n	8002fba <__swbuf_r+0x68>
 8002f6e:	6923      	ldr	r3, [r4, #16]
 8002f70:	b31b      	cbz	r3, 8002fba <__swbuf_r+0x68>
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	6922      	ldr	r2, [r4, #16]
 8002f76:	1a98      	subs	r0, r3, r2
 8002f78:	6963      	ldr	r3, [r4, #20]
 8002f7a:	b2f6      	uxtb	r6, r6
 8002f7c:	4283      	cmp	r3, r0
 8002f7e:	4637      	mov	r7, r6
 8002f80:	dc04      	bgt.n	8002f8c <__swbuf_r+0x3a>
 8002f82:	4621      	mov	r1, r4
 8002f84:	4628      	mov	r0, r5
 8002f86:	f000 fd47 	bl	8003a18 <_fflush_r>
 8002f8a:	b9e0      	cbnz	r0, 8002fc6 <__swbuf_r+0x74>
 8002f8c:	68a3      	ldr	r3, [r4, #8]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	60a3      	str	r3, [r4, #8]
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	6022      	str	r2, [r4, #0]
 8002f98:	701e      	strb	r6, [r3, #0]
 8002f9a:	6962      	ldr	r2, [r4, #20]
 8002f9c:	1c43      	adds	r3, r0, #1
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d004      	beq.n	8002fac <__swbuf_r+0x5a>
 8002fa2:	89a3      	ldrh	r3, [r4, #12]
 8002fa4:	07db      	lsls	r3, r3, #31
 8002fa6:	d506      	bpl.n	8002fb6 <__swbuf_r+0x64>
 8002fa8:	2e0a      	cmp	r6, #10
 8002faa:	d104      	bne.n	8002fb6 <__swbuf_r+0x64>
 8002fac:	4621      	mov	r1, r4
 8002fae:	4628      	mov	r0, r5
 8002fb0:	f000 fd32 	bl	8003a18 <_fflush_r>
 8002fb4:	b938      	cbnz	r0, 8002fc6 <__swbuf_r+0x74>
 8002fb6:	4638      	mov	r0, r7
 8002fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fba:	4621      	mov	r1, r4
 8002fbc:	4628      	mov	r0, r5
 8002fbe:	f000 f805 	bl	8002fcc <__swsetup_r>
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	d0d5      	beq.n	8002f72 <__swbuf_r+0x20>
 8002fc6:	f04f 37ff 	mov.w	r7, #4294967295
 8002fca:	e7f4      	b.n	8002fb6 <__swbuf_r+0x64>

08002fcc <__swsetup_r>:
 8002fcc:	b538      	push	{r3, r4, r5, lr}
 8002fce:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <__swsetup_r+0xac>)
 8002fd0:	4605      	mov	r5, r0
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	460c      	mov	r4, r1
 8002fd6:	b118      	cbz	r0, 8002fe0 <__swsetup_r+0x14>
 8002fd8:	6a03      	ldr	r3, [r0, #32]
 8002fda:	b90b      	cbnz	r3, 8002fe0 <__swsetup_r+0x14>
 8002fdc:	f7ff fed2 	bl	8002d84 <__sinit>
 8002fe0:	89a3      	ldrh	r3, [r4, #12]
 8002fe2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002fe6:	0718      	lsls	r0, r3, #28
 8002fe8:	d422      	bmi.n	8003030 <__swsetup_r+0x64>
 8002fea:	06d9      	lsls	r1, r3, #27
 8002fec:	d407      	bmi.n	8002ffe <__swsetup_r+0x32>
 8002fee:	2309      	movs	r3, #9
 8002ff0:	602b      	str	r3, [r5, #0]
 8002ff2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ff6:	81a3      	strh	r3, [r4, #12]
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffc:	e034      	b.n	8003068 <__swsetup_r+0x9c>
 8002ffe:	0758      	lsls	r0, r3, #29
 8003000:	d512      	bpl.n	8003028 <__swsetup_r+0x5c>
 8003002:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003004:	b141      	cbz	r1, 8003018 <__swsetup_r+0x4c>
 8003006:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800300a:	4299      	cmp	r1, r3
 800300c:	d002      	beq.n	8003014 <__swsetup_r+0x48>
 800300e:	4628      	mov	r0, r5
 8003010:	f000 f8b0 	bl	8003174 <_free_r>
 8003014:	2300      	movs	r3, #0
 8003016:	6363      	str	r3, [r4, #52]	; 0x34
 8003018:	89a3      	ldrh	r3, [r4, #12]
 800301a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800301e:	81a3      	strh	r3, [r4, #12]
 8003020:	2300      	movs	r3, #0
 8003022:	6063      	str	r3, [r4, #4]
 8003024:	6923      	ldr	r3, [r4, #16]
 8003026:	6023      	str	r3, [r4, #0]
 8003028:	89a3      	ldrh	r3, [r4, #12]
 800302a:	f043 0308 	orr.w	r3, r3, #8
 800302e:	81a3      	strh	r3, [r4, #12]
 8003030:	6923      	ldr	r3, [r4, #16]
 8003032:	b94b      	cbnz	r3, 8003048 <__swsetup_r+0x7c>
 8003034:	89a3      	ldrh	r3, [r4, #12]
 8003036:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800303a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800303e:	d003      	beq.n	8003048 <__swsetup_r+0x7c>
 8003040:	4621      	mov	r1, r4
 8003042:	4628      	mov	r0, r5
 8003044:	f000 fd36 	bl	8003ab4 <__smakebuf_r>
 8003048:	89a0      	ldrh	r0, [r4, #12]
 800304a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800304e:	f010 0301 	ands.w	r3, r0, #1
 8003052:	d00a      	beq.n	800306a <__swsetup_r+0x9e>
 8003054:	2300      	movs	r3, #0
 8003056:	60a3      	str	r3, [r4, #8]
 8003058:	6963      	ldr	r3, [r4, #20]
 800305a:	425b      	negs	r3, r3
 800305c:	61a3      	str	r3, [r4, #24]
 800305e:	6923      	ldr	r3, [r4, #16]
 8003060:	b943      	cbnz	r3, 8003074 <__swsetup_r+0xa8>
 8003062:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003066:	d1c4      	bne.n	8002ff2 <__swsetup_r+0x26>
 8003068:	bd38      	pop	{r3, r4, r5, pc}
 800306a:	0781      	lsls	r1, r0, #30
 800306c:	bf58      	it	pl
 800306e:	6963      	ldrpl	r3, [r4, #20]
 8003070:	60a3      	str	r3, [r4, #8]
 8003072:	e7f4      	b.n	800305e <__swsetup_r+0x92>
 8003074:	2000      	movs	r0, #0
 8003076:	e7f7      	b.n	8003068 <__swsetup_r+0x9c>
 8003078:	2000006c 	.word	0x2000006c

0800307c <memset>:
 800307c:	4402      	add	r2, r0
 800307e:	4603      	mov	r3, r0
 8003080:	4293      	cmp	r3, r2
 8003082:	d100      	bne.n	8003086 <memset+0xa>
 8003084:	4770      	bx	lr
 8003086:	f803 1b01 	strb.w	r1, [r3], #1
 800308a:	e7f9      	b.n	8003080 <memset+0x4>

0800308c <_close_r>:
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	4d06      	ldr	r5, [pc, #24]	; (80030a8 <_close_r+0x1c>)
 8003090:	2300      	movs	r3, #0
 8003092:	4604      	mov	r4, r0
 8003094:	4608      	mov	r0, r1
 8003096:	602b      	str	r3, [r5, #0]
 8003098:	f7ff fc1e 	bl	80028d8 <_close>
 800309c:	1c43      	adds	r3, r0, #1
 800309e:	d102      	bne.n	80030a6 <_close_r+0x1a>
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	b103      	cbz	r3, 80030a6 <_close_r+0x1a>
 80030a4:	6023      	str	r3, [r4, #0]
 80030a6:	bd38      	pop	{r3, r4, r5, pc}
 80030a8:	200002d4 	.word	0x200002d4

080030ac <_lseek_r>:
 80030ac:	b538      	push	{r3, r4, r5, lr}
 80030ae:	4d07      	ldr	r5, [pc, #28]	; (80030cc <_lseek_r+0x20>)
 80030b0:	4604      	mov	r4, r0
 80030b2:	4608      	mov	r0, r1
 80030b4:	4611      	mov	r1, r2
 80030b6:	2200      	movs	r2, #0
 80030b8:	602a      	str	r2, [r5, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f7ff fbc9 	bl	8002852 <_lseek>
 80030c0:	1c43      	adds	r3, r0, #1
 80030c2:	d102      	bne.n	80030ca <_lseek_r+0x1e>
 80030c4:	682b      	ldr	r3, [r5, #0]
 80030c6:	b103      	cbz	r3, 80030ca <_lseek_r+0x1e>
 80030c8:	6023      	str	r3, [r4, #0]
 80030ca:	bd38      	pop	{r3, r4, r5, pc}
 80030cc:	200002d4 	.word	0x200002d4

080030d0 <_read_r>:
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	4d07      	ldr	r5, [pc, #28]	; (80030f0 <_read_r+0x20>)
 80030d4:	4604      	mov	r4, r0
 80030d6:	4608      	mov	r0, r1
 80030d8:	4611      	mov	r1, r2
 80030da:	2200      	movs	r2, #0
 80030dc:	602a      	str	r2, [r5, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	f7ff fb5f 	bl	80027a2 <_read>
 80030e4:	1c43      	adds	r3, r0, #1
 80030e6:	d102      	bne.n	80030ee <_read_r+0x1e>
 80030e8:	682b      	ldr	r3, [r5, #0]
 80030ea:	b103      	cbz	r3, 80030ee <_read_r+0x1e>
 80030ec:	6023      	str	r3, [r4, #0]
 80030ee:	bd38      	pop	{r3, r4, r5, pc}
 80030f0:	200002d4 	.word	0x200002d4

080030f4 <_write_r>:
 80030f4:	b538      	push	{r3, r4, r5, lr}
 80030f6:	4d07      	ldr	r5, [pc, #28]	; (8003114 <_write_r+0x20>)
 80030f8:	4604      	mov	r4, r0
 80030fa:	4608      	mov	r0, r1
 80030fc:	4611      	mov	r1, r2
 80030fe:	2200      	movs	r2, #0
 8003100:	602a      	str	r2, [r5, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	f7ff fbb7 	bl	8002876 <_write>
 8003108:	1c43      	adds	r3, r0, #1
 800310a:	d102      	bne.n	8003112 <_write_r+0x1e>
 800310c:	682b      	ldr	r3, [r5, #0]
 800310e:	b103      	cbz	r3, 8003112 <_write_r+0x1e>
 8003110:	6023      	str	r3, [r4, #0]
 8003112:	bd38      	pop	{r3, r4, r5, pc}
 8003114:	200002d4 	.word	0x200002d4

08003118 <__errno>:
 8003118:	4b01      	ldr	r3, [pc, #4]	; (8003120 <__errno+0x8>)
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	2000006c 	.word	0x2000006c

08003124 <__libc_init_array>:
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	4d0d      	ldr	r5, [pc, #52]	; (800315c <__libc_init_array+0x38>)
 8003128:	4c0d      	ldr	r4, [pc, #52]	; (8003160 <__libc_init_array+0x3c>)
 800312a:	1b64      	subs	r4, r4, r5
 800312c:	10a4      	asrs	r4, r4, #2
 800312e:	2600      	movs	r6, #0
 8003130:	42a6      	cmp	r6, r4
 8003132:	d109      	bne.n	8003148 <__libc_init_array+0x24>
 8003134:	4d0b      	ldr	r5, [pc, #44]	; (8003164 <__libc_init_array+0x40>)
 8003136:	4c0c      	ldr	r4, [pc, #48]	; (8003168 <__libc_init_array+0x44>)
 8003138:	f000 fd2a 	bl	8003b90 <_init>
 800313c:	1b64      	subs	r4, r4, r5
 800313e:	10a4      	asrs	r4, r4, #2
 8003140:	2600      	movs	r6, #0
 8003142:	42a6      	cmp	r6, r4
 8003144:	d105      	bne.n	8003152 <__libc_init_array+0x2e>
 8003146:	bd70      	pop	{r4, r5, r6, pc}
 8003148:	f855 3b04 	ldr.w	r3, [r5], #4
 800314c:	4798      	blx	r3
 800314e:	3601      	adds	r6, #1
 8003150:	e7ee      	b.n	8003130 <__libc_init_array+0xc>
 8003152:	f855 3b04 	ldr.w	r3, [r5], #4
 8003156:	4798      	blx	r3
 8003158:	3601      	adds	r6, #1
 800315a:	e7f2      	b.n	8003142 <__libc_init_array+0x1e>
 800315c:	08003c64 	.word	0x08003c64
 8003160:	08003c64 	.word	0x08003c64
 8003164:	08003c64 	.word	0x08003c64
 8003168:	08003c68 	.word	0x08003c68

0800316c <__retarget_lock_init_recursive>:
 800316c:	4770      	bx	lr

0800316e <__retarget_lock_acquire_recursive>:
 800316e:	4770      	bx	lr

08003170 <__retarget_lock_release_recursive>:
 8003170:	4770      	bx	lr
	...

08003174 <_free_r>:
 8003174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003176:	2900      	cmp	r1, #0
 8003178:	d044      	beq.n	8003204 <_free_r+0x90>
 800317a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800317e:	9001      	str	r0, [sp, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	f1a1 0404 	sub.w	r4, r1, #4
 8003186:	bfb8      	it	lt
 8003188:	18e4      	addlt	r4, r4, r3
 800318a:	f000 f8df 	bl	800334c <__malloc_lock>
 800318e:	4a1e      	ldr	r2, [pc, #120]	; (8003208 <_free_r+0x94>)
 8003190:	9801      	ldr	r0, [sp, #4]
 8003192:	6813      	ldr	r3, [r2, #0]
 8003194:	b933      	cbnz	r3, 80031a4 <_free_r+0x30>
 8003196:	6063      	str	r3, [r4, #4]
 8003198:	6014      	str	r4, [r2, #0]
 800319a:	b003      	add	sp, #12
 800319c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80031a0:	f000 b8da 	b.w	8003358 <__malloc_unlock>
 80031a4:	42a3      	cmp	r3, r4
 80031a6:	d908      	bls.n	80031ba <_free_r+0x46>
 80031a8:	6825      	ldr	r5, [r4, #0]
 80031aa:	1961      	adds	r1, r4, r5
 80031ac:	428b      	cmp	r3, r1
 80031ae:	bf01      	itttt	eq
 80031b0:	6819      	ldreq	r1, [r3, #0]
 80031b2:	685b      	ldreq	r3, [r3, #4]
 80031b4:	1949      	addeq	r1, r1, r5
 80031b6:	6021      	streq	r1, [r4, #0]
 80031b8:	e7ed      	b.n	8003196 <_free_r+0x22>
 80031ba:	461a      	mov	r2, r3
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	b10b      	cbz	r3, 80031c4 <_free_r+0x50>
 80031c0:	42a3      	cmp	r3, r4
 80031c2:	d9fa      	bls.n	80031ba <_free_r+0x46>
 80031c4:	6811      	ldr	r1, [r2, #0]
 80031c6:	1855      	adds	r5, r2, r1
 80031c8:	42a5      	cmp	r5, r4
 80031ca:	d10b      	bne.n	80031e4 <_free_r+0x70>
 80031cc:	6824      	ldr	r4, [r4, #0]
 80031ce:	4421      	add	r1, r4
 80031d0:	1854      	adds	r4, r2, r1
 80031d2:	42a3      	cmp	r3, r4
 80031d4:	6011      	str	r1, [r2, #0]
 80031d6:	d1e0      	bne.n	800319a <_free_r+0x26>
 80031d8:	681c      	ldr	r4, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	6053      	str	r3, [r2, #4]
 80031de:	440c      	add	r4, r1
 80031e0:	6014      	str	r4, [r2, #0]
 80031e2:	e7da      	b.n	800319a <_free_r+0x26>
 80031e4:	d902      	bls.n	80031ec <_free_r+0x78>
 80031e6:	230c      	movs	r3, #12
 80031e8:	6003      	str	r3, [r0, #0]
 80031ea:	e7d6      	b.n	800319a <_free_r+0x26>
 80031ec:	6825      	ldr	r5, [r4, #0]
 80031ee:	1961      	adds	r1, r4, r5
 80031f0:	428b      	cmp	r3, r1
 80031f2:	bf04      	itt	eq
 80031f4:	6819      	ldreq	r1, [r3, #0]
 80031f6:	685b      	ldreq	r3, [r3, #4]
 80031f8:	6063      	str	r3, [r4, #4]
 80031fa:	bf04      	itt	eq
 80031fc:	1949      	addeq	r1, r1, r5
 80031fe:	6021      	streq	r1, [r4, #0]
 8003200:	6054      	str	r4, [r2, #4]
 8003202:	e7ca      	b.n	800319a <_free_r+0x26>
 8003204:	b003      	add	sp, #12
 8003206:	bd30      	pop	{r4, r5, pc}
 8003208:	200002dc 	.word	0x200002dc

0800320c <sbrk_aligned>:
 800320c:	b570      	push	{r4, r5, r6, lr}
 800320e:	4e0e      	ldr	r6, [pc, #56]	; (8003248 <sbrk_aligned+0x3c>)
 8003210:	460c      	mov	r4, r1
 8003212:	6831      	ldr	r1, [r6, #0]
 8003214:	4605      	mov	r5, r0
 8003216:	b911      	cbnz	r1, 800321e <sbrk_aligned+0x12>
 8003218:	f000 fcaa 	bl	8003b70 <_sbrk_r>
 800321c:	6030      	str	r0, [r6, #0]
 800321e:	4621      	mov	r1, r4
 8003220:	4628      	mov	r0, r5
 8003222:	f000 fca5 	bl	8003b70 <_sbrk_r>
 8003226:	1c43      	adds	r3, r0, #1
 8003228:	d00a      	beq.n	8003240 <sbrk_aligned+0x34>
 800322a:	1cc4      	adds	r4, r0, #3
 800322c:	f024 0403 	bic.w	r4, r4, #3
 8003230:	42a0      	cmp	r0, r4
 8003232:	d007      	beq.n	8003244 <sbrk_aligned+0x38>
 8003234:	1a21      	subs	r1, r4, r0
 8003236:	4628      	mov	r0, r5
 8003238:	f000 fc9a 	bl	8003b70 <_sbrk_r>
 800323c:	3001      	adds	r0, #1
 800323e:	d101      	bne.n	8003244 <sbrk_aligned+0x38>
 8003240:	f04f 34ff 	mov.w	r4, #4294967295
 8003244:	4620      	mov	r0, r4
 8003246:	bd70      	pop	{r4, r5, r6, pc}
 8003248:	200002e0 	.word	0x200002e0

0800324c <_malloc_r>:
 800324c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003250:	1ccd      	adds	r5, r1, #3
 8003252:	f025 0503 	bic.w	r5, r5, #3
 8003256:	3508      	adds	r5, #8
 8003258:	2d0c      	cmp	r5, #12
 800325a:	bf38      	it	cc
 800325c:	250c      	movcc	r5, #12
 800325e:	2d00      	cmp	r5, #0
 8003260:	4607      	mov	r7, r0
 8003262:	db01      	blt.n	8003268 <_malloc_r+0x1c>
 8003264:	42a9      	cmp	r1, r5
 8003266:	d905      	bls.n	8003274 <_malloc_r+0x28>
 8003268:	230c      	movs	r3, #12
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	2600      	movs	r6, #0
 800326e:	4630      	mov	r0, r6
 8003270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003274:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003348 <_malloc_r+0xfc>
 8003278:	f000 f868 	bl	800334c <__malloc_lock>
 800327c:	f8d8 3000 	ldr.w	r3, [r8]
 8003280:	461c      	mov	r4, r3
 8003282:	bb5c      	cbnz	r4, 80032dc <_malloc_r+0x90>
 8003284:	4629      	mov	r1, r5
 8003286:	4638      	mov	r0, r7
 8003288:	f7ff ffc0 	bl	800320c <sbrk_aligned>
 800328c:	1c43      	adds	r3, r0, #1
 800328e:	4604      	mov	r4, r0
 8003290:	d155      	bne.n	800333e <_malloc_r+0xf2>
 8003292:	f8d8 4000 	ldr.w	r4, [r8]
 8003296:	4626      	mov	r6, r4
 8003298:	2e00      	cmp	r6, #0
 800329a:	d145      	bne.n	8003328 <_malloc_r+0xdc>
 800329c:	2c00      	cmp	r4, #0
 800329e:	d048      	beq.n	8003332 <_malloc_r+0xe6>
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	4631      	mov	r1, r6
 80032a4:	4638      	mov	r0, r7
 80032a6:	eb04 0903 	add.w	r9, r4, r3
 80032aa:	f000 fc61 	bl	8003b70 <_sbrk_r>
 80032ae:	4581      	cmp	r9, r0
 80032b0:	d13f      	bne.n	8003332 <_malloc_r+0xe6>
 80032b2:	6821      	ldr	r1, [r4, #0]
 80032b4:	1a6d      	subs	r5, r5, r1
 80032b6:	4629      	mov	r1, r5
 80032b8:	4638      	mov	r0, r7
 80032ba:	f7ff ffa7 	bl	800320c <sbrk_aligned>
 80032be:	3001      	adds	r0, #1
 80032c0:	d037      	beq.n	8003332 <_malloc_r+0xe6>
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	442b      	add	r3, r5
 80032c6:	6023      	str	r3, [r4, #0]
 80032c8:	f8d8 3000 	ldr.w	r3, [r8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d038      	beq.n	8003342 <_malloc_r+0xf6>
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	42a2      	cmp	r2, r4
 80032d4:	d12b      	bne.n	800332e <_malloc_r+0xe2>
 80032d6:	2200      	movs	r2, #0
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	e00f      	b.n	80032fc <_malloc_r+0xb0>
 80032dc:	6822      	ldr	r2, [r4, #0]
 80032de:	1b52      	subs	r2, r2, r5
 80032e0:	d41f      	bmi.n	8003322 <_malloc_r+0xd6>
 80032e2:	2a0b      	cmp	r2, #11
 80032e4:	d917      	bls.n	8003316 <_malloc_r+0xca>
 80032e6:	1961      	adds	r1, r4, r5
 80032e8:	42a3      	cmp	r3, r4
 80032ea:	6025      	str	r5, [r4, #0]
 80032ec:	bf18      	it	ne
 80032ee:	6059      	strne	r1, [r3, #4]
 80032f0:	6863      	ldr	r3, [r4, #4]
 80032f2:	bf08      	it	eq
 80032f4:	f8c8 1000 	streq.w	r1, [r8]
 80032f8:	5162      	str	r2, [r4, r5]
 80032fa:	604b      	str	r3, [r1, #4]
 80032fc:	4638      	mov	r0, r7
 80032fe:	f104 060b 	add.w	r6, r4, #11
 8003302:	f000 f829 	bl	8003358 <__malloc_unlock>
 8003306:	f026 0607 	bic.w	r6, r6, #7
 800330a:	1d23      	adds	r3, r4, #4
 800330c:	1af2      	subs	r2, r6, r3
 800330e:	d0ae      	beq.n	800326e <_malloc_r+0x22>
 8003310:	1b9b      	subs	r3, r3, r6
 8003312:	50a3      	str	r3, [r4, r2]
 8003314:	e7ab      	b.n	800326e <_malloc_r+0x22>
 8003316:	42a3      	cmp	r3, r4
 8003318:	6862      	ldr	r2, [r4, #4]
 800331a:	d1dd      	bne.n	80032d8 <_malloc_r+0x8c>
 800331c:	f8c8 2000 	str.w	r2, [r8]
 8003320:	e7ec      	b.n	80032fc <_malloc_r+0xb0>
 8003322:	4623      	mov	r3, r4
 8003324:	6864      	ldr	r4, [r4, #4]
 8003326:	e7ac      	b.n	8003282 <_malloc_r+0x36>
 8003328:	4634      	mov	r4, r6
 800332a:	6876      	ldr	r6, [r6, #4]
 800332c:	e7b4      	b.n	8003298 <_malloc_r+0x4c>
 800332e:	4613      	mov	r3, r2
 8003330:	e7cc      	b.n	80032cc <_malloc_r+0x80>
 8003332:	230c      	movs	r3, #12
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	4638      	mov	r0, r7
 8003338:	f000 f80e 	bl	8003358 <__malloc_unlock>
 800333c:	e797      	b.n	800326e <_malloc_r+0x22>
 800333e:	6025      	str	r5, [r4, #0]
 8003340:	e7dc      	b.n	80032fc <_malloc_r+0xb0>
 8003342:	605b      	str	r3, [r3, #4]
 8003344:	deff      	udf	#255	; 0xff
 8003346:	bf00      	nop
 8003348:	200002dc 	.word	0x200002dc

0800334c <__malloc_lock>:
 800334c:	4801      	ldr	r0, [pc, #4]	; (8003354 <__malloc_lock+0x8>)
 800334e:	f7ff bf0e 	b.w	800316e <__retarget_lock_acquire_recursive>
 8003352:	bf00      	nop
 8003354:	200002d8 	.word	0x200002d8

08003358 <__malloc_unlock>:
 8003358:	4801      	ldr	r0, [pc, #4]	; (8003360 <__malloc_unlock+0x8>)
 800335a:	f7ff bf09 	b.w	8003170 <__retarget_lock_release_recursive>
 800335e:	bf00      	nop
 8003360:	200002d8 	.word	0x200002d8

08003364 <__sfputc_r>:
 8003364:	6893      	ldr	r3, [r2, #8]
 8003366:	3b01      	subs	r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	b410      	push	{r4}
 800336c:	6093      	str	r3, [r2, #8]
 800336e:	da08      	bge.n	8003382 <__sfputc_r+0x1e>
 8003370:	6994      	ldr	r4, [r2, #24]
 8003372:	42a3      	cmp	r3, r4
 8003374:	db01      	blt.n	800337a <__sfputc_r+0x16>
 8003376:	290a      	cmp	r1, #10
 8003378:	d103      	bne.n	8003382 <__sfputc_r+0x1e>
 800337a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800337e:	f7ff bde8 	b.w	8002f52 <__swbuf_r>
 8003382:	6813      	ldr	r3, [r2, #0]
 8003384:	1c58      	adds	r0, r3, #1
 8003386:	6010      	str	r0, [r2, #0]
 8003388:	7019      	strb	r1, [r3, #0]
 800338a:	4608      	mov	r0, r1
 800338c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003390:	4770      	bx	lr

08003392 <__sfputs_r>:
 8003392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003394:	4606      	mov	r6, r0
 8003396:	460f      	mov	r7, r1
 8003398:	4614      	mov	r4, r2
 800339a:	18d5      	adds	r5, r2, r3
 800339c:	42ac      	cmp	r4, r5
 800339e:	d101      	bne.n	80033a4 <__sfputs_r+0x12>
 80033a0:	2000      	movs	r0, #0
 80033a2:	e007      	b.n	80033b4 <__sfputs_r+0x22>
 80033a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033a8:	463a      	mov	r2, r7
 80033aa:	4630      	mov	r0, r6
 80033ac:	f7ff ffda 	bl	8003364 <__sfputc_r>
 80033b0:	1c43      	adds	r3, r0, #1
 80033b2:	d1f3      	bne.n	800339c <__sfputs_r+0xa>
 80033b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080033b8 <_vfiprintf_r>:
 80033b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033bc:	460d      	mov	r5, r1
 80033be:	b09d      	sub	sp, #116	; 0x74
 80033c0:	4614      	mov	r4, r2
 80033c2:	4698      	mov	r8, r3
 80033c4:	4606      	mov	r6, r0
 80033c6:	b118      	cbz	r0, 80033d0 <_vfiprintf_r+0x18>
 80033c8:	6a03      	ldr	r3, [r0, #32]
 80033ca:	b90b      	cbnz	r3, 80033d0 <_vfiprintf_r+0x18>
 80033cc:	f7ff fcda 	bl	8002d84 <__sinit>
 80033d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033d2:	07d9      	lsls	r1, r3, #31
 80033d4:	d405      	bmi.n	80033e2 <_vfiprintf_r+0x2a>
 80033d6:	89ab      	ldrh	r3, [r5, #12]
 80033d8:	059a      	lsls	r2, r3, #22
 80033da:	d402      	bmi.n	80033e2 <_vfiprintf_r+0x2a>
 80033dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80033de:	f7ff fec6 	bl	800316e <__retarget_lock_acquire_recursive>
 80033e2:	89ab      	ldrh	r3, [r5, #12]
 80033e4:	071b      	lsls	r3, r3, #28
 80033e6:	d501      	bpl.n	80033ec <_vfiprintf_r+0x34>
 80033e8:	692b      	ldr	r3, [r5, #16]
 80033ea:	b99b      	cbnz	r3, 8003414 <_vfiprintf_r+0x5c>
 80033ec:	4629      	mov	r1, r5
 80033ee:	4630      	mov	r0, r6
 80033f0:	f7ff fdec 	bl	8002fcc <__swsetup_r>
 80033f4:	b170      	cbz	r0, 8003414 <_vfiprintf_r+0x5c>
 80033f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80033f8:	07dc      	lsls	r4, r3, #31
 80033fa:	d504      	bpl.n	8003406 <_vfiprintf_r+0x4e>
 80033fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003400:	b01d      	add	sp, #116	; 0x74
 8003402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003406:	89ab      	ldrh	r3, [r5, #12]
 8003408:	0598      	lsls	r0, r3, #22
 800340a:	d4f7      	bmi.n	80033fc <_vfiprintf_r+0x44>
 800340c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800340e:	f7ff feaf 	bl	8003170 <__retarget_lock_release_recursive>
 8003412:	e7f3      	b.n	80033fc <_vfiprintf_r+0x44>
 8003414:	2300      	movs	r3, #0
 8003416:	9309      	str	r3, [sp, #36]	; 0x24
 8003418:	2320      	movs	r3, #32
 800341a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800341e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003422:	2330      	movs	r3, #48	; 0x30
 8003424:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80035d8 <_vfiprintf_r+0x220>
 8003428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800342c:	f04f 0901 	mov.w	r9, #1
 8003430:	4623      	mov	r3, r4
 8003432:	469a      	mov	sl, r3
 8003434:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003438:	b10a      	cbz	r2, 800343e <_vfiprintf_r+0x86>
 800343a:	2a25      	cmp	r2, #37	; 0x25
 800343c:	d1f9      	bne.n	8003432 <_vfiprintf_r+0x7a>
 800343e:	ebba 0b04 	subs.w	fp, sl, r4
 8003442:	d00b      	beq.n	800345c <_vfiprintf_r+0xa4>
 8003444:	465b      	mov	r3, fp
 8003446:	4622      	mov	r2, r4
 8003448:	4629      	mov	r1, r5
 800344a:	4630      	mov	r0, r6
 800344c:	f7ff ffa1 	bl	8003392 <__sfputs_r>
 8003450:	3001      	adds	r0, #1
 8003452:	f000 80a9 	beq.w	80035a8 <_vfiprintf_r+0x1f0>
 8003456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003458:	445a      	add	r2, fp
 800345a:	9209      	str	r2, [sp, #36]	; 0x24
 800345c:	f89a 3000 	ldrb.w	r3, [sl]
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80a1 	beq.w	80035a8 <_vfiprintf_r+0x1f0>
 8003466:	2300      	movs	r3, #0
 8003468:	f04f 32ff 	mov.w	r2, #4294967295
 800346c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003470:	f10a 0a01 	add.w	sl, sl, #1
 8003474:	9304      	str	r3, [sp, #16]
 8003476:	9307      	str	r3, [sp, #28]
 8003478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800347c:	931a      	str	r3, [sp, #104]	; 0x68
 800347e:	4654      	mov	r4, sl
 8003480:	2205      	movs	r2, #5
 8003482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003486:	4854      	ldr	r0, [pc, #336]	; (80035d8 <_vfiprintf_r+0x220>)
 8003488:	f7fc feb2 	bl	80001f0 <memchr>
 800348c:	9a04      	ldr	r2, [sp, #16]
 800348e:	b9d8      	cbnz	r0, 80034c8 <_vfiprintf_r+0x110>
 8003490:	06d1      	lsls	r1, r2, #27
 8003492:	bf44      	itt	mi
 8003494:	2320      	movmi	r3, #32
 8003496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800349a:	0713      	lsls	r3, r2, #28
 800349c:	bf44      	itt	mi
 800349e:	232b      	movmi	r3, #43	; 0x2b
 80034a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034a4:	f89a 3000 	ldrb.w	r3, [sl]
 80034a8:	2b2a      	cmp	r3, #42	; 0x2a
 80034aa:	d015      	beq.n	80034d8 <_vfiprintf_r+0x120>
 80034ac:	9a07      	ldr	r2, [sp, #28]
 80034ae:	4654      	mov	r4, sl
 80034b0:	2000      	movs	r0, #0
 80034b2:	f04f 0c0a 	mov.w	ip, #10
 80034b6:	4621      	mov	r1, r4
 80034b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80034bc:	3b30      	subs	r3, #48	; 0x30
 80034be:	2b09      	cmp	r3, #9
 80034c0:	d94d      	bls.n	800355e <_vfiprintf_r+0x1a6>
 80034c2:	b1b0      	cbz	r0, 80034f2 <_vfiprintf_r+0x13a>
 80034c4:	9207      	str	r2, [sp, #28]
 80034c6:	e014      	b.n	80034f2 <_vfiprintf_r+0x13a>
 80034c8:	eba0 0308 	sub.w	r3, r0, r8
 80034cc:	fa09 f303 	lsl.w	r3, r9, r3
 80034d0:	4313      	orrs	r3, r2
 80034d2:	9304      	str	r3, [sp, #16]
 80034d4:	46a2      	mov	sl, r4
 80034d6:	e7d2      	b.n	800347e <_vfiprintf_r+0xc6>
 80034d8:	9b03      	ldr	r3, [sp, #12]
 80034da:	1d19      	adds	r1, r3, #4
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	9103      	str	r1, [sp, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bfbb      	ittet	lt
 80034e4:	425b      	neglt	r3, r3
 80034e6:	f042 0202 	orrlt.w	r2, r2, #2
 80034ea:	9307      	strge	r3, [sp, #28]
 80034ec:	9307      	strlt	r3, [sp, #28]
 80034ee:	bfb8      	it	lt
 80034f0:	9204      	strlt	r2, [sp, #16]
 80034f2:	7823      	ldrb	r3, [r4, #0]
 80034f4:	2b2e      	cmp	r3, #46	; 0x2e
 80034f6:	d10c      	bne.n	8003512 <_vfiprintf_r+0x15a>
 80034f8:	7863      	ldrb	r3, [r4, #1]
 80034fa:	2b2a      	cmp	r3, #42	; 0x2a
 80034fc:	d134      	bne.n	8003568 <_vfiprintf_r+0x1b0>
 80034fe:	9b03      	ldr	r3, [sp, #12]
 8003500:	1d1a      	adds	r2, r3, #4
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	9203      	str	r2, [sp, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	bfb8      	it	lt
 800350a:	f04f 33ff 	movlt.w	r3, #4294967295
 800350e:	3402      	adds	r4, #2
 8003510:	9305      	str	r3, [sp, #20]
 8003512:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80035e8 <_vfiprintf_r+0x230>
 8003516:	7821      	ldrb	r1, [r4, #0]
 8003518:	2203      	movs	r2, #3
 800351a:	4650      	mov	r0, sl
 800351c:	f7fc fe68 	bl	80001f0 <memchr>
 8003520:	b138      	cbz	r0, 8003532 <_vfiprintf_r+0x17a>
 8003522:	9b04      	ldr	r3, [sp, #16]
 8003524:	eba0 000a 	sub.w	r0, r0, sl
 8003528:	2240      	movs	r2, #64	; 0x40
 800352a:	4082      	lsls	r2, r0
 800352c:	4313      	orrs	r3, r2
 800352e:	3401      	adds	r4, #1
 8003530:	9304      	str	r3, [sp, #16]
 8003532:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003536:	4829      	ldr	r0, [pc, #164]	; (80035dc <_vfiprintf_r+0x224>)
 8003538:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800353c:	2206      	movs	r2, #6
 800353e:	f7fc fe57 	bl	80001f0 <memchr>
 8003542:	2800      	cmp	r0, #0
 8003544:	d03f      	beq.n	80035c6 <_vfiprintf_r+0x20e>
 8003546:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <_vfiprintf_r+0x228>)
 8003548:	bb1b      	cbnz	r3, 8003592 <_vfiprintf_r+0x1da>
 800354a:	9b03      	ldr	r3, [sp, #12]
 800354c:	3307      	adds	r3, #7
 800354e:	f023 0307 	bic.w	r3, r3, #7
 8003552:	3308      	adds	r3, #8
 8003554:	9303      	str	r3, [sp, #12]
 8003556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003558:	443b      	add	r3, r7
 800355a:	9309      	str	r3, [sp, #36]	; 0x24
 800355c:	e768      	b.n	8003430 <_vfiprintf_r+0x78>
 800355e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003562:	460c      	mov	r4, r1
 8003564:	2001      	movs	r0, #1
 8003566:	e7a6      	b.n	80034b6 <_vfiprintf_r+0xfe>
 8003568:	2300      	movs	r3, #0
 800356a:	3401      	adds	r4, #1
 800356c:	9305      	str	r3, [sp, #20]
 800356e:	4619      	mov	r1, r3
 8003570:	f04f 0c0a 	mov.w	ip, #10
 8003574:	4620      	mov	r0, r4
 8003576:	f810 2b01 	ldrb.w	r2, [r0], #1
 800357a:	3a30      	subs	r2, #48	; 0x30
 800357c:	2a09      	cmp	r2, #9
 800357e:	d903      	bls.n	8003588 <_vfiprintf_r+0x1d0>
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0c6      	beq.n	8003512 <_vfiprintf_r+0x15a>
 8003584:	9105      	str	r1, [sp, #20]
 8003586:	e7c4      	b.n	8003512 <_vfiprintf_r+0x15a>
 8003588:	fb0c 2101 	mla	r1, ip, r1, r2
 800358c:	4604      	mov	r4, r0
 800358e:	2301      	movs	r3, #1
 8003590:	e7f0      	b.n	8003574 <_vfiprintf_r+0x1bc>
 8003592:	ab03      	add	r3, sp, #12
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	462a      	mov	r2, r5
 8003598:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <_vfiprintf_r+0x22c>)
 800359a:	a904      	add	r1, sp, #16
 800359c:	4630      	mov	r0, r6
 800359e:	f3af 8000 	nop.w
 80035a2:	4607      	mov	r7, r0
 80035a4:	1c78      	adds	r0, r7, #1
 80035a6:	d1d6      	bne.n	8003556 <_vfiprintf_r+0x19e>
 80035a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035aa:	07d9      	lsls	r1, r3, #31
 80035ac:	d405      	bmi.n	80035ba <_vfiprintf_r+0x202>
 80035ae:	89ab      	ldrh	r3, [r5, #12]
 80035b0:	059a      	lsls	r2, r3, #22
 80035b2:	d402      	bmi.n	80035ba <_vfiprintf_r+0x202>
 80035b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035b6:	f7ff fddb 	bl	8003170 <__retarget_lock_release_recursive>
 80035ba:	89ab      	ldrh	r3, [r5, #12]
 80035bc:	065b      	lsls	r3, r3, #25
 80035be:	f53f af1d 	bmi.w	80033fc <_vfiprintf_r+0x44>
 80035c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80035c4:	e71c      	b.n	8003400 <_vfiprintf_r+0x48>
 80035c6:	ab03      	add	r3, sp, #12
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	462a      	mov	r2, r5
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <_vfiprintf_r+0x22c>)
 80035ce:	a904      	add	r1, sp, #16
 80035d0:	4630      	mov	r0, r6
 80035d2:	f000 f879 	bl	80036c8 <_printf_i>
 80035d6:	e7e4      	b.n	80035a2 <_vfiprintf_r+0x1ea>
 80035d8:	08003c26 	.word	0x08003c26
 80035dc:	08003c30 	.word	0x08003c30
 80035e0:	00000000 	.word	0x00000000
 80035e4:	08003393 	.word	0x08003393
 80035e8:	08003c2c 	.word	0x08003c2c

080035ec <_printf_common>:
 80035ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035f0:	4616      	mov	r6, r2
 80035f2:	4699      	mov	r9, r3
 80035f4:	688a      	ldr	r2, [r1, #8]
 80035f6:	690b      	ldr	r3, [r1, #16]
 80035f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035fc:	4293      	cmp	r3, r2
 80035fe:	bfb8      	it	lt
 8003600:	4613      	movlt	r3, r2
 8003602:	6033      	str	r3, [r6, #0]
 8003604:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003608:	4607      	mov	r7, r0
 800360a:	460c      	mov	r4, r1
 800360c:	b10a      	cbz	r2, 8003612 <_printf_common+0x26>
 800360e:	3301      	adds	r3, #1
 8003610:	6033      	str	r3, [r6, #0]
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	0699      	lsls	r1, r3, #26
 8003616:	bf42      	ittt	mi
 8003618:	6833      	ldrmi	r3, [r6, #0]
 800361a:	3302      	addmi	r3, #2
 800361c:	6033      	strmi	r3, [r6, #0]
 800361e:	6825      	ldr	r5, [r4, #0]
 8003620:	f015 0506 	ands.w	r5, r5, #6
 8003624:	d106      	bne.n	8003634 <_printf_common+0x48>
 8003626:	f104 0a19 	add.w	sl, r4, #25
 800362a:	68e3      	ldr	r3, [r4, #12]
 800362c:	6832      	ldr	r2, [r6, #0]
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	42ab      	cmp	r3, r5
 8003632:	dc26      	bgt.n	8003682 <_printf_common+0x96>
 8003634:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003638:	1e13      	subs	r3, r2, #0
 800363a:	6822      	ldr	r2, [r4, #0]
 800363c:	bf18      	it	ne
 800363e:	2301      	movne	r3, #1
 8003640:	0692      	lsls	r2, r2, #26
 8003642:	d42b      	bmi.n	800369c <_printf_common+0xb0>
 8003644:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003648:	4649      	mov	r1, r9
 800364a:	4638      	mov	r0, r7
 800364c:	47c0      	blx	r8
 800364e:	3001      	adds	r0, #1
 8003650:	d01e      	beq.n	8003690 <_printf_common+0xa4>
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	6922      	ldr	r2, [r4, #16]
 8003656:	f003 0306 	and.w	r3, r3, #6
 800365a:	2b04      	cmp	r3, #4
 800365c:	bf02      	ittt	eq
 800365e:	68e5      	ldreq	r5, [r4, #12]
 8003660:	6833      	ldreq	r3, [r6, #0]
 8003662:	1aed      	subeq	r5, r5, r3
 8003664:	68a3      	ldr	r3, [r4, #8]
 8003666:	bf0c      	ite	eq
 8003668:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800366c:	2500      	movne	r5, #0
 800366e:	4293      	cmp	r3, r2
 8003670:	bfc4      	itt	gt
 8003672:	1a9b      	subgt	r3, r3, r2
 8003674:	18ed      	addgt	r5, r5, r3
 8003676:	2600      	movs	r6, #0
 8003678:	341a      	adds	r4, #26
 800367a:	42b5      	cmp	r5, r6
 800367c:	d11a      	bne.n	80036b4 <_printf_common+0xc8>
 800367e:	2000      	movs	r0, #0
 8003680:	e008      	b.n	8003694 <_printf_common+0xa8>
 8003682:	2301      	movs	r3, #1
 8003684:	4652      	mov	r2, sl
 8003686:	4649      	mov	r1, r9
 8003688:	4638      	mov	r0, r7
 800368a:	47c0      	blx	r8
 800368c:	3001      	adds	r0, #1
 800368e:	d103      	bne.n	8003698 <_printf_common+0xac>
 8003690:	f04f 30ff 	mov.w	r0, #4294967295
 8003694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003698:	3501      	adds	r5, #1
 800369a:	e7c6      	b.n	800362a <_printf_common+0x3e>
 800369c:	18e1      	adds	r1, r4, r3
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	2030      	movs	r0, #48	; 0x30
 80036a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036a6:	4422      	add	r2, r4
 80036a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036b0:	3302      	adds	r3, #2
 80036b2:	e7c7      	b.n	8003644 <_printf_common+0x58>
 80036b4:	2301      	movs	r3, #1
 80036b6:	4622      	mov	r2, r4
 80036b8:	4649      	mov	r1, r9
 80036ba:	4638      	mov	r0, r7
 80036bc:	47c0      	blx	r8
 80036be:	3001      	adds	r0, #1
 80036c0:	d0e6      	beq.n	8003690 <_printf_common+0xa4>
 80036c2:	3601      	adds	r6, #1
 80036c4:	e7d9      	b.n	800367a <_printf_common+0x8e>
	...

080036c8 <_printf_i>:
 80036c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036cc:	7e0f      	ldrb	r7, [r1, #24]
 80036ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80036d0:	2f78      	cmp	r7, #120	; 0x78
 80036d2:	4691      	mov	r9, r2
 80036d4:	4680      	mov	r8, r0
 80036d6:	460c      	mov	r4, r1
 80036d8:	469a      	mov	sl, r3
 80036da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80036de:	d807      	bhi.n	80036f0 <_printf_i+0x28>
 80036e0:	2f62      	cmp	r7, #98	; 0x62
 80036e2:	d80a      	bhi.n	80036fa <_printf_i+0x32>
 80036e4:	2f00      	cmp	r7, #0
 80036e6:	f000 80d4 	beq.w	8003892 <_printf_i+0x1ca>
 80036ea:	2f58      	cmp	r7, #88	; 0x58
 80036ec:	f000 80c0 	beq.w	8003870 <_printf_i+0x1a8>
 80036f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80036f8:	e03a      	b.n	8003770 <_printf_i+0xa8>
 80036fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80036fe:	2b15      	cmp	r3, #21
 8003700:	d8f6      	bhi.n	80036f0 <_printf_i+0x28>
 8003702:	a101      	add	r1, pc, #4	; (adr r1, 8003708 <_printf_i+0x40>)
 8003704:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003708:	08003761 	.word	0x08003761
 800370c:	08003775 	.word	0x08003775
 8003710:	080036f1 	.word	0x080036f1
 8003714:	080036f1 	.word	0x080036f1
 8003718:	080036f1 	.word	0x080036f1
 800371c:	080036f1 	.word	0x080036f1
 8003720:	08003775 	.word	0x08003775
 8003724:	080036f1 	.word	0x080036f1
 8003728:	080036f1 	.word	0x080036f1
 800372c:	080036f1 	.word	0x080036f1
 8003730:	080036f1 	.word	0x080036f1
 8003734:	08003879 	.word	0x08003879
 8003738:	080037a1 	.word	0x080037a1
 800373c:	08003833 	.word	0x08003833
 8003740:	080036f1 	.word	0x080036f1
 8003744:	080036f1 	.word	0x080036f1
 8003748:	0800389b 	.word	0x0800389b
 800374c:	080036f1 	.word	0x080036f1
 8003750:	080037a1 	.word	0x080037a1
 8003754:	080036f1 	.word	0x080036f1
 8003758:	080036f1 	.word	0x080036f1
 800375c:	0800383b 	.word	0x0800383b
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	1d1a      	adds	r2, r3, #4
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	602a      	str	r2, [r5, #0]
 8003768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800376c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003770:	2301      	movs	r3, #1
 8003772:	e09f      	b.n	80038b4 <_printf_i+0x1ec>
 8003774:	6820      	ldr	r0, [r4, #0]
 8003776:	682b      	ldr	r3, [r5, #0]
 8003778:	0607      	lsls	r7, r0, #24
 800377a:	f103 0104 	add.w	r1, r3, #4
 800377e:	6029      	str	r1, [r5, #0]
 8003780:	d501      	bpl.n	8003786 <_printf_i+0xbe>
 8003782:	681e      	ldr	r6, [r3, #0]
 8003784:	e003      	b.n	800378e <_printf_i+0xc6>
 8003786:	0646      	lsls	r6, r0, #25
 8003788:	d5fb      	bpl.n	8003782 <_printf_i+0xba>
 800378a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800378e:	2e00      	cmp	r6, #0
 8003790:	da03      	bge.n	800379a <_printf_i+0xd2>
 8003792:	232d      	movs	r3, #45	; 0x2d
 8003794:	4276      	negs	r6, r6
 8003796:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800379a:	485a      	ldr	r0, [pc, #360]	; (8003904 <_printf_i+0x23c>)
 800379c:	230a      	movs	r3, #10
 800379e:	e012      	b.n	80037c6 <_printf_i+0xfe>
 80037a0:	682b      	ldr	r3, [r5, #0]
 80037a2:	6820      	ldr	r0, [r4, #0]
 80037a4:	1d19      	adds	r1, r3, #4
 80037a6:	6029      	str	r1, [r5, #0]
 80037a8:	0605      	lsls	r5, r0, #24
 80037aa:	d501      	bpl.n	80037b0 <_printf_i+0xe8>
 80037ac:	681e      	ldr	r6, [r3, #0]
 80037ae:	e002      	b.n	80037b6 <_printf_i+0xee>
 80037b0:	0641      	lsls	r1, r0, #25
 80037b2:	d5fb      	bpl.n	80037ac <_printf_i+0xe4>
 80037b4:	881e      	ldrh	r6, [r3, #0]
 80037b6:	4853      	ldr	r0, [pc, #332]	; (8003904 <_printf_i+0x23c>)
 80037b8:	2f6f      	cmp	r7, #111	; 0x6f
 80037ba:	bf0c      	ite	eq
 80037bc:	2308      	moveq	r3, #8
 80037be:	230a      	movne	r3, #10
 80037c0:	2100      	movs	r1, #0
 80037c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80037c6:	6865      	ldr	r5, [r4, #4]
 80037c8:	60a5      	str	r5, [r4, #8]
 80037ca:	2d00      	cmp	r5, #0
 80037cc:	bfa2      	ittt	ge
 80037ce:	6821      	ldrge	r1, [r4, #0]
 80037d0:	f021 0104 	bicge.w	r1, r1, #4
 80037d4:	6021      	strge	r1, [r4, #0]
 80037d6:	b90e      	cbnz	r6, 80037dc <_printf_i+0x114>
 80037d8:	2d00      	cmp	r5, #0
 80037da:	d04b      	beq.n	8003874 <_printf_i+0x1ac>
 80037dc:	4615      	mov	r5, r2
 80037de:	fbb6 f1f3 	udiv	r1, r6, r3
 80037e2:	fb03 6711 	mls	r7, r3, r1, r6
 80037e6:	5dc7      	ldrb	r7, [r0, r7]
 80037e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80037ec:	4637      	mov	r7, r6
 80037ee:	42bb      	cmp	r3, r7
 80037f0:	460e      	mov	r6, r1
 80037f2:	d9f4      	bls.n	80037de <_printf_i+0x116>
 80037f4:	2b08      	cmp	r3, #8
 80037f6:	d10b      	bne.n	8003810 <_printf_i+0x148>
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	07de      	lsls	r6, r3, #31
 80037fc:	d508      	bpl.n	8003810 <_printf_i+0x148>
 80037fe:	6923      	ldr	r3, [r4, #16]
 8003800:	6861      	ldr	r1, [r4, #4]
 8003802:	4299      	cmp	r1, r3
 8003804:	bfde      	ittt	le
 8003806:	2330      	movle	r3, #48	; 0x30
 8003808:	f805 3c01 	strble.w	r3, [r5, #-1]
 800380c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003810:	1b52      	subs	r2, r2, r5
 8003812:	6122      	str	r2, [r4, #16]
 8003814:	f8cd a000 	str.w	sl, [sp]
 8003818:	464b      	mov	r3, r9
 800381a:	aa03      	add	r2, sp, #12
 800381c:	4621      	mov	r1, r4
 800381e:	4640      	mov	r0, r8
 8003820:	f7ff fee4 	bl	80035ec <_printf_common>
 8003824:	3001      	adds	r0, #1
 8003826:	d14a      	bne.n	80038be <_printf_i+0x1f6>
 8003828:	f04f 30ff 	mov.w	r0, #4294967295
 800382c:	b004      	add	sp, #16
 800382e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	f043 0320 	orr.w	r3, r3, #32
 8003838:	6023      	str	r3, [r4, #0]
 800383a:	4833      	ldr	r0, [pc, #204]	; (8003908 <_printf_i+0x240>)
 800383c:	2778      	movs	r7, #120	; 0x78
 800383e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	6829      	ldr	r1, [r5, #0]
 8003846:	061f      	lsls	r7, r3, #24
 8003848:	f851 6b04 	ldr.w	r6, [r1], #4
 800384c:	d402      	bmi.n	8003854 <_printf_i+0x18c>
 800384e:	065f      	lsls	r7, r3, #25
 8003850:	bf48      	it	mi
 8003852:	b2b6      	uxthmi	r6, r6
 8003854:	07df      	lsls	r7, r3, #31
 8003856:	bf48      	it	mi
 8003858:	f043 0320 	orrmi.w	r3, r3, #32
 800385c:	6029      	str	r1, [r5, #0]
 800385e:	bf48      	it	mi
 8003860:	6023      	strmi	r3, [r4, #0]
 8003862:	b91e      	cbnz	r6, 800386c <_printf_i+0x1a4>
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	f023 0320 	bic.w	r3, r3, #32
 800386a:	6023      	str	r3, [r4, #0]
 800386c:	2310      	movs	r3, #16
 800386e:	e7a7      	b.n	80037c0 <_printf_i+0xf8>
 8003870:	4824      	ldr	r0, [pc, #144]	; (8003904 <_printf_i+0x23c>)
 8003872:	e7e4      	b.n	800383e <_printf_i+0x176>
 8003874:	4615      	mov	r5, r2
 8003876:	e7bd      	b.n	80037f4 <_printf_i+0x12c>
 8003878:	682b      	ldr	r3, [r5, #0]
 800387a:	6826      	ldr	r6, [r4, #0]
 800387c:	6961      	ldr	r1, [r4, #20]
 800387e:	1d18      	adds	r0, r3, #4
 8003880:	6028      	str	r0, [r5, #0]
 8003882:	0635      	lsls	r5, r6, #24
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	d501      	bpl.n	800388c <_printf_i+0x1c4>
 8003888:	6019      	str	r1, [r3, #0]
 800388a:	e002      	b.n	8003892 <_printf_i+0x1ca>
 800388c:	0670      	lsls	r0, r6, #25
 800388e:	d5fb      	bpl.n	8003888 <_printf_i+0x1c0>
 8003890:	8019      	strh	r1, [r3, #0]
 8003892:	2300      	movs	r3, #0
 8003894:	6123      	str	r3, [r4, #16]
 8003896:	4615      	mov	r5, r2
 8003898:	e7bc      	b.n	8003814 <_printf_i+0x14c>
 800389a:	682b      	ldr	r3, [r5, #0]
 800389c:	1d1a      	adds	r2, r3, #4
 800389e:	602a      	str	r2, [r5, #0]
 80038a0:	681d      	ldr	r5, [r3, #0]
 80038a2:	6862      	ldr	r2, [r4, #4]
 80038a4:	2100      	movs	r1, #0
 80038a6:	4628      	mov	r0, r5
 80038a8:	f7fc fca2 	bl	80001f0 <memchr>
 80038ac:	b108      	cbz	r0, 80038b2 <_printf_i+0x1ea>
 80038ae:	1b40      	subs	r0, r0, r5
 80038b0:	6060      	str	r0, [r4, #4]
 80038b2:	6863      	ldr	r3, [r4, #4]
 80038b4:	6123      	str	r3, [r4, #16]
 80038b6:	2300      	movs	r3, #0
 80038b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038bc:	e7aa      	b.n	8003814 <_printf_i+0x14c>
 80038be:	6923      	ldr	r3, [r4, #16]
 80038c0:	462a      	mov	r2, r5
 80038c2:	4649      	mov	r1, r9
 80038c4:	4640      	mov	r0, r8
 80038c6:	47d0      	blx	sl
 80038c8:	3001      	adds	r0, #1
 80038ca:	d0ad      	beq.n	8003828 <_printf_i+0x160>
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	079b      	lsls	r3, r3, #30
 80038d0:	d413      	bmi.n	80038fa <_printf_i+0x232>
 80038d2:	68e0      	ldr	r0, [r4, #12]
 80038d4:	9b03      	ldr	r3, [sp, #12]
 80038d6:	4298      	cmp	r0, r3
 80038d8:	bfb8      	it	lt
 80038da:	4618      	movlt	r0, r3
 80038dc:	e7a6      	b.n	800382c <_printf_i+0x164>
 80038de:	2301      	movs	r3, #1
 80038e0:	4632      	mov	r2, r6
 80038e2:	4649      	mov	r1, r9
 80038e4:	4640      	mov	r0, r8
 80038e6:	47d0      	blx	sl
 80038e8:	3001      	adds	r0, #1
 80038ea:	d09d      	beq.n	8003828 <_printf_i+0x160>
 80038ec:	3501      	adds	r5, #1
 80038ee:	68e3      	ldr	r3, [r4, #12]
 80038f0:	9903      	ldr	r1, [sp, #12]
 80038f2:	1a5b      	subs	r3, r3, r1
 80038f4:	42ab      	cmp	r3, r5
 80038f6:	dcf2      	bgt.n	80038de <_printf_i+0x216>
 80038f8:	e7eb      	b.n	80038d2 <_printf_i+0x20a>
 80038fa:	2500      	movs	r5, #0
 80038fc:	f104 0619 	add.w	r6, r4, #25
 8003900:	e7f5      	b.n	80038ee <_printf_i+0x226>
 8003902:	bf00      	nop
 8003904:	08003c37 	.word	0x08003c37
 8003908:	08003c48 	.word	0x08003c48

0800390c <__sflush_r>:
 800390c:	898a      	ldrh	r2, [r1, #12]
 800390e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003912:	4605      	mov	r5, r0
 8003914:	0710      	lsls	r0, r2, #28
 8003916:	460c      	mov	r4, r1
 8003918:	d458      	bmi.n	80039cc <__sflush_r+0xc0>
 800391a:	684b      	ldr	r3, [r1, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	dc05      	bgt.n	800392c <__sflush_r+0x20>
 8003920:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	dc02      	bgt.n	800392c <__sflush_r+0x20>
 8003926:	2000      	movs	r0, #0
 8003928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800392c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800392e:	2e00      	cmp	r6, #0
 8003930:	d0f9      	beq.n	8003926 <__sflush_r+0x1a>
 8003932:	2300      	movs	r3, #0
 8003934:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003938:	682f      	ldr	r7, [r5, #0]
 800393a:	6a21      	ldr	r1, [r4, #32]
 800393c:	602b      	str	r3, [r5, #0]
 800393e:	d032      	beq.n	80039a6 <__sflush_r+0x9a>
 8003940:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003942:	89a3      	ldrh	r3, [r4, #12]
 8003944:	075a      	lsls	r2, r3, #29
 8003946:	d505      	bpl.n	8003954 <__sflush_r+0x48>
 8003948:	6863      	ldr	r3, [r4, #4]
 800394a:	1ac0      	subs	r0, r0, r3
 800394c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800394e:	b10b      	cbz	r3, 8003954 <__sflush_r+0x48>
 8003950:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003952:	1ac0      	subs	r0, r0, r3
 8003954:	2300      	movs	r3, #0
 8003956:	4602      	mov	r2, r0
 8003958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800395a:	6a21      	ldr	r1, [r4, #32]
 800395c:	4628      	mov	r0, r5
 800395e:	47b0      	blx	r6
 8003960:	1c43      	adds	r3, r0, #1
 8003962:	89a3      	ldrh	r3, [r4, #12]
 8003964:	d106      	bne.n	8003974 <__sflush_r+0x68>
 8003966:	6829      	ldr	r1, [r5, #0]
 8003968:	291d      	cmp	r1, #29
 800396a:	d82b      	bhi.n	80039c4 <__sflush_r+0xb8>
 800396c:	4a29      	ldr	r2, [pc, #164]	; (8003a14 <__sflush_r+0x108>)
 800396e:	410a      	asrs	r2, r1
 8003970:	07d6      	lsls	r6, r2, #31
 8003972:	d427      	bmi.n	80039c4 <__sflush_r+0xb8>
 8003974:	2200      	movs	r2, #0
 8003976:	6062      	str	r2, [r4, #4]
 8003978:	04d9      	lsls	r1, r3, #19
 800397a:	6922      	ldr	r2, [r4, #16]
 800397c:	6022      	str	r2, [r4, #0]
 800397e:	d504      	bpl.n	800398a <__sflush_r+0x7e>
 8003980:	1c42      	adds	r2, r0, #1
 8003982:	d101      	bne.n	8003988 <__sflush_r+0x7c>
 8003984:	682b      	ldr	r3, [r5, #0]
 8003986:	b903      	cbnz	r3, 800398a <__sflush_r+0x7e>
 8003988:	6560      	str	r0, [r4, #84]	; 0x54
 800398a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800398c:	602f      	str	r7, [r5, #0]
 800398e:	2900      	cmp	r1, #0
 8003990:	d0c9      	beq.n	8003926 <__sflush_r+0x1a>
 8003992:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003996:	4299      	cmp	r1, r3
 8003998:	d002      	beq.n	80039a0 <__sflush_r+0x94>
 800399a:	4628      	mov	r0, r5
 800399c:	f7ff fbea 	bl	8003174 <_free_r>
 80039a0:	2000      	movs	r0, #0
 80039a2:	6360      	str	r0, [r4, #52]	; 0x34
 80039a4:	e7c0      	b.n	8003928 <__sflush_r+0x1c>
 80039a6:	2301      	movs	r3, #1
 80039a8:	4628      	mov	r0, r5
 80039aa:	47b0      	blx	r6
 80039ac:	1c41      	adds	r1, r0, #1
 80039ae:	d1c8      	bne.n	8003942 <__sflush_r+0x36>
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0c5      	beq.n	8003942 <__sflush_r+0x36>
 80039b6:	2b1d      	cmp	r3, #29
 80039b8:	d001      	beq.n	80039be <__sflush_r+0xb2>
 80039ba:	2b16      	cmp	r3, #22
 80039bc:	d101      	bne.n	80039c2 <__sflush_r+0xb6>
 80039be:	602f      	str	r7, [r5, #0]
 80039c0:	e7b1      	b.n	8003926 <__sflush_r+0x1a>
 80039c2:	89a3      	ldrh	r3, [r4, #12]
 80039c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039c8:	81a3      	strh	r3, [r4, #12]
 80039ca:	e7ad      	b.n	8003928 <__sflush_r+0x1c>
 80039cc:	690f      	ldr	r7, [r1, #16]
 80039ce:	2f00      	cmp	r7, #0
 80039d0:	d0a9      	beq.n	8003926 <__sflush_r+0x1a>
 80039d2:	0793      	lsls	r3, r2, #30
 80039d4:	680e      	ldr	r6, [r1, #0]
 80039d6:	bf08      	it	eq
 80039d8:	694b      	ldreq	r3, [r1, #20]
 80039da:	600f      	str	r7, [r1, #0]
 80039dc:	bf18      	it	ne
 80039de:	2300      	movne	r3, #0
 80039e0:	eba6 0807 	sub.w	r8, r6, r7
 80039e4:	608b      	str	r3, [r1, #8]
 80039e6:	f1b8 0f00 	cmp.w	r8, #0
 80039ea:	dd9c      	ble.n	8003926 <__sflush_r+0x1a>
 80039ec:	6a21      	ldr	r1, [r4, #32]
 80039ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80039f0:	4643      	mov	r3, r8
 80039f2:	463a      	mov	r2, r7
 80039f4:	4628      	mov	r0, r5
 80039f6:	47b0      	blx	r6
 80039f8:	2800      	cmp	r0, #0
 80039fa:	dc06      	bgt.n	8003a0a <__sflush_r+0xfe>
 80039fc:	89a3      	ldrh	r3, [r4, #12]
 80039fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a02:	81a3      	strh	r3, [r4, #12]
 8003a04:	f04f 30ff 	mov.w	r0, #4294967295
 8003a08:	e78e      	b.n	8003928 <__sflush_r+0x1c>
 8003a0a:	4407      	add	r7, r0
 8003a0c:	eba8 0800 	sub.w	r8, r8, r0
 8003a10:	e7e9      	b.n	80039e6 <__sflush_r+0xda>
 8003a12:	bf00      	nop
 8003a14:	dfbffffe 	.word	0xdfbffffe

08003a18 <_fflush_r>:
 8003a18:	b538      	push	{r3, r4, r5, lr}
 8003a1a:	690b      	ldr	r3, [r1, #16]
 8003a1c:	4605      	mov	r5, r0
 8003a1e:	460c      	mov	r4, r1
 8003a20:	b913      	cbnz	r3, 8003a28 <_fflush_r+0x10>
 8003a22:	2500      	movs	r5, #0
 8003a24:	4628      	mov	r0, r5
 8003a26:	bd38      	pop	{r3, r4, r5, pc}
 8003a28:	b118      	cbz	r0, 8003a32 <_fflush_r+0x1a>
 8003a2a:	6a03      	ldr	r3, [r0, #32]
 8003a2c:	b90b      	cbnz	r3, 8003a32 <_fflush_r+0x1a>
 8003a2e:	f7ff f9a9 	bl	8002d84 <__sinit>
 8003a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0f3      	beq.n	8003a22 <_fflush_r+0xa>
 8003a3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a3c:	07d0      	lsls	r0, r2, #31
 8003a3e:	d404      	bmi.n	8003a4a <_fflush_r+0x32>
 8003a40:	0599      	lsls	r1, r3, #22
 8003a42:	d402      	bmi.n	8003a4a <_fflush_r+0x32>
 8003a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a46:	f7ff fb92 	bl	800316e <__retarget_lock_acquire_recursive>
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	f7ff ff5d 	bl	800390c <__sflush_r>
 8003a52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003a54:	07da      	lsls	r2, r3, #31
 8003a56:	4605      	mov	r5, r0
 8003a58:	d4e4      	bmi.n	8003a24 <_fflush_r+0xc>
 8003a5a:	89a3      	ldrh	r3, [r4, #12]
 8003a5c:	059b      	lsls	r3, r3, #22
 8003a5e:	d4e1      	bmi.n	8003a24 <_fflush_r+0xc>
 8003a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003a62:	f7ff fb85 	bl	8003170 <__retarget_lock_release_recursive>
 8003a66:	e7dd      	b.n	8003a24 <_fflush_r+0xc>

08003a68 <__swhatbuf_r>:
 8003a68:	b570      	push	{r4, r5, r6, lr}
 8003a6a:	460c      	mov	r4, r1
 8003a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a70:	2900      	cmp	r1, #0
 8003a72:	b096      	sub	sp, #88	; 0x58
 8003a74:	4615      	mov	r5, r2
 8003a76:	461e      	mov	r6, r3
 8003a78:	da0d      	bge.n	8003a96 <__swhatbuf_r+0x2e>
 8003a7a:	89a3      	ldrh	r3, [r4, #12]
 8003a7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003a80:	f04f 0100 	mov.w	r1, #0
 8003a84:	bf0c      	ite	eq
 8003a86:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003a8a:	2340      	movne	r3, #64	; 0x40
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	6031      	str	r1, [r6, #0]
 8003a90:	602b      	str	r3, [r5, #0]
 8003a92:	b016      	add	sp, #88	; 0x58
 8003a94:	bd70      	pop	{r4, r5, r6, pc}
 8003a96:	466a      	mov	r2, sp
 8003a98:	f000 f848 	bl	8003b2c <_fstat_r>
 8003a9c:	2800      	cmp	r0, #0
 8003a9e:	dbec      	blt.n	8003a7a <__swhatbuf_r+0x12>
 8003aa0:	9901      	ldr	r1, [sp, #4]
 8003aa2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003aa6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003aaa:	4259      	negs	r1, r3
 8003aac:	4159      	adcs	r1, r3
 8003aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ab2:	e7eb      	b.n	8003a8c <__swhatbuf_r+0x24>

08003ab4 <__smakebuf_r>:
 8003ab4:	898b      	ldrh	r3, [r1, #12]
 8003ab6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003ab8:	079d      	lsls	r5, r3, #30
 8003aba:	4606      	mov	r6, r0
 8003abc:	460c      	mov	r4, r1
 8003abe:	d507      	bpl.n	8003ad0 <__smakebuf_r+0x1c>
 8003ac0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003ac4:	6023      	str	r3, [r4, #0]
 8003ac6:	6123      	str	r3, [r4, #16]
 8003ac8:	2301      	movs	r3, #1
 8003aca:	6163      	str	r3, [r4, #20]
 8003acc:	b002      	add	sp, #8
 8003ace:	bd70      	pop	{r4, r5, r6, pc}
 8003ad0:	ab01      	add	r3, sp, #4
 8003ad2:	466a      	mov	r2, sp
 8003ad4:	f7ff ffc8 	bl	8003a68 <__swhatbuf_r>
 8003ad8:	9900      	ldr	r1, [sp, #0]
 8003ada:	4605      	mov	r5, r0
 8003adc:	4630      	mov	r0, r6
 8003ade:	f7ff fbb5 	bl	800324c <_malloc_r>
 8003ae2:	b948      	cbnz	r0, 8003af8 <__smakebuf_r+0x44>
 8003ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ae8:	059a      	lsls	r2, r3, #22
 8003aea:	d4ef      	bmi.n	8003acc <__smakebuf_r+0x18>
 8003aec:	f023 0303 	bic.w	r3, r3, #3
 8003af0:	f043 0302 	orr.w	r3, r3, #2
 8003af4:	81a3      	strh	r3, [r4, #12]
 8003af6:	e7e3      	b.n	8003ac0 <__smakebuf_r+0xc>
 8003af8:	89a3      	ldrh	r3, [r4, #12]
 8003afa:	6020      	str	r0, [r4, #0]
 8003afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b00:	81a3      	strh	r3, [r4, #12]
 8003b02:	9b00      	ldr	r3, [sp, #0]
 8003b04:	6163      	str	r3, [r4, #20]
 8003b06:	9b01      	ldr	r3, [sp, #4]
 8003b08:	6120      	str	r0, [r4, #16]
 8003b0a:	b15b      	cbz	r3, 8003b24 <__smakebuf_r+0x70>
 8003b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b10:	4630      	mov	r0, r6
 8003b12:	f000 f81d 	bl	8003b50 <_isatty_r>
 8003b16:	b128      	cbz	r0, 8003b24 <__smakebuf_r+0x70>
 8003b18:	89a3      	ldrh	r3, [r4, #12]
 8003b1a:	f023 0303 	bic.w	r3, r3, #3
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	81a3      	strh	r3, [r4, #12]
 8003b24:	89a3      	ldrh	r3, [r4, #12]
 8003b26:	431d      	orrs	r5, r3
 8003b28:	81a5      	strh	r5, [r4, #12]
 8003b2a:	e7cf      	b.n	8003acc <__smakebuf_r+0x18>

08003b2c <_fstat_r>:
 8003b2c:	b538      	push	{r3, r4, r5, lr}
 8003b2e:	4d07      	ldr	r5, [pc, #28]	; (8003b4c <_fstat_r+0x20>)
 8003b30:	2300      	movs	r3, #0
 8003b32:	4604      	mov	r4, r0
 8003b34:	4608      	mov	r0, r1
 8003b36:	4611      	mov	r1, r2
 8003b38:	602b      	str	r3, [r5, #0]
 8003b3a:	f7fe ff14 	bl	8002966 <_fstat>
 8003b3e:	1c43      	adds	r3, r0, #1
 8003b40:	d102      	bne.n	8003b48 <_fstat_r+0x1c>
 8003b42:	682b      	ldr	r3, [r5, #0]
 8003b44:	b103      	cbz	r3, 8003b48 <_fstat_r+0x1c>
 8003b46:	6023      	str	r3, [r4, #0]
 8003b48:	bd38      	pop	{r3, r4, r5, pc}
 8003b4a:	bf00      	nop
 8003b4c:	200002d4 	.word	0x200002d4

08003b50 <_isatty_r>:
 8003b50:	b538      	push	{r3, r4, r5, lr}
 8003b52:	4d06      	ldr	r5, [pc, #24]	; (8003b6c <_isatty_r+0x1c>)
 8003b54:	2300      	movs	r3, #0
 8003b56:	4604      	mov	r4, r0
 8003b58:	4608      	mov	r0, r1
 8003b5a:	602b      	str	r3, [r5, #0]
 8003b5c:	f7ff f86a 	bl	8002c34 <_isatty>
 8003b60:	1c43      	adds	r3, r0, #1
 8003b62:	d102      	bne.n	8003b6a <_isatty_r+0x1a>
 8003b64:	682b      	ldr	r3, [r5, #0]
 8003b66:	b103      	cbz	r3, 8003b6a <_isatty_r+0x1a>
 8003b68:	6023      	str	r3, [r4, #0]
 8003b6a:	bd38      	pop	{r3, r4, r5, pc}
 8003b6c:	200002d4 	.word	0x200002d4

08003b70 <_sbrk_r>:
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	4d06      	ldr	r5, [pc, #24]	; (8003b8c <_sbrk_r+0x1c>)
 8003b74:	2300      	movs	r3, #0
 8003b76:	4604      	mov	r4, r0
 8003b78:	4608      	mov	r0, r1
 8003b7a:	602b      	str	r3, [r5, #0]
 8003b7c:	f7fd f83c 	bl	8000bf8 <_sbrk>
 8003b80:	1c43      	adds	r3, r0, #1
 8003b82:	d102      	bne.n	8003b8a <_sbrk_r+0x1a>
 8003b84:	682b      	ldr	r3, [r5, #0]
 8003b86:	b103      	cbz	r3, 8003b8a <_sbrk_r+0x1a>
 8003b88:	6023      	str	r3, [r4, #0]
 8003b8a:	bd38      	pop	{r3, r4, r5, pc}
 8003b8c:	200002d4 	.word	0x200002d4

08003b90 <_init>:
 8003b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b92:	bf00      	nop
 8003b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b96:	bc08      	pop	{r3}
 8003b98:	469e      	mov	lr, r3
 8003b9a:	4770      	bx	lr

08003b9c <_fini>:
 8003b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9e:	bf00      	nop
 8003ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba2:	bc08      	pop	{r3}
 8003ba4:	469e      	mov	lr, r3
 8003ba6:	4770      	bx	lr
