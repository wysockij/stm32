
lab_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002788  08002788  00012788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002830  08002830  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08002830  08002830  00012830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002838  08002838  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002838  08002838  00012838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800283c  0800283c  0001283c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000078  080028b8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  080028b8  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003ac4  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f41  00000000  00000000  00023b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000410  00000000  00000000  00024ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000378  00000000  00000000  00024ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014c42  00000000  00000000  00025238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004f19  00000000  00000000  00039e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081388  00000000  00000000  0003ed93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c011b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001730  00000000  00000000  000c016c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002770 	.word	0x08002770

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	08002770 	.word	0x08002770

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b590      	push	{r4, r7, lr}
 80004ee:	b089      	sub	sp, #36	; 0x24
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f000 fbbb 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f929 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 f991 	bl	8000820 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  	  initialise_monitor_handles();
 80004fe:	f001 fd63 	bl	8001fc8 <initialise_monitor_handles>

  	GPIO_TypeDef* ledy_port[] = {blue_GPIO_Port,red_GPIO_Port,orange_GPIO_Port,green_GPIO_Port};
 8000502:	4b8e      	ldr	r3, [pc, #568]	; (800073c <main+0x250>)
 8000504:	f107 040c 	add.w	r4, r7, #12
 8000508:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800050a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  	uint16_t ledy_pin[] = {blue_Pin,red_Pin,orange_Pin,green_Pin};
 800050e:	4a8c      	ldr	r2, [pc, #560]	; (8000740 <main+0x254>)
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000516:	e883 0003 	stmia.w	r3, {r0, r1}
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  switch(count){
 800051a:	4b8a      	ldr	r3, [pc, #552]	; (8000744 <main+0x258>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b0f      	cmp	r3, #15
 8000520:	f200 80ef 	bhi.w	8000702 <main+0x216>
 8000524:	a201      	add	r2, pc, #4	; (adr r2, 800052c <main+0x40>)
 8000526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052a:	bf00      	nop
 800052c:	0800056d 	.word	0x0800056d
 8000530:	080005a1 	.word	0x080005a1
 8000534:	080005af 	.word	0x080005af
 8000538:	080005c9 	.word	0x080005c9
 800053c:	080005d7 	.word	0x080005d7
 8000540:	080005fd 	.word	0x080005fd
 8000544:	08000617 	.word	0x08000617
 8000548:	08000631 	.word	0x08000631
 800054c:	0800063f 	.word	0x0800063f
 8000550:	08000671 	.word	0x08000671
 8000554:	0800067f 	.word	0x0800067f
 8000558:	08000699 	.word	0x08000699
 800055c:	080006a7 	.word	0x080006a7
 8000560:	080006cd 	.word	0x080006cd
 8000564:	080006db 	.word	0x080006db
 8000568:	080006f5 	.word	0x080006f5
	  	  case 0:
	  		  for(int i=0; i<4; i++){
 800056c:	2300      	movs	r3, #0
 800056e:	61fb      	str	r3, [r7, #28]
 8000570:	e012      	b.n	8000598 <main+0xac>
	  			  HAL_GPIO_WritePin(ledy_port[i], ledy_pin[i], GPIO_PIN_RESET);
 8000572:	69fb      	ldr	r3, [r7, #28]
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	3320      	adds	r3, #32
 8000578:	443b      	add	r3, r7
 800057a:	f853 0c14 	ldr.w	r0, [r3, #-20]
 800057e:	69fb      	ldr	r3, [r7, #28]
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	3320      	adds	r3, #32
 8000584:	443b      	add	r3, r7
 8000586:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 800058a:	2200      	movs	r2, #0
 800058c:	4619      	mov	r1, r3
 800058e:	f000 fe85 	bl	800129c <HAL_GPIO_WritePin>
	  		  for(int i=0; i<4; i++){
 8000592:	69fb      	ldr	r3, [r7, #28]
 8000594:	3301      	adds	r3, #1
 8000596:	61fb      	str	r3, [r7, #28]
 8000598:	69fb      	ldr	r3, [r7, #28]
 800059a:	2b03      	cmp	r3, #3
 800059c:	dde9      	ble.n	8000572 <main+0x86>
	  		  }
	  		  break;
 800059e:	e0b0      	b.n	8000702 <main+0x216>
	  	  case 1:
	  		HAL_GPIO_WritePin(ledy_port[0], ledy_pin[0], GPIO_PIN_SET);
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	88b9      	ldrh	r1, [r7, #4]
 80005a4:	2201      	movs	r2, #1
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fe78 	bl	800129c <HAL_GPIO_WritePin>
	  		break;
 80005ac:	e0a9      	b.n	8000702 <main+0x216>
	  	  case 2:
	  		HAL_GPIO_WritePin(ledy_port[0], ledy_pin[0], GPIO_PIN_RESET);
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	88b9      	ldrh	r1, [r7, #4]
 80005b2:	2200      	movs	r2, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fe71 	bl	800129c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ledy_port[1], ledy_pin[1], GPIO_PIN_SET);
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	88f9      	ldrh	r1, [r7, #6]
 80005be:	2201      	movs	r2, #1
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fe6b 	bl	800129c <HAL_GPIO_WritePin>
	  		break;
 80005c6:	e09c      	b.n	8000702 <main+0x216>
	  	  case 3:
	  		HAL_GPIO_WritePin(ledy_port[0], ledy_pin[0], GPIO_PIN_SET);
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	88b9      	ldrh	r1, [r7, #4]
 80005cc:	2201      	movs	r2, #1
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fe64 	bl	800129c <HAL_GPIO_WritePin>
	  		break;
 80005d4:	e095      	b.n	8000702 <main+0x216>
	  	  case 4:
	  		HAL_GPIO_WritePin(ledy_port[0], ledy_pin[0], GPIO_PIN_RESET);
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	88b9      	ldrh	r1, [r7, #4]
 80005da:	2200      	movs	r2, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 fe5d 	bl	800129c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ledy_port[1], ledy_pin[1], GPIO_PIN_RESET);
 80005e2:	693b      	ldr	r3, [r7, #16]
 80005e4:	88f9      	ldrh	r1, [r7, #6]
 80005e6:	2200      	movs	r2, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fe57 	bl	800129c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ledy_port[2], ledy_pin[2], GPIO_PIN_SET);
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	8939      	ldrh	r1, [r7, #8]
 80005f2:	2201      	movs	r2, #1
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fe51 	bl	800129c <HAL_GPIO_WritePin>
	  		break;
 80005fa:	e082      	b.n	8000702 <main+0x216>
	  	case 5:
	  		HAL_GPIO_WritePin(ledy_port[0], ledy_pin[0], GPIO_PIN_SET);
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	88b9      	ldrh	r1, [r7, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	4618      	mov	r0, r3
 8000604:	f000 fe4a 	bl	800129c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ledy_port[2], ledy_pin[2], GPIO_PIN_SET);
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	8939      	ldrh	r1, [r7, #8]
 800060c:	2201      	movs	r2, #1
 800060e:	4618      	mov	r0, r3
 8000610:	f000 fe44 	bl	800129c <HAL_GPIO_WritePin>
	  		break;
 8000614:	e075      	b.n	8000702 <main+0x216>
	  	case 6:
	  		HAL_GPIO_WritePin(ledy_port[0], ledy_pin[0], GPIO_PIN_RESET);
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	88b9      	ldrh	r1, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f000 fe3d 	bl	800129c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ledy_port[1], ledy_pin[1], GPIO_PIN_SET);
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	88f9      	ldrh	r1, [r7, #6]
 8000626:	2201      	movs	r2, #1
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fe37 	bl	800129c <HAL_GPIO_WritePin>
	  		break;
 800062e:	e068      	b.n	8000702 <main+0x216>
	  	case 7:
	  		HAL_GPIO_WritePin(ledy_port[0], ledy_pin[0], GPIO_PIN_SET);
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	88b9      	ldrh	r1, [r7, #4]
 8000634:	2201      	movs	r2, #1
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fe30 	bl	800129c <HAL_GPIO_WritePin>
	  		break;
 800063c:	e061      	b.n	8000702 <main+0x216>
	  	case 8:
	  		HAL_GPIO_WritePin(ledy_port[0], ledy_pin[0], GPIO_PIN_RESET);
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	88b9      	ldrh	r1, [r7, #4]
 8000642:	2200      	movs	r2, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fe29 	bl	800129c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ledy_port[1], ledy_pin[1], GPIO_PIN_RESET);
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	88f9      	ldrh	r1, [r7, #6]
 800064e:	2200      	movs	r2, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fe23 	bl	800129c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ledy_port[2], ledy_pin[2], GPIO_PIN_RESET);
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	8939      	ldrh	r1, [r7, #8]
 800065a:	2200      	movs	r2, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fe1d 	bl	800129c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ledy_port[3], ledy_pin[3], GPIO_PIN_SET);
 8000662:	69bb      	ldr	r3, [r7, #24]
 8000664:	8979      	ldrh	r1, [r7, #10]
 8000666:	2201      	movs	r2, #1
 8000668:	4618      	mov	r0, r3
 800066a:	f000 fe17 	bl	800129c <HAL_GPIO_WritePin>
	  		break;
 800066e:	e048      	b.n	8000702 <main+0x216>
	  	case 9:
	  		HAL_GPIO_WritePin(ledy_port[0], ledy_pin[0], GPIO_PIN_SET);
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	88b9      	ldrh	r1, [r7, #4]
 8000674:	2201      	movs	r2, #1
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fe10 	bl	800129c <HAL_GPIO_WritePin>
	  		break;
 800067c:	e041      	b.n	8000702 <main+0x216>
	  	case 10:
	  		HAL_GPIO_WritePin(ledy_port[0], ledy_pin[0], GPIO_PIN_RESET);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	88b9      	ldrh	r1, [r7, #4]
 8000682:	2200      	movs	r2, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fe09 	bl	800129c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ledy_port[1], ledy_pin[1], GPIO_PIN_SET);
 800068a:	693b      	ldr	r3, [r7, #16]
 800068c:	88f9      	ldrh	r1, [r7, #6]
 800068e:	2201      	movs	r2, #1
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fe03 	bl	800129c <HAL_GPIO_WritePin>
	  		break;
 8000696:	e034      	b.n	8000702 <main+0x216>
	  	case 11:
	  		HAL_GPIO_WritePin(ledy_port[0], ledy_pin[0], GPIO_PIN_SET);
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	88b9      	ldrh	r1, [r7, #4]
 800069c:	2201      	movs	r2, #1
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fdfc 	bl	800129c <HAL_GPIO_WritePin>
	  		break;
 80006a4:	e02d      	b.n	8000702 <main+0x216>
	  	case 12:
	  		HAL_GPIO_WritePin(ledy_port[0], ledy_pin[0], GPIO_PIN_RESET);
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	88b9      	ldrh	r1, [r7, #4]
 80006aa:	2200      	movs	r2, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fdf5 	bl	800129c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ledy_port[1], ledy_pin[1], GPIO_PIN_RESET);
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	88f9      	ldrh	r1, [r7, #6]
 80006b6:	2200      	movs	r2, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fdef 	bl	800129c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ledy_port[2], ledy_pin[2], GPIO_PIN_SET);
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	8939      	ldrh	r1, [r7, #8]
 80006c2:	2201      	movs	r2, #1
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fde9 	bl	800129c <HAL_GPIO_WritePin>
	  		break;
 80006ca:	e01a      	b.n	8000702 <main+0x216>
	  	case 13:
	  		HAL_GPIO_WritePin(ledy_port[0], ledy_pin[0], GPIO_PIN_SET);
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	88b9      	ldrh	r1, [r7, #4]
 80006d0:	2201      	movs	r2, #1
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fde2 	bl	800129c <HAL_GPIO_WritePin>
	  		break;
 80006d8:	e013      	b.n	8000702 <main+0x216>
	  	case 14:
	  		HAL_GPIO_WritePin(ledy_port[0], ledy_pin[0], GPIO_PIN_RESET);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	88b9      	ldrh	r1, [r7, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fddb 	bl	800129c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(ledy_port[1], ledy_pin[1], GPIO_PIN_SET);
 80006e6:	693b      	ldr	r3, [r7, #16]
 80006e8:	88f9      	ldrh	r1, [r7, #6]
 80006ea:	2201      	movs	r2, #1
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fdd5 	bl	800129c <HAL_GPIO_WritePin>
	  		break;
 80006f2:	e006      	b.n	8000702 <main+0x216>
	  	case 15:
	  		HAL_GPIO_WritePin(ledy_port[0], ledy_pin[0], GPIO_PIN_SET);
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	88b9      	ldrh	r1, [r7, #4]
 80006f8:	2201      	movs	r2, #1
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fdce 	bl	800129c <HAL_GPIO_WritePin>
	  		break;
 8000700:	bf00      	nop
	  }

	  if (GPIO_PIN_SET == HAL_GPIO_ReadPin(button_GPIO_Port, button_Pin)){
 8000702:	2101      	movs	r1, #1
 8000704:	4810      	ldr	r0, [pc, #64]	; (8000748 <main+0x25c>)
 8000706:	f000 fdb1 	bl	800126c <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b01      	cmp	r3, #1
 800070e:	d102      	bne.n	8000716 <main+0x22a>
	  		  count=0;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <main+0x258>)
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
	  }
	  HAL_Delay(1000);
 8000716:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800071a:	f000 fb19 	bl	8000d50 <HAL_Delay>
	  //zad3
	  //printf("test: %d\n",count);
	  count++;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <main+0x258>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	3301      	adds	r3, #1
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <main+0x258>)
 8000726:	6013      	str	r3, [r2, #0]
	  if(count > 15){
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <main+0x258>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2b0f      	cmp	r3, #15
 800072e:	f77f aef4 	ble.w	800051a <main+0x2e>
		  count = 0;
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <main+0x258>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
	  switch(count){
 8000738:	e6ef      	b.n	800051a <main+0x2e>
 800073a:	bf00      	nop
 800073c:	08002788 	.word	0x08002788
 8000740:	08002798 	.word	0x08002798
 8000744:	20000094 	.word	0x20000094
 8000748:	40020000 	.word	0x40020000

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	; 0x50
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0320 	add.w	r3, r7, #32
 8000756:	2230      	movs	r2, #48	; 0x30
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f001 fdb7 	bl	80022ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	4b28      	ldr	r3, [pc, #160]	; (8000818 <SystemClock_Config+0xcc>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	4a27      	ldr	r2, [pc, #156]	; (8000818 <SystemClock_Config+0xcc>)
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077e:	6413      	str	r3, [r2, #64]	; 0x40
 8000780:	4b25      	ldr	r3, [pc, #148]	; (8000818 <SystemClock_Config+0xcc>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078c:	2300      	movs	r3, #0
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <SystemClock_Config+0xd0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a21      	ldr	r2, [pc, #132]	; (800081c <SystemClock_Config+0xd0>)
 8000796:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800079a:	6013      	str	r3, [r2, #0]
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <SystemClock_Config+0xd0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a8:	2302      	movs	r3, #2
 80007aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b0:	2310      	movs	r3, #16
 80007b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b4:	2302      	movs	r3, #2
 80007b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b8:	2300      	movs	r3, #0
 80007ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007bc:	2308      	movs	r3, #8
 80007be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007c0:	23c0      	movs	r3, #192	; 0xc0
 80007c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007c4:	2304      	movs	r3, #4
 80007c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80007c8:	2308      	movs	r3, #8
 80007ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007cc:	f107 0320 	add.w	r3, r7, #32
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 fd7d 	bl	80012d0 <HAL_RCC_OscConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007dc:	f000 f97c 	bl	8000ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e0:	230f      	movs	r3, #15
 80007e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e4:	2302      	movs	r3, #2
 80007e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2103      	movs	r1, #3
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 ffde 	bl	80017c0 <HAL_RCC_ClockConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800080a:	f000 f965 	bl	8000ad8 <Error_Handler>
  }
}
 800080e:	bf00      	nop
 8000810:	3750      	adds	r7, #80	; 0x50
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000

08000820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	4ba1      	ldr	r3, [pc, #644]	; (8000ac0 <MX_GPIO_Init+0x2a0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4aa0      	ldr	r2, [pc, #640]	; (8000ac0 <MX_GPIO_Init+0x2a0>)
 8000840:	f043 0310 	orr.w	r3, r3, #16
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b9e      	ldr	r3, [pc, #632]	; (8000ac0 <MX_GPIO_Init+0x2a0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0310 	and.w	r3, r3, #16
 800084e:	61bb      	str	r3, [r7, #24]
 8000850:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	4b9a      	ldr	r3, [pc, #616]	; (8000ac0 <MX_GPIO_Init+0x2a0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a99      	ldr	r2, [pc, #612]	; (8000ac0 <MX_GPIO_Init+0x2a0>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b97      	ldr	r3, [pc, #604]	; (8000ac0 <MX_GPIO_Init+0x2a0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b93      	ldr	r3, [pc, #588]	; (8000ac0 <MX_GPIO_Init+0x2a0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a92      	ldr	r2, [pc, #584]	; (8000ac0 <MX_GPIO_Init+0x2a0>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b90      	ldr	r3, [pc, #576]	; (8000ac0 <MX_GPIO_Init+0x2a0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b8c      	ldr	r3, [pc, #560]	; (8000ac0 <MX_GPIO_Init+0x2a0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a8b      	ldr	r2, [pc, #556]	; (8000ac0 <MX_GPIO_Init+0x2a0>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b89      	ldr	r3, [pc, #548]	; (8000ac0 <MX_GPIO_Init+0x2a0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b85      	ldr	r3, [pc, #532]	; (8000ac0 <MX_GPIO_Init+0x2a0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a84      	ldr	r2, [pc, #528]	; (8000ac0 <MX_GPIO_Init+0x2a0>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b82      	ldr	r3, [pc, #520]	; (8000ac0 <MX_GPIO_Init+0x2a0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b7e      	ldr	r3, [pc, #504]	; (8000ac0 <MX_GPIO_Init+0x2a0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a7d      	ldr	r2, [pc, #500]	; (8000ac0 <MX_GPIO_Init+0x2a0>)
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b7b      	ldr	r3, [pc, #492]	; (8000ac0 <MX_GPIO_Init+0x2a0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0308 	and.w	r3, r3, #8
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2108      	movs	r1, #8
 80008e2:	4878      	ldr	r0, [pc, #480]	; (8000ac4 <MX_GPIO_Init+0x2a4>)
 80008e4:	f000 fcda 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2101      	movs	r1, #1
 80008ec:	4876      	ldr	r0, [pc, #472]	; (8000ac8 <MX_GPIO_Init+0x2a8>)
 80008ee:	f000 fcd5 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, green_Pin|orange_Pin|red_Pin|blue_Pin
 80008f2:	2200      	movs	r2, #0
 80008f4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008f8:	4874      	ldr	r0, [pc, #464]	; (8000acc <MX_GPIO_Init+0x2ac>)
 80008fa:	f000 fccf 	bl	800129c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008fe:	2304      	movs	r3, #4
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	486c      	ldr	r0, [pc, #432]	; (8000ac4 <MX_GPIO_Init+0x2a4>)
 8000912:	f000 fb27 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000916:	2308      	movs	r3, #8
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4865      	ldr	r0, [pc, #404]	; (8000ac4 <MX_GPIO_Init+0x2a4>)
 800092e:	f000 fb19 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000932:	2332      	movs	r3, #50	; 0x32
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000936:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	4619      	mov	r1, r3
 8000946:	485f      	ldr	r0, [pc, #380]	; (8000ac4 <MX_GPIO_Init+0x2a4>)
 8000948:	f000 fb0c 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800094c:	2301      	movs	r3, #1
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4859      	ldr	r0, [pc, #356]	; (8000ac8 <MX_GPIO_Init+0x2a8>)
 8000964:	f000 fafe 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000968:	2308      	movs	r3, #8
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000978:	2305      	movs	r3, #5
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4851      	ldr	r0, [pc, #324]	; (8000ac8 <MX_GPIO_Init+0x2a8>)
 8000984:	f000 faee 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000988:	2301      	movs	r3, #1
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	484d      	ldr	r0, [pc, #308]	; (8000ad0 <MX_GPIO_Init+0x2b0>)
 800099c:	f000 fae2 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009a0:	2310      	movs	r3, #16
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009b0:	2306      	movs	r3, #6
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4845      	ldr	r0, [pc, #276]	; (8000ad0 <MX_GPIO_Init+0x2b0>)
 80009bc:	f000 fad2 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80009c0:	23e0      	movs	r3, #224	; 0xe0
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009d0:	2305      	movs	r3, #5
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	483d      	ldr	r0, [pc, #244]	; (8000ad0 <MX_GPIO_Init+0x2b0>)
 80009dc:	f000 fac2 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80009e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f2:	2305      	movs	r3, #5
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4835      	ldr	r0, [pc, #212]	; (8000ad4 <MX_GPIO_Init+0x2b4>)
 80009fe:	f000 fab1 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : green_Pin orange_Pin red_Pin blue_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = green_Pin|orange_Pin|red_Pin|blue_Pin
 8000a02:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a06:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a14:	f107 031c 	add.w	r3, r7, #28
 8000a18:	4619      	mov	r1, r3
 8000a1a:	482c      	ldr	r0, [pc, #176]	; (8000acc <MX_GPIO_Init+0x2ac>)
 8000a1c:	f000 faa2 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a20:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a32:	2306      	movs	r3, #6
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4822      	ldr	r0, [pc, #136]	; (8000ac8 <MX_GPIO_Init+0x2a8>)
 8000a3e:	f000 fa91 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 031c 	add.w	r3, r7, #28
 8000a54:	4619      	mov	r1, r3
 8000a56:	481e      	ldr	r0, [pc, #120]	; (8000ad0 <MX_GPIO_Init+0x2b0>)
 8000a58:	f000 fa84 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a5c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a6e:	230a      	movs	r3, #10
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4815      	ldr	r0, [pc, #84]	; (8000ad0 <MX_GPIO_Init+0x2b0>)
 8000a7a:	f000 fa73 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a7e:	2320      	movs	r3, #32
 8000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480e      	ldr	r0, [pc, #56]	; (8000acc <MX_GPIO_Init+0x2ac>)
 8000a92:	f000 fa67 	bl	8000f64 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9c:	2312      	movs	r3, #18
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <MX_GPIO_Init+0x2b4>)
 8000ab4:	f000 fa56 	bl	8000f64 <HAL_GPIO_Init>

}
 8000ab8:	bf00      	nop
 8000aba:	3730      	adds	r7, #48	; 0x30
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	40020c00 	.word	0x40020c00
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	40020400 	.word	0x40020400

08000ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <Error_Handler+0x8>
	...

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <HAL_MspInit+0x4c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <HAL_MspInit+0x4c>)
 8000af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af8:	6453      	str	r3, [r2, #68]	; 0x44
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b22:	2007      	movs	r0, #7
 8000b24:	f000 f9ea 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40023800 	.word	0x40023800

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b80:	f000 f8c6 	bl	8000d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b90:	4a14      	ldr	r2, [pc, #80]	; (8000be4 <_sbrk+0x5c>)
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <_sbrk+0x60>)
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b9c:	4b13      	ldr	r3, [pc, #76]	; (8000bec <_sbrk+0x64>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d102      	bne.n	8000baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <_sbrk+0x64>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <_sbrk+0x68>)
 8000ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d207      	bcs.n	8000bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb8:	f001 fa66 	bl	8002088 <__errno>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bc6:	e009      	b.n	8000bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <_sbrk+0x64>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bce:	4b07      	ldr	r3, [pc, #28]	; (8000bec <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	4a05      	ldr	r2, [pc, #20]	; (8000bec <_sbrk+0x64>)
 8000bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bda:	68fb      	ldr	r3, [r7, #12]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20020000 	.word	0x20020000
 8000be8:	00000400 	.word	0x00000400
 8000bec:	20000098 	.word	0x20000098
 8000bf0:	20000160 	.word	0x20000160

08000bf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <SystemInit+0x20>)
 8000bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfe:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <SystemInit+0x20>)
 8000c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c1e:	490e      	ldr	r1, [pc, #56]	; (8000c58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c20:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c24:	e002      	b.n	8000c2c <LoopCopyDataInit>

08000c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2a:	3304      	adds	r3, #4

08000c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c30:	d3f9      	bcc.n	8000c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c32:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c34:	4c0b      	ldr	r4, [pc, #44]	; (8000c64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c38:	e001      	b.n	8000c3e <LoopFillZerobss>

08000c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c3c:	3204      	adds	r2, #4

08000c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c40:	d3fb      	bcc.n	8000c3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c42:	f7ff ffd7 	bl	8000bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c46:	f001 fb1b 	bl	8002280 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4a:	f7ff fc4f 	bl	80004ec <main>
  bx  lr    
 8000c4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000c5c:	08002840 	.word	0x08002840
  ldr r2, =_sbss
 8000c60:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000c64:	2000015c 	.word	0x2000015c

08000c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <HAL_Init+0x40>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <HAL_Init+0x40>)
 8000c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a07      	ldr	r2, [pc, #28]	; (8000cac <HAL_Init+0x40>)
 8000c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c94:	2003      	movs	r0, #3
 8000c96:	f000 f931 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f000 f808 	bl	8000cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca0:	f7ff ff20 	bl	8000ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023c00 	.word	0x40023c00

08000cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_InitTick+0x54>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_InitTick+0x58>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f93b 	bl	8000f4a <HAL_SYSTICK_Config>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00e      	b.n	8000cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	d80a      	bhi.n	8000cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cec:	f000 f911 	bl	8000f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf0:	4a06      	ldr	r2, [pc, #24]	; (8000d0c <HAL_InitTick+0x5c>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e000      	b.n	8000cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000004 	.word	0x20000004

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008
 8000d34:	2000009c 	.word	0x2000009c

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	2000009c 	.word	0x2000009c

08000d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d58:	f7ff ffee 	bl	8000d38 <HAL_GetTick>
 8000d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d68:	d005      	beq.n	8000d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_Delay+0x44>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d76:	bf00      	nop
 8000d78:	f7ff ffde 	bl	8000d38 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d8f7      	bhi.n	8000d78 <HAL_Delay+0x28>
  {
  }
}
 8000d88:	bf00      	nop
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008

08000d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dca:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	60d3      	str	r3, [r2, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	6039      	str	r1, [r7, #0]
 8000e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	db0a      	blt.n	8000e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	490c      	ldr	r1, [pc, #48]	; (8000e48 <__NVIC_SetPriority+0x4c>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	0112      	lsls	r2, r2, #4
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	440b      	add	r3, r1
 8000e20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e24:	e00a      	b.n	8000e3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4908      	ldr	r1, [pc, #32]	; (8000e4c <__NVIC_SetPriority+0x50>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	3b04      	subs	r3, #4
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	b2d2      	uxtb	r2, r2
 8000e38:	440b      	add	r3, r1
 8000e3a:	761a      	strb	r2, [r3, #24]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000e100 	.word	0xe000e100
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	f1c3 0307 	rsb	r3, r3, #7
 8000e6a:	2b04      	cmp	r3, #4
 8000e6c:	bf28      	it	cs
 8000e6e:	2304      	movcs	r3, #4
 8000e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3304      	adds	r3, #4
 8000e76:	2b06      	cmp	r3, #6
 8000e78:	d902      	bls.n	8000e80 <NVIC_EncodePriority+0x30>
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3b03      	subs	r3, #3
 8000e7e:	e000      	b.n	8000e82 <NVIC_EncodePriority+0x32>
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea2:	43d9      	mvns	r1, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	4313      	orrs	r3, r2
         );
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3724      	adds	r7, #36	; 0x24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000edc:	f7ff ff8e 	bl	8000dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff47 	bl	8000d98 <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff5c 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff8e 	bl	8000e50 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5d 	bl	8000dfc <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffb0 	bl	8000eb8 <SysTick_Config>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	e159      	b.n	8001234 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	f040 8148 	bne.w	800122e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d005      	beq.n	8000fb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d130      	bne.n	8001018 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fec:	2201      	movs	r2, #1
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	091b      	lsrs	r3, r3, #4
 8001002:	f003 0201 	and.w	r2, r3, #1
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f003 0303 	and.w	r3, r3, #3
 8001020:	2b03      	cmp	r3, #3
 8001022:	d017      	beq.n	8001054 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d123      	bne.n	80010a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	f003 0307 	and.w	r3, r3, #7
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	220f      	movs	r2, #15
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	08da      	lsrs	r2, r3, #3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3208      	adds	r2, #8
 80010a2:	69b9      	ldr	r1, [r7, #24]
 80010a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0203 	and.w	r2, r3, #3
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 80a2 	beq.w	800122e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b57      	ldr	r3, [pc, #348]	; (800124c <HAL_GPIO_Init+0x2e8>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a56      	ldr	r2, [pc, #344]	; (800124c <HAL_GPIO_Init+0x2e8>)
 80010f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b54      	ldr	r3, [pc, #336]	; (800124c <HAL_GPIO_Init+0x2e8>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001106:	4a52      	ldr	r2, [pc, #328]	; (8001250 <HAL_GPIO_Init+0x2ec>)
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	220f      	movs	r2, #15
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a49      	ldr	r2, [pc, #292]	; (8001254 <HAL_GPIO_Init+0x2f0>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d019      	beq.n	8001166 <HAL_GPIO_Init+0x202>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a48      	ldr	r2, [pc, #288]	; (8001258 <HAL_GPIO_Init+0x2f4>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_GPIO_Init+0x1fe>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a47      	ldr	r2, [pc, #284]	; (800125c <HAL_GPIO_Init+0x2f8>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d00d      	beq.n	800115e <HAL_GPIO_Init+0x1fa>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a46      	ldr	r2, [pc, #280]	; (8001260 <HAL_GPIO_Init+0x2fc>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d007      	beq.n	800115a <HAL_GPIO_Init+0x1f6>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a45      	ldr	r2, [pc, #276]	; (8001264 <HAL_GPIO_Init+0x300>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_GPIO_Init+0x1f2>
 8001152:	2304      	movs	r3, #4
 8001154:	e008      	b.n	8001168 <HAL_GPIO_Init+0x204>
 8001156:	2307      	movs	r3, #7
 8001158:	e006      	b.n	8001168 <HAL_GPIO_Init+0x204>
 800115a:	2303      	movs	r3, #3
 800115c:	e004      	b.n	8001168 <HAL_GPIO_Init+0x204>
 800115e:	2302      	movs	r3, #2
 8001160:	e002      	b.n	8001168 <HAL_GPIO_Init+0x204>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <HAL_GPIO_Init+0x204>
 8001166:	2300      	movs	r3, #0
 8001168:	69fa      	ldr	r2, [r7, #28]
 800116a:	f002 0203 	and.w	r2, r2, #3
 800116e:	0092      	lsls	r2, r2, #2
 8001170:	4093      	lsls	r3, r2
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001178:	4935      	ldr	r1, [pc, #212]	; (8001250 <HAL_GPIO_Init+0x2ec>)
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	089b      	lsrs	r3, r3, #2
 800117e:	3302      	adds	r3, #2
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001186:	4b38      	ldr	r3, [pc, #224]	; (8001268 <HAL_GPIO_Init+0x304>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011aa:	4a2f      	ldr	r2, [pc, #188]	; (8001268 <HAL_GPIO_Init+0x304>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b0:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <HAL_GPIO_Init+0x304>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d4:	4a24      	ldr	r2, [pc, #144]	; (8001268 <HAL_GPIO_Init+0x304>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011da:	4b23      	ldr	r3, [pc, #140]	; (8001268 <HAL_GPIO_Init+0x304>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4013      	ands	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	4313      	orrs	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011fe:	4a1a      	ldr	r2, [pc, #104]	; (8001268 <HAL_GPIO_Init+0x304>)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001204:	4b18      	ldr	r3, [pc, #96]	; (8001268 <HAL_GPIO_Init+0x304>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_GPIO_Init+0x304>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3301      	adds	r3, #1
 8001232:	61fb      	str	r3, [r7, #28]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	2b0f      	cmp	r3, #15
 8001238:	f67f aea2 	bls.w	8000f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3724      	adds	r7, #36	; 0x24
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40013800 	.word	0x40013800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400
 800125c:	40020800 	.word	0x40020800
 8001260:	40020c00 	.word	0x40020c00
 8001264:	40021000 	.word	0x40021000
 8001268:	40013c00 	.word	0x40013c00

0800126c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	887b      	ldrh	r3, [r7, #2]
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e001      	b.n	800128e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800128e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
 80012a8:	4613      	mov	r3, r2
 80012aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ac:	787b      	ldrb	r3, [r7, #1]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012b8:	e003      	b.n	80012c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	041a      	lsls	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	619a      	str	r2, [r3, #24]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e267      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d075      	beq.n	80013da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ee:	4b88      	ldr	r3, [pc, #544]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d00c      	beq.n	8001314 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012fa:	4b85      	ldr	r3, [pc, #532]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001302:	2b08      	cmp	r3, #8
 8001304:	d112      	bne.n	800132c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001306:	4b82      	ldr	r3, [pc, #520]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001312:	d10b      	bne.n	800132c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	4b7e      	ldr	r3, [pc, #504]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d05b      	beq.n	80013d8 <HAL_RCC_OscConfig+0x108>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d157      	bne.n	80013d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e242      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001334:	d106      	bne.n	8001344 <HAL_RCC_OscConfig+0x74>
 8001336:	4b76      	ldr	r3, [pc, #472]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a75      	ldr	r2, [pc, #468]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e01d      	b.n	8001380 <HAL_RCC_OscConfig+0xb0>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x98>
 800134e:	4b70      	ldr	r3, [pc, #448]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6f      	ldr	r2, [pc, #444]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b6d      	ldr	r3, [pc, #436]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a6c      	ldr	r2, [pc, #432]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0xb0>
 8001368:	4b69      	ldr	r3, [pc, #420]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a68      	ldr	r2, [pc, #416]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800136e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b66      	ldr	r3, [pc, #408]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a65      	ldr	r2, [pc, #404]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800137a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d013      	beq.n	80013b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fcd6 	bl	8000d38 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fcd2 	bl	8000d38 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	; 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e207      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a2:	4b5b      	ldr	r3, [pc, #364]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0xc0>
 80013ae:	e014      	b.n	80013da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff fcc2 	bl	8000d38 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff fcbe 	bl	8000d38 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	; 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e1f3      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ca:	4b51      	ldr	r3, [pc, #324]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0xe8>
 80013d6:	e000      	b.n	80013da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d063      	beq.n	80014ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e6:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00b      	beq.n	800140a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f2:	4b47      	ldr	r3, [pc, #284]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d11c      	bne.n	8001438 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013fe:	4b44      	ldr	r3, [pc, #272]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d116      	bne.n	8001438 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	4b41      	ldr	r3, [pc, #260]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d005      	beq.n	8001422 <HAL_RCC_OscConfig+0x152>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d001      	beq.n	8001422 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e1c7      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001422:	4b3b      	ldr	r3, [pc, #236]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4937      	ldr	r1, [pc, #220]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001432:	4313      	orrs	r3, r2
 8001434:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001436:	e03a      	b.n	80014ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d020      	beq.n	8001482 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001440:	4b34      	ldr	r3, [pc, #208]	; (8001514 <HAL_RCC_OscConfig+0x244>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff fc77 	bl	8000d38 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144e:	f7ff fc73 	bl	8000d38 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e1a8      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001460:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146c:	4b28      	ldr	r3, [pc, #160]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4925      	ldr	r1, [pc, #148]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 800147c:	4313      	orrs	r3, r2
 800147e:	600b      	str	r3, [r1, #0]
 8001480:	e015      	b.n	80014ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001482:	4b24      	ldr	r3, [pc, #144]	; (8001514 <HAL_RCC_OscConfig+0x244>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001488:	f7ff fc56 	bl	8000d38 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001490:	f7ff fc52 	bl	8000d38 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e187      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a2:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f0      	bne.n	8001490 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d036      	beq.n	8001528 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d016      	beq.n	80014f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_RCC_OscConfig+0x248>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c8:	f7ff fc36 	bl	8000d38 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d0:	f7ff fc32 	bl	8000d38 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e167      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_RCC_OscConfig+0x240>)
 80014e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x200>
 80014ee:	e01b      	b.n	8001528 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_RCC_OscConfig+0x248>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f6:	f7ff fc1f 	bl	8000d38 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	e00e      	b.n	800151c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fe:	f7ff fc1b 	bl	8000d38 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d907      	bls.n	800151c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e150      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
 8001510:	40023800 	.word	0x40023800
 8001514:	42470000 	.word	0x42470000
 8001518:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151c:	4b88      	ldr	r3, [pc, #544]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 800151e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1ea      	bne.n	80014fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	f000 8097 	beq.w	8001664 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800153a:	4b81      	ldr	r3, [pc, #516]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10f      	bne.n	8001566 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	4b7d      	ldr	r3, [pc, #500]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a7c      	ldr	r2, [pc, #496]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 8001550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
 8001556:	4b7a      	ldr	r3, [pc, #488]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001562:	2301      	movs	r3, #1
 8001564:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001566:	4b77      	ldr	r3, [pc, #476]	; (8001744 <HAL_RCC_OscConfig+0x474>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156e:	2b00      	cmp	r3, #0
 8001570:	d118      	bne.n	80015a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001572:	4b74      	ldr	r3, [pc, #464]	; (8001744 <HAL_RCC_OscConfig+0x474>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a73      	ldr	r2, [pc, #460]	; (8001744 <HAL_RCC_OscConfig+0x474>)
 8001578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800157e:	f7ff fbdb 	bl	8000d38 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001586:	f7ff fbd7 	bl	8000d38 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e10c      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001598:	4b6a      	ldr	r3, [pc, #424]	; (8001744 <HAL_RCC_OscConfig+0x474>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d106      	bne.n	80015ba <HAL_RCC_OscConfig+0x2ea>
 80015ac:	4b64      	ldr	r3, [pc, #400]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b0:	4a63      	ldr	r2, [pc, #396]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6713      	str	r3, [r2, #112]	; 0x70
 80015b8:	e01c      	b.n	80015f4 <HAL_RCC_OscConfig+0x324>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b05      	cmp	r3, #5
 80015c0:	d10c      	bne.n	80015dc <HAL_RCC_OscConfig+0x30c>
 80015c2:	4b5f      	ldr	r3, [pc, #380]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	4a5e      	ldr	r2, [pc, #376]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015c8:	f043 0304 	orr.w	r3, r3, #4
 80015cc:	6713      	str	r3, [r2, #112]	; 0x70
 80015ce:	4b5c      	ldr	r3, [pc, #368]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d2:	4a5b      	ldr	r2, [pc, #364]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6713      	str	r3, [r2, #112]	; 0x70
 80015da:	e00b      	b.n	80015f4 <HAL_RCC_OscConfig+0x324>
 80015dc:	4b58      	ldr	r3, [pc, #352]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e0:	4a57      	ldr	r2, [pc, #348]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015e2:	f023 0301 	bic.w	r3, r3, #1
 80015e6:	6713      	str	r3, [r2, #112]	; 0x70
 80015e8:	4b55      	ldr	r3, [pc, #340]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ec:	4a54      	ldr	r2, [pc, #336]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80015ee:	f023 0304 	bic.w	r3, r3, #4
 80015f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d015      	beq.n	8001628 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fc:	f7ff fb9c 	bl	8000d38 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001602:	e00a      	b.n	800161a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001604:	f7ff fb98 	bl	8000d38 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001612:	4293      	cmp	r3, r2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e0cb      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161a:	4b49      	ldr	r3, [pc, #292]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 800161c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0ee      	beq.n	8001604 <HAL_RCC_OscConfig+0x334>
 8001626:	e014      	b.n	8001652 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001628:	f7ff fb86 	bl	8000d38 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162e:	e00a      	b.n	8001646 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001630:	f7ff fb82 	bl	8000d38 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	; 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e0b5      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001646:	4b3e      	ldr	r3, [pc, #248]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 8001648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1ee      	bne.n	8001630 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001652:	7dfb      	ldrb	r3, [r7, #23]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d105      	bne.n	8001664 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001658:	4b39      	ldr	r3, [pc, #228]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	4a38      	ldr	r2, [pc, #224]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 800165e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001662:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f000 80a1 	beq.w	80017b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800166e:	4b34      	ldr	r3, [pc, #208]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b08      	cmp	r3, #8
 8001678:	d05c      	beq.n	8001734 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d141      	bne.n	8001706 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b31      	ldr	r3, [pc, #196]	; (8001748 <HAL_RCC_OscConfig+0x478>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fb56 	bl	8000d38 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fb52 	bl	8000d38 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e087      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	4b27      	ldr	r3, [pc, #156]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69da      	ldr	r2, [r3, #28]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	019b      	lsls	r3, r3, #6
 80016be:	431a      	orrs	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	3b01      	subs	r3, #1
 80016c8:	041b      	lsls	r3, r3, #16
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	061b      	lsls	r3, r3, #24
 80016d2:	491b      	ldr	r1, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_RCC_OscConfig+0x478>)
 80016da:	2201      	movs	r2, #1
 80016dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016de:	f7ff fb2b 	bl	8000d38 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e6:	f7ff fb27 	bl	8000d38 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e05c      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x416>
 8001704:	e054      	b.n	80017b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <HAL_RCC_OscConfig+0x478>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fb14 	bl	8000d38 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff fb10 	bl	8000d38 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e045      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_RCC_OscConfig+0x470>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x444>
 8001732:	e03d      	b.n	80017b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d107      	bne.n	800174c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e038      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
 8001740:	40023800 	.word	0x40023800
 8001744:	40007000 	.word	0x40007000
 8001748:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <HAL_RCC_OscConfig+0x4ec>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d028      	beq.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d121      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d11a      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800177c:	4013      	ands	r3, r2
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001782:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001784:	4293      	cmp	r3, r2
 8001786:	d111      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001792:	085b      	lsrs	r3, r3, #1
 8001794:	3b01      	subs	r3, #1
 8001796:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d107      	bne.n	80017ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800

080017c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0cc      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d4:	4b68      	ldr	r3, [pc, #416]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d90c      	bls.n	80017fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b65      	ldr	r3, [pc, #404]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ea:	4b63      	ldr	r3, [pc, #396]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0b8      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d020      	beq.n	800184a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d005      	beq.n	8001820 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001814:	4b59      	ldr	r3, [pc, #356]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	4a58      	ldr	r2, [pc, #352]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800181e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800182c:	4b53      	ldr	r3, [pc, #332]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a52      	ldr	r2, [pc, #328]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001836:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001838:	4b50      	ldr	r3, [pc, #320]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	494d      	ldr	r1, [pc, #308]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d044      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d107      	bne.n	800186e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d119      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e07f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d003      	beq.n	800187e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800187a:	2b03      	cmp	r3, #3
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187e:	4b3f      	ldr	r3, [pc, #252]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d109      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e06f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188e:	4b3b      	ldr	r3, [pc, #236]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e067      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189e:	4b37      	ldr	r3, [pc, #220]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f023 0203 	bic.w	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4934      	ldr	r1, [pc, #208]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b0:	f7ff fa42 	bl	8000d38 <HAL_GetTick>
 80018b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b8:	f7ff fa3e 	bl	8000d38 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e04f      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	4b2b      	ldr	r3, [pc, #172]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 020c 	and.w	r2, r3, #12
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	429a      	cmp	r2, r3
 80018de:	d1eb      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018e0:	4b25      	ldr	r3, [pc, #148]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d20c      	bcs.n	8001908 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b22      	ldr	r3, [pc, #136]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f6:	4b20      	ldr	r3, [pc, #128]	; (8001978 <HAL_RCC_ClockConfig+0x1b8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e032      	b.n	800196e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d008      	beq.n	8001926 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001914:	4b19      	ldr	r3, [pc, #100]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	4916      	ldr	r1, [pc, #88]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	4313      	orrs	r3, r2
 8001924:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d009      	beq.n	8001946 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	490e      	ldr	r1, [pc, #56]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001946:	f000 f821 	bl	800198c <HAL_RCC_GetSysClockFreq>
 800194a:	4602      	mov	r2, r0
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	490a      	ldr	r1, [pc, #40]	; (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	5ccb      	ldrb	r3, [r1, r3]
 800195a:	fa22 f303 	lsr.w	r3, r2, r3
 800195e:	4a09      	ldr	r2, [pc, #36]	; (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001962:	4b09      	ldr	r3, [pc, #36]	; (8001988 <HAL_RCC_ClockConfig+0x1c8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff f9a2 	bl	8000cb0 <HAL_InitTick>

  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023c00 	.word	0x40023c00
 800197c:	40023800 	.word	0x40023800
 8001980:	080027a0 	.word	0x080027a0
 8001984:	20000000 	.word	0x20000000
 8001988:	20000004 	.word	0x20000004

0800198c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800198c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001990:	b094      	sub	sp, #80	; 0x50
 8001992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	647b      	str	r3, [r7, #68]	; 0x44
 8001998:	2300      	movs	r3, #0
 800199a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800199c:	2300      	movs	r3, #0
 800199e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019a0:	2300      	movs	r3, #0
 80019a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019a4:	4b79      	ldr	r3, [pc, #484]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d00d      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0x40>
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	f200 80e1 	bhi.w	8001b78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <HAL_RCC_GetSysClockFreq+0x34>
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d003      	beq.n	80019c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80019be:	e0db      	b.n	8001b78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019c0:	4b73      	ldr	r3, [pc, #460]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x204>)
 80019c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019c4:	e0db      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019c6:	4b73      	ldr	r3, [pc, #460]	; (8001b94 <HAL_RCC_GetSysClockFreq+0x208>)
 80019c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019ca:	e0d8      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019cc:	4b6f      	ldr	r3, [pc, #444]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d6:	4b6d      	ldr	r3, [pc, #436]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d063      	beq.n	8001aaa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e2:	4b6a      	ldr	r3, [pc, #424]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	099b      	lsrs	r3, r3, #6
 80019e8:	2200      	movs	r2, #0
 80019ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80019ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80019ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019f4:	633b      	str	r3, [r7, #48]	; 0x30
 80019f6:	2300      	movs	r3, #0
 80019f8:	637b      	str	r3, [r7, #52]	; 0x34
 80019fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019fe:	4622      	mov	r2, r4
 8001a00:	462b      	mov	r3, r5
 8001a02:	f04f 0000 	mov.w	r0, #0
 8001a06:	f04f 0100 	mov.w	r1, #0
 8001a0a:	0159      	lsls	r1, r3, #5
 8001a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a10:	0150      	lsls	r0, r2, #5
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4621      	mov	r1, r4
 8001a18:	1a51      	subs	r1, r2, r1
 8001a1a:	6139      	str	r1, [r7, #16]
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a30:	4659      	mov	r1, fp
 8001a32:	018b      	lsls	r3, r1, #6
 8001a34:	4651      	mov	r1, sl
 8001a36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a3a:	4651      	mov	r1, sl
 8001a3c:	018a      	lsls	r2, r1, #6
 8001a3e:	4651      	mov	r1, sl
 8001a40:	ebb2 0801 	subs.w	r8, r2, r1
 8001a44:	4659      	mov	r1, fp
 8001a46:	eb63 0901 	sbc.w	r9, r3, r1
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	f04f 0300 	mov.w	r3, #0
 8001a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a5e:	4690      	mov	r8, r2
 8001a60:	4699      	mov	r9, r3
 8001a62:	4623      	mov	r3, r4
 8001a64:	eb18 0303 	adds.w	r3, r8, r3
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	462b      	mov	r3, r5
 8001a6c:	eb49 0303 	adc.w	r3, r9, r3
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a7e:	4629      	mov	r1, r5
 8001a80:	024b      	lsls	r3, r1, #9
 8001a82:	4621      	mov	r1, r4
 8001a84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a88:	4621      	mov	r1, r4
 8001a8a:	024a      	lsls	r2, r1, #9
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a92:	2200      	movs	r2, #0
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a9c:	f7fe fba4 	bl	80001e8 <__aeabi_uldivmod>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001aa8:	e058      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aaa:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	4611      	mov	r1, r2
 8001ab6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aba:	623b      	str	r3, [r7, #32]
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ac4:	4642      	mov	r2, r8
 8001ac6:	464b      	mov	r3, r9
 8001ac8:	f04f 0000 	mov.w	r0, #0
 8001acc:	f04f 0100 	mov.w	r1, #0
 8001ad0:	0159      	lsls	r1, r3, #5
 8001ad2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ad6:	0150      	lsls	r0, r2, #5
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4641      	mov	r1, r8
 8001ade:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ae2:	4649      	mov	r1, r9
 8001ae4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001af4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001af8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001afc:	ebb2 040a 	subs.w	r4, r2, sl
 8001b00:	eb63 050b 	sbc.w	r5, r3, fp
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	00eb      	lsls	r3, r5, #3
 8001b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b12:	00e2      	lsls	r2, r4, #3
 8001b14:	4614      	mov	r4, r2
 8001b16:	461d      	mov	r5, r3
 8001b18:	4643      	mov	r3, r8
 8001b1a:	18e3      	adds	r3, r4, r3
 8001b1c:	603b      	str	r3, [r7, #0]
 8001b1e:	464b      	mov	r3, r9
 8001b20:	eb45 0303 	adc.w	r3, r5, r3
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b32:	4629      	mov	r1, r5
 8001b34:	028b      	lsls	r3, r1, #10
 8001b36:	4621      	mov	r1, r4
 8001b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	028a      	lsls	r2, r1, #10
 8001b40:	4610      	mov	r0, r2
 8001b42:	4619      	mov	r1, r3
 8001b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b46:	2200      	movs	r2, #0
 8001b48:	61bb      	str	r3, [r7, #24]
 8001b4a:	61fa      	str	r2, [r7, #28]
 8001b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b50:	f7fe fb4a 	bl	80001e8 <__aeabi_uldivmod>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4613      	mov	r3, r2
 8001b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	0c1b      	lsrs	r3, r3, #16
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	3301      	adds	r3, #1
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b76:	e002      	b.n	8001b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3750      	adds	r7, #80	; 0x50
 8001b84:	46bd      	mov	sp, r7
 8001b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	00f42400 	.word	0x00f42400
 8001b94:	007a1200 	.word	0x007a1200

08001b98 <findslot>:
 8001b98:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <findslot+0x2c>)
 8001b9a:	b510      	push	{r4, lr}
 8001b9c:	4604      	mov	r4, r0
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	b118      	cbz	r0, 8001baa <findslot+0x12>
 8001ba2:	6983      	ldr	r3, [r0, #24]
 8001ba4:	b90b      	cbnz	r3, 8001baa <findslot+0x12>
 8001ba6:	f000 facd 	bl	8002144 <__sinit>
 8001baa:	2c13      	cmp	r4, #19
 8001bac:	d807      	bhi.n	8001bbe <findslot+0x26>
 8001bae:	4806      	ldr	r0, [pc, #24]	; (8001bc8 <findslot+0x30>)
 8001bb0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001bb4:	3201      	adds	r2, #1
 8001bb6:	d002      	beq.n	8001bbe <findslot+0x26>
 8001bb8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001bbc:	bd10      	pop	{r4, pc}
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	e7fc      	b.n	8001bbc <findslot+0x24>
 8001bc2:	bf00      	nop
 8001bc4:	20000014 	.word	0x20000014
 8001bc8:	200000ac 	.word	0x200000ac

08001bcc <error>:
 8001bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bce:	4604      	mov	r4, r0
 8001bd0:	f000 fa5a 	bl	8002088 <__errno>
 8001bd4:	2613      	movs	r6, #19
 8001bd6:	4605      	mov	r5, r0
 8001bd8:	2700      	movs	r7, #0
 8001bda:	4630      	mov	r0, r6
 8001bdc:	4639      	mov	r1, r7
 8001bde:	beab      	bkpt	0x00ab
 8001be0:	4606      	mov	r6, r0
 8001be2:	602e      	str	r6, [r5, #0]
 8001be4:	4620      	mov	r0, r4
 8001be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001be8 <checkerror>:
 8001be8:	1c43      	adds	r3, r0, #1
 8001bea:	d101      	bne.n	8001bf0 <checkerror+0x8>
 8001bec:	f7ff bfee 	b.w	8001bcc <error>
 8001bf0:	4770      	bx	lr

08001bf2 <_swiread>:
 8001bf2:	b530      	push	{r4, r5, lr}
 8001bf4:	b085      	sub	sp, #20
 8001bf6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001bfa:	9203      	str	r2, [sp, #12]
 8001bfc:	2406      	movs	r4, #6
 8001bfe:	ad01      	add	r5, sp, #4
 8001c00:	4620      	mov	r0, r4
 8001c02:	4629      	mov	r1, r5
 8001c04:	beab      	bkpt	0x00ab
 8001c06:	4604      	mov	r4, r0
 8001c08:	4620      	mov	r0, r4
 8001c0a:	f7ff ffed 	bl	8001be8 <checkerror>
 8001c0e:	b005      	add	sp, #20
 8001c10:	bd30      	pop	{r4, r5, pc}

08001c12 <_read>:
 8001c12:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001c14:	4615      	mov	r5, r2
 8001c16:	9101      	str	r1, [sp, #4]
 8001c18:	f7ff ffbe 	bl	8001b98 <findslot>
 8001c1c:	9901      	ldr	r1, [sp, #4]
 8001c1e:	4604      	mov	r4, r0
 8001c20:	b938      	cbnz	r0, 8001c32 <_read+0x20>
 8001c22:	f000 fa31 	bl	8002088 <__errno>
 8001c26:	2309      	movs	r3, #9
 8001c28:	6003      	str	r3, [r0, #0]
 8001c2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c2e:	b003      	add	sp, #12
 8001c30:	bd30      	pop	{r4, r5, pc}
 8001c32:	6800      	ldr	r0, [r0, #0]
 8001c34:	462a      	mov	r2, r5
 8001c36:	f7ff ffdc 	bl	8001bf2 <_swiread>
 8001c3a:	1c43      	adds	r3, r0, #1
 8001c3c:	d0f7      	beq.n	8001c2e <_read+0x1c>
 8001c3e:	6863      	ldr	r3, [r4, #4]
 8001c40:	1a2a      	subs	r2, r5, r0
 8001c42:	4413      	add	r3, r2
 8001c44:	6063      	str	r3, [r4, #4]
 8001c46:	4610      	mov	r0, r2
 8001c48:	e7f1      	b.n	8001c2e <_read+0x1c>

08001c4a <_swilseek>:
 8001c4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	4616      	mov	r6, r2
 8001c50:	f7ff ffa2 	bl	8001b98 <findslot>
 8001c54:	4605      	mov	r5, r0
 8001c56:	b940      	cbnz	r0, 8001c6a <_swilseek+0x20>
 8001c58:	f000 fa16 	bl	8002088 <__errno>
 8001c5c:	2309      	movs	r3, #9
 8001c5e:	6003      	str	r3, [r0, #0]
 8001c60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001c64:	4620      	mov	r0, r4
 8001c66:	b003      	add	sp, #12
 8001c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c6a:	2e02      	cmp	r6, #2
 8001c6c:	d903      	bls.n	8001c76 <_swilseek+0x2c>
 8001c6e:	f000 fa0b 	bl	8002088 <__errno>
 8001c72:	2316      	movs	r3, #22
 8001c74:	e7f3      	b.n	8001c5e <_swilseek+0x14>
 8001c76:	2e01      	cmp	r6, #1
 8001c78:	d112      	bne.n	8001ca0 <_swilseek+0x56>
 8001c7a:	6843      	ldr	r3, [r0, #4]
 8001c7c:	18e4      	adds	r4, r4, r3
 8001c7e:	d4f6      	bmi.n	8001c6e <_swilseek+0x24>
 8001c80:	682b      	ldr	r3, [r5, #0]
 8001c82:	260a      	movs	r6, #10
 8001c84:	e9cd 3400 	strd	r3, r4, [sp]
 8001c88:	466f      	mov	r7, sp
 8001c8a:	4630      	mov	r0, r6
 8001c8c:	4639      	mov	r1, r7
 8001c8e:	beab      	bkpt	0x00ab
 8001c90:	4606      	mov	r6, r0
 8001c92:	4630      	mov	r0, r6
 8001c94:	f7ff ffa8 	bl	8001be8 <checkerror>
 8001c98:	2800      	cmp	r0, #0
 8001c9a:	dbe1      	blt.n	8001c60 <_swilseek+0x16>
 8001c9c:	606c      	str	r4, [r5, #4]
 8001c9e:	e7e1      	b.n	8001c64 <_swilseek+0x1a>
 8001ca0:	2e02      	cmp	r6, #2
 8001ca2:	d1ed      	bne.n	8001c80 <_swilseek+0x36>
 8001ca4:	6803      	ldr	r3, [r0, #0]
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	260c      	movs	r6, #12
 8001caa:	466f      	mov	r7, sp
 8001cac:	4630      	mov	r0, r6
 8001cae:	4639      	mov	r1, r7
 8001cb0:	beab      	bkpt	0x00ab
 8001cb2:	4606      	mov	r6, r0
 8001cb4:	4630      	mov	r0, r6
 8001cb6:	f7ff ff97 	bl	8001be8 <checkerror>
 8001cba:	1c43      	adds	r3, r0, #1
 8001cbc:	d0d0      	beq.n	8001c60 <_swilseek+0x16>
 8001cbe:	4404      	add	r4, r0
 8001cc0:	e7de      	b.n	8001c80 <_swilseek+0x36>

08001cc2 <_lseek>:
 8001cc2:	f7ff bfc2 	b.w	8001c4a <_swilseek>

08001cc6 <_swiwrite>:
 8001cc6:	b530      	push	{r4, r5, lr}
 8001cc8:	b085      	sub	sp, #20
 8001cca:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001cce:	9203      	str	r2, [sp, #12]
 8001cd0:	2405      	movs	r4, #5
 8001cd2:	ad01      	add	r5, sp, #4
 8001cd4:	4620      	mov	r0, r4
 8001cd6:	4629      	mov	r1, r5
 8001cd8:	beab      	bkpt	0x00ab
 8001cda:	4604      	mov	r4, r0
 8001cdc:	4620      	mov	r0, r4
 8001cde:	f7ff ff83 	bl	8001be8 <checkerror>
 8001ce2:	b005      	add	sp, #20
 8001ce4:	bd30      	pop	{r4, r5, pc}

08001ce6 <_write>:
 8001ce6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ce8:	4615      	mov	r5, r2
 8001cea:	9101      	str	r1, [sp, #4]
 8001cec:	f7ff ff54 	bl	8001b98 <findslot>
 8001cf0:	9901      	ldr	r1, [sp, #4]
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	b930      	cbnz	r0, 8001d04 <_write+0x1e>
 8001cf6:	f000 f9c7 	bl	8002088 <__errno>
 8001cfa:	2309      	movs	r3, #9
 8001cfc:	6003      	str	r3, [r0, #0]
 8001cfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d02:	e012      	b.n	8001d2a <_write+0x44>
 8001d04:	6800      	ldr	r0, [r0, #0]
 8001d06:	462a      	mov	r2, r5
 8001d08:	f7ff ffdd 	bl	8001cc6 <_swiwrite>
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	dbf6      	blt.n	8001cfe <_write+0x18>
 8001d10:	6862      	ldr	r2, [r4, #4]
 8001d12:	1a2b      	subs	r3, r5, r0
 8001d14:	441a      	add	r2, r3
 8001d16:	42a8      	cmp	r0, r5
 8001d18:	6062      	str	r2, [r4, #4]
 8001d1a:	d105      	bne.n	8001d28 <_write+0x42>
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	b003      	add	sp, #12
 8001d20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001d24:	f7ff bf52 	b.w	8001bcc <error>
 8001d28:	4618      	mov	r0, r3
 8001d2a:	b003      	add	sp, #12
 8001d2c:	bd30      	pop	{r4, r5, pc}

08001d2e <_swiclose>:
 8001d2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d30:	2402      	movs	r4, #2
 8001d32:	9001      	str	r0, [sp, #4]
 8001d34:	ad01      	add	r5, sp, #4
 8001d36:	4620      	mov	r0, r4
 8001d38:	4629      	mov	r1, r5
 8001d3a:	beab      	bkpt	0x00ab
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	4620      	mov	r0, r4
 8001d40:	f7ff ff52 	bl	8001be8 <checkerror>
 8001d44:	b003      	add	sp, #12
 8001d46:	bd30      	pop	{r4, r5, pc}

08001d48 <_close>:
 8001d48:	b538      	push	{r3, r4, r5, lr}
 8001d4a:	4605      	mov	r5, r0
 8001d4c:	f7ff ff24 	bl	8001b98 <findslot>
 8001d50:	4604      	mov	r4, r0
 8001d52:	b930      	cbnz	r0, 8001d62 <_close+0x1a>
 8001d54:	f000 f998 	bl	8002088 <__errno>
 8001d58:	2309      	movs	r3, #9
 8001d5a:	6003      	str	r3, [r0, #0]
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d60:	bd38      	pop	{r3, r4, r5, pc}
 8001d62:	3d01      	subs	r5, #1
 8001d64:	2d01      	cmp	r5, #1
 8001d66:	d809      	bhi.n	8001d7c <_close+0x34>
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <_close+0x48>)
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d104      	bne.n	8001d7c <_close+0x34>
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d76:	6003      	str	r3, [r0, #0]
 8001d78:	2000      	movs	r0, #0
 8001d7a:	e7f1      	b.n	8001d60 <_close+0x18>
 8001d7c:	6820      	ldr	r0, [r4, #0]
 8001d7e:	f7ff ffd6 	bl	8001d2e <_swiclose>
 8001d82:	2800      	cmp	r0, #0
 8001d84:	d1ec      	bne.n	8001d60 <_close+0x18>
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d8a:	6023      	str	r3, [r4, #0]
 8001d8c:	e7e8      	b.n	8001d60 <_close+0x18>
 8001d8e:	bf00      	nop
 8001d90:	200000ac 	.word	0x200000ac

08001d94 <_swistat>:
 8001d94:	b570      	push	{r4, r5, r6, lr}
 8001d96:	460c      	mov	r4, r1
 8001d98:	f7ff fefe 	bl	8001b98 <findslot>
 8001d9c:	4605      	mov	r5, r0
 8001d9e:	b930      	cbnz	r0, 8001dae <_swistat+0x1a>
 8001da0:	f000 f972 	bl	8002088 <__errno>
 8001da4:	2309      	movs	r3, #9
 8001da6:	6003      	str	r3, [r0, #0]
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dac:	bd70      	pop	{r4, r5, r6, pc}
 8001dae:	6863      	ldr	r3, [r4, #4]
 8001db0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001db4:	6063      	str	r3, [r4, #4]
 8001db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dba:	64a3      	str	r3, [r4, #72]	; 0x48
 8001dbc:	260c      	movs	r6, #12
 8001dbe:	4630      	mov	r0, r6
 8001dc0:	4629      	mov	r1, r5
 8001dc2:	beab      	bkpt	0x00ab
 8001dc4:	4605      	mov	r5, r0
 8001dc6:	4628      	mov	r0, r5
 8001dc8:	f7ff ff0e 	bl	8001be8 <checkerror>
 8001dcc:	1c43      	adds	r3, r0, #1
 8001dce:	bf1c      	itt	ne
 8001dd0:	6120      	strne	r0, [r4, #16]
 8001dd2:	2000      	movne	r0, #0
 8001dd4:	e7ea      	b.n	8001dac <_swistat+0x18>

08001dd6 <_stat>:
 8001dd6:	b538      	push	{r3, r4, r5, lr}
 8001dd8:	460d      	mov	r5, r1
 8001dda:	4604      	mov	r4, r0
 8001ddc:	2258      	movs	r2, #88	; 0x58
 8001dde:	2100      	movs	r1, #0
 8001de0:	4628      	mov	r0, r5
 8001de2:	f000 fa74 	bl	80022ce <memset>
 8001de6:	4620      	mov	r0, r4
 8001de8:	2100      	movs	r1, #0
 8001dea:	f000 f811 	bl	8001e10 <_swiopen>
 8001dee:	1c43      	adds	r3, r0, #1
 8001df0:	4604      	mov	r4, r0
 8001df2:	d00b      	beq.n	8001e0c <_stat+0x36>
 8001df4:	686b      	ldr	r3, [r5, #4]
 8001df6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001dfa:	606b      	str	r3, [r5, #4]
 8001dfc:	4629      	mov	r1, r5
 8001dfe:	f7ff ffc9 	bl	8001d94 <_swistat>
 8001e02:	4605      	mov	r5, r0
 8001e04:	4620      	mov	r0, r4
 8001e06:	f7ff ff9f 	bl	8001d48 <_close>
 8001e0a:	462c      	mov	r4, r5
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	bd38      	pop	{r3, r4, r5, pc}

08001e10 <_swiopen>:
 8001e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e14:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001ec0 <_swiopen+0xb0>
 8001e18:	b097      	sub	sp, #92	; 0x5c
 8001e1a:	4607      	mov	r7, r0
 8001e1c:	460e      	mov	r6, r1
 8001e1e:	2500      	movs	r5, #0
 8001e20:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8001e24:	1c61      	adds	r1, r4, #1
 8001e26:	d037      	beq.n	8001e98 <_swiopen+0x88>
 8001e28:	3501      	adds	r5, #1
 8001e2a:	2d14      	cmp	r5, #20
 8001e2c:	d1f8      	bne.n	8001e20 <_swiopen+0x10>
 8001e2e:	f000 f92b 	bl	8002088 <__errno>
 8001e32:	2318      	movs	r3, #24
 8001e34:	6003      	str	r3, [r0, #0]
 8001e36:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001e3a:	e03d      	b.n	8001eb8 <_swiopen+0xa8>
 8001e3c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8001e40:	f240 6301 	movw	r3, #1537	; 0x601
 8001e44:	07b2      	lsls	r2, r6, #30
 8001e46:	bf48      	it	mi
 8001e48:	f044 0402 	orrmi.w	r4, r4, #2
 8001e4c:	421e      	tst	r6, r3
 8001e4e:	bf18      	it	ne
 8001e50:	f044 0404 	orrne.w	r4, r4, #4
 8001e54:	0733      	lsls	r3, r6, #28
 8001e56:	bf48      	it	mi
 8001e58:	f024 0404 	bicmi.w	r4, r4, #4
 8001e5c:	4638      	mov	r0, r7
 8001e5e:	bf48      	it	mi
 8001e60:	f044 0408 	orrmi.w	r4, r4, #8
 8001e64:	9700      	str	r7, [sp, #0]
 8001e66:	f7fe f9b7 	bl	80001d8 <strlen>
 8001e6a:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001e6e:	2401      	movs	r4, #1
 8001e70:	4620      	mov	r0, r4
 8001e72:	4649      	mov	r1, r9
 8001e74:	beab      	bkpt	0x00ab
 8001e76:	4604      	mov	r4, r0
 8001e78:	2c00      	cmp	r4, #0
 8001e7a:	db08      	blt.n	8001e8e <_swiopen+0x7e>
 8001e7c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8001e80:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8001e84:	2300      	movs	r3, #0
 8001e86:	f8c8 3004 	str.w	r3, [r8, #4]
 8001e8a:	462c      	mov	r4, r5
 8001e8c:	e014      	b.n	8001eb8 <_swiopen+0xa8>
 8001e8e:	4620      	mov	r0, r4
 8001e90:	f7ff fe9c 	bl	8001bcc <error>
 8001e94:	4604      	mov	r4, r0
 8001e96:	e00f      	b.n	8001eb8 <_swiopen+0xa8>
 8001e98:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8001e9c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001ea0:	46e9      	mov	r9, sp
 8001ea2:	d1cb      	bne.n	8001e3c <_swiopen+0x2c>
 8001ea4:	4649      	mov	r1, r9
 8001ea6:	4638      	mov	r0, r7
 8001ea8:	f7ff ff95 	bl	8001dd6 <_stat>
 8001eac:	3001      	adds	r0, #1
 8001eae:	d0c5      	beq.n	8001e3c <_swiopen+0x2c>
 8001eb0:	f000 f8ea 	bl	8002088 <__errno>
 8001eb4:	2311      	movs	r3, #17
 8001eb6:	6003      	str	r3, [r0, #0]
 8001eb8:	4620      	mov	r0, r4
 8001eba:	b017      	add	sp, #92	; 0x5c
 8001ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ec0:	200000ac 	.word	0x200000ac

08001ec4 <_get_semihosting_exts>:
 8001ec4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001ec8:	4606      	mov	r6, r0
 8001eca:	460f      	mov	r7, r1
 8001ecc:	482a      	ldr	r0, [pc, #168]	; (8001f78 <_get_semihosting_exts+0xb4>)
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4615      	mov	r5, r2
 8001ed2:	f7ff ff9d 	bl	8001e10 <_swiopen>
 8001ed6:	462a      	mov	r2, r5
 8001ed8:	4604      	mov	r4, r0
 8001eda:	2100      	movs	r1, #0
 8001edc:	4630      	mov	r0, r6
 8001ede:	f000 f9f6 	bl	80022ce <memset>
 8001ee2:	1c63      	adds	r3, r4, #1
 8001ee4:	d016      	beq.n	8001f14 <_get_semihosting_exts+0x50>
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f7ff fe56 	bl	8001b98 <findslot>
 8001eec:	f04f 090c 	mov.w	r9, #12
 8001ef0:	4680      	mov	r8, r0
 8001ef2:	4648      	mov	r0, r9
 8001ef4:	4641      	mov	r1, r8
 8001ef6:	beab      	bkpt	0x00ab
 8001ef8:	4680      	mov	r8, r0
 8001efa:	4640      	mov	r0, r8
 8001efc:	f7ff fe74 	bl	8001be8 <checkerror>
 8001f00:	2803      	cmp	r0, #3
 8001f02:	dd02      	ble.n	8001f0a <_get_semihosting_exts+0x46>
 8001f04:	1ec3      	subs	r3, r0, #3
 8001f06:	42ab      	cmp	r3, r5
 8001f08:	dc08      	bgt.n	8001f1c <_get_semihosting_exts+0x58>
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f7ff ff1c 	bl	8001d48 <_close>
 8001f10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001f14:	4620      	mov	r0, r4
 8001f16:	b003      	add	sp, #12
 8001f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	eb0d 0102 	add.w	r1, sp, r2
 8001f22:	4620      	mov	r0, r4
 8001f24:	f7ff fe75 	bl	8001c12 <_read>
 8001f28:	2803      	cmp	r0, #3
 8001f2a:	ddee      	ble.n	8001f0a <_get_semihosting_exts+0x46>
 8001f2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001f30:	2b53      	cmp	r3, #83	; 0x53
 8001f32:	d1ea      	bne.n	8001f0a <_get_semihosting_exts+0x46>
 8001f34:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001f38:	2b48      	cmp	r3, #72	; 0x48
 8001f3a:	d1e6      	bne.n	8001f0a <_get_semihosting_exts+0x46>
 8001f3c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001f40:	2b46      	cmp	r3, #70	; 0x46
 8001f42:	d1e2      	bne.n	8001f0a <_get_semihosting_exts+0x46>
 8001f44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f48:	2b42      	cmp	r3, #66	; 0x42
 8001f4a:	d1de      	bne.n	8001f0a <_get_semihosting_exts+0x46>
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	4639      	mov	r1, r7
 8001f50:	4620      	mov	r0, r4
 8001f52:	f7ff fe7a 	bl	8001c4a <_swilseek>
 8001f56:	2800      	cmp	r0, #0
 8001f58:	dbd7      	blt.n	8001f0a <_get_semihosting_exts+0x46>
 8001f5a:	462a      	mov	r2, r5
 8001f5c:	4631      	mov	r1, r6
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f7ff fe57 	bl	8001c12 <_read>
 8001f64:	4605      	mov	r5, r0
 8001f66:	4620      	mov	r0, r4
 8001f68:	f7ff feee 	bl	8001d48 <_close>
 8001f6c:	4628      	mov	r0, r5
 8001f6e:	f7ff fe3b 	bl	8001be8 <checkerror>
 8001f72:	4604      	mov	r4, r0
 8001f74:	e7ce      	b.n	8001f14 <_get_semihosting_exts+0x50>
 8001f76:	bf00      	nop
 8001f78:	080027b0 	.word	0x080027b0

08001f7c <initialise_semihosting_exts>:
 8001f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f7e:	4d0a      	ldr	r5, [pc, #40]	; (8001fa8 <initialise_semihosting_exts+0x2c>)
 8001f80:	4c0a      	ldr	r4, [pc, #40]	; (8001fac <initialise_semihosting_exts+0x30>)
 8001f82:	2100      	movs	r1, #0
 8001f84:	2201      	movs	r2, #1
 8001f86:	a801      	add	r0, sp, #4
 8001f88:	6029      	str	r1, [r5, #0]
 8001f8a:	6022      	str	r2, [r4, #0]
 8001f8c:	f7ff ff9a 	bl	8001ec4 <_get_semihosting_exts>
 8001f90:	2800      	cmp	r0, #0
 8001f92:	dd07      	ble.n	8001fa4 <initialise_semihosting_exts+0x28>
 8001f94:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001f98:	f003 0201 	and.w	r2, r3, #1
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	602a      	str	r2, [r5, #0]
 8001fa2:	6023      	str	r3, [r4, #0]
 8001fa4:	b003      	add	sp, #12
 8001fa6:	bd30      	pop	{r4, r5, pc}
 8001fa8:	2000000c 	.word	0x2000000c
 8001fac:	20000010 	.word	0x20000010

08001fb0 <_has_ext_stdout_stderr>:
 8001fb0:	b510      	push	{r4, lr}
 8001fb2:	4c04      	ldr	r4, [pc, #16]	; (8001fc4 <_has_ext_stdout_stderr+0x14>)
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	da01      	bge.n	8001fbe <_has_ext_stdout_stderr+0xe>
 8001fba:	f7ff ffdf 	bl	8001f7c <initialise_semihosting_exts>
 8001fbe:	6820      	ldr	r0, [r4, #0]
 8001fc0:	bd10      	pop	{r4, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000010 	.word	0x20000010

08001fc8 <initialise_monitor_handles>:
 8001fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002080 <initialise_monitor_handles+0xb8>
 8001fd2:	f8cd 9004 	str.w	r9, [sp, #4]
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	2400      	movs	r4, #0
 8001fda:	9303      	str	r3, [sp, #12]
 8001fdc:	af01      	add	r7, sp, #4
 8001fde:	9402      	str	r4, [sp, #8]
 8001fe0:	2501      	movs	r5, #1
 8001fe2:	4628      	mov	r0, r5
 8001fe4:	4639      	mov	r1, r7
 8001fe6:	beab      	bkpt	0x00ab
 8001fe8:	4605      	mov	r5, r0
 8001fea:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002084 <initialise_monitor_handles+0xbc>
 8001fee:	4623      	mov	r3, r4
 8001ff0:	4c20      	ldr	r4, [pc, #128]	; (8002074 <initialise_monitor_handles+0xac>)
 8001ff2:	f8c8 5000 	str.w	r5, [r8]
 8001ff6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ffa:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8001ffe:	3301      	adds	r3, #1
 8002000:	2b14      	cmp	r3, #20
 8002002:	d1fa      	bne.n	8001ffa <initialise_monitor_handles+0x32>
 8002004:	f7ff ffd4 	bl	8001fb0 <_has_ext_stdout_stderr>
 8002008:	4d1b      	ldr	r5, [pc, #108]	; (8002078 <initialise_monitor_handles+0xb0>)
 800200a:	b1d0      	cbz	r0, 8002042 <initialise_monitor_handles+0x7a>
 800200c:	f04f 0a03 	mov.w	sl, #3
 8002010:	2304      	movs	r3, #4
 8002012:	f8cd 9004 	str.w	r9, [sp, #4]
 8002016:	2601      	movs	r6, #1
 8002018:	f8cd a00c 	str.w	sl, [sp, #12]
 800201c:	9302      	str	r3, [sp, #8]
 800201e:	4630      	mov	r0, r6
 8002020:	4639      	mov	r1, r7
 8002022:	beab      	bkpt	0x00ab
 8002024:	4683      	mov	fp, r0
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <initialise_monitor_handles+0xb4>)
 8002028:	f8cd 9004 	str.w	r9, [sp, #4]
 800202c:	f8c3 b000 	str.w	fp, [r3]
 8002030:	2308      	movs	r3, #8
 8002032:	f8cd a00c 	str.w	sl, [sp, #12]
 8002036:	9302      	str	r3, [sp, #8]
 8002038:	4630      	mov	r0, r6
 800203a:	4639      	mov	r1, r7
 800203c:	beab      	bkpt	0x00ab
 800203e:	4606      	mov	r6, r0
 8002040:	602e      	str	r6, [r5, #0]
 8002042:	682b      	ldr	r3, [r5, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	bf02      	ittt	eq
 8002048:	4b0c      	ldreq	r3, [pc, #48]	; (800207c <initialise_monitor_handles+0xb4>)
 800204a:	681b      	ldreq	r3, [r3, #0]
 800204c:	602b      	streq	r3, [r5, #0]
 800204e:	2600      	movs	r6, #0
 8002050:	f8d8 3000 	ldr.w	r3, [r8]
 8002054:	6023      	str	r3, [r4, #0]
 8002056:	6066      	str	r6, [r4, #4]
 8002058:	f7ff ffaa 	bl	8001fb0 <_has_ext_stdout_stderr>
 800205c:	b130      	cbz	r0, 800206c <initialise_monitor_handles+0xa4>
 800205e:	4b07      	ldr	r3, [pc, #28]	; (800207c <initialise_monitor_handles+0xb4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002066:	682b      	ldr	r3, [r5, #0]
 8002068:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800206c:	b005      	add	sp, #20
 800206e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002072:	bf00      	nop
 8002074:	200000ac 	.word	0x200000ac
 8002078:	200000a0 	.word	0x200000a0
 800207c:	200000a8 	.word	0x200000a8
 8002080:	080027c6 	.word	0x080027c6
 8002084:	200000a4 	.word	0x200000a4

08002088 <__errno>:
 8002088:	4b01      	ldr	r3, [pc, #4]	; (8002090 <__errno+0x8>)
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000014 	.word	0x20000014

08002094 <std>:
 8002094:	2300      	movs	r3, #0
 8002096:	b510      	push	{r4, lr}
 8002098:	4604      	mov	r4, r0
 800209a:	e9c0 3300 	strd	r3, r3, [r0]
 800209e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80020a2:	6083      	str	r3, [r0, #8]
 80020a4:	8181      	strh	r1, [r0, #12]
 80020a6:	6643      	str	r3, [r0, #100]	; 0x64
 80020a8:	81c2      	strh	r2, [r0, #14]
 80020aa:	6183      	str	r3, [r0, #24]
 80020ac:	4619      	mov	r1, r3
 80020ae:	2208      	movs	r2, #8
 80020b0:	305c      	adds	r0, #92	; 0x5c
 80020b2:	f000 f90c 	bl	80022ce <memset>
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <std+0x38>)
 80020b8:	6263      	str	r3, [r4, #36]	; 0x24
 80020ba:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <std+0x3c>)
 80020bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <std+0x40>)
 80020c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <std+0x44>)
 80020c4:	6224      	str	r4, [r4, #32]
 80020c6:	6323      	str	r3, [r4, #48]	; 0x30
 80020c8:	bd10      	pop	{r4, pc}
 80020ca:	bf00      	nop
 80020cc:	08002429 	.word	0x08002429
 80020d0:	0800244b 	.word	0x0800244b
 80020d4:	08002483 	.word	0x08002483
 80020d8:	080024a7 	.word	0x080024a7

080020dc <_cleanup_r>:
 80020dc:	4901      	ldr	r1, [pc, #4]	; (80020e4 <_cleanup_r+0x8>)
 80020de:	f000 b8af 	b.w	8002240 <_fwalk_reent>
 80020e2:	bf00      	nop
 80020e4:	08002601 	.word	0x08002601

080020e8 <__sfmoreglue>:
 80020e8:	b570      	push	{r4, r5, r6, lr}
 80020ea:	2268      	movs	r2, #104	; 0x68
 80020ec:	1e4d      	subs	r5, r1, #1
 80020ee:	4355      	muls	r5, r2
 80020f0:	460e      	mov	r6, r1
 80020f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80020f6:	f000 f913 	bl	8002320 <_malloc_r>
 80020fa:	4604      	mov	r4, r0
 80020fc:	b140      	cbz	r0, 8002110 <__sfmoreglue+0x28>
 80020fe:	2100      	movs	r1, #0
 8002100:	e9c0 1600 	strd	r1, r6, [r0]
 8002104:	300c      	adds	r0, #12
 8002106:	60a0      	str	r0, [r4, #8]
 8002108:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800210c:	f000 f8df 	bl	80022ce <memset>
 8002110:	4620      	mov	r0, r4
 8002112:	bd70      	pop	{r4, r5, r6, pc}

08002114 <__sfp_lock_acquire>:
 8002114:	4801      	ldr	r0, [pc, #4]	; (800211c <__sfp_lock_acquire+0x8>)
 8002116:	f000 b8d8 	b.w	80022ca <__retarget_lock_acquire_recursive>
 800211a:	bf00      	nop
 800211c:	2000014d 	.word	0x2000014d

08002120 <__sfp_lock_release>:
 8002120:	4801      	ldr	r0, [pc, #4]	; (8002128 <__sfp_lock_release+0x8>)
 8002122:	f000 b8d3 	b.w	80022cc <__retarget_lock_release_recursive>
 8002126:	bf00      	nop
 8002128:	2000014d 	.word	0x2000014d

0800212c <__sinit_lock_acquire>:
 800212c:	4801      	ldr	r0, [pc, #4]	; (8002134 <__sinit_lock_acquire+0x8>)
 800212e:	f000 b8cc 	b.w	80022ca <__retarget_lock_acquire_recursive>
 8002132:	bf00      	nop
 8002134:	2000014e 	.word	0x2000014e

08002138 <__sinit_lock_release>:
 8002138:	4801      	ldr	r0, [pc, #4]	; (8002140 <__sinit_lock_release+0x8>)
 800213a:	f000 b8c7 	b.w	80022cc <__retarget_lock_release_recursive>
 800213e:	bf00      	nop
 8002140:	2000014e 	.word	0x2000014e

08002144 <__sinit>:
 8002144:	b510      	push	{r4, lr}
 8002146:	4604      	mov	r4, r0
 8002148:	f7ff fff0 	bl	800212c <__sinit_lock_acquire>
 800214c:	69a3      	ldr	r3, [r4, #24]
 800214e:	b11b      	cbz	r3, 8002158 <__sinit+0x14>
 8002150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002154:	f7ff bff0 	b.w	8002138 <__sinit_lock_release>
 8002158:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800215c:	6523      	str	r3, [r4, #80]	; 0x50
 800215e:	4b13      	ldr	r3, [pc, #76]	; (80021ac <__sinit+0x68>)
 8002160:	4a13      	ldr	r2, [pc, #76]	; (80021b0 <__sinit+0x6c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	62a2      	str	r2, [r4, #40]	; 0x28
 8002166:	42a3      	cmp	r3, r4
 8002168:	bf04      	itt	eq
 800216a:	2301      	moveq	r3, #1
 800216c:	61a3      	streq	r3, [r4, #24]
 800216e:	4620      	mov	r0, r4
 8002170:	f000 f820 	bl	80021b4 <__sfp>
 8002174:	6060      	str	r0, [r4, #4]
 8002176:	4620      	mov	r0, r4
 8002178:	f000 f81c 	bl	80021b4 <__sfp>
 800217c:	60a0      	str	r0, [r4, #8]
 800217e:	4620      	mov	r0, r4
 8002180:	f000 f818 	bl	80021b4 <__sfp>
 8002184:	2200      	movs	r2, #0
 8002186:	60e0      	str	r0, [r4, #12]
 8002188:	2104      	movs	r1, #4
 800218a:	6860      	ldr	r0, [r4, #4]
 800218c:	f7ff ff82 	bl	8002094 <std>
 8002190:	68a0      	ldr	r0, [r4, #8]
 8002192:	2201      	movs	r2, #1
 8002194:	2109      	movs	r1, #9
 8002196:	f7ff ff7d 	bl	8002094 <std>
 800219a:	68e0      	ldr	r0, [r4, #12]
 800219c:	2202      	movs	r2, #2
 800219e:	2112      	movs	r1, #18
 80021a0:	f7ff ff78 	bl	8002094 <std>
 80021a4:	2301      	movs	r3, #1
 80021a6:	61a3      	str	r3, [r4, #24]
 80021a8:	e7d2      	b.n	8002150 <__sinit+0xc>
 80021aa:	bf00      	nop
 80021ac:	0800282c 	.word	0x0800282c
 80021b0:	080020dd 	.word	0x080020dd

080021b4 <__sfp>:
 80021b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b6:	4607      	mov	r7, r0
 80021b8:	f7ff ffac 	bl	8002114 <__sfp_lock_acquire>
 80021bc:	4b1e      	ldr	r3, [pc, #120]	; (8002238 <__sfp+0x84>)
 80021be:	681e      	ldr	r6, [r3, #0]
 80021c0:	69b3      	ldr	r3, [r6, #24]
 80021c2:	b913      	cbnz	r3, 80021ca <__sfp+0x16>
 80021c4:	4630      	mov	r0, r6
 80021c6:	f7ff ffbd 	bl	8002144 <__sinit>
 80021ca:	3648      	adds	r6, #72	; 0x48
 80021cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	d503      	bpl.n	80021dc <__sfp+0x28>
 80021d4:	6833      	ldr	r3, [r6, #0]
 80021d6:	b30b      	cbz	r3, 800221c <__sfp+0x68>
 80021d8:	6836      	ldr	r6, [r6, #0]
 80021da:	e7f7      	b.n	80021cc <__sfp+0x18>
 80021dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80021e0:	b9d5      	cbnz	r5, 8002218 <__sfp+0x64>
 80021e2:	4b16      	ldr	r3, [pc, #88]	; (800223c <__sfp+0x88>)
 80021e4:	60e3      	str	r3, [r4, #12]
 80021e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80021ea:	6665      	str	r5, [r4, #100]	; 0x64
 80021ec:	f000 f86c 	bl	80022c8 <__retarget_lock_init_recursive>
 80021f0:	f7ff ff96 	bl	8002120 <__sfp_lock_release>
 80021f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80021f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80021fc:	6025      	str	r5, [r4, #0]
 80021fe:	61a5      	str	r5, [r4, #24]
 8002200:	2208      	movs	r2, #8
 8002202:	4629      	mov	r1, r5
 8002204:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002208:	f000 f861 	bl	80022ce <memset>
 800220c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002210:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002214:	4620      	mov	r0, r4
 8002216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002218:	3468      	adds	r4, #104	; 0x68
 800221a:	e7d9      	b.n	80021d0 <__sfp+0x1c>
 800221c:	2104      	movs	r1, #4
 800221e:	4638      	mov	r0, r7
 8002220:	f7ff ff62 	bl	80020e8 <__sfmoreglue>
 8002224:	4604      	mov	r4, r0
 8002226:	6030      	str	r0, [r6, #0]
 8002228:	2800      	cmp	r0, #0
 800222a:	d1d5      	bne.n	80021d8 <__sfp+0x24>
 800222c:	f7ff ff78 	bl	8002120 <__sfp_lock_release>
 8002230:	230c      	movs	r3, #12
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	e7ee      	b.n	8002214 <__sfp+0x60>
 8002236:	bf00      	nop
 8002238:	0800282c 	.word	0x0800282c
 800223c:	ffff0001 	.word	0xffff0001

08002240 <_fwalk_reent>:
 8002240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002244:	4606      	mov	r6, r0
 8002246:	4688      	mov	r8, r1
 8002248:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800224c:	2700      	movs	r7, #0
 800224e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002252:	f1b9 0901 	subs.w	r9, r9, #1
 8002256:	d505      	bpl.n	8002264 <_fwalk_reent+0x24>
 8002258:	6824      	ldr	r4, [r4, #0]
 800225a:	2c00      	cmp	r4, #0
 800225c:	d1f7      	bne.n	800224e <_fwalk_reent+0xe>
 800225e:	4638      	mov	r0, r7
 8002260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002264:	89ab      	ldrh	r3, [r5, #12]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d907      	bls.n	800227a <_fwalk_reent+0x3a>
 800226a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800226e:	3301      	adds	r3, #1
 8002270:	d003      	beq.n	800227a <_fwalk_reent+0x3a>
 8002272:	4629      	mov	r1, r5
 8002274:	4630      	mov	r0, r6
 8002276:	47c0      	blx	r8
 8002278:	4307      	orrs	r7, r0
 800227a:	3568      	adds	r5, #104	; 0x68
 800227c:	e7e9      	b.n	8002252 <_fwalk_reent+0x12>
	...

08002280 <__libc_init_array>:
 8002280:	b570      	push	{r4, r5, r6, lr}
 8002282:	4d0d      	ldr	r5, [pc, #52]	; (80022b8 <__libc_init_array+0x38>)
 8002284:	4c0d      	ldr	r4, [pc, #52]	; (80022bc <__libc_init_array+0x3c>)
 8002286:	1b64      	subs	r4, r4, r5
 8002288:	10a4      	asrs	r4, r4, #2
 800228a:	2600      	movs	r6, #0
 800228c:	42a6      	cmp	r6, r4
 800228e:	d109      	bne.n	80022a4 <__libc_init_array+0x24>
 8002290:	4d0b      	ldr	r5, [pc, #44]	; (80022c0 <__libc_init_array+0x40>)
 8002292:	4c0c      	ldr	r4, [pc, #48]	; (80022c4 <__libc_init_array+0x44>)
 8002294:	f000 fa6c 	bl	8002770 <_init>
 8002298:	1b64      	subs	r4, r4, r5
 800229a:	10a4      	asrs	r4, r4, #2
 800229c:	2600      	movs	r6, #0
 800229e:	42a6      	cmp	r6, r4
 80022a0:	d105      	bne.n	80022ae <__libc_init_array+0x2e>
 80022a2:	bd70      	pop	{r4, r5, r6, pc}
 80022a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80022a8:	4798      	blx	r3
 80022aa:	3601      	adds	r6, #1
 80022ac:	e7ee      	b.n	800228c <__libc_init_array+0xc>
 80022ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80022b2:	4798      	blx	r3
 80022b4:	3601      	adds	r6, #1
 80022b6:	e7f2      	b.n	800229e <__libc_init_array+0x1e>
 80022b8:	08002838 	.word	0x08002838
 80022bc:	08002838 	.word	0x08002838
 80022c0:	08002838 	.word	0x08002838
 80022c4:	0800283c 	.word	0x0800283c

080022c8 <__retarget_lock_init_recursive>:
 80022c8:	4770      	bx	lr

080022ca <__retarget_lock_acquire_recursive>:
 80022ca:	4770      	bx	lr

080022cc <__retarget_lock_release_recursive>:
 80022cc:	4770      	bx	lr

080022ce <memset>:
 80022ce:	4402      	add	r2, r0
 80022d0:	4603      	mov	r3, r0
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d100      	bne.n	80022d8 <memset+0xa>
 80022d6:	4770      	bx	lr
 80022d8:	f803 1b01 	strb.w	r1, [r3], #1
 80022dc:	e7f9      	b.n	80022d2 <memset+0x4>
	...

080022e0 <sbrk_aligned>:
 80022e0:	b570      	push	{r4, r5, r6, lr}
 80022e2:	4e0e      	ldr	r6, [pc, #56]	; (800231c <sbrk_aligned+0x3c>)
 80022e4:	460c      	mov	r4, r1
 80022e6:	6831      	ldr	r1, [r6, #0]
 80022e8:	4605      	mov	r5, r0
 80022ea:	b911      	cbnz	r1, 80022f2 <sbrk_aligned+0x12>
 80022ec:	f000 f88c 	bl	8002408 <_sbrk_r>
 80022f0:	6030      	str	r0, [r6, #0]
 80022f2:	4621      	mov	r1, r4
 80022f4:	4628      	mov	r0, r5
 80022f6:	f000 f887 	bl	8002408 <_sbrk_r>
 80022fa:	1c43      	adds	r3, r0, #1
 80022fc:	d00a      	beq.n	8002314 <sbrk_aligned+0x34>
 80022fe:	1cc4      	adds	r4, r0, #3
 8002300:	f024 0403 	bic.w	r4, r4, #3
 8002304:	42a0      	cmp	r0, r4
 8002306:	d007      	beq.n	8002318 <sbrk_aligned+0x38>
 8002308:	1a21      	subs	r1, r4, r0
 800230a:	4628      	mov	r0, r5
 800230c:	f000 f87c 	bl	8002408 <_sbrk_r>
 8002310:	3001      	adds	r0, #1
 8002312:	d101      	bne.n	8002318 <sbrk_aligned+0x38>
 8002314:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002318:	4620      	mov	r0, r4
 800231a:	bd70      	pop	{r4, r5, r6, pc}
 800231c:	20000154 	.word	0x20000154

08002320 <_malloc_r>:
 8002320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002324:	1ccd      	adds	r5, r1, #3
 8002326:	f025 0503 	bic.w	r5, r5, #3
 800232a:	3508      	adds	r5, #8
 800232c:	2d0c      	cmp	r5, #12
 800232e:	bf38      	it	cc
 8002330:	250c      	movcc	r5, #12
 8002332:	2d00      	cmp	r5, #0
 8002334:	4607      	mov	r7, r0
 8002336:	db01      	blt.n	800233c <_malloc_r+0x1c>
 8002338:	42a9      	cmp	r1, r5
 800233a:	d905      	bls.n	8002348 <_malloc_r+0x28>
 800233c:	230c      	movs	r3, #12
 800233e:	603b      	str	r3, [r7, #0]
 8002340:	2600      	movs	r6, #0
 8002342:	4630      	mov	r0, r6
 8002344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002348:	4e2e      	ldr	r6, [pc, #184]	; (8002404 <_malloc_r+0xe4>)
 800234a:	f000 f9a7 	bl	800269c <__malloc_lock>
 800234e:	6833      	ldr	r3, [r6, #0]
 8002350:	461c      	mov	r4, r3
 8002352:	bb34      	cbnz	r4, 80023a2 <_malloc_r+0x82>
 8002354:	4629      	mov	r1, r5
 8002356:	4638      	mov	r0, r7
 8002358:	f7ff ffc2 	bl	80022e0 <sbrk_aligned>
 800235c:	1c43      	adds	r3, r0, #1
 800235e:	4604      	mov	r4, r0
 8002360:	d14d      	bne.n	80023fe <_malloc_r+0xde>
 8002362:	6834      	ldr	r4, [r6, #0]
 8002364:	4626      	mov	r6, r4
 8002366:	2e00      	cmp	r6, #0
 8002368:	d140      	bne.n	80023ec <_malloc_r+0xcc>
 800236a:	6823      	ldr	r3, [r4, #0]
 800236c:	4631      	mov	r1, r6
 800236e:	4638      	mov	r0, r7
 8002370:	eb04 0803 	add.w	r8, r4, r3
 8002374:	f000 f848 	bl	8002408 <_sbrk_r>
 8002378:	4580      	cmp	r8, r0
 800237a:	d13a      	bne.n	80023f2 <_malloc_r+0xd2>
 800237c:	6821      	ldr	r1, [r4, #0]
 800237e:	3503      	adds	r5, #3
 8002380:	1a6d      	subs	r5, r5, r1
 8002382:	f025 0503 	bic.w	r5, r5, #3
 8002386:	3508      	adds	r5, #8
 8002388:	2d0c      	cmp	r5, #12
 800238a:	bf38      	it	cc
 800238c:	250c      	movcc	r5, #12
 800238e:	4629      	mov	r1, r5
 8002390:	4638      	mov	r0, r7
 8002392:	f7ff ffa5 	bl	80022e0 <sbrk_aligned>
 8002396:	3001      	adds	r0, #1
 8002398:	d02b      	beq.n	80023f2 <_malloc_r+0xd2>
 800239a:	6823      	ldr	r3, [r4, #0]
 800239c:	442b      	add	r3, r5
 800239e:	6023      	str	r3, [r4, #0]
 80023a0:	e00e      	b.n	80023c0 <_malloc_r+0xa0>
 80023a2:	6822      	ldr	r2, [r4, #0]
 80023a4:	1b52      	subs	r2, r2, r5
 80023a6:	d41e      	bmi.n	80023e6 <_malloc_r+0xc6>
 80023a8:	2a0b      	cmp	r2, #11
 80023aa:	d916      	bls.n	80023da <_malloc_r+0xba>
 80023ac:	1961      	adds	r1, r4, r5
 80023ae:	42a3      	cmp	r3, r4
 80023b0:	6025      	str	r5, [r4, #0]
 80023b2:	bf18      	it	ne
 80023b4:	6059      	strne	r1, [r3, #4]
 80023b6:	6863      	ldr	r3, [r4, #4]
 80023b8:	bf08      	it	eq
 80023ba:	6031      	streq	r1, [r6, #0]
 80023bc:	5162      	str	r2, [r4, r5]
 80023be:	604b      	str	r3, [r1, #4]
 80023c0:	4638      	mov	r0, r7
 80023c2:	f104 060b 	add.w	r6, r4, #11
 80023c6:	f000 f96f 	bl	80026a8 <__malloc_unlock>
 80023ca:	f026 0607 	bic.w	r6, r6, #7
 80023ce:	1d23      	adds	r3, r4, #4
 80023d0:	1af2      	subs	r2, r6, r3
 80023d2:	d0b6      	beq.n	8002342 <_malloc_r+0x22>
 80023d4:	1b9b      	subs	r3, r3, r6
 80023d6:	50a3      	str	r3, [r4, r2]
 80023d8:	e7b3      	b.n	8002342 <_malloc_r+0x22>
 80023da:	6862      	ldr	r2, [r4, #4]
 80023dc:	42a3      	cmp	r3, r4
 80023de:	bf0c      	ite	eq
 80023e0:	6032      	streq	r2, [r6, #0]
 80023e2:	605a      	strne	r2, [r3, #4]
 80023e4:	e7ec      	b.n	80023c0 <_malloc_r+0xa0>
 80023e6:	4623      	mov	r3, r4
 80023e8:	6864      	ldr	r4, [r4, #4]
 80023ea:	e7b2      	b.n	8002352 <_malloc_r+0x32>
 80023ec:	4634      	mov	r4, r6
 80023ee:	6876      	ldr	r6, [r6, #4]
 80023f0:	e7b9      	b.n	8002366 <_malloc_r+0x46>
 80023f2:	230c      	movs	r3, #12
 80023f4:	603b      	str	r3, [r7, #0]
 80023f6:	4638      	mov	r0, r7
 80023f8:	f000 f956 	bl	80026a8 <__malloc_unlock>
 80023fc:	e7a1      	b.n	8002342 <_malloc_r+0x22>
 80023fe:	6025      	str	r5, [r4, #0]
 8002400:	e7de      	b.n	80023c0 <_malloc_r+0xa0>
 8002402:	bf00      	nop
 8002404:	20000150 	.word	0x20000150

08002408 <_sbrk_r>:
 8002408:	b538      	push	{r3, r4, r5, lr}
 800240a:	4d06      	ldr	r5, [pc, #24]	; (8002424 <_sbrk_r+0x1c>)
 800240c:	2300      	movs	r3, #0
 800240e:	4604      	mov	r4, r0
 8002410:	4608      	mov	r0, r1
 8002412:	602b      	str	r3, [r5, #0]
 8002414:	f7fe fbb8 	bl	8000b88 <_sbrk>
 8002418:	1c43      	adds	r3, r0, #1
 800241a:	d102      	bne.n	8002422 <_sbrk_r+0x1a>
 800241c:	682b      	ldr	r3, [r5, #0]
 800241e:	b103      	cbz	r3, 8002422 <_sbrk_r+0x1a>
 8002420:	6023      	str	r3, [r4, #0]
 8002422:	bd38      	pop	{r3, r4, r5, pc}
 8002424:	20000158 	.word	0x20000158

08002428 <__sread>:
 8002428:	b510      	push	{r4, lr}
 800242a:	460c      	mov	r4, r1
 800242c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002430:	f000 f98c 	bl	800274c <_read_r>
 8002434:	2800      	cmp	r0, #0
 8002436:	bfab      	itete	ge
 8002438:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800243a:	89a3      	ldrhlt	r3, [r4, #12]
 800243c:	181b      	addge	r3, r3, r0
 800243e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002442:	bfac      	ite	ge
 8002444:	6563      	strge	r3, [r4, #84]	; 0x54
 8002446:	81a3      	strhlt	r3, [r4, #12]
 8002448:	bd10      	pop	{r4, pc}

0800244a <__swrite>:
 800244a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800244e:	461f      	mov	r7, r3
 8002450:	898b      	ldrh	r3, [r1, #12]
 8002452:	05db      	lsls	r3, r3, #23
 8002454:	4605      	mov	r5, r0
 8002456:	460c      	mov	r4, r1
 8002458:	4616      	mov	r6, r2
 800245a:	d505      	bpl.n	8002468 <__swrite+0x1e>
 800245c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002460:	2302      	movs	r3, #2
 8002462:	2200      	movs	r2, #0
 8002464:	f000 f908 	bl	8002678 <_lseek_r>
 8002468:	89a3      	ldrh	r3, [r4, #12]
 800246a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800246e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002472:	81a3      	strh	r3, [r4, #12]
 8002474:	4632      	mov	r2, r6
 8002476:	463b      	mov	r3, r7
 8002478:	4628      	mov	r0, r5
 800247a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800247e:	f000 b817 	b.w	80024b0 <_write_r>

08002482 <__sseek>:
 8002482:	b510      	push	{r4, lr}
 8002484:	460c      	mov	r4, r1
 8002486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800248a:	f000 f8f5 	bl	8002678 <_lseek_r>
 800248e:	1c43      	adds	r3, r0, #1
 8002490:	89a3      	ldrh	r3, [r4, #12]
 8002492:	bf15      	itete	ne
 8002494:	6560      	strne	r0, [r4, #84]	; 0x54
 8002496:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800249a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800249e:	81a3      	strheq	r3, [r4, #12]
 80024a0:	bf18      	it	ne
 80024a2:	81a3      	strhne	r3, [r4, #12]
 80024a4:	bd10      	pop	{r4, pc}

080024a6 <__sclose>:
 80024a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024aa:	f000 b813 	b.w	80024d4 <_close_r>
	...

080024b0 <_write_r>:
 80024b0:	b538      	push	{r3, r4, r5, lr}
 80024b2:	4d07      	ldr	r5, [pc, #28]	; (80024d0 <_write_r+0x20>)
 80024b4:	4604      	mov	r4, r0
 80024b6:	4608      	mov	r0, r1
 80024b8:	4611      	mov	r1, r2
 80024ba:	2200      	movs	r2, #0
 80024bc:	602a      	str	r2, [r5, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	f7ff fc11 	bl	8001ce6 <_write>
 80024c4:	1c43      	adds	r3, r0, #1
 80024c6:	d102      	bne.n	80024ce <_write_r+0x1e>
 80024c8:	682b      	ldr	r3, [r5, #0]
 80024ca:	b103      	cbz	r3, 80024ce <_write_r+0x1e>
 80024cc:	6023      	str	r3, [r4, #0]
 80024ce:	bd38      	pop	{r3, r4, r5, pc}
 80024d0:	20000158 	.word	0x20000158

080024d4 <_close_r>:
 80024d4:	b538      	push	{r3, r4, r5, lr}
 80024d6:	4d06      	ldr	r5, [pc, #24]	; (80024f0 <_close_r+0x1c>)
 80024d8:	2300      	movs	r3, #0
 80024da:	4604      	mov	r4, r0
 80024dc:	4608      	mov	r0, r1
 80024de:	602b      	str	r3, [r5, #0]
 80024e0:	f7ff fc32 	bl	8001d48 <_close>
 80024e4:	1c43      	adds	r3, r0, #1
 80024e6:	d102      	bne.n	80024ee <_close_r+0x1a>
 80024e8:	682b      	ldr	r3, [r5, #0]
 80024ea:	b103      	cbz	r3, 80024ee <_close_r+0x1a>
 80024ec:	6023      	str	r3, [r4, #0]
 80024ee:	bd38      	pop	{r3, r4, r5, pc}
 80024f0:	20000158 	.word	0x20000158

080024f4 <__sflush_r>:
 80024f4:	898a      	ldrh	r2, [r1, #12]
 80024f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024fa:	4605      	mov	r5, r0
 80024fc:	0710      	lsls	r0, r2, #28
 80024fe:	460c      	mov	r4, r1
 8002500:	d458      	bmi.n	80025b4 <__sflush_r+0xc0>
 8002502:	684b      	ldr	r3, [r1, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	dc05      	bgt.n	8002514 <__sflush_r+0x20>
 8002508:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	dc02      	bgt.n	8002514 <__sflush_r+0x20>
 800250e:	2000      	movs	r0, #0
 8002510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002516:	2e00      	cmp	r6, #0
 8002518:	d0f9      	beq.n	800250e <__sflush_r+0x1a>
 800251a:	2300      	movs	r3, #0
 800251c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002520:	682f      	ldr	r7, [r5, #0]
 8002522:	602b      	str	r3, [r5, #0]
 8002524:	d032      	beq.n	800258c <__sflush_r+0x98>
 8002526:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002528:	89a3      	ldrh	r3, [r4, #12]
 800252a:	075a      	lsls	r2, r3, #29
 800252c:	d505      	bpl.n	800253a <__sflush_r+0x46>
 800252e:	6863      	ldr	r3, [r4, #4]
 8002530:	1ac0      	subs	r0, r0, r3
 8002532:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002534:	b10b      	cbz	r3, 800253a <__sflush_r+0x46>
 8002536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002538:	1ac0      	subs	r0, r0, r3
 800253a:	2300      	movs	r3, #0
 800253c:	4602      	mov	r2, r0
 800253e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002540:	6a21      	ldr	r1, [r4, #32]
 8002542:	4628      	mov	r0, r5
 8002544:	47b0      	blx	r6
 8002546:	1c43      	adds	r3, r0, #1
 8002548:	89a3      	ldrh	r3, [r4, #12]
 800254a:	d106      	bne.n	800255a <__sflush_r+0x66>
 800254c:	6829      	ldr	r1, [r5, #0]
 800254e:	291d      	cmp	r1, #29
 8002550:	d82c      	bhi.n	80025ac <__sflush_r+0xb8>
 8002552:	4a2a      	ldr	r2, [pc, #168]	; (80025fc <__sflush_r+0x108>)
 8002554:	40ca      	lsrs	r2, r1
 8002556:	07d6      	lsls	r6, r2, #31
 8002558:	d528      	bpl.n	80025ac <__sflush_r+0xb8>
 800255a:	2200      	movs	r2, #0
 800255c:	6062      	str	r2, [r4, #4]
 800255e:	04d9      	lsls	r1, r3, #19
 8002560:	6922      	ldr	r2, [r4, #16]
 8002562:	6022      	str	r2, [r4, #0]
 8002564:	d504      	bpl.n	8002570 <__sflush_r+0x7c>
 8002566:	1c42      	adds	r2, r0, #1
 8002568:	d101      	bne.n	800256e <__sflush_r+0x7a>
 800256a:	682b      	ldr	r3, [r5, #0]
 800256c:	b903      	cbnz	r3, 8002570 <__sflush_r+0x7c>
 800256e:	6560      	str	r0, [r4, #84]	; 0x54
 8002570:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002572:	602f      	str	r7, [r5, #0]
 8002574:	2900      	cmp	r1, #0
 8002576:	d0ca      	beq.n	800250e <__sflush_r+0x1a>
 8002578:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800257c:	4299      	cmp	r1, r3
 800257e:	d002      	beq.n	8002586 <__sflush_r+0x92>
 8002580:	4628      	mov	r0, r5
 8002582:	f000 f897 	bl	80026b4 <_free_r>
 8002586:	2000      	movs	r0, #0
 8002588:	6360      	str	r0, [r4, #52]	; 0x34
 800258a:	e7c1      	b.n	8002510 <__sflush_r+0x1c>
 800258c:	6a21      	ldr	r1, [r4, #32]
 800258e:	2301      	movs	r3, #1
 8002590:	4628      	mov	r0, r5
 8002592:	47b0      	blx	r6
 8002594:	1c41      	adds	r1, r0, #1
 8002596:	d1c7      	bne.n	8002528 <__sflush_r+0x34>
 8002598:	682b      	ldr	r3, [r5, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0c4      	beq.n	8002528 <__sflush_r+0x34>
 800259e:	2b1d      	cmp	r3, #29
 80025a0:	d001      	beq.n	80025a6 <__sflush_r+0xb2>
 80025a2:	2b16      	cmp	r3, #22
 80025a4:	d101      	bne.n	80025aa <__sflush_r+0xb6>
 80025a6:	602f      	str	r7, [r5, #0]
 80025a8:	e7b1      	b.n	800250e <__sflush_r+0x1a>
 80025aa:	89a3      	ldrh	r3, [r4, #12]
 80025ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025b0:	81a3      	strh	r3, [r4, #12]
 80025b2:	e7ad      	b.n	8002510 <__sflush_r+0x1c>
 80025b4:	690f      	ldr	r7, [r1, #16]
 80025b6:	2f00      	cmp	r7, #0
 80025b8:	d0a9      	beq.n	800250e <__sflush_r+0x1a>
 80025ba:	0793      	lsls	r3, r2, #30
 80025bc:	680e      	ldr	r6, [r1, #0]
 80025be:	bf08      	it	eq
 80025c0:	694b      	ldreq	r3, [r1, #20]
 80025c2:	600f      	str	r7, [r1, #0]
 80025c4:	bf18      	it	ne
 80025c6:	2300      	movne	r3, #0
 80025c8:	eba6 0807 	sub.w	r8, r6, r7
 80025cc:	608b      	str	r3, [r1, #8]
 80025ce:	f1b8 0f00 	cmp.w	r8, #0
 80025d2:	dd9c      	ble.n	800250e <__sflush_r+0x1a>
 80025d4:	6a21      	ldr	r1, [r4, #32]
 80025d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80025d8:	4643      	mov	r3, r8
 80025da:	463a      	mov	r2, r7
 80025dc:	4628      	mov	r0, r5
 80025de:	47b0      	blx	r6
 80025e0:	2800      	cmp	r0, #0
 80025e2:	dc06      	bgt.n	80025f2 <__sflush_r+0xfe>
 80025e4:	89a3      	ldrh	r3, [r4, #12]
 80025e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ea:	81a3      	strh	r3, [r4, #12]
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025f0:	e78e      	b.n	8002510 <__sflush_r+0x1c>
 80025f2:	4407      	add	r7, r0
 80025f4:	eba8 0800 	sub.w	r8, r8, r0
 80025f8:	e7e9      	b.n	80025ce <__sflush_r+0xda>
 80025fa:	bf00      	nop
 80025fc:	20400001 	.word	0x20400001

08002600 <_fflush_r>:
 8002600:	b538      	push	{r3, r4, r5, lr}
 8002602:	690b      	ldr	r3, [r1, #16]
 8002604:	4605      	mov	r5, r0
 8002606:	460c      	mov	r4, r1
 8002608:	b913      	cbnz	r3, 8002610 <_fflush_r+0x10>
 800260a:	2500      	movs	r5, #0
 800260c:	4628      	mov	r0, r5
 800260e:	bd38      	pop	{r3, r4, r5, pc}
 8002610:	b118      	cbz	r0, 800261a <_fflush_r+0x1a>
 8002612:	6983      	ldr	r3, [r0, #24]
 8002614:	b90b      	cbnz	r3, 800261a <_fflush_r+0x1a>
 8002616:	f7ff fd95 	bl	8002144 <__sinit>
 800261a:	4b14      	ldr	r3, [pc, #80]	; (800266c <_fflush_r+0x6c>)
 800261c:	429c      	cmp	r4, r3
 800261e:	d11b      	bne.n	8002658 <_fflush_r+0x58>
 8002620:	686c      	ldr	r4, [r5, #4]
 8002622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0ef      	beq.n	800260a <_fflush_r+0xa>
 800262a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800262c:	07d0      	lsls	r0, r2, #31
 800262e:	d404      	bmi.n	800263a <_fflush_r+0x3a>
 8002630:	0599      	lsls	r1, r3, #22
 8002632:	d402      	bmi.n	800263a <_fflush_r+0x3a>
 8002634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002636:	f7ff fe48 	bl	80022ca <__retarget_lock_acquire_recursive>
 800263a:	4628      	mov	r0, r5
 800263c:	4621      	mov	r1, r4
 800263e:	f7ff ff59 	bl	80024f4 <__sflush_r>
 8002642:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002644:	07da      	lsls	r2, r3, #31
 8002646:	4605      	mov	r5, r0
 8002648:	d4e0      	bmi.n	800260c <_fflush_r+0xc>
 800264a:	89a3      	ldrh	r3, [r4, #12]
 800264c:	059b      	lsls	r3, r3, #22
 800264e:	d4dd      	bmi.n	800260c <_fflush_r+0xc>
 8002650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002652:	f7ff fe3b 	bl	80022cc <__retarget_lock_release_recursive>
 8002656:	e7d9      	b.n	800260c <_fflush_r+0xc>
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <_fflush_r+0x70>)
 800265a:	429c      	cmp	r4, r3
 800265c:	d101      	bne.n	8002662 <_fflush_r+0x62>
 800265e:	68ac      	ldr	r4, [r5, #8]
 8002660:	e7df      	b.n	8002622 <_fflush_r+0x22>
 8002662:	4b04      	ldr	r3, [pc, #16]	; (8002674 <_fflush_r+0x74>)
 8002664:	429c      	cmp	r4, r3
 8002666:	bf08      	it	eq
 8002668:	68ec      	ldreq	r4, [r5, #12]
 800266a:	e7da      	b.n	8002622 <_fflush_r+0x22>
 800266c:	080027ec 	.word	0x080027ec
 8002670:	0800280c 	.word	0x0800280c
 8002674:	080027cc 	.word	0x080027cc

08002678 <_lseek_r>:
 8002678:	b538      	push	{r3, r4, r5, lr}
 800267a:	4d07      	ldr	r5, [pc, #28]	; (8002698 <_lseek_r+0x20>)
 800267c:	4604      	mov	r4, r0
 800267e:	4608      	mov	r0, r1
 8002680:	4611      	mov	r1, r2
 8002682:	2200      	movs	r2, #0
 8002684:	602a      	str	r2, [r5, #0]
 8002686:	461a      	mov	r2, r3
 8002688:	f7ff fb1b 	bl	8001cc2 <_lseek>
 800268c:	1c43      	adds	r3, r0, #1
 800268e:	d102      	bne.n	8002696 <_lseek_r+0x1e>
 8002690:	682b      	ldr	r3, [r5, #0]
 8002692:	b103      	cbz	r3, 8002696 <_lseek_r+0x1e>
 8002694:	6023      	str	r3, [r4, #0]
 8002696:	bd38      	pop	{r3, r4, r5, pc}
 8002698:	20000158 	.word	0x20000158

0800269c <__malloc_lock>:
 800269c:	4801      	ldr	r0, [pc, #4]	; (80026a4 <__malloc_lock+0x8>)
 800269e:	f7ff be14 	b.w	80022ca <__retarget_lock_acquire_recursive>
 80026a2:	bf00      	nop
 80026a4:	2000014c 	.word	0x2000014c

080026a8 <__malloc_unlock>:
 80026a8:	4801      	ldr	r0, [pc, #4]	; (80026b0 <__malloc_unlock+0x8>)
 80026aa:	f7ff be0f 	b.w	80022cc <__retarget_lock_release_recursive>
 80026ae:	bf00      	nop
 80026b0:	2000014c 	.word	0x2000014c

080026b4 <_free_r>:
 80026b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80026b6:	2900      	cmp	r1, #0
 80026b8:	d044      	beq.n	8002744 <_free_r+0x90>
 80026ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026be:	9001      	str	r0, [sp, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f1a1 0404 	sub.w	r4, r1, #4
 80026c6:	bfb8      	it	lt
 80026c8:	18e4      	addlt	r4, r4, r3
 80026ca:	f7ff ffe7 	bl	800269c <__malloc_lock>
 80026ce:	4a1e      	ldr	r2, [pc, #120]	; (8002748 <_free_r+0x94>)
 80026d0:	9801      	ldr	r0, [sp, #4]
 80026d2:	6813      	ldr	r3, [r2, #0]
 80026d4:	b933      	cbnz	r3, 80026e4 <_free_r+0x30>
 80026d6:	6063      	str	r3, [r4, #4]
 80026d8:	6014      	str	r4, [r2, #0]
 80026da:	b003      	add	sp, #12
 80026dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80026e0:	f7ff bfe2 	b.w	80026a8 <__malloc_unlock>
 80026e4:	42a3      	cmp	r3, r4
 80026e6:	d908      	bls.n	80026fa <_free_r+0x46>
 80026e8:	6825      	ldr	r5, [r4, #0]
 80026ea:	1961      	adds	r1, r4, r5
 80026ec:	428b      	cmp	r3, r1
 80026ee:	bf01      	itttt	eq
 80026f0:	6819      	ldreq	r1, [r3, #0]
 80026f2:	685b      	ldreq	r3, [r3, #4]
 80026f4:	1949      	addeq	r1, r1, r5
 80026f6:	6021      	streq	r1, [r4, #0]
 80026f8:	e7ed      	b.n	80026d6 <_free_r+0x22>
 80026fa:	461a      	mov	r2, r3
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	b10b      	cbz	r3, 8002704 <_free_r+0x50>
 8002700:	42a3      	cmp	r3, r4
 8002702:	d9fa      	bls.n	80026fa <_free_r+0x46>
 8002704:	6811      	ldr	r1, [r2, #0]
 8002706:	1855      	adds	r5, r2, r1
 8002708:	42a5      	cmp	r5, r4
 800270a:	d10b      	bne.n	8002724 <_free_r+0x70>
 800270c:	6824      	ldr	r4, [r4, #0]
 800270e:	4421      	add	r1, r4
 8002710:	1854      	adds	r4, r2, r1
 8002712:	42a3      	cmp	r3, r4
 8002714:	6011      	str	r1, [r2, #0]
 8002716:	d1e0      	bne.n	80026da <_free_r+0x26>
 8002718:	681c      	ldr	r4, [r3, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	6053      	str	r3, [r2, #4]
 800271e:	4421      	add	r1, r4
 8002720:	6011      	str	r1, [r2, #0]
 8002722:	e7da      	b.n	80026da <_free_r+0x26>
 8002724:	d902      	bls.n	800272c <_free_r+0x78>
 8002726:	230c      	movs	r3, #12
 8002728:	6003      	str	r3, [r0, #0]
 800272a:	e7d6      	b.n	80026da <_free_r+0x26>
 800272c:	6825      	ldr	r5, [r4, #0]
 800272e:	1961      	adds	r1, r4, r5
 8002730:	428b      	cmp	r3, r1
 8002732:	bf04      	itt	eq
 8002734:	6819      	ldreq	r1, [r3, #0]
 8002736:	685b      	ldreq	r3, [r3, #4]
 8002738:	6063      	str	r3, [r4, #4]
 800273a:	bf04      	itt	eq
 800273c:	1949      	addeq	r1, r1, r5
 800273e:	6021      	streq	r1, [r4, #0]
 8002740:	6054      	str	r4, [r2, #4]
 8002742:	e7ca      	b.n	80026da <_free_r+0x26>
 8002744:	b003      	add	sp, #12
 8002746:	bd30      	pop	{r4, r5, pc}
 8002748:	20000150 	.word	0x20000150

0800274c <_read_r>:
 800274c:	b538      	push	{r3, r4, r5, lr}
 800274e:	4d07      	ldr	r5, [pc, #28]	; (800276c <_read_r+0x20>)
 8002750:	4604      	mov	r4, r0
 8002752:	4608      	mov	r0, r1
 8002754:	4611      	mov	r1, r2
 8002756:	2200      	movs	r2, #0
 8002758:	602a      	str	r2, [r5, #0]
 800275a:	461a      	mov	r2, r3
 800275c:	f7ff fa59 	bl	8001c12 <_read>
 8002760:	1c43      	adds	r3, r0, #1
 8002762:	d102      	bne.n	800276a <_read_r+0x1e>
 8002764:	682b      	ldr	r3, [r5, #0]
 8002766:	b103      	cbz	r3, 800276a <_read_r+0x1e>
 8002768:	6023      	str	r3, [r4, #0]
 800276a:	bd38      	pop	{r3, r4, r5, pc}
 800276c:	20000158 	.word	0x20000158

08002770 <_init>:
 8002770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002772:	bf00      	nop
 8002774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002776:	bc08      	pop	{r3}
 8002778:	469e      	mov	lr, r3
 800277a:	4770      	bx	lr

0800277c <_fini>:
 800277c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800277e:	bf00      	nop
 8002780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002782:	bc08      	pop	{r3}
 8002784:	469e      	mov	lr, r3
 8002786:	4770      	bx	lr
