
lab2_11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004840  08004840  00014840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004910  08004910  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004910  08004910  00014910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004918  08004918  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004918  08004918  00014918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800491c  0800491c  0001491c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004920  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000078  08004998  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08004998  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000095f5  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001686  00000000  00000000  0002969d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002ad28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c8  00000000  00000000  0002b6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015992  00000000  00000000  0002bf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f91  00000000  00000000  00041902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089c18  00000000  00000000  0004b893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d54ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032a8  00000000  00000000  000d54fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004828 	.word	0x08004828

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08004828 	.word	0x08004828

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fc6e 	bl	8000e78 <HAL_Init>

  /* USER CODE BEGIN Init */
  initialise_monitor_handles();
 800059c:	f003 f906 	bl	80037ac <initialise_monitor_handles>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f826 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f97c 	bl	80008a0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005a8:	f000 f88c 	bl	80006c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005ac:	f000 f8dc 	bl	8000768 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim1);
 80005b0:	480c      	ldr	r0, [pc, #48]	; (80005e4 <main+0x50>)
 80005b2:	f001 fc75 	bl	8001ea0 <HAL_TIM_Base_Start_IT>
HAL_TIM_Base_Start_IT(&htim2);
 80005b6:	480c      	ldr	r0, [pc, #48]	; (80005e8 <main+0x54>)
 80005b8:	f001 fc72 	bl	8001ea0 <HAL_TIM_Base_Start_IT>
HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80005bc:	2104      	movs	r1, #4
 80005be:	480a      	ldr	r0, [pc, #40]	; (80005e8 <main+0x54>)
 80005c0:	f001 fd2a 	bl	8002018 <HAL_TIM_PWM_Start>
HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_4);
 80005c4:	210c      	movs	r1, #12
 80005c6:	4808      	ldr	r0, [pc, #32]	; (80005e8 <main+0x54>)
 80005c8:	f001 fe30 	bl	800222c <HAL_TIM_IC_Start>
  while (1)
  {
//	  TIM2->CCR2 = 3000;
//	  HAL_Delay(500);
//	  TIM2->CCR2 = 17000;
	  HAL_Delay(500);
 80005cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005d0:	f000 fcc4 	bl	8000f5c <HAL_Delay>
	  printf("test %d\n", TIM2->CCR4);
 80005d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005da:	4619      	mov	r1, r3
 80005dc:	4803      	ldr	r0, [pc, #12]	; (80005ec <main+0x58>)
 80005de:	f003 fb21 	bl	8003c24 <iprintf>
  {
 80005e2:	e7f3      	b.n	80005cc <main+0x38>
 80005e4:	20000094 	.word	0x20000094
 80005e8:	200000dc 	.word	0x200000dc
 80005ec:	08004840 	.word	0x08004840

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 fa73 	bl	8003aea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a27      	ldr	r2, [pc, #156]	; (80006bc <SystemClock_Config+0xcc>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b22      	ldr	r3, [pc, #136]	; (80006c0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a21      	ldr	r2, [pc, #132]	; (80006c0 <SystemClock_Config+0xd0>)
 800063a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800064c:	2301      	movs	r3, #1
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000656:	2302      	movs	r3, #2
 8000658:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000660:	2304      	movs	r3, #4
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000664:	2364      	movs	r3, #100	; 0x64
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000668:	2302      	movs	r3, #2
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800066c:	2308      	movs	r3, #8
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f000 ff5f 	bl	8001538 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000680:	f000 fa6c 	bl	8000b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2103      	movs	r1, #3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f9c0 	bl	8001a28 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ae:	f000 fa55 	bl	8000b5c <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	; 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d8:	463b      	mov	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <MX_TIM1_Init+0x9c>)
 80006e2:	4a20      	ldr	r2, [pc, #128]	; (8000764 <MX_TIM1_Init+0xa0>)
 80006e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_TIM1_Init+0x9c>)
 80006e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_TIM1_Init+0x9c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7800;
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_TIM1_Init+0x9c>)
 80006f6:	f641 6278 	movw	r2, #7800	; 0x1e78
 80006fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fc:	4b18      	ldr	r3, [pc, #96]	; (8000760 <MX_TIM1_Init+0x9c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_TIM1_Init+0x9c>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <MX_TIM1_Init+0x9c>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800070e:	4814      	ldr	r0, [pc, #80]	; (8000760 <MX_TIM1_Init+0x9c>)
 8000710:	f001 fb76 	bl	8001e00 <HAL_TIM_Base_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800071a:	f000 fa1f 	bl	8000b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800071e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000722:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000724:	f107 0308 	add.w	r3, r7, #8
 8000728:	4619      	mov	r1, r3
 800072a:	480d      	ldr	r0, [pc, #52]	; (8000760 <MX_TIM1_Init+0x9c>)
 800072c:	f002 f8b2 	bl	8002894 <HAL_TIM_ConfigClockSource>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000736:	f000 fa11 	bl	8000b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000742:	463b      	mov	r3, r7
 8000744:	4619      	mov	r1, r3
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <MX_TIM1_Init+0x9c>)
 8000748:	f002 fd88 	bl	800325c <HAL_TIMEx_MasterConfigSynchronization>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000752:	f000 fa03 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000094 	.word	0x20000094
 8000764:	40010000 	.word	0x40010000

08000768 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b092      	sub	sp, #72	; 0x48
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
 8000796:	615a      	str	r2, [r3, #20]
 8000798:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007a6:	4b3b      	ldr	r3, [pc, #236]	; (8000894 <MX_TIM2_Init+0x12c>)
 80007a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007ae:	4b39      	ldr	r3, [pc, #228]	; (8000894 <MX_TIM2_Init+0x12c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	4b37      	ldr	r3, [pc, #220]	; (8000894 <MX_TIM2_Init+0x12c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000000;
 80007ba:	4b36      	ldr	r3, [pc, #216]	; (8000894 <MX_TIM2_Init+0x12c>)
 80007bc:	4a36      	ldr	r2, [pc, #216]	; (8000898 <MX_TIM2_Init+0x130>)
 80007be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c0:	4b34      	ldr	r3, [pc, #208]	; (8000894 <MX_TIM2_Init+0x12c>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c6:	4b33      	ldr	r3, [pc, #204]	; (8000894 <MX_TIM2_Init+0x12c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007cc:	4831      	ldr	r0, [pc, #196]	; (8000894 <MX_TIM2_Init+0x12c>)
 80007ce:	f001 fb17 	bl	8001e00 <HAL_TIM_Base_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80007d8:	f000 f9c0 	bl	8000b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007e6:	4619      	mov	r1, r3
 80007e8:	482a      	ldr	r0, [pc, #168]	; (8000894 <MX_TIM2_Init+0x12c>)
 80007ea:	f002 f853 	bl	8002894 <HAL_TIM_ConfigClockSource>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80007f4:	f000 f9b2 	bl	8000b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007f8:	4826      	ldr	r0, [pc, #152]	; (8000894 <MX_TIM2_Init+0x12c>)
 80007fa:	f001 fbb3 	bl	8001f64 <HAL_TIM_PWM_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000804:	f000 f9aa 	bl	8000b5c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000808:	4822      	ldr	r0, [pc, #136]	; (8000894 <MX_TIM2_Init+0x12c>)
 800080a:	f001 fcb5 	bl	8002178 <HAL_TIM_IC_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000814:	f000 f9a2 	bl	8000b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000818:	2300      	movs	r3, #0
 800081a:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000820:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000824:	4619      	mov	r1, r3
 8000826:	481b      	ldr	r0, [pc, #108]	; (8000894 <MX_TIM2_Init+0x12c>)
 8000828:	f002 fd18 	bl	800325c <HAL_TIMEx_MasterConfigSynchronization>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 8000832:	f000 f993 	bl	8000b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000836:	2360      	movs	r3, #96	; 0x60
 8000838:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 400000;
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_TIM2_Init+0x134>)
 800083c:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2204      	movs	r2, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4811      	ldr	r0, [pc, #68]	; (8000894 <MX_TIM2_Init+0x12c>)
 8000850:	f001 ff5e 	bl	8002710 <HAL_TIM_PWM_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 800085a:	f000 f97f 	bl	8000b5c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000862:	2301      	movs	r3, #1
 8000864:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	220c      	movs	r2, #12
 8000872:	4619      	mov	r1, r3
 8000874:	4807      	ldr	r0, [pc, #28]	; (8000894 <MX_TIM2_Init+0x12c>)
 8000876:	f001 feaf 	bl	80025d8 <HAL_TIM_IC_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000880:	f000 f96c 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000884:	4803      	ldr	r0, [pc, #12]	; (8000894 <MX_TIM2_Init+0x12c>)
 8000886:	f000 fa03 	bl	8000c90 <HAL_TIM_MspPostInit>

}
 800088a:	bf00      	nop
 800088c:	3748      	adds	r7, #72	; 0x48
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000dc 	.word	0x200000dc
 8000898:	001e8480 	.word	0x001e8480
 800089c:	00061a80 	.word	0x00061a80

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	; 0x30
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	61bb      	str	r3, [r7, #24]
 80008ba:	4ba2      	ldr	r3, [pc, #648]	; (8000b44 <MX_GPIO_Init+0x2a4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4aa1      	ldr	r2, [pc, #644]	; (8000b44 <MX_GPIO_Init+0x2a4>)
 80008c0:	f043 0310 	orr.w	r3, r3, #16
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b9f      	ldr	r3, [pc, #636]	; (8000b44 <MX_GPIO_Init+0x2a4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0310 	and.w	r3, r3, #16
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
 80008d6:	4b9b      	ldr	r3, [pc, #620]	; (8000b44 <MX_GPIO_Init+0x2a4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a9a      	ldr	r2, [pc, #616]	; (8000b44 <MX_GPIO_Init+0x2a4>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b98      	ldr	r3, [pc, #608]	; (8000b44 <MX_GPIO_Init+0x2a4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	4b94      	ldr	r3, [pc, #592]	; (8000b44 <MX_GPIO_Init+0x2a4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a93      	ldr	r2, [pc, #588]	; (8000b44 <MX_GPIO_Init+0x2a4>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b91      	ldr	r3, [pc, #580]	; (8000b44 <MX_GPIO_Init+0x2a4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b8d      	ldr	r3, [pc, #564]	; (8000b44 <MX_GPIO_Init+0x2a4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a8c      	ldr	r2, [pc, #560]	; (8000b44 <MX_GPIO_Init+0x2a4>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b8a      	ldr	r3, [pc, #552]	; (8000b44 <MX_GPIO_Init+0x2a4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	4b86      	ldr	r3, [pc, #536]	; (8000b44 <MX_GPIO_Init+0x2a4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a85      	ldr	r2, [pc, #532]	; (8000b44 <MX_GPIO_Init+0x2a4>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b83      	ldr	r3, [pc, #524]	; (8000b44 <MX_GPIO_Init+0x2a4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	4b7f      	ldr	r3, [pc, #508]	; (8000b44 <MX_GPIO_Init+0x2a4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a7e      	ldr	r2, [pc, #504]	; (8000b44 <MX_GPIO_Init+0x2a4>)
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b7c      	ldr	r3, [pc, #496]	; (8000b44 <MX_GPIO_Init+0x2a4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2108      	movs	r1, #8
 8000962:	4879      	ldr	r0, [pc, #484]	; (8000b48 <MX_GPIO_Init+0x2a8>)
 8000964:	f000 fdb4 	bl	80014d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	2101      	movs	r1, #1
 800096c:	4877      	ldr	r0, [pc, #476]	; (8000b4c <MX_GPIO_Init+0x2ac>)
 800096e:	f000 fdaf 	bl	80014d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000972:	2200      	movs	r2, #0
 8000974:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000978:	4875      	ldr	r0, [pc, #468]	; (8000b50 <MX_GPIO_Init+0x2b0>)
 800097a:	f000 fda9 	bl	80014d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800097e:	2304      	movs	r3, #4
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	486d      	ldr	r0, [pc, #436]	; (8000b48 <MX_GPIO_Init+0x2a8>)
 8000992:	f000 fc19 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000996:	2308      	movs	r3, #8
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099a:	2301      	movs	r3, #1
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4866      	ldr	r0, [pc, #408]	; (8000b48 <MX_GPIO_Init+0x2a8>)
 80009ae:	f000 fc0b 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80009b2:	2332      	movs	r3, #50	; 0x32
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009b6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4860      	ldr	r0, [pc, #384]	; (8000b48 <MX_GPIO_Init+0x2a8>)
 80009c8:	f000 fbfe 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	485a      	ldr	r0, [pc, #360]	; (8000b4c <MX_GPIO_Init+0x2ac>)
 80009e4:	f000 fbf0 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009e8:	2308      	movs	r3, #8
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009f8:	2305      	movs	r3, #5
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4852      	ldr	r0, [pc, #328]	; (8000b4c <MX_GPIO_Init+0x2ac>)
 8000a04:	f000 fbe0 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	484d      	ldr	r0, [pc, #308]	; (8000b54 <MX_GPIO_Init+0x2b4>)
 8000a1e:	f000 fbd3 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a22:	2310      	movs	r3, #16
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a32:	2306      	movs	r3, #6
 8000a34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4845      	ldr	r0, [pc, #276]	; (8000b54 <MX_GPIO_Init+0x2b4>)
 8000a3e:	f000 fbc3 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a42:	23e0      	movs	r3, #224	; 0xe0
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a52:	2305      	movs	r3, #5
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	483d      	ldr	r0, [pc, #244]	; (8000b54 <MX_GPIO_Init+0x2b4>)
 8000a5e:	f000 fbb3 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000a62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a74:	2305      	movs	r3, #5
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4836      	ldr	r0, [pc, #216]	; (8000b58 <MX_GPIO_Init+0x2b8>)
 8000a80:	f000 fba2 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a84:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a88:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	482c      	ldr	r0, [pc, #176]	; (8000b50 <MX_GPIO_Init+0x2b0>)
 8000a9e:	f000 fb93 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aa2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab4:	2306      	movs	r3, #6
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4823      	ldr	r0, [pc, #140]	; (8000b4c <MX_GPIO_Init+0x2ac>)
 8000ac0:	f000 fb82 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	481e      	ldr	r0, [pc, #120]	; (8000b54 <MX_GPIO_Init+0x2b4>)
 8000ada:	f000 fb75 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000ade:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000af0:	230a      	movs	r3, #10
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	4816      	ldr	r0, [pc, #88]	; (8000b54 <MX_GPIO_Init+0x2b4>)
 8000afc:	f000 fb64 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b00:	2320      	movs	r3, #32
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	480f      	ldr	r0, [pc, #60]	; (8000b50 <MX_GPIO_Init+0x2b0>)
 8000b14:	f000 fb58 	bl	80011c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b18:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b1e:	2312      	movs	r3, #18
 8000b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	4808      	ldr	r0, [pc, #32]	; (8000b58 <MX_GPIO_Init+0x2b8>)
 8000b36:	f000 fb47 	bl	80011c8 <HAL_GPIO_Init>

}
 8000b3a:	bf00      	nop
 8000b3c:	3730      	adds	r7, #48	; 0x30
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40020800 	.word	0x40020800
 8000b50:	40020c00 	.word	0x40020c00
 8000b54:	40020000 	.word	0x40020000
 8000b58:	40020400 	.word	0x40020400

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <Error_Handler+0x8>
	...

08000b68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	4a0f      	ldr	r2, [pc, #60]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a08      	ldr	r2, [pc, #32]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_MspInit+0x4c>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ba6:	2007      	movs	r0, #7
 8000ba8:	f000 facc 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	; 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a2b      	ldr	r2, [pc, #172]	; (8000c84 <HAL_TIM_Base_MspInit+0xcc>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d116      	bne.n	8000c08 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <HAL_TIM_Base_MspInit+0xd0>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	4a29      	ldr	r2, [pc, #164]	; (8000c88 <HAL_TIM_Base_MspInit+0xd0>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bea:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <HAL_TIM_Base_MspInit+0xd0>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2019      	movs	r0, #25
 8000bfc:	f000 faad 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c00:	2019      	movs	r0, #25
 8000c02:	f000 fac6 	bl	8001192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c06:	e038      	b.n	8000c7a <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM2)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c10:	d133      	bne.n	8000c7a <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <HAL_TIM_Base_MspInit+0xd0>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	4a1b      	ldr	r2, [pc, #108]	; (8000c88 <HAL_TIM_Base_MspInit+0xd0>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6413      	str	r3, [r2, #64]	; 0x40
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <HAL_TIM_Base_MspInit+0xd0>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_TIM_Base_MspInit+0xd0>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <HAL_TIM_Base_MspInit+0xd0>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_TIM_Base_MspInit+0xd0>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c4a:	2308      	movs	r3, #8
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4809      	ldr	r0, [pc, #36]	; (8000c8c <HAL_TIM_Base_MspInit+0xd4>)
 8000c66:	f000 faaf 	bl	80011c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	201c      	movs	r0, #28
 8000c70:	f000 fa73 	bl	800115a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c74:	201c      	movs	r0, #28
 8000c76:	f000 fa8c 	bl	8001192 <HAL_NVIC_EnableIRQ>
}
 8000c7a:	bf00      	nop
 8000c7c:	3728      	adds	r7, #40	; 0x28
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40010000 	.word	0x40010000
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000

08000c90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cb0:	d11d      	bne.n	8000cee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <HAL_TIM_MspPostInit+0x68>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a0f      	ldr	r2, [pc, #60]	; (8000cf8 <HAL_TIM_MspPostInit+0x68>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <HAL_TIM_MspPostInit+0x68>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <HAL_TIM_MspPostInit+0x6c>)
 8000cea:	f000 fa6d 	bl	80011c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cee:	bf00      	nop
 8000cf0:	3720      	adds	r7, #32
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40020000 	.word	0x40020000

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <NMI_Handler+0x4>

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <MemManage_Handler+0x4>

08000d12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <BusFault_Handler+0x4>

08000d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <UsageFault_Handler+0x4>

08000d1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4c:	f000 f8e6 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000d58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d5c:	4803      	ldr	r0, [pc, #12]	; (8000d6c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000d5e:	f000 fbd0 	bl	8001502 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d62:	4803      	ldr	r0, [pc, #12]	; (8000d70 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000d64:	f001 fb30 	bl	80023c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40020c00 	.word	0x40020c00
 8000d70:	20000094 	.word	0x20000094

08000d74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 8000d78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d7c:	4803      	ldr	r0, [pc, #12]	; (8000d8c <TIM2_IRQHandler+0x18>)
 8000d7e:	f000 fbc0 	bl	8001502 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d82:	4803      	ldr	r0, [pc, #12]	; (8000d90 <TIM2_IRQHandler+0x1c>)
 8000d84:	f001 fb20 	bl	80023c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40020c00 	.word	0x40020c00
 8000d90:	200000dc 	.word	0x200000dc

08000d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d9c:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <_sbrk+0x5c>)
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <_sbrk+0x60>)
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da8:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db0:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <_sbrk+0x64>)
 8000db2:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <_sbrk+0x68>)
 8000db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db6:	4b10      	ldr	r3, [pc, #64]	; (8000df8 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d207      	bcs.n	8000dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc4:	f002 fd6e 	bl	80038a4 <__errno>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	220c      	movs	r2, #12
 8000dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dd2:	e009      	b.n	8000de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <_sbrk+0x64>)
 8000de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de6:	68fb      	ldr	r3, [r7, #12]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20020000 	.word	0x20020000
 8000df4:	00000400 	.word	0x00000400
 8000df8:	20000124 	.word	0x20000124
 8000dfc:	200001e8 	.word	0x200001e8

08000e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <SystemInit+0x20>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e0a:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <SystemInit+0x20>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e2a:	490e      	ldr	r1, [pc, #56]	; (8000e64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e2c:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e40:	4c0b      	ldr	r4, [pc, #44]	; (8000e70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e4e:	f7ff ffd7 	bl	8000e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f002 fe23 	bl	8003a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e56:	f7ff fb9d 	bl	8000594 <main>
  bx  lr    
 8000e5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e68:	08004920 	.word	0x08004920
  ldr r2, =_sbss
 8000e6c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e70:	200001e8 	.word	0x200001e8

08000e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <HAL_Init+0x40>)
 8000e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_Init+0x40>)
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_Init+0x40>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f94f 	bl	8001144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f000 f808 	bl	8000ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff fe5c 	bl	8000b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x54>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x58>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f967 	bl	80011ae <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef8:	f000 f92f 	bl	800115a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_InitTick+0x5c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000004 	.word	0x20000004

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20000128 	.word	0x20000128

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000128 	.word	0x20000128

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db0b      	blt.n	8001032 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	f003 021f 	and.w	r2, r3, #31
 8001020:	4907      	ldr	r1, [pc, #28]	; (8001040 <__NVIC_EnableIRQ+0x38>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	2001      	movs	r0, #1
 800102a:	fa00 f202 	lsl.w	r2, r0, r2
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	490c      	ldr	r1, [pc, #48]	; (8001090 <__NVIC_SetPriority+0x4c>)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4908      	ldr	r1, [pc, #32]	; (8001094 <__NVIC_SetPriority+0x50>)
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	3b04      	subs	r3, #4
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43da      	mvns	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ea:	43d9      	mvns	r1, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	4313      	orrs	r3, r2
         );
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3724      	adds	r7, #36	; 0x24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3b01      	subs	r3, #1
 800110c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001110:	d301      	bcc.n	8001116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001112:	2301      	movs	r3, #1
 8001114:	e00f      	b.n	8001136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001116:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <SysTick_Config+0x40>)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111e:	210f      	movs	r1, #15
 8001120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001124:	f7ff ff8e 	bl	8001044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <SysTick_Config+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <SysTick_Config+0x40>)
 8001130:	2207      	movs	r2, #7
 8001132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	e000e010 	.word	0xe000e010

08001144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff ff29 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	4603      	mov	r3, r0
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
 8001166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800116c:	f7ff ff3e 	bl	8000fec <__NVIC_GetPriorityGrouping>
 8001170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	6978      	ldr	r0, [r7, #20]
 8001178:	f7ff ff8e 	bl	8001098 <NVIC_EncodePriority>
 800117c:	4602      	mov	r2, r0
 800117e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001182:	4611      	mov	r1, r2
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff5d 	bl	8001044 <__NVIC_SetPriority>
}
 800118a:	bf00      	nop
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800119c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff31 	bl	8001008 <__NVIC_EnableIRQ>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	b082      	sub	sp, #8
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ffa2 	bl	8001100 <SysTick_Config>
 80011bc:	4603      	mov	r3, r0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	e159      	b.n	8001498 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011e4:	2201      	movs	r2, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	f040 8148 	bne.w	8001492 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b01      	cmp	r3, #1
 800120c:	d005      	beq.n	800121a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001216:	2b02      	cmp	r3, #2
 8001218:	d130      	bne.n	800127c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	2203      	movs	r2, #3
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001250:	2201      	movs	r2, #1
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	f003 0201 	and.w	r2, r3, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b03      	cmp	r3, #3
 8001286:	d017      	beq.n	80012b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d123      	bne.n	800130c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	08da      	lsrs	r2, r3, #3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3208      	adds	r2, #8
 80012cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	691a      	ldr	r2, [r3, #16]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	08da      	lsrs	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3208      	adds	r2, #8
 8001306:	69b9      	ldr	r1, [r7, #24]
 8001308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0203 	and.w	r2, r3, #3
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80a2 	beq.w	8001492 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b57      	ldr	r3, [pc, #348]	; (80014b0 <HAL_GPIO_Init+0x2e8>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a56      	ldr	r2, [pc, #344]	; (80014b0 <HAL_GPIO_Init+0x2e8>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b54      	ldr	r3, [pc, #336]	; (80014b0 <HAL_GPIO_Init+0x2e8>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800136a:	4a52      	ldr	r2, [pc, #328]	; (80014b4 <HAL_GPIO_Init+0x2ec>)
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3302      	adds	r3, #2
 8001372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	220f      	movs	r2, #15
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a49      	ldr	r2, [pc, #292]	; (80014b8 <HAL_GPIO_Init+0x2f0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d019      	beq.n	80013ca <HAL_GPIO_Init+0x202>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a48      	ldr	r2, [pc, #288]	; (80014bc <HAL_GPIO_Init+0x2f4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d013      	beq.n	80013c6 <HAL_GPIO_Init+0x1fe>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a47      	ldr	r2, [pc, #284]	; (80014c0 <HAL_GPIO_Init+0x2f8>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d00d      	beq.n	80013c2 <HAL_GPIO_Init+0x1fa>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a46      	ldr	r2, [pc, #280]	; (80014c4 <HAL_GPIO_Init+0x2fc>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d007      	beq.n	80013be <HAL_GPIO_Init+0x1f6>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a45      	ldr	r2, [pc, #276]	; (80014c8 <HAL_GPIO_Init+0x300>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d101      	bne.n	80013ba <HAL_GPIO_Init+0x1f2>
 80013b6:	2304      	movs	r3, #4
 80013b8:	e008      	b.n	80013cc <HAL_GPIO_Init+0x204>
 80013ba:	2307      	movs	r3, #7
 80013bc:	e006      	b.n	80013cc <HAL_GPIO_Init+0x204>
 80013be:	2303      	movs	r3, #3
 80013c0:	e004      	b.n	80013cc <HAL_GPIO_Init+0x204>
 80013c2:	2302      	movs	r3, #2
 80013c4:	e002      	b.n	80013cc <HAL_GPIO_Init+0x204>
 80013c6:	2301      	movs	r3, #1
 80013c8:	e000      	b.n	80013cc <HAL_GPIO_Init+0x204>
 80013ca:	2300      	movs	r3, #0
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	f002 0203 	and.w	r2, r2, #3
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	4093      	lsls	r3, r2
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013dc:	4935      	ldr	r1, [pc, #212]	; (80014b4 <HAL_GPIO_Init+0x2ec>)
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3302      	adds	r3, #2
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ea:	4b38      	ldr	r3, [pc, #224]	; (80014cc <HAL_GPIO_Init+0x304>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800140e:	4a2f      	ldr	r2, [pc, #188]	; (80014cc <HAL_GPIO_Init+0x304>)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001414:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <HAL_GPIO_Init+0x304>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4313      	orrs	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001438:	4a24      	ldr	r2, [pc, #144]	; (80014cc <HAL_GPIO_Init+0x304>)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800143e:	4b23      	ldr	r3, [pc, #140]	; (80014cc <HAL_GPIO_Init+0x304>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001462:	4a1a      	ldr	r2, [pc, #104]	; (80014cc <HAL_GPIO_Init+0x304>)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001468:	4b18      	ldr	r3, [pc, #96]	; (80014cc <HAL_GPIO_Init+0x304>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800148c:	4a0f      	ldr	r2, [pc, #60]	; (80014cc <HAL_GPIO_Init+0x304>)
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3301      	adds	r3, #1
 8001496:	61fb      	str	r3, [r7, #28]
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	2b0f      	cmp	r3, #15
 800149c:	f67f aea2 	bls.w	80011e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3724      	adds	r7, #36	; 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40013800 	.word	0x40013800
 80014b8:	40020000 	.word	0x40020000
 80014bc:	40020400 	.word	0x40020400
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40020c00 	.word	0x40020c00
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40013c00 	.word	0x40013c00

080014d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	807b      	strh	r3, [r7, #2]
 80014dc:	4613      	mov	r3, r2
 80014de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014e0:	787b      	ldrb	r3, [r7, #1]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e6:	887a      	ldrh	r2, [r7, #2]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014ec:	e003      	b.n	80014f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ee:	887b      	ldrh	r3, [r7, #2]
 80014f0:	041a      	lsls	r2, r3, #16
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	619a      	str	r2, [r3, #24]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001502:	b480      	push	{r7}
 8001504:	b085      	sub	sp, #20
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
 800150a:	460b      	mov	r3, r1
 800150c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001514:	887a      	ldrh	r2, [r7, #2]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4013      	ands	r3, r2
 800151a:	041a      	lsls	r2, r3, #16
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43d9      	mvns	r1, r3
 8001520:	887b      	ldrh	r3, [r7, #2]
 8001522:	400b      	ands	r3, r1
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	619a      	str	r2, [r3, #24]
}
 800152a:	bf00      	nop
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e267      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d075      	beq.n	8001642 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001556:	4b88      	ldr	r3, [pc, #544]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b04      	cmp	r3, #4
 8001560:	d00c      	beq.n	800157c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001562:	4b85      	ldr	r3, [pc, #532]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800156a:	2b08      	cmp	r3, #8
 800156c:	d112      	bne.n	8001594 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800156e:	4b82      	ldr	r3, [pc, #520]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800157a:	d10b      	bne.n	8001594 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	4b7e      	ldr	r3, [pc, #504]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d05b      	beq.n	8001640 <HAL_RCC_OscConfig+0x108>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d157      	bne.n	8001640 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e242      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159c:	d106      	bne.n	80015ac <HAL_RCC_OscConfig+0x74>
 800159e:	4b76      	ldr	r3, [pc, #472]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a75      	ldr	r2, [pc, #468]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e01d      	b.n	80015e8 <HAL_RCC_OscConfig+0xb0>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x98>
 80015b6:	4b70      	ldr	r3, [pc, #448]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a6f      	ldr	r2, [pc, #444]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b6d      	ldr	r3, [pc, #436]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a6c      	ldr	r2, [pc, #432]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0xb0>
 80015d0:	4b69      	ldr	r3, [pc, #420]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a68      	ldr	r2, [pc, #416]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b66      	ldr	r3, [pc, #408]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a65      	ldr	r2, [pc, #404]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d013      	beq.n	8001618 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fca8 	bl	8000f44 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fca4 	bl	8000f44 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e207      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	4b5b      	ldr	r3, [pc, #364]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0xc0>
 8001616:	e014      	b.n	8001642 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fc94 	bl	8000f44 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff fc90 	bl	8000f44 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	; 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e1f3      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001632:	4b51      	ldr	r3, [pc, #324]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0xe8>
 800163e:	e000      	b.n	8001642 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d063      	beq.n	8001716 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800164e:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00b      	beq.n	8001672 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800165a:	4b47      	ldr	r3, [pc, #284]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001662:	2b08      	cmp	r3, #8
 8001664:	d11c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001666:	4b44      	ldr	r3, [pc, #272]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d116      	bne.n	80016a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d005      	beq.n	800168a <HAL_RCC_OscConfig+0x152>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d001      	beq.n	800168a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e1c7      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168a:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	4937      	ldr	r1, [pc, #220]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800169a:	4313      	orrs	r3, r2
 800169c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169e:	e03a      	b.n	8001716 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d020      	beq.n	80016ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a8:	4b34      	ldr	r3, [pc, #208]	; (800177c <HAL_RCC_OscConfig+0x244>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff fc49 	bl	8000f44 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016b6:	f7ff fc45 	bl	8000f44 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e1a8      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4925      	ldr	r1, [pc, #148]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]
 80016e8:	e015      	b.n	8001716 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ea:	4b24      	ldr	r3, [pc, #144]	; (800177c <HAL_RCC_OscConfig+0x244>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fc28 	bl	8000f44 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f8:	f7ff fc24 	bl	8000f44 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e187      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d036      	beq.n	8001790 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d016      	beq.n	8001758 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_RCC_OscConfig+0x248>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001730:	f7ff fc08 	bl	8000f44 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001738:	f7ff fc04 	bl	8000f44 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e167      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800174c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0x200>
 8001756:	e01b      	b.n	8001790 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_RCC_OscConfig+0x248>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175e:	f7ff fbf1 	bl	8000f44 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001764:	e00e      	b.n	8001784 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001766:	f7ff fbed 	bl	8000f44 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d907      	bls.n	8001784 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e150      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
 8001778:	40023800 	.word	0x40023800
 800177c:	42470000 	.word	0x42470000
 8001780:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001784:	4b88      	ldr	r3, [pc, #544]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1ea      	bne.n	8001766 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 8097 	beq.w	80018cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a2:	4b81      	ldr	r3, [pc, #516]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10f      	bne.n	80017ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	4b7d      	ldr	r3, [pc, #500]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a7c      	ldr	r2, [pc, #496]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b7a      	ldr	r3, [pc, #488]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ca:	2301      	movs	r3, #1
 80017cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ce:	4b77      	ldr	r3, [pc, #476]	; (80019ac <HAL_RCC_OscConfig+0x474>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d118      	bne.n	800180c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017da:	4b74      	ldr	r3, [pc, #464]	; (80019ac <HAL_RCC_OscConfig+0x474>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a73      	ldr	r2, [pc, #460]	; (80019ac <HAL_RCC_OscConfig+0x474>)
 80017e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e6:	f7ff fbad 	bl	8000f44 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ee:	f7ff fba9 	bl	8000f44 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e10c      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001800:	4b6a      	ldr	r3, [pc, #424]	; (80019ac <HAL_RCC_OscConfig+0x474>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d106      	bne.n	8001822 <HAL_RCC_OscConfig+0x2ea>
 8001814:	4b64      	ldr	r3, [pc, #400]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001818:	4a63      	ldr	r2, [pc, #396]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6713      	str	r3, [r2, #112]	; 0x70
 8001820:	e01c      	b.n	800185c <HAL_RCC_OscConfig+0x324>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b05      	cmp	r3, #5
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0x30c>
 800182a:	4b5f      	ldr	r3, [pc, #380]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182e:	4a5e      	ldr	r2, [pc, #376]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	6713      	str	r3, [r2, #112]	; 0x70
 8001836:	4b5c      	ldr	r3, [pc, #368]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183a:	4a5b      	ldr	r2, [pc, #364]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6713      	str	r3, [r2, #112]	; 0x70
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0x324>
 8001844:	4b58      	ldr	r3, [pc, #352]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001848:	4a57      	ldr	r2, [pc, #348]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	6713      	str	r3, [r2, #112]	; 0x70
 8001850:	4b55      	ldr	r3, [pc, #340]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001854:	4a54      	ldr	r2, [pc, #336]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001856:	f023 0304 	bic.w	r3, r3, #4
 800185a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d015      	beq.n	8001890 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff fb6e 	bl	8000f44 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186a:	e00a      	b.n	8001882 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186c:	f7ff fb6a 	bl	8000f44 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	; 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e0cb      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001882:	4b49      	ldr	r3, [pc, #292]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0ee      	beq.n	800186c <HAL_RCC_OscConfig+0x334>
 800188e:	e014      	b.n	80018ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001890:	f7ff fb58 	bl	8000f44 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001896:	e00a      	b.n	80018ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001898:	f7ff fb54 	bl	8000f44 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e0b5      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ae:	4b3e      	ldr	r3, [pc, #248]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1ee      	bne.n	8001898 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ba:	7dfb      	ldrb	r3, [r7, #23]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d105      	bne.n	80018cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c0:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	4a38      	ldr	r2, [pc, #224]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80018c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80a1 	beq.w	8001a18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018d6:	4b34      	ldr	r3, [pc, #208]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d05c      	beq.n	800199c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d141      	bne.n	800196e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <HAL_RCC_OscConfig+0x478>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fb28 	bl	8000f44 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f8:	f7ff fb24 	bl	8000f44 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e087      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69da      	ldr	r2, [r3, #28]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	019b      	lsls	r3, r3, #6
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	085b      	lsrs	r3, r3, #1
 800192e:	3b01      	subs	r3, #1
 8001930:	041b      	lsls	r3, r3, #16
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	061b      	lsls	r3, r3, #24
 800193a:	491b      	ldr	r1, [pc, #108]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <HAL_RCC_OscConfig+0x478>)
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001946:	f7ff fafd 	bl	8000f44 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194e:	f7ff faf9 	bl	8000f44 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e05c      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x416>
 800196c:	e054      	b.n	8001a18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <HAL_RCC_OscConfig+0x478>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff fae6 	bl	8000f44 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff fae2 	bl	8000f44 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e045      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x444>
 800199a:	e03d      	b.n	8001a18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d107      	bne.n	80019b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e038      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40007000 	.word	0x40007000
 80019b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_RCC_OscConfig+0x4ec>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d028      	beq.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d121      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d11a      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019e4:	4013      	ands	r3, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d111      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	085b      	lsrs	r3, r3, #1
 80019fc:	3b01      	subs	r3, #1
 80019fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d107      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800

08001a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0cc      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b68      	ldr	r3, [pc, #416]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d90c      	bls.n	8001a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b65      	ldr	r3, [pc, #404]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b63      	ldr	r3, [pc, #396]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0b8      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d020      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a7c:	4b59      	ldr	r3, [pc, #356]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a58      	ldr	r2, [pc, #352]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a94:	4b53      	ldr	r3, [pc, #332]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	4a52      	ldr	r2, [pc, #328]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa0:	4b50      	ldr	r3, [pc, #320]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	494d      	ldr	r1, [pc, #308]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d044      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	4b47      	ldr	r3, [pc, #284]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d119      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e07f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae6:	4b3f      	ldr	r3, [pc, #252]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d109      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e06f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e067      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b06:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f023 0203 	bic.w	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4934      	ldr	r1, [pc, #208]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b18:	f7ff fa14 	bl	8000f44 <HAL_GetTick>
 8001b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b20:	f7ff fa10 	bl	8000f44 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e04f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 020c 	and.w	r2, r3, #12
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d1eb      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b48:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d20c      	bcs.n	8001b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e032      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	4916      	ldr	r1, [pc, #88]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d009      	beq.n	8001bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	490e      	ldr	r1, [pc, #56]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bae:	f000 f821 	bl	8001bf4 <HAL_RCC_GetSysClockFreq>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	490a      	ldr	r1, [pc, #40]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	5ccb      	ldrb	r3, [r1, r3]
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	4a09      	ldr	r2, [pc, #36]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f974 	bl	8000ebc <HAL_InitTick>

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023c00 	.word	0x40023c00
 8001be4:	40023800 	.word	0x40023800
 8001be8:	0800484c 	.word	0x0800484c
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	20000004 	.word	0x20000004

08001bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bf8:	b094      	sub	sp, #80	; 0x50
 8001bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8001c00:	2300      	movs	r3, #0
 8001c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c04:	2300      	movs	r3, #0
 8001c06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c0c:	4b79      	ldr	r3, [pc, #484]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d00d      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x40>
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	f200 80e1 	bhi.w	8001de0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x34>
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d003      	beq.n	8001c2e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c26:	e0db      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c28:	4b73      	ldr	r3, [pc, #460]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c2c:	e0db      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c2e:	4b73      	ldr	r3, [pc, #460]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x208>)
 8001c30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c32:	e0d8      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c34:	4b6f      	ldr	r3, [pc, #444]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c3e:	4b6d      	ldr	r3, [pc, #436]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d063      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4a:	4b6a      	ldr	r3, [pc, #424]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	099b      	lsrs	r3, r3, #6
 8001c50:	2200      	movs	r2, #0
 8001c52:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c5e:	2300      	movs	r3, #0
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
 8001c62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c66:	4622      	mov	r2, r4
 8001c68:	462b      	mov	r3, r5
 8001c6a:	f04f 0000 	mov.w	r0, #0
 8001c6e:	f04f 0100 	mov.w	r1, #0
 8001c72:	0159      	lsls	r1, r3, #5
 8001c74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c78:	0150      	lsls	r0, r2, #5
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4621      	mov	r1, r4
 8001c80:	1a51      	subs	r1, r2, r1
 8001c82:	6139      	str	r1, [r7, #16]
 8001c84:	4629      	mov	r1, r5
 8001c86:	eb63 0301 	sbc.w	r3, r3, r1
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c98:	4659      	mov	r1, fp
 8001c9a:	018b      	lsls	r3, r1, #6
 8001c9c:	4651      	mov	r1, sl
 8001c9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ca2:	4651      	mov	r1, sl
 8001ca4:	018a      	lsls	r2, r1, #6
 8001ca6:	4651      	mov	r1, sl
 8001ca8:	ebb2 0801 	subs.w	r8, r2, r1
 8001cac:	4659      	mov	r1, fp
 8001cae:	eb63 0901 	sbc.w	r9, r3, r1
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cc6:	4690      	mov	r8, r2
 8001cc8:	4699      	mov	r9, r3
 8001cca:	4623      	mov	r3, r4
 8001ccc:	eb18 0303 	adds.w	r3, r8, r3
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	462b      	mov	r3, r5
 8001cd4:	eb49 0303 	adc.w	r3, r9, r3
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	024b      	lsls	r3, r1, #9
 8001cea:	4621      	mov	r1, r4
 8001cec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	024a      	lsls	r2, r1, #9
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d04:	f7fe fac4 	bl	8000290 <__aeabi_uldivmod>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d10:	e058      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d12:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	099b      	lsrs	r3, r3, #6
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d22:	623b      	str	r3, [r7, #32]
 8001d24:	2300      	movs	r3, #0
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
 8001d28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d2c:	4642      	mov	r2, r8
 8001d2e:	464b      	mov	r3, r9
 8001d30:	f04f 0000 	mov.w	r0, #0
 8001d34:	f04f 0100 	mov.w	r1, #0
 8001d38:	0159      	lsls	r1, r3, #5
 8001d3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d3e:	0150      	lsls	r0, r2, #5
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4641      	mov	r1, r8
 8001d46:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d64:	ebb2 040a 	subs.w	r4, r2, sl
 8001d68:	eb63 050b 	sbc.w	r5, r3, fp
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	00eb      	lsls	r3, r5, #3
 8001d76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d7a:	00e2      	lsls	r2, r4, #3
 8001d7c:	4614      	mov	r4, r2
 8001d7e:	461d      	mov	r5, r3
 8001d80:	4643      	mov	r3, r8
 8001d82:	18e3      	adds	r3, r4, r3
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	464b      	mov	r3, r9
 8001d88:	eb45 0303 	adc.w	r3, r5, r3
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	028b      	lsls	r3, r1, #10
 8001d9e:	4621      	mov	r1, r4
 8001da0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001da4:	4621      	mov	r1, r4
 8001da6:	028a      	lsls	r2, r1, #10
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dae:	2200      	movs	r2, #0
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	61fa      	str	r2, [r7, #28]
 8001db4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001db8:	f7fe fa6a 	bl	8000290 <__aeabi_uldivmod>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	0c1b      	lsrs	r3, r3, #16
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001dd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dde:	e002      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001de2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001de4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3750      	adds	r7, #80	; 0x50
 8001dec:	46bd      	mov	sp, r7
 8001dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	00f42400 	.word	0x00f42400
 8001dfc:	007a1200 	.word	0x007a1200

08001e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e041      	b.n	8001e96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d106      	bne.n	8001e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7fe fec6 	bl	8000bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4610      	mov	r0, r2
 8001e40:	f000 fe22 	bl	8002a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d001      	beq.n	8001eb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e044      	b.n	8001f42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a1e      	ldr	r2, [pc, #120]	; (8001f50 <HAL_TIM_Base_Start_IT+0xb0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d018      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x6c>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee2:	d013      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x6c>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a1a      	ldr	r2, [pc, #104]	; (8001f54 <HAL_TIM_Base_Start_IT+0xb4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00e      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x6c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a19      	ldr	r2, [pc, #100]	; (8001f58 <HAL_TIM_Base_Start_IT+0xb8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d009      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x6c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a17      	ldr	r2, [pc, #92]	; (8001f5c <HAL_TIM_Base_Start_IT+0xbc>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d004      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x6c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a16      	ldr	r2, [pc, #88]	; (8001f60 <HAL_TIM_Base_Start_IT+0xc0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d111      	bne.n	8001f30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b06      	cmp	r3, #6
 8001f1c:	d010      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0201 	orr.w	r2, r2, #1
 8001f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f2e:	e007      	b.n	8001f40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40010000 	.word	0x40010000
 8001f54:	40000400 	.word	0x40000400
 8001f58:	40000800 	.word	0x40000800
 8001f5c:	40000c00 	.word	0x40000c00
 8001f60:	40014000 	.word	0x40014000

08001f64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e041      	b.n	8001ffa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d106      	bne.n	8001f90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f839 	bl	8002002 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	f000 fd70 	bl	8002a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d109      	bne.n	800203c <HAL_TIM_PWM_Start+0x24>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b01      	cmp	r3, #1
 8002032:	bf14      	ite	ne
 8002034:	2301      	movne	r3, #1
 8002036:	2300      	moveq	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	e022      	b.n	8002082 <HAL_TIM_PWM_Start+0x6a>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2b04      	cmp	r3, #4
 8002040:	d109      	bne.n	8002056 <HAL_TIM_PWM_Start+0x3e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b01      	cmp	r3, #1
 800204c:	bf14      	ite	ne
 800204e:	2301      	movne	r3, #1
 8002050:	2300      	moveq	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	e015      	b.n	8002082 <HAL_TIM_PWM_Start+0x6a>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b08      	cmp	r3, #8
 800205a:	d109      	bne.n	8002070 <HAL_TIM_PWM_Start+0x58>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b01      	cmp	r3, #1
 8002066:	bf14      	ite	ne
 8002068:	2301      	movne	r3, #1
 800206a:	2300      	moveq	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	e008      	b.n	8002082 <HAL_TIM_PWM_Start+0x6a>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b01      	cmp	r3, #1
 800207a:	bf14      	ite	ne
 800207c:	2301      	movne	r3, #1
 800207e:	2300      	moveq	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e068      	b.n	800215c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d104      	bne.n	800209a <HAL_TIM_PWM_Start+0x82>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002098:	e013      	b.n	80020c2 <HAL_TIM_PWM_Start+0xaa>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b04      	cmp	r3, #4
 800209e:	d104      	bne.n	80020aa <HAL_TIM_PWM_Start+0x92>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020a8:	e00b      	b.n	80020c2 <HAL_TIM_PWM_Start+0xaa>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2b08      	cmp	r3, #8
 80020ae:	d104      	bne.n	80020ba <HAL_TIM_PWM_Start+0xa2>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020b8:	e003      	b.n	80020c2 <HAL_TIM_PWM_Start+0xaa>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2202      	movs	r2, #2
 80020be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2201      	movs	r2, #1
 80020c8:	6839      	ldr	r1, [r7, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f001 f8a0 	bl	8003210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a23      	ldr	r2, [pc, #140]	; (8002164 <HAL_TIM_PWM_Start+0x14c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d107      	bne.n	80020ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <HAL_TIM_PWM_Start+0x14c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d018      	beq.n	8002126 <HAL_TIM_PWM_Start+0x10e>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020fc:	d013      	beq.n	8002126 <HAL_TIM_PWM_Start+0x10e>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a19      	ldr	r2, [pc, #100]	; (8002168 <HAL_TIM_PWM_Start+0x150>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d00e      	beq.n	8002126 <HAL_TIM_PWM_Start+0x10e>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a17      	ldr	r2, [pc, #92]	; (800216c <HAL_TIM_PWM_Start+0x154>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d009      	beq.n	8002126 <HAL_TIM_PWM_Start+0x10e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a16      	ldr	r2, [pc, #88]	; (8002170 <HAL_TIM_PWM_Start+0x158>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d004      	beq.n	8002126 <HAL_TIM_PWM_Start+0x10e>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a14      	ldr	r2, [pc, #80]	; (8002174 <HAL_TIM_PWM_Start+0x15c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d111      	bne.n	800214a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2b06      	cmp	r3, #6
 8002136:	d010      	beq.n	800215a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f042 0201 	orr.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002148:	e007      	b.n	800215a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40010000 	.word	0x40010000
 8002168:	40000400 	.word	0x40000400
 800216c:	40000800 	.word	0x40000800
 8002170:	40000c00 	.word	0x40000c00
 8002174:	40014000 	.word	0x40014000

08002178 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e041      	b.n	800220e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b00      	cmp	r3, #0
 8002194:	d106      	bne.n	80021a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f839 	bl	8002216 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3304      	adds	r3, #4
 80021b4:	4619      	mov	r1, r3
 80021b6:	4610      	mov	r0, r2
 80021b8:	f000 fc66 	bl	8002a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d104      	bne.n	8002246 <HAL_TIM_IC_Start+0x1a>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002242:	b2db      	uxtb	r3, r3
 8002244:	e013      	b.n	800226e <HAL_TIM_IC_Start+0x42>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	2b04      	cmp	r3, #4
 800224a:	d104      	bne.n	8002256 <HAL_TIM_IC_Start+0x2a>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002252:	b2db      	uxtb	r3, r3
 8002254:	e00b      	b.n	800226e <HAL_TIM_IC_Start+0x42>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b08      	cmp	r3, #8
 800225a:	d104      	bne.n	8002266 <HAL_TIM_IC_Start+0x3a>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002262:	b2db      	uxtb	r3, r3
 8002264:	e003      	b.n	800226e <HAL_TIM_IC_Start+0x42>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800226c:	b2db      	uxtb	r3, r3
 800226e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d104      	bne.n	8002280 <HAL_TIM_IC_Start+0x54>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800227c:	b2db      	uxtb	r3, r3
 800227e:	e013      	b.n	80022a8 <HAL_TIM_IC_Start+0x7c>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	2b04      	cmp	r3, #4
 8002284:	d104      	bne.n	8002290 <HAL_TIM_IC_Start+0x64>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800228c:	b2db      	uxtb	r3, r3
 800228e:	e00b      	b.n	80022a8 <HAL_TIM_IC_Start+0x7c>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	2b08      	cmp	r3, #8
 8002294:	d104      	bne.n	80022a0 <HAL_TIM_IC_Start+0x74>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e003      	b.n	80022a8 <HAL_TIM_IC_Start+0x7c>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d102      	bne.n	80022b6 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80022b0:	7bbb      	ldrb	r3, [r7, #14]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d001      	beq.n	80022ba <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e077      	b.n	80023aa <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d104      	bne.n	80022ca <HAL_TIM_IC_Start+0x9e>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2202      	movs	r2, #2
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022c8:	e013      	b.n	80022f2 <HAL_TIM_IC_Start+0xc6>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b04      	cmp	r3, #4
 80022ce:	d104      	bne.n	80022da <HAL_TIM_IC_Start+0xae>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022d8:	e00b      	b.n	80022f2 <HAL_TIM_IC_Start+0xc6>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d104      	bne.n	80022ea <HAL_TIM_IC_Start+0xbe>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022e8:	e003      	b.n	80022f2 <HAL_TIM_IC_Start+0xc6>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2202      	movs	r2, #2
 80022ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d104      	bne.n	8002302 <HAL_TIM_IC_Start+0xd6>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002300:	e013      	b.n	800232a <HAL_TIM_IC_Start+0xfe>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b04      	cmp	r3, #4
 8002306:	d104      	bne.n	8002312 <HAL_TIM_IC_Start+0xe6>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002310:	e00b      	b.n	800232a <HAL_TIM_IC_Start+0xfe>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b08      	cmp	r3, #8
 8002316:	d104      	bne.n	8002322 <HAL_TIM_IC_Start+0xf6>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002320:	e003      	b.n	800232a <HAL_TIM_IC_Start+0xfe>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2202      	movs	r2, #2
 8002326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2201      	movs	r2, #1
 8002330:	6839      	ldr	r1, [r7, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f000 ff6c 	bl	8003210 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <HAL_TIM_IC_Start+0x188>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d018      	beq.n	8002374 <HAL_TIM_IC_Start+0x148>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234a:	d013      	beq.n	8002374 <HAL_TIM_IC_Start+0x148>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a19      	ldr	r2, [pc, #100]	; (80023b8 <HAL_TIM_IC_Start+0x18c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00e      	beq.n	8002374 <HAL_TIM_IC_Start+0x148>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a18      	ldr	r2, [pc, #96]	; (80023bc <HAL_TIM_IC_Start+0x190>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d009      	beq.n	8002374 <HAL_TIM_IC_Start+0x148>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a16      	ldr	r2, [pc, #88]	; (80023c0 <HAL_TIM_IC_Start+0x194>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d004      	beq.n	8002374 <HAL_TIM_IC_Start+0x148>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a15      	ldr	r2, [pc, #84]	; (80023c4 <HAL_TIM_IC_Start+0x198>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d111      	bne.n	8002398 <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b06      	cmp	r3, #6
 8002384:	d010      	beq.n	80023a8 <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 0201 	orr.w	r2, r2, #1
 8002394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002396:	e007      	b.n	80023a8 <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	40010000 	.word	0x40010000
 80023b8:	40000400 	.word	0x40000400
 80023bc:	40000800 	.word	0x40000800
 80023c0:	40000c00 	.word	0x40000c00
 80023c4:	40014000 	.word	0x40014000

080023c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d122      	bne.n	8002424 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d11b      	bne.n	8002424 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0202 	mvn.w	r2, #2
 80023f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fb1d 	bl	8002a4a <HAL_TIM_IC_CaptureCallback>
 8002410:	e005      	b.n	800241e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fb0f 	bl	8002a36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fb20 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f003 0304 	and.w	r3, r3, #4
 800242e:	2b04      	cmp	r3, #4
 8002430:	d122      	bne.n	8002478 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b04      	cmp	r3, #4
 800243e:	d11b      	bne.n	8002478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0204 	mvn.w	r2, #4
 8002448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2202      	movs	r2, #2
 800244e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 faf3 	bl	8002a4a <HAL_TIM_IC_CaptureCallback>
 8002464:	e005      	b.n	8002472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fae5 	bl	8002a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 faf6 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b08      	cmp	r3, #8
 8002484:	d122      	bne.n	80024cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b08      	cmp	r3, #8
 8002492:	d11b      	bne.n	80024cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0208 	mvn.w	r2, #8
 800249c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2204      	movs	r2, #4
 80024a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fac9 	bl	8002a4a <HAL_TIM_IC_CaptureCallback>
 80024b8:	e005      	b.n	80024c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 fabb 	bl	8002a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 facc 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2b10      	cmp	r3, #16
 80024d8:	d122      	bne.n	8002520 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b10      	cmp	r3, #16
 80024e6:	d11b      	bne.n	8002520 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0210 	mvn.w	r2, #16
 80024f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2208      	movs	r2, #8
 80024f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 fa9f 	bl	8002a4a <HAL_TIM_IC_CaptureCallback>
 800250c:	e005      	b.n	800251a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fa91 	bl	8002a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 faa2 	bl	8002a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b01      	cmp	r3, #1
 800252c:	d10e      	bne.n	800254c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b01      	cmp	r3, #1
 800253a:	d107      	bne.n	800254c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0201 	mvn.w	r2, #1
 8002544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fa6b 	bl	8002a22 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002556:	2b80      	cmp	r3, #128	; 0x80
 8002558:	d10e      	bne.n	8002578 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002564:	2b80      	cmp	r3, #128	; 0x80
 8002566:	d107      	bne.n	8002578 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 feea 	bl	800334c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002582:	2b40      	cmp	r3, #64	; 0x40
 8002584:	d10e      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002590:	2b40      	cmp	r3, #64	; 0x40
 8002592:	d107      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800259c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fa67 	bl	8002a72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f003 0320 	and.w	r3, r3, #32
 80025ae:	2b20      	cmp	r3, #32
 80025b0:	d10e      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d107      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f06f 0220 	mvn.w	r2, #32
 80025c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 feb4 	bl	8003338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e088      	b.n	8002708 <HAL_TIM_IC_ConfigChannel+0x130>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d11b      	bne.n	800263c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6818      	ldr	r0, [r3, #0]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	6819      	ldr	r1, [r3, #0]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f000 fc44 	bl	8002ea0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699a      	ldr	r2, [r3, #24]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 020c 	bic.w	r2, r2, #12
 8002626:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6999      	ldr	r1, [r3, #24]
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	619a      	str	r2, [r3, #24]
 800263a:	e060      	b.n	80026fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b04      	cmp	r3, #4
 8002640:	d11c      	bne.n	800267c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	6819      	ldr	r1, [r3, #0]
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f000 fcbc 	bl	8002fce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699a      	ldr	r2, [r3, #24]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002664:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6999      	ldr	r1, [r3, #24]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	021a      	lsls	r2, r3, #8
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	619a      	str	r2, [r3, #24]
 800267a:	e040      	b.n	80026fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b08      	cmp	r3, #8
 8002680:	d11b      	bne.n	80026ba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f000 fd09 	bl	80030a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69da      	ldr	r2, [r3, #28]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 020c 	bic.w	r2, r2, #12
 80026a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69d9      	ldr	r1, [r3, #28]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	61da      	str	r2, [r3, #28]
 80026b8:	e021      	b.n	80026fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b0c      	cmp	r3, #12
 80026be:	d11c      	bne.n	80026fa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6818      	ldr	r0, [r3, #0]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	6819      	ldr	r1, [r3, #0]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f000 fd26 	bl	8003120 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	69da      	ldr	r2, [r3, #28]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80026e2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	69d9      	ldr	r1, [r3, #28]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	021a      	lsls	r2, r3, #8
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	61da      	str	r2, [r3, #28]
 80026f8:	e001      	b.n	80026fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002706:	7dfb      	ldrb	r3, [r7, #23]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3718      	adds	r7, #24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002726:	2b01      	cmp	r3, #1
 8002728:	d101      	bne.n	800272e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800272a:	2302      	movs	r3, #2
 800272c:	e0ae      	b.n	800288c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b0c      	cmp	r3, #12
 800273a:	f200 809f 	bhi.w	800287c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800273e:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002744:	08002779 	.word	0x08002779
 8002748:	0800287d 	.word	0x0800287d
 800274c:	0800287d 	.word	0x0800287d
 8002750:	0800287d 	.word	0x0800287d
 8002754:	080027b9 	.word	0x080027b9
 8002758:	0800287d 	.word	0x0800287d
 800275c:	0800287d 	.word	0x0800287d
 8002760:	0800287d 	.word	0x0800287d
 8002764:	080027fb 	.word	0x080027fb
 8002768:	0800287d 	.word	0x0800287d
 800276c:	0800287d 	.word	0x0800287d
 8002770:	0800287d 	.word	0x0800287d
 8002774:	0800283b 	.word	0x0800283b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68b9      	ldr	r1, [r7, #8]
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fa02 	bl	8002b88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699a      	ldr	r2, [r3, #24]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0208 	orr.w	r2, r2, #8
 8002792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699a      	ldr	r2, [r3, #24]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0204 	bic.w	r2, r2, #4
 80027a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6999      	ldr	r1, [r3, #24]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	619a      	str	r2, [r3, #24]
      break;
 80027b6:	e064      	b.n	8002882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 fa48 	bl	8002c54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699a      	ldr	r2, [r3, #24]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699a      	ldr	r2, [r3, #24]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6999      	ldr	r1, [r3, #24]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	021a      	lsls	r2, r3, #8
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	619a      	str	r2, [r3, #24]
      break;
 80027f8:	e043      	b.n	8002882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68b9      	ldr	r1, [r7, #8]
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fa93 	bl	8002d2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	69da      	ldr	r2, [r3, #28]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0208 	orr.w	r2, r2, #8
 8002814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	69da      	ldr	r2, [r3, #28]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0204 	bic.w	r2, r2, #4
 8002824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69d9      	ldr	r1, [r3, #28]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	61da      	str	r2, [r3, #28]
      break;
 8002838:	e023      	b.n	8002882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68b9      	ldr	r1, [r7, #8]
 8002840:	4618      	mov	r0, r3
 8002842:	f000 fadd 	bl	8002e00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69da      	ldr	r2, [r3, #28]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69da      	ldr	r2, [r3, #28]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69d9      	ldr	r1, [r3, #28]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	021a      	lsls	r2, r3, #8
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	61da      	str	r2, [r3, #28]
      break;
 800287a:	e002      	b.n	8002882 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	75fb      	strb	r3, [r7, #23]
      break;
 8002880:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800288a:	7dfb      	ldrb	r3, [r7, #23]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_TIM_ConfigClockSource+0x1c>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e0b4      	b.n	8002a1a <HAL_TIM_ConfigClockSource+0x186>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e8:	d03e      	beq.n	8002968 <HAL_TIM_ConfigClockSource+0xd4>
 80028ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ee:	f200 8087 	bhi.w	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 80028f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f6:	f000 8086 	beq.w	8002a06 <HAL_TIM_ConfigClockSource+0x172>
 80028fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028fe:	d87f      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002900:	2b70      	cmp	r3, #112	; 0x70
 8002902:	d01a      	beq.n	800293a <HAL_TIM_ConfigClockSource+0xa6>
 8002904:	2b70      	cmp	r3, #112	; 0x70
 8002906:	d87b      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002908:	2b60      	cmp	r3, #96	; 0x60
 800290a:	d050      	beq.n	80029ae <HAL_TIM_ConfigClockSource+0x11a>
 800290c:	2b60      	cmp	r3, #96	; 0x60
 800290e:	d877      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002910:	2b50      	cmp	r3, #80	; 0x50
 8002912:	d03c      	beq.n	800298e <HAL_TIM_ConfigClockSource+0xfa>
 8002914:	2b50      	cmp	r3, #80	; 0x50
 8002916:	d873      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002918:	2b40      	cmp	r3, #64	; 0x40
 800291a:	d058      	beq.n	80029ce <HAL_TIM_ConfigClockSource+0x13a>
 800291c:	2b40      	cmp	r3, #64	; 0x40
 800291e:	d86f      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002920:	2b30      	cmp	r3, #48	; 0x30
 8002922:	d064      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0x15a>
 8002924:	2b30      	cmp	r3, #48	; 0x30
 8002926:	d86b      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002928:	2b20      	cmp	r3, #32
 800292a:	d060      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0x15a>
 800292c:	2b20      	cmp	r3, #32
 800292e:	d867      	bhi.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
 8002930:	2b00      	cmp	r3, #0
 8002932:	d05c      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0x15a>
 8002934:	2b10      	cmp	r3, #16
 8002936:	d05a      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0x15a>
 8002938:	e062      	b.n	8002a00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6818      	ldr	r0, [r3, #0]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6899      	ldr	r1, [r3, #8]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f000 fc41 	bl	80031d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800295c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	609a      	str	r2, [r3, #8]
      break;
 8002966:	e04f      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	6899      	ldr	r1, [r3, #8]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f000 fc2a 	bl	80031d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800298a:	609a      	str	r2, [r3, #8]
      break;
 800298c:	e03c      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6859      	ldr	r1, [r3, #4]
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	461a      	mov	r2, r3
 800299c:	f000 fae8 	bl	8002f70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2150      	movs	r1, #80	; 0x50
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fbf7 	bl	800319a <TIM_ITRx_SetConfig>
      break;
 80029ac:	e02c      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	6859      	ldr	r1, [r3, #4]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	461a      	mov	r2, r3
 80029bc:	f000 fb44 	bl	8003048 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2160      	movs	r1, #96	; 0x60
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fbe7 	bl	800319a <TIM_ITRx_SetConfig>
      break;
 80029cc:	e01c      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6859      	ldr	r1, [r3, #4]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	461a      	mov	r2, r3
 80029dc:	f000 fac8 	bl	8002f70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2140      	movs	r1, #64	; 0x40
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fbd7 	bl	800319a <TIM_ITRx_SetConfig>
      break;
 80029ec:	e00c      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4619      	mov	r1, r3
 80029f8:	4610      	mov	r0, r2
 80029fa:	f000 fbce 	bl	800319a <TIM_ITRx_SetConfig>
      break;
 80029fe:	e003      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
      break;
 8002a04:	e000      	b.n	8002a08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a34      	ldr	r2, [pc, #208]	; (8002b6c <TIM_Base_SetConfig+0xe4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00f      	beq.n	8002ac0 <TIM_Base_SetConfig+0x38>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa6:	d00b      	beq.n	8002ac0 <TIM_Base_SetConfig+0x38>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a31      	ldr	r2, [pc, #196]	; (8002b70 <TIM_Base_SetConfig+0xe8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d007      	beq.n	8002ac0 <TIM_Base_SetConfig+0x38>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a30      	ldr	r2, [pc, #192]	; (8002b74 <TIM_Base_SetConfig+0xec>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d003      	beq.n	8002ac0 <TIM_Base_SetConfig+0x38>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a2f      	ldr	r2, [pc, #188]	; (8002b78 <TIM_Base_SetConfig+0xf0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d108      	bne.n	8002ad2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a25      	ldr	r2, [pc, #148]	; (8002b6c <TIM_Base_SetConfig+0xe4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d01b      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae0:	d017      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a22      	ldr	r2, [pc, #136]	; (8002b70 <TIM_Base_SetConfig+0xe8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a21      	ldr	r2, [pc, #132]	; (8002b74 <TIM_Base_SetConfig+0xec>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00f      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a20      	ldr	r2, [pc, #128]	; (8002b78 <TIM_Base_SetConfig+0xf0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00b      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a1f      	ldr	r2, [pc, #124]	; (8002b7c <TIM_Base_SetConfig+0xf4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d007      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a1e      	ldr	r2, [pc, #120]	; (8002b80 <TIM_Base_SetConfig+0xf8>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d003      	beq.n	8002b12 <TIM_Base_SetConfig+0x8a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a1d      	ldr	r2, [pc, #116]	; (8002b84 <TIM_Base_SetConfig+0xfc>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d108      	bne.n	8002b24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a08      	ldr	r2, [pc, #32]	; (8002b6c <TIM_Base_SetConfig+0xe4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d103      	bne.n	8002b58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	615a      	str	r2, [r3, #20]
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
 8002b6a:	bf00      	nop
 8002b6c:	40010000 	.word	0x40010000
 8002b70:	40000400 	.word	0x40000400
 8002b74:	40000800 	.word	0x40000800
 8002b78:	40000c00 	.word	0x40000c00
 8002b7c:	40014000 	.word	0x40014000
 8002b80:	40014400 	.word	0x40014400
 8002b84:	40014800 	.word	0x40014800

08002b88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	f023 0201 	bic.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 0303 	bic.w	r3, r3, #3
 8002bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f023 0302 	bic.w	r3, r3, #2
 8002bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a1c      	ldr	r2, [pc, #112]	; (8002c50 <TIM_OC1_SetConfig+0xc8>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d10c      	bne.n	8002bfe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f023 0308 	bic.w	r3, r3, #8
 8002bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f023 0304 	bic.w	r3, r3, #4
 8002bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a13      	ldr	r2, [pc, #76]	; (8002c50 <TIM_OC1_SetConfig+0xc8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d111      	bne.n	8002c2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	621a      	str	r2, [r3, #32]
}
 8002c44:	bf00      	nop
 8002c46:	371c      	adds	r7, #28
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	40010000 	.word	0x40010000

08002c54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	f023 0210 	bic.w	r2, r3, #16
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	021b      	lsls	r3, r3, #8
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f023 0320 	bic.w	r3, r3, #32
 8002c9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a1e      	ldr	r2, [pc, #120]	; (8002d28 <TIM_OC2_SetConfig+0xd4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d10d      	bne.n	8002cd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	697a      	ldr	r2, [r7, #20]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a15      	ldr	r2, [pc, #84]	; (8002d28 <TIM_OC2_SetConfig+0xd4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d113      	bne.n	8002d00 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	621a      	str	r2, [r3, #32]
}
 8002d1a:	bf00      	nop
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40010000 	.word	0x40010000

08002d2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b087      	sub	sp, #28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0303 	bic.w	r3, r3, #3
 8002d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	021b      	lsls	r3, r3, #8
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a1d      	ldr	r2, [pc, #116]	; (8002dfc <TIM_OC3_SetConfig+0xd0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d10d      	bne.n	8002da6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a14      	ldr	r2, [pc, #80]	; (8002dfc <TIM_OC3_SetConfig+0xd0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d113      	bne.n	8002dd6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002db4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	621a      	str	r2, [r3, #32]
}
 8002df0:	bf00      	nop
 8002df2:	371c      	adds	r7, #28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	40010000 	.word	0x40010000

08002e00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	021b      	lsls	r3, r3, #8
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	031b      	lsls	r3, r3, #12
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a10      	ldr	r2, [pc, #64]	; (8002e9c <TIM_OC4_SetConfig+0x9c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d109      	bne.n	8002e74 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	019b      	lsls	r3, r3, #6
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	621a      	str	r2, [r3, #32]
}
 8002e8e:	bf00      	nop
 8002e90:	371c      	adds	r7, #28
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40010000 	.word	0x40010000

08002ea0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f023 0201 	bic.w	r2, r3, #1
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4a24      	ldr	r2, [pc, #144]	; (8002f5c <TIM_TI1_SetConfig+0xbc>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <TIM_TI1_SetConfig+0x56>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed4:	d00f      	beq.n	8002ef6 <TIM_TI1_SetConfig+0x56>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4a21      	ldr	r2, [pc, #132]	; (8002f60 <TIM_TI1_SetConfig+0xc0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00b      	beq.n	8002ef6 <TIM_TI1_SetConfig+0x56>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4a20      	ldr	r2, [pc, #128]	; (8002f64 <TIM_TI1_SetConfig+0xc4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d007      	beq.n	8002ef6 <TIM_TI1_SetConfig+0x56>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4a1f      	ldr	r2, [pc, #124]	; (8002f68 <TIM_TI1_SetConfig+0xc8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d003      	beq.n	8002ef6 <TIM_TI1_SetConfig+0x56>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4a1e      	ldr	r2, [pc, #120]	; (8002f6c <TIM_TI1_SetConfig+0xcc>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d101      	bne.n	8002efa <TIM_TI1_SetConfig+0x5a>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <TIM_TI1_SetConfig+0x5c>
 8002efa:	2300      	movs	r3, #0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f023 0303 	bic.w	r3, r3, #3
 8002f06:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	e003      	b.n	8002f1a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f023 030a 	bic.w	r3, r3, #10
 8002f34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f003 030a 	and.w	r3, r3, #10
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	621a      	str	r2, [r3, #32]
}
 8002f4e:	bf00      	nop
 8002f50:	371c      	adds	r7, #28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40010000 	.word	0x40010000
 8002f60:	40000400 	.word	0x40000400
 8002f64:	40000800 	.word	0x40000800
 8002f68:	40000c00 	.word	0x40000c00
 8002f6c:	40014000 	.word	0x40014000

08002f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b087      	sub	sp, #28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	f023 0201 	bic.w	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f023 030a 	bic.w	r3, r3, #10
 8002fac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	621a      	str	r2, [r3, #32]
}
 8002fc2:	bf00      	nop
 8002fc4:	371c      	adds	r7, #28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b087      	sub	sp, #28
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f023 0210 	bic.w	r2, r3, #16
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ffa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	4313      	orrs	r3, r2
 8003004:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800300c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	031b      	lsls	r3, r3, #12
 8003012:	b29b      	uxth	r3, r3
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	4313      	orrs	r3, r2
 8003018:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003020:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	621a      	str	r2, [r3, #32]
}
 800303c:	bf00      	nop
 800303e:	371c      	adds	r7, #28
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	f023 0210 	bic.w	r2, r3, #16
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003072:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	031b      	lsls	r3, r3, #12
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4313      	orrs	r3, r2
 800307c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003084:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	621a      	str	r2, [r3, #32]
}
 800309c:	bf00      	nop
 800309e:	371c      	adds	r7, #28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f023 0303 	bic.w	r3, r3, #3
 80030d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4313      	orrs	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80030f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	021b      	lsls	r3, r3, #8
 80030fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	621a      	str	r2, [r3, #32]
}
 8003114:	bf00      	nop
 8003116:	371c      	adds	r7, #28
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
 800312c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800314c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	021b      	lsls	r3, r3, #8
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800315e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	031b      	lsls	r3, r3, #12
 8003164:	b29b      	uxth	r3, r3
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4313      	orrs	r3, r2
 800316a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003172:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	031b      	lsls	r3, r3, #12
 8003178:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	621a      	str	r2, [r3, #32]
}
 800318e:	bf00      	nop
 8003190:	371c      	adds	r7, #28
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800319a:	b480      	push	{r7}
 800319c:	b085      	sub	sp, #20
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f043 0307 	orr.w	r3, r3, #7
 80031bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	609a      	str	r2, [r3, #8]
}
 80031c4:	bf00      	nop
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	021a      	lsls	r2, r3, #8
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	609a      	str	r2, [r3, #8]
}
 8003204:	bf00      	nop
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	2201      	movs	r2, #1
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a1a      	ldr	r2, [r3, #32]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	43db      	mvns	r3, r3
 8003232:	401a      	ands	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a1a      	ldr	r2, [r3, #32]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f003 031f 	and.w	r3, r3, #31
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	fa01 f303 	lsl.w	r3, r1, r3
 8003248:	431a      	orrs	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	621a      	str	r2, [r3, #32]
}
 800324e:	bf00      	nop
 8003250:	371c      	adds	r7, #28
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003270:	2302      	movs	r3, #2
 8003272:	e050      	b.n	8003316 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a1c      	ldr	r2, [pc, #112]	; (8003324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d018      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c0:	d013      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a18      	ldr	r2, [pc, #96]	; (8003328 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00e      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a16      	ldr	r2, [pc, #88]	; (800332c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d009      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a15      	ldr	r2, [pc, #84]	; (8003330 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d004      	beq.n	80032ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a13      	ldr	r2, [pc, #76]	; (8003334 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d10c      	bne.n	8003304 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40010000 	.word	0x40010000
 8003328:	40000400 	.word	0x40000400
 800332c:	40000800 	.word	0x40000800
 8003330:	40000c00 	.word	0x40000c00
 8003334:	40014000 	.word	0x40014000

08003338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <findslot>:
 8003360:	4b0a      	ldr	r3, [pc, #40]	; (800338c <findslot+0x2c>)
 8003362:	b510      	push	{r4, lr}
 8003364:	4604      	mov	r4, r0
 8003366:	6818      	ldr	r0, [r3, #0]
 8003368:	b118      	cbz	r0, 8003372 <findslot+0x12>
 800336a:	6983      	ldr	r3, [r0, #24]
 800336c:	b90b      	cbnz	r3, 8003372 <findslot+0x12>
 800336e:	f000 faf7 	bl	8003960 <__sinit>
 8003372:	2c13      	cmp	r4, #19
 8003374:	d807      	bhi.n	8003386 <findslot+0x26>
 8003376:	4806      	ldr	r0, [pc, #24]	; (8003390 <findslot+0x30>)
 8003378:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800337c:	3201      	adds	r2, #1
 800337e:	d002      	beq.n	8003386 <findslot+0x26>
 8003380:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003384:	bd10      	pop	{r4, pc}
 8003386:	2000      	movs	r0, #0
 8003388:	e7fc      	b.n	8003384 <findslot+0x24>
 800338a:	bf00      	nop
 800338c:	20000014 	.word	0x20000014
 8003390:	20000138 	.word	0x20000138

08003394 <error>:
 8003394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003396:	4604      	mov	r4, r0
 8003398:	f000 fa84 	bl	80038a4 <__errno>
 800339c:	2613      	movs	r6, #19
 800339e:	4605      	mov	r5, r0
 80033a0:	2700      	movs	r7, #0
 80033a2:	4630      	mov	r0, r6
 80033a4:	4639      	mov	r1, r7
 80033a6:	beab      	bkpt	0x00ab
 80033a8:	4606      	mov	r6, r0
 80033aa:	602e      	str	r6, [r5, #0]
 80033ac:	4620      	mov	r0, r4
 80033ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033b0 <checkerror>:
 80033b0:	1c43      	adds	r3, r0, #1
 80033b2:	d101      	bne.n	80033b8 <checkerror+0x8>
 80033b4:	f7ff bfee 	b.w	8003394 <error>
 80033b8:	4770      	bx	lr

080033ba <_swiread>:
 80033ba:	b530      	push	{r4, r5, lr}
 80033bc:	b085      	sub	sp, #20
 80033be:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80033c2:	9203      	str	r2, [sp, #12]
 80033c4:	2406      	movs	r4, #6
 80033c6:	ad01      	add	r5, sp, #4
 80033c8:	4620      	mov	r0, r4
 80033ca:	4629      	mov	r1, r5
 80033cc:	beab      	bkpt	0x00ab
 80033ce:	4604      	mov	r4, r0
 80033d0:	4620      	mov	r0, r4
 80033d2:	f7ff ffed 	bl	80033b0 <checkerror>
 80033d6:	b005      	add	sp, #20
 80033d8:	bd30      	pop	{r4, r5, pc}

080033da <_read>:
 80033da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033dc:	4615      	mov	r5, r2
 80033de:	9101      	str	r1, [sp, #4]
 80033e0:	f7ff ffbe 	bl	8003360 <findslot>
 80033e4:	9901      	ldr	r1, [sp, #4]
 80033e6:	4604      	mov	r4, r0
 80033e8:	b938      	cbnz	r0, 80033fa <_read+0x20>
 80033ea:	f000 fa5b 	bl	80038a4 <__errno>
 80033ee:	2309      	movs	r3, #9
 80033f0:	6003      	str	r3, [r0, #0]
 80033f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033f6:	b003      	add	sp, #12
 80033f8:	bd30      	pop	{r4, r5, pc}
 80033fa:	6800      	ldr	r0, [r0, #0]
 80033fc:	462a      	mov	r2, r5
 80033fe:	f7ff ffdc 	bl	80033ba <_swiread>
 8003402:	1c43      	adds	r3, r0, #1
 8003404:	d0f7      	beq.n	80033f6 <_read+0x1c>
 8003406:	6863      	ldr	r3, [r4, #4]
 8003408:	1a2a      	subs	r2, r5, r0
 800340a:	4413      	add	r3, r2
 800340c:	6063      	str	r3, [r4, #4]
 800340e:	4610      	mov	r0, r2
 8003410:	e7f1      	b.n	80033f6 <_read+0x1c>

08003412 <_swilseek>:
 8003412:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003414:	460c      	mov	r4, r1
 8003416:	4616      	mov	r6, r2
 8003418:	f7ff ffa2 	bl	8003360 <findslot>
 800341c:	4605      	mov	r5, r0
 800341e:	b940      	cbnz	r0, 8003432 <_swilseek+0x20>
 8003420:	f000 fa40 	bl	80038a4 <__errno>
 8003424:	2309      	movs	r3, #9
 8003426:	6003      	str	r3, [r0, #0]
 8003428:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800342c:	4620      	mov	r0, r4
 800342e:	b003      	add	sp, #12
 8003430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003432:	2e02      	cmp	r6, #2
 8003434:	d903      	bls.n	800343e <_swilseek+0x2c>
 8003436:	f000 fa35 	bl	80038a4 <__errno>
 800343a:	2316      	movs	r3, #22
 800343c:	e7f3      	b.n	8003426 <_swilseek+0x14>
 800343e:	2e01      	cmp	r6, #1
 8003440:	d112      	bne.n	8003468 <_swilseek+0x56>
 8003442:	6843      	ldr	r3, [r0, #4]
 8003444:	18e4      	adds	r4, r4, r3
 8003446:	d4f6      	bmi.n	8003436 <_swilseek+0x24>
 8003448:	682b      	ldr	r3, [r5, #0]
 800344a:	260a      	movs	r6, #10
 800344c:	e9cd 3400 	strd	r3, r4, [sp]
 8003450:	466f      	mov	r7, sp
 8003452:	4630      	mov	r0, r6
 8003454:	4639      	mov	r1, r7
 8003456:	beab      	bkpt	0x00ab
 8003458:	4606      	mov	r6, r0
 800345a:	4630      	mov	r0, r6
 800345c:	f7ff ffa8 	bl	80033b0 <checkerror>
 8003460:	2800      	cmp	r0, #0
 8003462:	dbe1      	blt.n	8003428 <_swilseek+0x16>
 8003464:	606c      	str	r4, [r5, #4]
 8003466:	e7e1      	b.n	800342c <_swilseek+0x1a>
 8003468:	2e02      	cmp	r6, #2
 800346a:	d1ed      	bne.n	8003448 <_swilseek+0x36>
 800346c:	6803      	ldr	r3, [r0, #0]
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	260c      	movs	r6, #12
 8003472:	466f      	mov	r7, sp
 8003474:	4630      	mov	r0, r6
 8003476:	4639      	mov	r1, r7
 8003478:	beab      	bkpt	0x00ab
 800347a:	4606      	mov	r6, r0
 800347c:	4630      	mov	r0, r6
 800347e:	f7ff ff97 	bl	80033b0 <checkerror>
 8003482:	1c43      	adds	r3, r0, #1
 8003484:	d0d0      	beq.n	8003428 <_swilseek+0x16>
 8003486:	4404      	add	r4, r0
 8003488:	e7de      	b.n	8003448 <_swilseek+0x36>

0800348a <_lseek>:
 800348a:	f7ff bfc2 	b.w	8003412 <_swilseek>

0800348e <_swiwrite>:
 800348e:	b530      	push	{r4, r5, lr}
 8003490:	b085      	sub	sp, #20
 8003492:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003496:	9203      	str	r2, [sp, #12]
 8003498:	2405      	movs	r4, #5
 800349a:	ad01      	add	r5, sp, #4
 800349c:	4620      	mov	r0, r4
 800349e:	4629      	mov	r1, r5
 80034a0:	beab      	bkpt	0x00ab
 80034a2:	4604      	mov	r4, r0
 80034a4:	4620      	mov	r0, r4
 80034a6:	f7ff ff83 	bl	80033b0 <checkerror>
 80034aa:	b005      	add	sp, #20
 80034ac:	bd30      	pop	{r4, r5, pc}

080034ae <_write>:
 80034ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034b0:	4615      	mov	r5, r2
 80034b2:	9101      	str	r1, [sp, #4]
 80034b4:	f7ff ff54 	bl	8003360 <findslot>
 80034b8:	9901      	ldr	r1, [sp, #4]
 80034ba:	4604      	mov	r4, r0
 80034bc:	b930      	cbnz	r0, 80034cc <_write+0x1e>
 80034be:	f000 f9f1 	bl	80038a4 <__errno>
 80034c2:	2309      	movs	r3, #9
 80034c4:	6003      	str	r3, [r0, #0]
 80034c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034ca:	e012      	b.n	80034f2 <_write+0x44>
 80034cc:	6800      	ldr	r0, [r0, #0]
 80034ce:	462a      	mov	r2, r5
 80034d0:	f7ff ffdd 	bl	800348e <_swiwrite>
 80034d4:	2800      	cmp	r0, #0
 80034d6:	dbf6      	blt.n	80034c6 <_write+0x18>
 80034d8:	6862      	ldr	r2, [r4, #4]
 80034da:	1a2b      	subs	r3, r5, r0
 80034dc:	441a      	add	r2, r3
 80034de:	42a8      	cmp	r0, r5
 80034e0:	6062      	str	r2, [r4, #4]
 80034e2:	d105      	bne.n	80034f0 <_write+0x42>
 80034e4:	2000      	movs	r0, #0
 80034e6:	b003      	add	sp, #12
 80034e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034ec:	f7ff bf52 	b.w	8003394 <error>
 80034f0:	4618      	mov	r0, r3
 80034f2:	b003      	add	sp, #12
 80034f4:	bd30      	pop	{r4, r5, pc}

080034f6 <_swiclose>:
 80034f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80034f8:	2402      	movs	r4, #2
 80034fa:	9001      	str	r0, [sp, #4]
 80034fc:	ad01      	add	r5, sp, #4
 80034fe:	4620      	mov	r0, r4
 8003500:	4629      	mov	r1, r5
 8003502:	beab      	bkpt	0x00ab
 8003504:	4604      	mov	r4, r0
 8003506:	4620      	mov	r0, r4
 8003508:	f7ff ff52 	bl	80033b0 <checkerror>
 800350c:	b003      	add	sp, #12
 800350e:	bd30      	pop	{r4, r5, pc}

08003510 <_close>:
 8003510:	b538      	push	{r3, r4, r5, lr}
 8003512:	4605      	mov	r5, r0
 8003514:	f7ff ff24 	bl	8003360 <findslot>
 8003518:	4604      	mov	r4, r0
 800351a:	b930      	cbnz	r0, 800352a <_close+0x1a>
 800351c:	f000 f9c2 	bl	80038a4 <__errno>
 8003520:	2309      	movs	r3, #9
 8003522:	6003      	str	r3, [r0, #0]
 8003524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003528:	bd38      	pop	{r3, r4, r5, pc}
 800352a:	3d01      	subs	r5, #1
 800352c:	2d01      	cmp	r5, #1
 800352e:	d809      	bhi.n	8003544 <_close+0x34>
 8003530:	4b09      	ldr	r3, [pc, #36]	; (8003558 <_close+0x48>)
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	429a      	cmp	r2, r3
 8003538:	d104      	bne.n	8003544 <_close+0x34>
 800353a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800353e:	6003      	str	r3, [r0, #0]
 8003540:	2000      	movs	r0, #0
 8003542:	e7f1      	b.n	8003528 <_close+0x18>
 8003544:	6820      	ldr	r0, [r4, #0]
 8003546:	f7ff ffd6 	bl	80034f6 <_swiclose>
 800354a:	2800      	cmp	r0, #0
 800354c:	d1ec      	bne.n	8003528 <_close+0x18>
 800354e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003552:	6023      	str	r3, [r4, #0]
 8003554:	e7e8      	b.n	8003528 <_close+0x18>
 8003556:	bf00      	nop
 8003558:	20000138 	.word	0x20000138

0800355c <_swistat>:
 800355c:	b570      	push	{r4, r5, r6, lr}
 800355e:	460c      	mov	r4, r1
 8003560:	f7ff fefe 	bl	8003360 <findslot>
 8003564:	4605      	mov	r5, r0
 8003566:	b930      	cbnz	r0, 8003576 <_swistat+0x1a>
 8003568:	f000 f99c 	bl	80038a4 <__errno>
 800356c:	2309      	movs	r3, #9
 800356e:	6003      	str	r3, [r0, #0]
 8003570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003574:	bd70      	pop	{r4, r5, r6, pc}
 8003576:	6863      	ldr	r3, [r4, #4]
 8003578:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800357c:	6063      	str	r3, [r4, #4]
 800357e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003582:	64a3      	str	r3, [r4, #72]	; 0x48
 8003584:	260c      	movs	r6, #12
 8003586:	4630      	mov	r0, r6
 8003588:	4629      	mov	r1, r5
 800358a:	beab      	bkpt	0x00ab
 800358c:	4605      	mov	r5, r0
 800358e:	4628      	mov	r0, r5
 8003590:	f7ff ff0e 	bl	80033b0 <checkerror>
 8003594:	1c43      	adds	r3, r0, #1
 8003596:	bf1c      	itt	ne
 8003598:	6120      	strne	r0, [r4, #16]
 800359a:	2000      	movne	r0, #0
 800359c:	e7ea      	b.n	8003574 <_swistat+0x18>

0800359e <_fstat>:
 800359e:	460b      	mov	r3, r1
 80035a0:	b510      	push	{r4, lr}
 80035a2:	2100      	movs	r1, #0
 80035a4:	4604      	mov	r4, r0
 80035a6:	2258      	movs	r2, #88	; 0x58
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fa9e 	bl	8003aea <memset>
 80035ae:	4601      	mov	r1, r0
 80035b0:	4620      	mov	r0, r4
 80035b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035b6:	f7ff bfd1 	b.w	800355c <_swistat>

080035ba <_stat>:
 80035ba:	b538      	push	{r3, r4, r5, lr}
 80035bc:	460d      	mov	r5, r1
 80035be:	4604      	mov	r4, r0
 80035c0:	2258      	movs	r2, #88	; 0x58
 80035c2:	2100      	movs	r1, #0
 80035c4:	4628      	mov	r0, r5
 80035c6:	f000 fa90 	bl	8003aea <memset>
 80035ca:	4620      	mov	r0, r4
 80035cc:	2100      	movs	r1, #0
 80035ce:	f000 f811 	bl	80035f4 <_swiopen>
 80035d2:	1c43      	adds	r3, r0, #1
 80035d4:	4604      	mov	r4, r0
 80035d6:	d00b      	beq.n	80035f0 <_stat+0x36>
 80035d8:	686b      	ldr	r3, [r5, #4]
 80035da:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80035de:	606b      	str	r3, [r5, #4]
 80035e0:	4629      	mov	r1, r5
 80035e2:	f7ff ffbb 	bl	800355c <_swistat>
 80035e6:	4605      	mov	r5, r0
 80035e8:	4620      	mov	r0, r4
 80035ea:	f7ff ff91 	bl	8003510 <_close>
 80035ee:	462c      	mov	r4, r5
 80035f0:	4620      	mov	r0, r4
 80035f2:	bd38      	pop	{r3, r4, r5, pc}

080035f4 <_swiopen>:
 80035f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035f8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80036a4 <_swiopen+0xb0>
 80035fc:	b097      	sub	sp, #92	; 0x5c
 80035fe:	4607      	mov	r7, r0
 8003600:	460e      	mov	r6, r1
 8003602:	2500      	movs	r5, #0
 8003604:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8003608:	1c61      	adds	r1, r4, #1
 800360a:	d037      	beq.n	800367c <_swiopen+0x88>
 800360c:	3501      	adds	r5, #1
 800360e:	2d14      	cmp	r5, #20
 8003610:	d1f8      	bne.n	8003604 <_swiopen+0x10>
 8003612:	f000 f947 	bl	80038a4 <__errno>
 8003616:	2318      	movs	r3, #24
 8003618:	6003      	str	r3, [r0, #0]
 800361a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800361e:	e03d      	b.n	800369c <_swiopen+0xa8>
 8003620:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8003624:	f240 6301 	movw	r3, #1537	; 0x601
 8003628:	07b2      	lsls	r2, r6, #30
 800362a:	bf48      	it	mi
 800362c:	f044 0402 	orrmi.w	r4, r4, #2
 8003630:	421e      	tst	r6, r3
 8003632:	bf18      	it	ne
 8003634:	f044 0404 	orrne.w	r4, r4, #4
 8003638:	0733      	lsls	r3, r6, #28
 800363a:	bf48      	it	mi
 800363c:	f024 0404 	bicmi.w	r4, r4, #4
 8003640:	4638      	mov	r0, r7
 8003642:	bf48      	it	mi
 8003644:	f044 0408 	orrmi.w	r4, r4, #8
 8003648:	9700      	str	r7, [sp, #0]
 800364a:	f7fc fdc9 	bl	80001e0 <strlen>
 800364e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8003652:	2401      	movs	r4, #1
 8003654:	4620      	mov	r0, r4
 8003656:	4649      	mov	r1, r9
 8003658:	beab      	bkpt	0x00ab
 800365a:	4604      	mov	r4, r0
 800365c:	2c00      	cmp	r4, #0
 800365e:	db08      	blt.n	8003672 <_swiopen+0x7e>
 8003660:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8003664:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8003668:	2300      	movs	r3, #0
 800366a:	f8c8 3004 	str.w	r3, [r8, #4]
 800366e:	462c      	mov	r4, r5
 8003670:	e014      	b.n	800369c <_swiopen+0xa8>
 8003672:	4620      	mov	r0, r4
 8003674:	f7ff fe8e 	bl	8003394 <error>
 8003678:	4604      	mov	r4, r0
 800367a:	e00f      	b.n	800369c <_swiopen+0xa8>
 800367c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8003680:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003684:	46e9      	mov	r9, sp
 8003686:	d1cb      	bne.n	8003620 <_swiopen+0x2c>
 8003688:	4649      	mov	r1, r9
 800368a:	4638      	mov	r0, r7
 800368c:	f7ff ff95 	bl	80035ba <_stat>
 8003690:	3001      	adds	r0, #1
 8003692:	d0c5      	beq.n	8003620 <_swiopen+0x2c>
 8003694:	f000 f906 	bl	80038a4 <__errno>
 8003698:	2311      	movs	r3, #17
 800369a:	6003      	str	r3, [r0, #0]
 800369c:	4620      	mov	r0, r4
 800369e:	b017      	add	sp, #92	; 0x5c
 80036a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036a4:	20000138 	.word	0x20000138

080036a8 <_get_semihosting_exts>:
 80036a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80036ac:	4606      	mov	r6, r0
 80036ae:	460f      	mov	r7, r1
 80036b0:	482a      	ldr	r0, [pc, #168]	; (800375c <_get_semihosting_exts+0xb4>)
 80036b2:	2100      	movs	r1, #0
 80036b4:	4615      	mov	r5, r2
 80036b6:	f7ff ff9d 	bl	80035f4 <_swiopen>
 80036ba:	462a      	mov	r2, r5
 80036bc:	4604      	mov	r4, r0
 80036be:	2100      	movs	r1, #0
 80036c0:	4630      	mov	r0, r6
 80036c2:	f000 fa12 	bl	8003aea <memset>
 80036c6:	1c63      	adds	r3, r4, #1
 80036c8:	d016      	beq.n	80036f8 <_get_semihosting_exts+0x50>
 80036ca:	4620      	mov	r0, r4
 80036cc:	f7ff fe48 	bl	8003360 <findslot>
 80036d0:	f04f 090c 	mov.w	r9, #12
 80036d4:	4680      	mov	r8, r0
 80036d6:	4648      	mov	r0, r9
 80036d8:	4641      	mov	r1, r8
 80036da:	beab      	bkpt	0x00ab
 80036dc:	4680      	mov	r8, r0
 80036de:	4640      	mov	r0, r8
 80036e0:	f7ff fe66 	bl	80033b0 <checkerror>
 80036e4:	2803      	cmp	r0, #3
 80036e6:	dd02      	ble.n	80036ee <_get_semihosting_exts+0x46>
 80036e8:	1ec3      	subs	r3, r0, #3
 80036ea:	42ab      	cmp	r3, r5
 80036ec:	dc08      	bgt.n	8003700 <_get_semihosting_exts+0x58>
 80036ee:	4620      	mov	r0, r4
 80036f0:	f7ff ff0e 	bl	8003510 <_close>
 80036f4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80036f8:	4620      	mov	r0, r4
 80036fa:	b003      	add	sp, #12
 80036fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003700:	2204      	movs	r2, #4
 8003702:	eb0d 0102 	add.w	r1, sp, r2
 8003706:	4620      	mov	r0, r4
 8003708:	f7ff fe67 	bl	80033da <_read>
 800370c:	2803      	cmp	r0, #3
 800370e:	ddee      	ble.n	80036ee <_get_semihosting_exts+0x46>
 8003710:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003714:	2b53      	cmp	r3, #83	; 0x53
 8003716:	d1ea      	bne.n	80036ee <_get_semihosting_exts+0x46>
 8003718:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800371c:	2b48      	cmp	r3, #72	; 0x48
 800371e:	d1e6      	bne.n	80036ee <_get_semihosting_exts+0x46>
 8003720:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003724:	2b46      	cmp	r3, #70	; 0x46
 8003726:	d1e2      	bne.n	80036ee <_get_semihosting_exts+0x46>
 8003728:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800372c:	2b42      	cmp	r3, #66	; 0x42
 800372e:	d1de      	bne.n	80036ee <_get_semihosting_exts+0x46>
 8003730:	2201      	movs	r2, #1
 8003732:	4639      	mov	r1, r7
 8003734:	4620      	mov	r0, r4
 8003736:	f7ff fe6c 	bl	8003412 <_swilseek>
 800373a:	2800      	cmp	r0, #0
 800373c:	dbd7      	blt.n	80036ee <_get_semihosting_exts+0x46>
 800373e:	462a      	mov	r2, r5
 8003740:	4631      	mov	r1, r6
 8003742:	4620      	mov	r0, r4
 8003744:	f7ff fe49 	bl	80033da <_read>
 8003748:	4605      	mov	r5, r0
 800374a:	4620      	mov	r0, r4
 800374c:	f7ff fee0 	bl	8003510 <_close>
 8003750:	4628      	mov	r0, r5
 8003752:	f7ff fe2d 	bl	80033b0 <checkerror>
 8003756:	4604      	mov	r4, r0
 8003758:	e7ce      	b.n	80036f8 <_get_semihosting_exts+0x50>
 800375a:	bf00      	nop
 800375c:	0800485c 	.word	0x0800485c

08003760 <initialise_semihosting_exts>:
 8003760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003762:	4d0a      	ldr	r5, [pc, #40]	; (800378c <initialise_semihosting_exts+0x2c>)
 8003764:	4c0a      	ldr	r4, [pc, #40]	; (8003790 <initialise_semihosting_exts+0x30>)
 8003766:	2100      	movs	r1, #0
 8003768:	2201      	movs	r2, #1
 800376a:	a801      	add	r0, sp, #4
 800376c:	6029      	str	r1, [r5, #0]
 800376e:	6022      	str	r2, [r4, #0]
 8003770:	f7ff ff9a 	bl	80036a8 <_get_semihosting_exts>
 8003774:	2800      	cmp	r0, #0
 8003776:	dd07      	ble.n	8003788 <initialise_semihosting_exts+0x28>
 8003778:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800377c:	f003 0201 	and.w	r2, r3, #1
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	602a      	str	r2, [r5, #0]
 8003786:	6023      	str	r3, [r4, #0]
 8003788:	b003      	add	sp, #12
 800378a:	bd30      	pop	{r4, r5, pc}
 800378c:	2000000c 	.word	0x2000000c
 8003790:	20000010 	.word	0x20000010

08003794 <_has_ext_stdout_stderr>:
 8003794:	b510      	push	{r4, lr}
 8003796:	4c04      	ldr	r4, [pc, #16]	; (80037a8 <_has_ext_stdout_stderr+0x14>)
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	da01      	bge.n	80037a2 <_has_ext_stdout_stderr+0xe>
 800379e:	f7ff ffdf 	bl	8003760 <initialise_semihosting_exts>
 80037a2:	6820      	ldr	r0, [r4, #0]
 80037a4:	bd10      	pop	{r4, pc}
 80037a6:	bf00      	nop
 80037a8:	20000010 	.word	0x20000010

080037ac <initialise_monitor_handles>:
 80037ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b0:	b085      	sub	sp, #20
 80037b2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003864 <initialise_monitor_handles+0xb8>
 80037b6:	f8cd 9004 	str.w	r9, [sp, #4]
 80037ba:	2303      	movs	r3, #3
 80037bc:	2400      	movs	r4, #0
 80037be:	9303      	str	r3, [sp, #12]
 80037c0:	af01      	add	r7, sp, #4
 80037c2:	9402      	str	r4, [sp, #8]
 80037c4:	2501      	movs	r5, #1
 80037c6:	4628      	mov	r0, r5
 80037c8:	4639      	mov	r1, r7
 80037ca:	beab      	bkpt	0x00ab
 80037cc:	4605      	mov	r5, r0
 80037ce:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003868 <initialise_monitor_handles+0xbc>
 80037d2:	4623      	mov	r3, r4
 80037d4:	4c20      	ldr	r4, [pc, #128]	; (8003858 <initialise_monitor_handles+0xac>)
 80037d6:	f8c8 5000 	str.w	r5, [r8]
 80037da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037de:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80037e2:	3301      	adds	r3, #1
 80037e4:	2b14      	cmp	r3, #20
 80037e6:	d1fa      	bne.n	80037de <initialise_monitor_handles+0x32>
 80037e8:	f7ff ffd4 	bl	8003794 <_has_ext_stdout_stderr>
 80037ec:	4d1b      	ldr	r5, [pc, #108]	; (800385c <initialise_monitor_handles+0xb0>)
 80037ee:	b1d0      	cbz	r0, 8003826 <initialise_monitor_handles+0x7a>
 80037f0:	f04f 0a03 	mov.w	sl, #3
 80037f4:	2304      	movs	r3, #4
 80037f6:	f8cd 9004 	str.w	r9, [sp, #4]
 80037fa:	2601      	movs	r6, #1
 80037fc:	f8cd a00c 	str.w	sl, [sp, #12]
 8003800:	9302      	str	r3, [sp, #8]
 8003802:	4630      	mov	r0, r6
 8003804:	4639      	mov	r1, r7
 8003806:	beab      	bkpt	0x00ab
 8003808:	4683      	mov	fp, r0
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <initialise_monitor_handles+0xb4>)
 800380c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003810:	f8c3 b000 	str.w	fp, [r3]
 8003814:	2308      	movs	r3, #8
 8003816:	f8cd a00c 	str.w	sl, [sp, #12]
 800381a:	9302      	str	r3, [sp, #8]
 800381c:	4630      	mov	r0, r6
 800381e:	4639      	mov	r1, r7
 8003820:	beab      	bkpt	0x00ab
 8003822:	4606      	mov	r6, r0
 8003824:	602e      	str	r6, [r5, #0]
 8003826:	682b      	ldr	r3, [r5, #0]
 8003828:	3301      	adds	r3, #1
 800382a:	bf02      	ittt	eq
 800382c:	4b0c      	ldreq	r3, [pc, #48]	; (8003860 <initialise_monitor_handles+0xb4>)
 800382e:	681b      	ldreq	r3, [r3, #0]
 8003830:	602b      	streq	r3, [r5, #0]
 8003832:	2600      	movs	r6, #0
 8003834:	f8d8 3000 	ldr.w	r3, [r8]
 8003838:	6023      	str	r3, [r4, #0]
 800383a:	6066      	str	r6, [r4, #4]
 800383c:	f7ff ffaa 	bl	8003794 <_has_ext_stdout_stderr>
 8003840:	b130      	cbz	r0, 8003850 <initialise_monitor_handles+0xa4>
 8003842:	4b07      	ldr	r3, [pc, #28]	; (8003860 <initialise_monitor_handles+0xb4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800384a:	682b      	ldr	r3, [r5, #0]
 800384c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003850:	b005      	add	sp, #20
 8003852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003856:	bf00      	nop
 8003858:	20000138 	.word	0x20000138
 800385c:	2000012c 	.word	0x2000012c
 8003860:	20000134 	.word	0x20000134
 8003864:	08004872 	.word	0x08004872
 8003868:	20000130 	.word	0x20000130

0800386c <_isatty>:
 800386c:	b570      	push	{r4, r5, r6, lr}
 800386e:	f7ff fd77 	bl	8003360 <findslot>
 8003872:	2509      	movs	r5, #9
 8003874:	4604      	mov	r4, r0
 8003876:	b920      	cbnz	r0, 8003882 <_isatty+0x16>
 8003878:	f000 f814 	bl	80038a4 <__errno>
 800387c:	6005      	str	r5, [r0, #0]
 800387e:	4620      	mov	r0, r4
 8003880:	bd70      	pop	{r4, r5, r6, pc}
 8003882:	4628      	mov	r0, r5
 8003884:	4621      	mov	r1, r4
 8003886:	beab      	bkpt	0x00ab
 8003888:	4604      	mov	r4, r0
 800388a:	2c01      	cmp	r4, #1
 800388c:	d0f7      	beq.n	800387e <_isatty+0x12>
 800388e:	f000 f809 	bl	80038a4 <__errno>
 8003892:	2400      	movs	r4, #0
 8003894:	4605      	mov	r5, r0
 8003896:	2613      	movs	r6, #19
 8003898:	4630      	mov	r0, r6
 800389a:	4621      	mov	r1, r4
 800389c:	beab      	bkpt	0x00ab
 800389e:	4606      	mov	r6, r0
 80038a0:	602e      	str	r6, [r5, #0]
 80038a2:	e7ec      	b.n	800387e <_isatty+0x12>

080038a4 <__errno>:
 80038a4:	4b01      	ldr	r3, [pc, #4]	; (80038ac <__errno+0x8>)
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000014 	.word	0x20000014

080038b0 <std>:
 80038b0:	2300      	movs	r3, #0
 80038b2:	b510      	push	{r4, lr}
 80038b4:	4604      	mov	r4, r0
 80038b6:	e9c0 3300 	strd	r3, r3, [r0]
 80038ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038be:	6083      	str	r3, [r0, #8]
 80038c0:	8181      	strh	r1, [r0, #12]
 80038c2:	6643      	str	r3, [r0, #100]	; 0x64
 80038c4:	81c2      	strh	r2, [r0, #14]
 80038c6:	6183      	str	r3, [r0, #24]
 80038c8:	4619      	mov	r1, r3
 80038ca:	2208      	movs	r2, #8
 80038cc:	305c      	adds	r0, #92	; 0x5c
 80038ce:	f000 f90c 	bl	8003aea <memset>
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <std+0x38>)
 80038d4:	6263      	str	r3, [r4, #36]	; 0x24
 80038d6:	4b05      	ldr	r3, [pc, #20]	; (80038ec <std+0x3c>)
 80038d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80038da:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <std+0x40>)
 80038dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <std+0x44>)
 80038e0:	6224      	str	r4, [r4, #32]
 80038e2:	6323      	str	r3, [r4, #48]	; 0x30
 80038e4:	bd10      	pop	{r4, pc}
 80038e6:	bf00      	nop
 80038e8:	08003c75 	.word	0x08003c75
 80038ec:	08003c97 	.word	0x08003c97
 80038f0:	08003ccf 	.word	0x08003ccf
 80038f4:	08003cf3 	.word	0x08003cf3

080038f8 <_cleanup_r>:
 80038f8:	4901      	ldr	r1, [pc, #4]	; (8003900 <_cleanup_r+0x8>)
 80038fa:	f000 b8af 	b.w	8003a5c <_fwalk_reent>
 80038fe:	bf00      	nop
 8003900:	08003e4d 	.word	0x08003e4d

08003904 <__sfmoreglue>:
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	2268      	movs	r2, #104	; 0x68
 8003908:	1e4d      	subs	r5, r1, #1
 800390a:	4355      	muls	r5, r2
 800390c:	460e      	mov	r6, r1
 800390e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003912:	f000 f913 	bl	8003b3c <_malloc_r>
 8003916:	4604      	mov	r4, r0
 8003918:	b140      	cbz	r0, 800392c <__sfmoreglue+0x28>
 800391a:	2100      	movs	r1, #0
 800391c:	e9c0 1600 	strd	r1, r6, [r0]
 8003920:	300c      	adds	r0, #12
 8003922:	60a0      	str	r0, [r4, #8]
 8003924:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003928:	f000 f8df 	bl	8003aea <memset>
 800392c:	4620      	mov	r0, r4
 800392e:	bd70      	pop	{r4, r5, r6, pc}

08003930 <__sfp_lock_acquire>:
 8003930:	4801      	ldr	r0, [pc, #4]	; (8003938 <__sfp_lock_acquire+0x8>)
 8003932:	f000 b8d8 	b.w	8003ae6 <__retarget_lock_acquire_recursive>
 8003936:	bf00      	nop
 8003938:	200001d9 	.word	0x200001d9

0800393c <__sfp_lock_release>:
 800393c:	4801      	ldr	r0, [pc, #4]	; (8003944 <__sfp_lock_release+0x8>)
 800393e:	f000 b8d3 	b.w	8003ae8 <__retarget_lock_release_recursive>
 8003942:	bf00      	nop
 8003944:	200001d9 	.word	0x200001d9

08003948 <__sinit_lock_acquire>:
 8003948:	4801      	ldr	r0, [pc, #4]	; (8003950 <__sinit_lock_acquire+0x8>)
 800394a:	f000 b8cc 	b.w	8003ae6 <__retarget_lock_acquire_recursive>
 800394e:	bf00      	nop
 8003950:	200001da 	.word	0x200001da

08003954 <__sinit_lock_release>:
 8003954:	4801      	ldr	r0, [pc, #4]	; (800395c <__sinit_lock_release+0x8>)
 8003956:	f000 b8c7 	b.w	8003ae8 <__retarget_lock_release_recursive>
 800395a:	bf00      	nop
 800395c:	200001da 	.word	0x200001da

08003960 <__sinit>:
 8003960:	b510      	push	{r4, lr}
 8003962:	4604      	mov	r4, r0
 8003964:	f7ff fff0 	bl	8003948 <__sinit_lock_acquire>
 8003968:	69a3      	ldr	r3, [r4, #24]
 800396a:	b11b      	cbz	r3, 8003974 <__sinit+0x14>
 800396c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003970:	f7ff bff0 	b.w	8003954 <__sinit_lock_release>
 8003974:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003978:	6523      	str	r3, [r4, #80]	; 0x50
 800397a:	4b13      	ldr	r3, [pc, #76]	; (80039c8 <__sinit+0x68>)
 800397c:	4a13      	ldr	r2, [pc, #76]	; (80039cc <__sinit+0x6c>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	62a2      	str	r2, [r4, #40]	; 0x28
 8003982:	42a3      	cmp	r3, r4
 8003984:	bf04      	itt	eq
 8003986:	2301      	moveq	r3, #1
 8003988:	61a3      	streq	r3, [r4, #24]
 800398a:	4620      	mov	r0, r4
 800398c:	f000 f820 	bl	80039d0 <__sfp>
 8003990:	6060      	str	r0, [r4, #4]
 8003992:	4620      	mov	r0, r4
 8003994:	f000 f81c 	bl	80039d0 <__sfp>
 8003998:	60a0      	str	r0, [r4, #8]
 800399a:	4620      	mov	r0, r4
 800399c:	f000 f818 	bl	80039d0 <__sfp>
 80039a0:	2200      	movs	r2, #0
 80039a2:	60e0      	str	r0, [r4, #12]
 80039a4:	2104      	movs	r1, #4
 80039a6:	6860      	ldr	r0, [r4, #4]
 80039a8:	f7ff ff82 	bl	80038b0 <std>
 80039ac:	68a0      	ldr	r0, [r4, #8]
 80039ae:	2201      	movs	r2, #1
 80039b0:	2109      	movs	r1, #9
 80039b2:	f7ff ff7d 	bl	80038b0 <std>
 80039b6:	68e0      	ldr	r0, [r4, #12]
 80039b8:	2202      	movs	r2, #2
 80039ba:	2112      	movs	r1, #18
 80039bc:	f7ff ff78 	bl	80038b0 <std>
 80039c0:	2301      	movs	r3, #1
 80039c2:	61a3      	str	r3, [r4, #24]
 80039c4:	e7d2      	b.n	800396c <__sinit+0xc>
 80039c6:	bf00      	nop
 80039c8:	080048d8 	.word	0x080048d8
 80039cc:	080038f9 	.word	0x080038f9

080039d0 <__sfp>:
 80039d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039d2:	4607      	mov	r7, r0
 80039d4:	f7ff ffac 	bl	8003930 <__sfp_lock_acquire>
 80039d8:	4b1e      	ldr	r3, [pc, #120]	; (8003a54 <__sfp+0x84>)
 80039da:	681e      	ldr	r6, [r3, #0]
 80039dc:	69b3      	ldr	r3, [r6, #24]
 80039de:	b913      	cbnz	r3, 80039e6 <__sfp+0x16>
 80039e0:	4630      	mov	r0, r6
 80039e2:	f7ff ffbd 	bl	8003960 <__sinit>
 80039e6:	3648      	adds	r6, #72	; 0x48
 80039e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	d503      	bpl.n	80039f8 <__sfp+0x28>
 80039f0:	6833      	ldr	r3, [r6, #0]
 80039f2:	b30b      	cbz	r3, 8003a38 <__sfp+0x68>
 80039f4:	6836      	ldr	r6, [r6, #0]
 80039f6:	e7f7      	b.n	80039e8 <__sfp+0x18>
 80039f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80039fc:	b9d5      	cbnz	r5, 8003a34 <__sfp+0x64>
 80039fe:	4b16      	ldr	r3, [pc, #88]	; (8003a58 <__sfp+0x88>)
 8003a00:	60e3      	str	r3, [r4, #12]
 8003a02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003a06:	6665      	str	r5, [r4, #100]	; 0x64
 8003a08:	f000 f86c 	bl	8003ae4 <__retarget_lock_init_recursive>
 8003a0c:	f7ff ff96 	bl	800393c <__sfp_lock_release>
 8003a10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003a18:	6025      	str	r5, [r4, #0]
 8003a1a:	61a5      	str	r5, [r4, #24]
 8003a1c:	2208      	movs	r2, #8
 8003a1e:	4629      	mov	r1, r5
 8003a20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003a24:	f000 f861 	bl	8003aea <memset>
 8003a28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003a2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003a30:	4620      	mov	r0, r4
 8003a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a34:	3468      	adds	r4, #104	; 0x68
 8003a36:	e7d9      	b.n	80039ec <__sfp+0x1c>
 8003a38:	2104      	movs	r1, #4
 8003a3a:	4638      	mov	r0, r7
 8003a3c:	f7ff ff62 	bl	8003904 <__sfmoreglue>
 8003a40:	4604      	mov	r4, r0
 8003a42:	6030      	str	r0, [r6, #0]
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d1d5      	bne.n	80039f4 <__sfp+0x24>
 8003a48:	f7ff ff78 	bl	800393c <__sfp_lock_release>
 8003a4c:	230c      	movs	r3, #12
 8003a4e:	603b      	str	r3, [r7, #0]
 8003a50:	e7ee      	b.n	8003a30 <__sfp+0x60>
 8003a52:	bf00      	nop
 8003a54:	080048d8 	.word	0x080048d8
 8003a58:	ffff0001 	.word	0xffff0001

08003a5c <_fwalk_reent>:
 8003a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a60:	4606      	mov	r6, r0
 8003a62:	4688      	mov	r8, r1
 8003a64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003a68:	2700      	movs	r7, #0
 8003a6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a6e:	f1b9 0901 	subs.w	r9, r9, #1
 8003a72:	d505      	bpl.n	8003a80 <_fwalk_reent+0x24>
 8003a74:	6824      	ldr	r4, [r4, #0]
 8003a76:	2c00      	cmp	r4, #0
 8003a78:	d1f7      	bne.n	8003a6a <_fwalk_reent+0xe>
 8003a7a:	4638      	mov	r0, r7
 8003a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a80:	89ab      	ldrh	r3, [r5, #12]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d907      	bls.n	8003a96 <_fwalk_reent+0x3a>
 8003a86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	d003      	beq.n	8003a96 <_fwalk_reent+0x3a>
 8003a8e:	4629      	mov	r1, r5
 8003a90:	4630      	mov	r0, r6
 8003a92:	47c0      	blx	r8
 8003a94:	4307      	orrs	r7, r0
 8003a96:	3568      	adds	r5, #104	; 0x68
 8003a98:	e7e9      	b.n	8003a6e <_fwalk_reent+0x12>
	...

08003a9c <__libc_init_array>:
 8003a9c:	b570      	push	{r4, r5, r6, lr}
 8003a9e:	4d0d      	ldr	r5, [pc, #52]	; (8003ad4 <__libc_init_array+0x38>)
 8003aa0:	4c0d      	ldr	r4, [pc, #52]	; (8003ad8 <__libc_init_array+0x3c>)
 8003aa2:	1b64      	subs	r4, r4, r5
 8003aa4:	10a4      	asrs	r4, r4, #2
 8003aa6:	2600      	movs	r6, #0
 8003aa8:	42a6      	cmp	r6, r4
 8003aaa:	d109      	bne.n	8003ac0 <__libc_init_array+0x24>
 8003aac:	4d0b      	ldr	r5, [pc, #44]	; (8003adc <__libc_init_array+0x40>)
 8003aae:	4c0c      	ldr	r4, [pc, #48]	; (8003ae0 <__libc_init_array+0x44>)
 8003ab0:	f000 feba 	bl	8004828 <_init>
 8003ab4:	1b64      	subs	r4, r4, r5
 8003ab6:	10a4      	asrs	r4, r4, #2
 8003ab8:	2600      	movs	r6, #0
 8003aba:	42a6      	cmp	r6, r4
 8003abc:	d105      	bne.n	8003aca <__libc_init_array+0x2e>
 8003abe:	bd70      	pop	{r4, r5, r6, pc}
 8003ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac4:	4798      	blx	r3
 8003ac6:	3601      	adds	r6, #1
 8003ac8:	e7ee      	b.n	8003aa8 <__libc_init_array+0xc>
 8003aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ace:	4798      	blx	r3
 8003ad0:	3601      	adds	r6, #1
 8003ad2:	e7f2      	b.n	8003aba <__libc_init_array+0x1e>
 8003ad4:	08004918 	.word	0x08004918
 8003ad8:	08004918 	.word	0x08004918
 8003adc:	08004918 	.word	0x08004918
 8003ae0:	0800491c 	.word	0x0800491c

08003ae4 <__retarget_lock_init_recursive>:
 8003ae4:	4770      	bx	lr

08003ae6 <__retarget_lock_acquire_recursive>:
 8003ae6:	4770      	bx	lr

08003ae8 <__retarget_lock_release_recursive>:
 8003ae8:	4770      	bx	lr

08003aea <memset>:
 8003aea:	4402      	add	r2, r0
 8003aec:	4603      	mov	r3, r0
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d100      	bne.n	8003af4 <memset+0xa>
 8003af2:	4770      	bx	lr
 8003af4:	f803 1b01 	strb.w	r1, [r3], #1
 8003af8:	e7f9      	b.n	8003aee <memset+0x4>
	...

08003afc <sbrk_aligned>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	4e0e      	ldr	r6, [pc, #56]	; (8003b38 <sbrk_aligned+0x3c>)
 8003b00:	460c      	mov	r4, r1
 8003b02:	6831      	ldr	r1, [r6, #0]
 8003b04:	4605      	mov	r5, r0
 8003b06:	b911      	cbnz	r1, 8003b0e <sbrk_aligned+0x12>
 8003b08:	f000 f8a4 	bl	8003c54 <_sbrk_r>
 8003b0c:	6030      	str	r0, [r6, #0]
 8003b0e:	4621      	mov	r1, r4
 8003b10:	4628      	mov	r0, r5
 8003b12:	f000 f89f 	bl	8003c54 <_sbrk_r>
 8003b16:	1c43      	adds	r3, r0, #1
 8003b18:	d00a      	beq.n	8003b30 <sbrk_aligned+0x34>
 8003b1a:	1cc4      	adds	r4, r0, #3
 8003b1c:	f024 0403 	bic.w	r4, r4, #3
 8003b20:	42a0      	cmp	r0, r4
 8003b22:	d007      	beq.n	8003b34 <sbrk_aligned+0x38>
 8003b24:	1a21      	subs	r1, r4, r0
 8003b26:	4628      	mov	r0, r5
 8003b28:	f000 f894 	bl	8003c54 <_sbrk_r>
 8003b2c:	3001      	adds	r0, #1
 8003b2e:	d101      	bne.n	8003b34 <sbrk_aligned+0x38>
 8003b30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003b34:	4620      	mov	r0, r4
 8003b36:	bd70      	pop	{r4, r5, r6, pc}
 8003b38:	200001e0 	.word	0x200001e0

08003b3c <_malloc_r>:
 8003b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b40:	1ccd      	adds	r5, r1, #3
 8003b42:	f025 0503 	bic.w	r5, r5, #3
 8003b46:	3508      	adds	r5, #8
 8003b48:	2d0c      	cmp	r5, #12
 8003b4a:	bf38      	it	cc
 8003b4c:	250c      	movcc	r5, #12
 8003b4e:	2d00      	cmp	r5, #0
 8003b50:	4607      	mov	r7, r0
 8003b52:	db01      	blt.n	8003b58 <_malloc_r+0x1c>
 8003b54:	42a9      	cmp	r1, r5
 8003b56:	d905      	bls.n	8003b64 <_malloc_r+0x28>
 8003b58:	230c      	movs	r3, #12
 8003b5a:	603b      	str	r3, [r7, #0]
 8003b5c:	2600      	movs	r6, #0
 8003b5e:	4630      	mov	r0, r6
 8003b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b64:	4e2e      	ldr	r6, [pc, #184]	; (8003c20 <_malloc_r+0xe4>)
 8003b66:	f000 f9bf 	bl	8003ee8 <__malloc_lock>
 8003b6a:	6833      	ldr	r3, [r6, #0]
 8003b6c:	461c      	mov	r4, r3
 8003b6e:	bb34      	cbnz	r4, 8003bbe <_malloc_r+0x82>
 8003b70:	4629      	mov	r1, r5
 8003b72:	4638      	mov	r0, r7
 8003b74:	f7ff ffc2 	bl	8003afc <sbrk_aligned>
 8003b78:	1c43      	adds	r3, r0, #1
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	d14d      	bne.n	8003c1a <_malloc_r+0xde>
 8003b7e:	6834      	ldr	r4, [r6, #0]
 8003b80:	4626      	mov	r6, r4
 8003b82:	2e00      	cmp	r6, #0
 8003b84:	d140      	bne.n	8003c08 <_malloc_r+0xcc>
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	4631      	mov	r1, r6
 8003b8a:	4638      	mov	r0, r7
 8003b8c:	eb04 0803 	add.w	r8, r4, r3
 8003b90:	f000 f860 	bl	8003c54 <_sbrk_r>
 8003b94:	4580      	cmp	r8, r0
 8003b96:	d13a      	bne.n	8003c0e <_malloc_r+0xd2>
 8003b98:	6821      	ldr	r1, [r4, #0]
 8003b9a:	3503      	adds	r5, #3
 8003b9c:	1a6d      	subs	r5, r5, r1
 8003b9e:	f025 0503 	bic.w	r5, r5, #3
 8003ba2:	3508      	adds	r5, #8
 8003ba4:	2d0c      	cmp	r5, #12
 8003ba6:	bf38      	it	cc
 8003ba8:	250c      	movcc	r5, #12
 8003baa:	4629      	mov	r1, r5
 8003bac:	4638      	mov	r0, r7
 8003bae:	f7ff ffa5 	bl	8003afc <sbrk_aligned>
 8003bb2:	3001      	adds	r0, #1
 8003bb4:	d02b      	beq.n	8003c0e <_malloc_r+0xd2>
 8003bb6:	6823      	ldr	r3, [r4, #0]
 8003bb8:	442b      	add	r3, r5
 8003bba:	6023      	str	r3, [r4, #0]
 8003bbc:	e00e      	b.n	8003bdc <_malloc_r+0xa0>
 8003bbe:	6822      	ldr	r2, [r4, #0]
 8003bc0:	1b52      	subs	r2, r2, r5
 8003bc2:	d41e      	bmi.n	8003c02 <_malloc_r+0xc6>
 8003bc4:	2a0b      	cmp	r2, #11
 8003bc6:	d916      	bls.n	8003bf6 <_malloc_r+0xba>
 8003bc8:	1961      	adds	r1, r4, r5
 8003bca:	42a3      	cmp	r3, r4
 8003bcc:	6025      	str	r5, [r4, #0]
 8003bce:	bf18      	it	ne
 8003bd0:	6059      	strne	r1, [r3, #4]
 8003bd2:	6863      	ldr	r3, [r4, #4]
 8003bd4:	bf08      	it	eq
 8003bd6:	6031      	streq	r1, [r6, #0]
 8003bd8:	5162      	str	r2, [r4, r5]
 8003bda:	604b      	str	r3, [r1, #4]
 8003bdc:	4638      	mov	r0, r7
 8003bde:	f104 060b 	add.w	r6, r4, #11
 8003be2:	f000 f987 	bl	8003ef4 <__malloc_unlock>
 8003be6:	f026 0607 	bic.w	r6, r6, #7
 8003bea:	1d23      	adds	r3, r4, #4
 8003bec:	1af2      	subs	r2, r6, r3
 8003bee:	d0b6      	beq.n	8003b5e <_malloc_r+0x22>
 8003bf0:	1b9b      	subs	r3, r3, r6
 8003bf2:	50a3      	str	r3, [r4, r2]
 8003bf4:	e7b3      	b.n	8003b5e <_malloc_r+0x22>
 8003bf6:	6862      	ldr	r2, [r4, #4]
 8003bf8:	42a3      	cmp	r3, r4
 8003bfa:	bf0c      	ite	eq
 8003bfc:	6032      	streq	r2, [r6, #0]
 8003bfe:	605a      	strne	r2, [r3, #4]
 8003c00:	e7ec      	b.n	8003bdc <_malloc_r+0xa0>
 8003c02:	4623      	mov	r3, r4
 8003c04:	6864      	ldr	r4, [r4, #4]
 8003c06:	e7b2      	b.n	8003b6e <_malloc_r+0x32>
 8003c08:	4634      	mov	r4, r6
 8003c0a:	6876      	ldr	r6, [r6, #4]
 8003c0c:	e7b9      	b.n	8003b82 <_malloc_r+0x46>
 8003c0e:	230c      	movs	r3, #12
 8003c10:	603b      	str	r3, [r7, #0]
 8003c12:	4638      	mov	r0, r7
 8003c14:	f000 f96e 	bl	8003ef4 <__malloc_unlock>
 8003c18:	e7a1      	b.n	8003b5e <_malloc_r+0x22>
 8003c1a:	6025      	str	r5, [r4, #0]
 8003c1c:	e7de      	b.n	8003bdc <_malloc_r+0xa0>
 8003c1e:	bf00      	nop
 8003c20:	200001dc 	.word	0x200001dc

08003c24 <iprintf>:
 8003c24:	b40f      	push	{r0, r1, r2, r3}
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <iprintf+0x2c>)
 8003c28:	b513      	push	{r0, r1, r4, lr}
 8003c2a:	681c      	ldr	r4, [r3, #0]
 8003c2c:	b124      	cbz	r4, 8003c38 <iprintf+0x14>
 8003c2e:	69a3      	ldr	r3, [r4, #24]
 8003c30:	b913      	cbnz	r3, 8003c38 <iprintf+0x14>
 8003c32:	4620      	mov	r0, r4
 8003c34:	f7ff fe94 	bl	8003960 <__sinit>
 8003c38:	ab05      	add	r3, sp, #20
 8003c3a:	9a04      	ldr	r2, [sp, #16]
 8003c3c:	68a1      	ldr	r1, [r4, #8]
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	4620      	mov	r0, r4
 8003c42:	f000 f9d3 	bl	8003fec <_vfiprintf_r>
 8003c46:	b002      	add	sp, #8
 8003c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c4c:	b004      	add	sp, #16
 8003c4e:	4770      	bx	lr
 8003c50:	20000014 	.word	0x20000014

08003c54 <_sbrk_r>:
 8003c54:	b538      	push	{r3, r4, r5, lr}
 8003c56:	4d06      	ldr	r5, [pc, #24]	; (8003c70 <_sbrk_r+0x1c>)
 8003c58:	2300      	movs	r3, #0
 8003c5a:	4604      	mov	r4, r0
 8003c5c:	4608      	mov	r0, r1
 8003c5e:	602b      	str	r3, [r5, #0]
 8003c60:	f7fd f898 	bl	8000d94 <_sbrk>
 8003c64:	1c43      	adds	r3, r0, #1
 8003c66:	d102      	bne.n	8003c6e <_sbrk_r+0x1a>
 8003c68:	682b      	ldr	r3, [r5, #0]
 8003c6a:	b103      	cbz	r3, 8003c6e <_sbrk_r+0x1a>
 8003c6c:	6023      	str	r3, [r4, #0]
 8003c6e:	bd38      	pop	{r3, r4, r5, pc}
 8003c70:	200001e4 	.word	0x200001e4

08003c74 <__sread>:
 8003c74:	b510      	push	{r4, lr}
 8003c76:	460c      	mov	r4, r1
 8003c78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c7c:	f000 fc7a 	bl	8004574 <_read_r>
 8003c80:	2800      	cmp	r0, #0
 8003c82:	bfab      	itete	ge
 8003c84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c86:	89a3      	ldrhlt	r3, [r4, #12]
 8003c88:	181b      	addge	r3, r3, r0
 8003c8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c8e:	bfac      	ite	ge
 8003c90:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c92:	81a3      	strhlt	r3, [r4, #12]
 8003c94:	bd10      	pop	{r4, pc}

08003c96 <__swrite>:
 8003c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c9a:	461f      	mov	r7, r3
 8003c9c:	898b      	ldrh	r3, [r1, #12]
 8003c9e:	05db      	lsls	r3, r3, #23
 8003ca0:	4605      	mov	r5, r0
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	4616      	mov	r6, r2
 8003ca6:	d505      	bpl.n	8003cb4 <__swrite+0x1e>
 8003ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cac:	2302      	movs	r3, #2
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f000 f908 	bl	8003ec4 <_lseek_r>
 8003cb4:	89a3      	ldrh	r3, [r4, #12]
 8003cb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cbe:	81a3      	strh	r3, [r4, #12]
 8003cc0:	4632      	mov	r2, r6
 8003cc2:	463b      	mov	r3, r7
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cca:	f000 b817 	b.w	8003cfc <_write_r>

08003cce <__sseek>:
 8003cce:	b510      	push	{r4, lr}
 8003cd0:	460c      	mov	r4, r1
 8003cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd6:	f000 f8f5 	bl	8003ec4 <_lseek_r>
 8003cda:	1c43      	adds	r3, r0, #1
 8003cdc:	89a3      	ldrh	r3, [r4, #12]
 8003cde:	bf15      	itete	ne
 8003ce0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ce2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ce6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cea:	81a3      	strheq	r3, [r4, #12]
 8003cec:	bf18      	it	ne
 8003cee:	81a3      	strhne	r3, [r4, #12]
 8003cf0:	bd10      	pop	{r4, pc}

08003cf2 <__sclose>:
 8003cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cf6:	f000 b813 	b.w	8003d20 <_close_r>
	...

08003cfc <_write_r>:
 8003cfc:	b538      	push	{r3, r4, r5, lr}
 8003cfe:	4d07      	ldr	r5, [pc, #28]	; (8003d1c <_write_r+0x20>)
 8003d00:	4604      	mov	r4, r0
 8003d02:	4608      	mov	r0, r1
 8003d04:	4611      	mov	r1, r2
 8003d06:	2200      	movs	r2, #0
 8003d08:	602a      	str	r2, [r5, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f7ff fbcf 	bl	80034ae <_write>
 8003d10:	1c43      	adds	r3, r0, #1
 8003d12:	d102      	bne.n	8003d1a <_write_r+0x1e>
 8003d14:	682b      	ldr	r3, [r5, #0]
 8003d16:	b103      	cbz	r3, 8003d1a <_write_r+0x1e>
 8003d18:	6023      	str	r3, [r4, #0]
 8003d1a:	bd38      	pop	{r3, r4, r5, pc}
 8003d1c:	200001e4 	.word	0x200001e4

08003d20 <_close_r>:
 8003d20:	b538      	push	{r3, r4, r5, lr}
 8003d22:	4d06      	ldr	r5, [pc, #24]	; (8003d3c <_close_r+0x1c>)
 8003d24:	2300      	movs	r3, #0
 8003d26:	4604      	mov	r4, r0
 8003d28:	4608      	mov	r0, r1
 8003d2a:	602b      	str	r3, [r5, #0]
 8003d2c:	f7ff fbf0 	bl	8003510 <_close>
 8003d30:	1c43      	adds	r3, r0, #1
 8003d32:	d102      	bne.n	8003d3a <_close_r+0x1a>
 8003d34:	682b      	ldr	r3, [r5, #0]
 8003d36:	b103      	cbz	r3, 8003d3a <_close_r+0x1a>
 8003d38:	6023      	str	r3, [r4, #0]
 8003d3a:	bd38      	pop	{r3, r4, r5, pc}
 8003d3c:	200001e4 	.word	0x200001e4

08003d40 <__sflush_r>:
 8003d40:	898a      	ldrh	r2, [r1, #12]
 8003d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d46:	4605      	mov	r5, r0
 8003d48:	0710      	lsls	r0, r2, #28
 8003d4a:	460c      	mov	r4, r1
 8003d4c:	d458      	bmi.n	8003e00 <__sflush_r+0xc0>
 8003d4e:	684b      	ldr	r3, [r1, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	dc05      	bgt.n	8003d60 <__sflush_r+0x20>
 8003d54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	dc02      	bgt.n	8003d60 <__sflush_r+0x20>
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d62:	2e00      	cmp	r6, #0
 8003d64:	d0f9      	beq.n	8003d5a <__sflush_r+0x1a>
 8003d66:	2300      	movs	r3, #0
 8003d68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d6c:	682f      	ldr	r7, [r5, #0]
 8003d6e:	602b      	str	r3, [r5, #0]
 8003d70:	d032      	beq.n	8003dd8 <__sflush_r+0x98>
 8003d72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d74:	89a3      	ldrh	r3, [r4, #12]
 8003d76:	075a      	lsls	r2, r3, #29
 8003d78:	d505      	bpl.n	8003d86 <__sflush_r+0x46>
 8003d7a:	6863      	ldr	r3, [r4, #4]
 8003d7c:	1ac0      	subs	r0, r0, r3
 8003d7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003d80:	b10b      	cbz	r3, 8003d86 <__sflush_r+0x46>
 8003d82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d84:	1ac0      	subs	r0, r0, r3
 8003d86:	2300      	movs	r3, #0
 8003d88:	4602      	mov	r2, r0
 8003d8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d8c:	6a21      	ldr	r1, [r4, #32]
 8003d8e:	4628      	mov	r0, r5
 8003d90:	47b0      	blx	r6
 8003d92:	1c43      	adds	r3, r0, #1
 8003d94:	89a3      	ldrh	r3, [r4, #12]
 8003d96:	d106      	bne.n	8003da6 <__sflush_r+0x66>
 8003d98:	6829      	ldr	r1, [r5, #0]
 8003d9a:	291d      	cmp	r1, #29
 8003d9c:	d82c      	bhi.n	8003df8 <__sflush_r+0xb8>
 8003d9e:	4a2a      	ldr	r2, [pc, #168]	; (8003e48 <__sflush_r+0x108>)
 8003da0:	40ca      	lsrs	r2, r1
 8003da2:	07d6      	lsls	r6, r2, #31
 8003da4:	d528      	bpl.n	8003df8 <__sflush_r+0xb8>
 8003da6:	2200      	movs	r2, #0
 8003da8:	6062      	str	r2, [r4, #4]
 8003daa:	04d9      	lsls	r1, r3, #19
 8003dac:	6922      	ldr	r2, [r4, #16]
 8003dae:	6022      	str	r2, [r4, #0]
 8003db0:	d504      	bpl.n	8003dbc <__sflush_r+0x7c>
 8003db2:	1c42      	adds	r2, r0, #1
 8003db4:	d101      	bne.n	8003dba <__sflush_r+0x7a>
 8003db6:	682b      	ldr	r3, [r5, #0]
 8003db8:	b903      	cbnz	r3, 8003dbc <__sflush_r+0x7c>
 8003dba:	6560      	str	r0, [r4, #84]	; 0x54
 8003dbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dbe:	602f      	str	r7, [r5, #0]
 8003dc0:	2900      	cmp	r1, #0
 8003dc2:	d0ca      	beq.n	8003d5a <__sflush_r+0x1a>
 8003dc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dc8:	4299      	cmp	r1, r3
 8003dca:	d002      	beq.n	8003dd2 <__sflush_r+0x92>
 8003dcc:	4628      	mov	r0, r5
 8003dce:	f000 f897 	bl	8003f00 <_free_r>
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	6360      	str	r0, [r4, #52]	; 0x34
 8003dd6:	e7c1      	b.n	8003d5c <__sflush_r+0x1c>
 8003dd8:	6a21      	ldr	r1, [r4, #32]
 8003dda:	2301      	movs	r3, #1
 8003ddc:	4628      	mov	r0, r5
 8003dde:	47b0      	blx	r6
 8003de0:	1c41      	adds	r1, r0, #1
 8003de2:	d1c7      	bne.n	8003d74 <__sflush_r+0x34>
 8003de4:	682b      	ldr	r3, [r5, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0c4      	beq.n	8003d74 <__sflush_r+0x34>
 8003dea:	2b1d      	cmp	r3, #29
 8003dec:	d001      	beq.n	8003df2 <__sflush_r+0xb2>
 8003dee:	2b16      	cmp	r3, #22
 8003df0:	d101      	bne.n	8003df6 <__sflush_r+0xb6>
 8003df2:	602f      	str	r7, [r5, #0]
 8003df4:	e7b1      	b.n	8003d5a <__sflush_r+0x1a>
 8003df6:	89a3      	ldrh	r3, [r4, #12]
 8003df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dfc:	81a3      	strh	r3, [r4, #12]
 8003dfe:	e7ad      	b.n	8003d5c <__sflush_r+0x1c>
 8003e00:	690f      	ldr	r7, [r1, #16]
 8003e02:	2f00      	cmp	r7, #0
 8003e04:	d0a9      	beq.n	8003d5a <__sflush_r+0x1a>
 8003e06:	0793      	lsls	r3, r2, #30
 8003e08:	680e      	ldr	r6, [r1, #0]
 8003e0a:	bf08      	it	eq
 8003e0c:	694b      	ldreq	r3, [r1, #20]
 8003e0e:	600f      	str	r7, [r1, #0]
 8003e10:	bf18      	it	ne
 8003e12:	2300      	movne	r3, #0
 8003e14:	eba6 0807 	sub.w	r8, r6, r7
 8003e18:	608b      	str	r3, [r1, #8]
 8003e1a:	f1b8 0f00 	cmp.w	r8, #0
 8003e1e:	dd9c      	ble.n	8003d5a <__sflush_r+0x1a>
 8003e20:	6a21      	ldr	r1, [r4, #32]
 8003e22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e24:	4643      	mov	r3, r8
 8003e26:	463a      	mov	r2, r7
 8003e28:	4628      	mov	r0, r5
 8003e2a:	47b0      	blx	r6
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	dc06      	bgt.n	8003e3e <__sflush_r+0xfe>
 8003e30:	89a3      	ldrh	r3, [r4, #12]
 8003e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e36:	81a3      	strh	r3, [r4, #12]
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e3c:	e78e      	b.n	8003d5c <__sflush_r+0x1c>
 8003e3e:	4407      	add	r7, r0
 8003e40:	eba8 0800 	sub.w	r8, r8, r0
 8003e44:	e7e9      	b.n	8003e1a <__sflush_r+0xda>
 8003e46:	bf00      	nop
 8003e48:	20400001 	.word	0x20400001

08003e4c <_fflush_r>:
 8003e4c:	b538      	push	{r3, r4, r5, lr}
 8003e4e:	690b      	ldr	r3, [r1, #16]
 8003e50:	4605      	mov	r5, r0
 8003e52:	460c      	mov	r4, r1
 8003e54:	b913      	cbnz	r3, 8003e5c <_fflush_r+0x10>
 8003e56:	2500      	movs	r5, #0
 8003e58:	4628      	mov	r0, r5
 8003e5a:	bd38      	pop	{r3, r4, r5, pc}
 8003e5c:	b118      	cbz	r0, 8003e66 <_fflush_r+0x1a>
 8003e5e:	6983      	ldr	r3, [r0, #24]
 8003e60:	b90b      	cbnz	r3, 8003e66 <_fflush_r+0x1a>
 8003e62:	f7ff fd7d 	bl	8003960 <__sinit>
 8003e66:	4b14      	ldr	r3, [pc, #80]	; (8003eb8 <_fflush_r+0x6c>)
 8003e68:	429c      	cmp	r4, r3
 8003e6a:	d11b      	bne.n	8003ea4 <_fflush_r+0x58>
 8003e6c:	686c      	ldr	r4, [r5, #4]
 8003e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0ef      	beq.n	8003e56 <_fflush_r+0xa>
 8003e76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003e78:	07d0      	lsls	r0, r2, #31
 8003e7a:	d404      	bmi.n	8003e86 <_fflush_r+0x3a>
 8003e7c:	0599      	lsls	r1, r3, #22
 8003e7e:	d402      	bmi.n	8003e86 <_fflush_r+0x3a>
 8003e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e82:	f7ff fe30 	bl	8003ae6 <__retarget_lock_acquire_recursive>
 8003e86:	4628      	mov	r0, r5
 8003e88:	4621      	mov	r1, r4
 8003e8a:	f7ff ff59 	bl	8003d40 <__sflush_r>
 8003e8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e90:	07da      	lsls	r2, r3, #31
 8003e92:	4605      	mov	r5, r0
 8003e94:	d4e0      	bmi.n	8003e58 <_fflush_r+0xc>
 8003e96:	89a3      	ldrh	r3, [r4, #12]
 8003e98:	059b      	lsls	r3, r3, #22
 8003e9a:	d4dd      	bmi.n	8003e58 <_fflush_r+0xc>
 8003e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e9e:	f7ff fe23 	bl	8003ae8 <__retarget_lock_release_recursive>
 8003ea2:	e7d9      	b.n	8003e58 <_fflush_r+0xc>
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <_fflush_r+0x70>)
 8003ea6:	429c      	cmp	r4, r3
 8003ea8:	d101      	bne.n	8003eae <_fflush_r+0x62>
 8003eaa:	68ac      	ldr	r4, [r5, #8]
 8003eac:	e7df      	b.n	8003e6e <_fflush_r+0x22>
 8003eae:	4b04      	ldr	r3, [pc, #16]	; (8003ec0 <_fflush_r+0x74>)
 8003eb0:	429c      	cmp	r4, r3
 8003eb2:	bf08      	it	eq
 8003eb4:	68ec      	ldreq	r4, [r5, #12]
 8003eb6:	e7da      	b.n	8003e6e <_fflush_r+0x22>
 8003eb8:	08004898 	.word	0x08004898
 8003ebc:	080048b8 	.word	0x080048b8
 8003ec0:	08004878 	.word	0x08004878

08003ec4 <_lseek_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	4d07      	ldr	r5, [pc, #28]	; (8003ee4 <_lseek_r+0x20>)
 8003ec8:	4604      	mov	r4, r0
 8003eca:	4608      	mov	r0, r1
 8003ecc:	4611      	mov	r1, r2
 8003ece:	2200      	movs	r2, #0
 8003ed0:	602a      	str	r2, [r5, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f7ff fad9 	bl	800348a <_lseek>
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d102      	bne.n	8003ee2 <_lseek_r+0x1e>
 8003edc:	682b      	ldr	r3, [r5, #0]
 8003ede:	b103      	cbz	r3, 8003ee2 <_lseek_r+0x1e>
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	200001e4 	.word	0x200001e4

08003ee8 <__malloc_lock>:
 8003ee8:	4801      	ldr	r0, [pc, #4]	; (8003ef0 <__malloc_lock+0x8>)
 8003eea:	f7ff bdfc 	b.w	8003ae6 <__retarget_lock_acquire_recursive>
 8003eee:	bf00      	nop
 8003ef0:	200001d8 	.word	0x200001d8

08003ef4 <__malloc_unlock>:
 8003ef4:	4801      	ldr	r0, [pc, #4]	; (8003efc <__malloc_unlock+0x8>)
 8003ef6:	f7ff bdf7 	b.w	8003ae8 <__retarget_lock_release_recursive>
 8003efa:	bf00      	nop
 8003efc:	200001d8 	.word	0x200001d8

08003f00 <_free_r>:
 8003f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f02:	2900      	cmp	r1, #0
 8003f04:	d044      	beq.n	8003f90 <_free_r+0x90>
 8003f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f0a:	9001      	str	r0, [sp, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f1a1 0404 	sub.w	r4, r1, #4
 8003f12:	bfb8      	it	lt
 8003f14:	18e4      	addlt	r4, r4, r3
 8003f16:	f7ff ffe7 	bl	8003ee8 <__malloc_lock>
 8003f1a:	4a1e      	ldr	r2, [pc, #120]	; (8003f94 <_free_r+0x94>)
 8003f1c:	9801      	ldr	r0, [sp, #4]
 8003f1e:	6813      	ldr	r3, [r2, #0]
 8003f20:	b933      	cbnz	r3, 8003f30 <_free_r+0x30>
 8003f22:	6063      	str	r3, [r4, #4]
 8003f24:	6014      	str	r4, [r2, #0]
 8003f26:	b003      	add	sp, #12
 8003f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f2c:	f7ff bfe2 	b.w	8003ef4 <__malloc_unlock>
 8003f30:	42a3      	cmp	r3, r4
 8003f32:	d908      	bls.n	8003f46 <_free_r+0x46>
 8003f34:	6825      	ldr	r5, [r4, #0]
 8003f36:	1961      	adds	r1, r4, r5
 8003f38:	428b      	cmp	r3, r1
 8003f3a:	bf01      	itttt	eq
 8003f3c:	6819      	ldreq	r1, [r3, #0]
 8003f3e:	685b      	ldreq	r3, [r3, #4]
 8003f40:	1949      	addeq	r1, r1, r5
 8003f42:	6021      	streq	r1, [r4, #0]
 8003f44:	e7ed      	b.n	8003f22 <_free_r+0x22>
 8003f46:	461a      	mov	r2, r3
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	b10b      	cbz	r3, 8003f50 <_free_r+0x50>
 8003f4c:	42a3      	cmp	r3, r4
 8003f4e:	d9fa      	bls.n	8003f46 <_free_r+0x46>
 8003f50:	6811      	ldr	r1, [r2, #0]
 8003f52:	1855      	adds	r5, r2, r1
 8003f54:	42a5      	cmp	r5, r4
 8003f56:	d10b      	bne.n	8003f70 <_free_r+0x70>
 8003f58:	6824      	ldr	r4, [r4, #0]
 8003f5a:	4421      	add	r1, r4
 8003f5c:	1854      	adds	r4, r2, r1
 8003f5e:	42a3      	cmp	r3, r4
 8003f60:	6011      	str	r1, [r2, #0]
 8003f62:	d1e0      	bne.n	8003f26 <_free_r+0x26>
 8003f64:	681c      	ldr	r4, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	6053      	str	r3, [r2, #4]
 8003f6a:	4421      	add	r1, r4
 8003f6c:	6011      	str	r1, [r2, #0]
 8003f6e:	e7da      	b.n	8003f26 <_free_r+0x26>
 8003f70:	d902      	bls.n	8003f78 <_free_r+0x78>
 8003f72:	230c      	movs	r3, #12
 8003f74:	6003      	str	r3, [r0, #0]
 8003f76:	e7d6      	b.n	8003f26 <_free_r+0x26>
 8003f78:	6825      	ldr	r5, [r4, #0]
 8003f7a:	1961      	adds	r1, r4, r5
 8003f7c:	428b      	cmp	r3, r1
 8003f7e:	bf04      	itt	eq
 8003f80:	6819      	ldreq	r1, [r3, #0]
 8003f82:	685b      	ldreq	r3, [r3, #4]
 8003f84:	6063      	str	r3, [r4, #4]
 8003f86:	bf04      	itt	eq
 8003f88:	1949      	addeq	r1, r1, r5
 8003f8a:	6021      	streq	r1, [r4, #0]
 8003f8c:	6054      	str	r4, [r2, #4]
 8003f8e:	e7ca      	b.n	8003f26 <_free_r+0x26>
 8003f90:	b003      	add	sp, #12
 8003f92:	bd30      	pop	{r4, r5, pc}
 8003f94:	200001dc 	.word	0x200001dc

08003f98 <__sfputc_r>:
 8003f98:	6893      	ldr	r3, [r2, #8]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	b410      	push	{r4}
 8003fa0:	6093      	str	r3, [r2, #8]
 8003fa2:	da08      	bge.n	8003fb6 <__sfputc_r+0x1e>
 8003fa4:	6994      	ldr	r4, [r2, #24]
 8003fa6:	42a3      	cmp	r3, r4
 8003fa8:	db01      	blt.n	8003fae <__sfputc_r+0x16>
 8003faa:	290a      	cmp	r1, #10
 8003fac:	d103      	bne.n	8003fb6 <__sfputc_r+0x1e>
 8003fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fb2:	f000 baf1 	b.w	8004598 <__swbuf_r>
 8003fb6:	6813      	ldr	r3, [r2, #0]
 8003fb8:	1c58      	adds	r0, r3, #1
 8003fba:	6010      	str	r0, [r2, #0]
 8003fbc:	7019      	strb	r1, [r3, #0]
 8003fbe:	4608      	mov	r0, r1
 8003fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <__sfputs_r>:
 8003fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc8:	4606      	mov	r6, r0
 8003fca:	460f      	mov	r7, r1
 8003fcc:	4614      	mov	r4, r2
 8003fce:	18d5      	adds	r5, r2, r3
 8003fd0:	42ac      	cmp	r4, r5
 8003fd2:	d101      	bne.n	8003fd8 <__sfputs_r+0x12>
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	e007      	b.n	8003fe8 <__sfputs_r+0x22>
 8003fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fdc:	463a      	mov	r2, r7
 8003fde:	4630      	mov	r0, r6
 8003fe0:	f7ff ffda 	bl	8003f98 <__sfputc_r>
 8003fe4:	1c43      	adds	r3, r0, #1
 8003fe6:	d1f3      	bne.n	8003fd0 <__sfputs_r+0xa>
 8003fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fec <_vfiprintf_r>:
 8003fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff0:	460d      	mov	r5, r1
 8003ff2:	b09d      	sub	sp, #116	; 0x74
 8003ff4:	4614      	mov	r4, r2
 8003ff6:	4698      	mov	r8, r3
 8003ff8:	4606      	mov	r6, r0
 8003ffa:	b118      	cbz	r0, 8004004 <_vfiprintf_r+0x18>
 8003ffc:	6983      	ldr	r3, [r0, #24]
 8003ffe:	b90b      	cbnz	r3, 8004004 <_vfiprintf_r+0x18>
 8004000:	f7ff fcae 	bl	8003960 <__sinit>
 8004004:	4b89      	ldr	r3, [pc, #548]	; (800422c <_vfiprintf_r+0x240>)
 8004006:	429d      	cmp	r5, r3
 8004008:	d11b      	bne.n	8004042 <_vfiprintf_r+0x56>
 800400a:	6875      	ldr	r5, [r6, #4]
 800400c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800400e:	07d9      	lsls	r1, r3, #31
 8004010:	d405      	bmi.n	800401e <_vfiprintf_r+0x32>
 8004012:	89ab      	ldrh	r3, [r5, #12]
 8004014:	059a      	lsls	r2, r3, #22
 8004016:	d402      	bmi.n	800401e <_vfiprintf_r+0x32>
 8004018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800401a:	f7ff fd64 	bl	8003ae6 <__retarget_lock_acquire_recursive>
 800401e:	89ab      	ldrh	r3, [r5, #12]
 8004020:	071b      	lsls	r3, r3, #28
 8004022:	d501      	bpl.n	8004028 <_vfiprintf_r+0x3c>
 8004024:	692b      	ldr	r3, [r5, #16]
 8004026:	b9eb      	cbnz	r3, 8004064 <_vfiprintf_r+0x78>
 8004028:	4629      	mov	r1, r5
 800402a:	4630      	mov	r0, r6
 800402c:	f000 fb06 	bl	800463c <__swsetup_r>
 8004030:	b1c0      	cbz	r0, 8004064 <_vfiprintf_r+0x78>
 8004032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004034:	07dc      	lsls	r4, r3, #31
 8004036:	d50e      	bpl.n	8004056 <_vfiprintf_r+0x6a>
 8004038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800403c:	b01d      	add	sp, #116	; 0x74
 800403e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004042:	4b7b      	ldr	r3, [pc, #492]	; (8004230 <_vfiprintf_r+0x244>)
 8004044:	429d      	cmp	r5, r3
 8004046:	d101      	bne.n	800404c <_vfiprintf_r+0x60>
 8004048:	68b5      	ldr	r5, [r6, #8]
 800404a:	e7df      	b.n	800400c <_vfiprintf_r+0x20>
 800404c:	4b79      	ldr	r3, [pc, #484]	; (8004234 <_vfiprintf_r+0x248>)
 800404e:	429d      	cmp	r5, r3
 8004050:	bf08      	it	eq
 8004052:	68f5      	ldreq	r5, [r6, #12]
 8004054:	e7da      	b.n	800400c <_vfiprintf_r+0x20>
 8004056:	89ab      	ldrh	r3, [r5, #12]
 8004058:	0598      	lsls	r0, r3, #22
 800405a:	d4ed      	bmi.n	8004038 <_vfiprintf_r+0x4c>
 800405c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800405e:	f7ff fd43 	bl	8003ae8 <__retarget_lock_release_recursive>
 8004062:	e7e9      	b.n	8004038 <_vfiprintf_r+0x4c>
 8004064:	2300      	movs	r3, #0
 8004066:	9309      	str	r3, [sp, #36]	; 0x24
 8004068:	2320      	movs	r3, #32
 800406a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800406e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004072:	2330      	movs	r3, #48	; 0x30
 8004074:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004238 <_vfiprintf_r+0x24c>
 8004078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800407c:	f04f 0901 	mov.w	r9, #1
 8004080:	4623      	mov	r3, r4
 8004082:	469a      	mov	sl, r3
 8004084:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004088:	b10a      	cbz	r2, 800408e <_vfiprintf_r+0xa2>
 800408a:	2a25      	cmp	r2, #37	; 0x25
 800408c:	d1f9      	bne.n	8004082 <_vfiprintf_r+0x96>
 800408e:	ebba 0b04 	subs.w	fp, sl, r4
 8004092:	d00b      	beq.n	80040ac <_vfiprintf_r+0xc0>
 8004094:	465b      	mov	r3, fp
 8004096:	4622      	mov	r2, r4
 8004098:	4629      	mov	r1, r5
 800409a:	4630      	mov	r0, r6
 800409c:	f7ff ff93 	bl	8003fc6 <__sfputs_r>
 80040a0:	3001      	adds	r0, #1
 80040a2:	f000 80aa 	beq.w	80041fa <_vfiprintf_r+0x20e>
 80040a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040a8:	445a      	add	r2, fp
 80040aa:	9209      	str	r2, [sp, #36]	; 0x24
 80040ac:	f89a 3000 	ldrb.w	r3, [sl]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 80a2 	beq.w	80041fa <_vfiprintf_r+0x20e>
 80040b6:	2300      	movs	r3, #0
 80040b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040c0:	f10a 0a01 	add.w	sl, sl, #1
 80040c4:	9304      	str	r3, [sp, #16]
 80040c6:	9307      	str	r3, [sp, #28]
 80040c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040cc:	931a      	str	r3, [sp, #104]	; 0x68
 80040ce:	4654      	mov	r4, sl
 80040d0:	2205      	movs	r2, #5
 80040d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040d6:	4858      	ldr	r0, [pc, #352]	; (8004238 <_vfiprintf_r+0x24c>)
 80040d8:	f7fc f88a 	bl	80001f0 <memchr>
 80040dc:	9a04      	ldr	r2, [sp, #16]
 80040de:	b9d8      	cbnz	r0, 8004118 <_vfiprintf_r+0x12c>
 80040e0:	06d1      	lsls	r1, r2, #27
 80040e2:	bf44      	itt	mi
 80040e4:	2320      	movmi	r3, #32
 80040e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040ea:	0713      	lsls	r3, r2, #28
 80040ec:	bf44      	itt	mi
 80040ee:	232b      	movmi	r3, #43	; 0x2b
 80040f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040f4:	f89a 3000 	ldrb.w	r3, [sl]
 80040f8:	2b2a      	cmp	r3, #42	; 0x2a
 80040fa:	d015      	beq.n	8004128 <_vfiprintf_r+0x13c>
 80040fc:	9a07      	ldr	r2, [sp, #28]
 80040fe:	4654      	mov	r4, sl
 8004100:	2000      	movs	r0, #0
 8004102:	f04f 0c0a 	mov.w	ip, #10
 8004106:	4621      	mov	r1, r4
 8004108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800410c:	3b30      	subs	r3, #48	; 0x30
 800410e:	2b09      	cmp	r3, #9
 8004110:	d94e      	bls.n	80041b0 <_vfiprintf_r+0x1c4>
 8004112:	b1b0      	cbz	r0, 8004142 <_vfiprintf_r+0x156>
 8004114:	9207      	str	r2, [sp, #28]
 8004116:	e014      	b.n	8004142 <_vfiprintf_r+0x156>
 8004118:	eba0 0308 	sub.w	r3, r0, r8
 800411c:	fa09 f303 	lsl.w	r3, r9, r3
 8004120:	4313      	orrs	r3, r2
 8004122:	9304      	str	r3, [sp, #16]
 8004124:	46a2      	mov	sl, r4
 8004126:	e7d2      	b.n	80040ce <_vfiprintf_r+0xe2>
 8004128:	9b03      	ldr	r3, [sp, #12]
 800412a:	1d19      	adds	r1, r3, #4
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	9103      	str	r1, [sp, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	bfbb      	ittet	lt
 8004134:	425b      	neglt	r3, r3
 8004136:	f042 0202 	orrlt.w	r2, r2, #2
 800413a:	9307      	strge	r3, [sp, #28]
 800413c:	9307      	strlt	r3, [sp, #28]
 800413e:	bfb8      	it	lt
 8004140:	9204      	strlt	r2, [sp, #16]
 8004142:	7823      	ldrb	r3, [r4, #0]
 8004144:	2b2e      	cmp	r3, #46	; 0x2e
 8004146:	d10c      	bne.n	8004162 <_vfiprintf_r+0x176>
 8004148:	7863      	ldrb	r3, [r4, #1]
 800414a:	2b2a      	cmp	r3, #42	; 0x2a
 800414c:	d135      	bne.n	80041ba <_vfiprintf_r+0x1ce>
 800414e:	9b03      	ldr	r3, [sp, #12]
 8004150:	1d1a      	adds	r2, r3, #4
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	9203      	str	r2, [sp, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	bfb8      	it	lt
 800415a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800415e:	3402      	adds	r4, #2
 8004160:	9305      	str	r3, [sp, #20]
 8004162:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004248 <_vfiprintf_r+0x25c>
 8004166:	7821      	ldrb	r1, [r4, #0]
 8004168:	2203      	movs	r2, #3
 800416a:	4650      	mov	r0, sl
 800416c:	f7fc f840 	bl	80001f0 <memchr>
 8004170:	b140      	cbz	r0, 8004184 <_vfiprintf_r+0x198>
 8004172:	2340      	movs	r3, #64	; 0x40
 8004174:	eba0 000a 	sub.w	r0, r0, sl
 8004178:	fa03 f000 	lsl.w	r0, r3, r0
 800417c:	9b04      	ldr	r3, [sp, #16]
 800417e:	4303      	orrs	r3, r0
 8004180:	3401      	adds	r4, #1
 8004182:	9304      	str	r3, [sp, #16]
 8004184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004188:	482c      	ldr	r0, [pc, #176]	; (800423c <_vfiprintf_r+0x250>)
 800418a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800418e:	2206      	movs	r2, #6
 8004190:	f7fc f82e 	bl	80001f0 <memchr>
 8004194:	2800      	cmp	r0, #0
 8004196:	d03f      	beq.n	8004218 <_vfiprintf_r+0x22c>
 8004198:	4b29      	ldr	r3, [pc, #164]	; (8004240 <_vfiprintf_r+0x254>)
 800419a:	bb1b      	cbnz	r3, 80041e4 <_vfiprintf_r+0x1f8>
 800419c:	9b03      	ldr	r3, [sp, #12]
 800419e:	3307      	adds	r3, #7
 80041a0:	f023 0307 	bic.w	r3, r3, #7
 80041a4:	3308      	adds	r3, #8
 80041a6:	9303      	str	r3, [sp, #12]
 80041a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041aa:	443b      	add	r3, r7
 80041ac:	9309      	str	r3, [sp, #36]	; 0x24
 80041ae:	e767      	b.n	8004080 <_vfiprintf_r+0x94>
 80041b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80041b4:	460c      	mov	r4, r1
 80041b6:	2001      	movs	r0, #1
 80041b8:	e7a5      	b.n	8004106 <_vfiprintf_r+0x11a>
 80041ba:	2300      	movs	r3, #0
 80041bc:	3401      	adds	r4, #1
 80041be:	9305      	str	r3, [sp, #20]
 80041c0:	4619      	mov	r1, r3
 80041c2:	f04f 0c0a 	mov.w	ip, #10
 80041c6:	4620      	mov	r0, r4
 80041c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041cc:	3a30      	subs	r2, #48	; 0x30
 80041ce:	2a09      	cmp	r2, #9
 80041d0:	d903      	bls.n	80041da <_vfiprintf_r+0x1ee>
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0c5      	beq.n	8004162 <_vfiprintf_r+0x176>
 80041d6:	9105      	str	r1, [sp, #20]
 80041d8:	e7c3      	b.n	8004162 <_vfiprintf_r+0x176>
 80041da:	fb0c 2101 	mla	r1, ip, r1, r2
 80041de:	4604      	mov	r4, r0
 80041e0:	2301      	movs	r3, #1
 80041e2:	e7f0      	b.n	80041c6 <_vfiprintf_r+0x1da>
 80041e4:	ab03      	add	r3, sp, #12
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	462a      	mov	r2, r5
 80041ea:	4b16      	ldr	r3, [pc, #88]	; (8004244 <_vfiprintf_r+0x258>)
 80041ec:	a904      	add	r1, sp, #16
 80041ee:	4630      	mov	r0, r6
 80041f0:	f3af 8000 	nop.w
 80041f4:	4607      	mov	r7, r0
 80041f6:	1c78      	adds	r0, r7, #1
 80041f8:	d1d6      	bne.n	80041a8 <_vfiprintf_r+0x1bc>
 80041fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041fc:	07d9      	lsls	r1, r3, #31
 80041fe:	d405      	bmi.n	800420c <_vfiprintf_r+0x220>
 8004200:	89ab      	ldrh	r3, [r5, #12]
 8004202:	059a      	lsls	r2, r3, #22
 8004204:	d402      	bmi.n	800420c <_vfiprintf_r+0x220>
 8004206:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004208:	f7ff fc6e 	bl	8003ae8 <__retarget_lock_release_recursive>
 800420c:	89ab      	ldrh	r3, [r5, #12]
 800420e:	065b      	lsls	r3, r3, #25
 8004210:	f53f af12 	bmi.w	8004038 <_vfiprintf_r+0x4c>
 8004214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004216:	e711      	b.n	800403c <_vfiprintf_r+0x50>
 8004218:	ab03      	add	r3, sp, #12
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	462a      	mov	r2, r5
 800421e:	4b09      	ldr	r3, [pc, #36]	; (8004244 <_vfiprintf_r+0x258>)
 8004220:	a904      	add	r1, sp, #16
 8004222:	4630      	mov	r0, r6
 8004224:	f000 f880 	bl	8004328 <_printf_i>
 8004228:	e7e4      	b.n	80041f4 <_vfiprintf_r+0x208>
 800422a:	bf00      	nop
 800422c:	08004898 	.word	0x08004898
 8004230:	080048b8 	.word	0x080048b8
 8004234:	08004878 	.word	0x08004878
 8004238:	080048dc 	.word	0x080048dc
 800423c:	080048e6 	.word	0x080048e6
 8004240:	00000000 	.word	0x00000000
 8004244:	08003fc7 	.word	0x08003fc7
 8004248:	080048e2 	.word	0x080048e2

0800424c <_printf_common>:
 800424c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004250:	4616      	mov	r6, r2
 8004252:	4699      	mov	r9, r3
 8004254:	688a      	ldr	r2, [r1, #8]
 8004256:	690b      	ldr	r3, [r1, #16]
 8004258:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800425c:	4293      	cmp	r3, r2
 800425e:	bfb8      	it	lt
 8004260:	4613      	movlt	r3, r2
 8004262:	6033      	str	r3, [r6, #0]
 8004264:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004268:	4607      	mov	r7, r0
 800426a:	460c      	mov	r4, r1
 800426c:	b10a      	cbz	r2, 8004272 <_printf_common+0x26>
 800426e:	3301      	adds	r3, #1
 8004270:	6033      	str	r3, [r6, #0]
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	0699      	lsls	r1, r3, #26
 8004276:	bf42      	ittt	mi
 8004278:	6833      	ldrmi	r3, [r6, #0]
 800427a:	3302      	addmi	r3, #2
 800427c:	6033      	strmi	r3, [r6, #0]
 800427e:	6825      	ldr	r5, [r4, #0]
 8004280:	f015 0506 	ands.w	r5, r5, #6
 8004284:	d106      	bne.n	8004294 <_printf_common+0x48>
 8004286:	f104 0a19 	add.w	sl, r4, #25
 800428a:	68e3      	ldr	r3, [r4, #12]
 800428c:	6832      	ldr	r2, [r6, #0]
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	42ab      	cmp	r3, r5
 8004292:	dc26      	bgt.n	80042e2 <_printf_common+0x96>
 8004294:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004298:	1e13      	subs	r3, r2, #0
 800429a:	6822      	ldr	r2, [r4, #0]
 800429c:	bf18      	it	ne
 800429e:	2301      	movne	r3, #1
 80042a0:	0692      	lsls	r2, r2, #26
 80042a2:	d42b      	bmi.n	80042fc <_printf_common+0xb0>
 80042a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042a8:	4649      	mov	r1, r9
 80042aa:	4638      	mov	r0, r7
 80042ac:	47c0      	blx	r8
 80042ae:	3001      	adds	r0, #1
 80042b0:	d01e      	beq.n	80042f0 <_printf_common+0xa4>
 80042b2:	6823      	ldr	r3, [r4, #0]
 80042b4:	68e5      	ldr	r5, [r4, #12]
 80042b6:	6832      	ldr	r2, [r6, #0]
 80042b8:	f003 0306 	and.w	r3, r3, #6
 80042bc:	2b04      	cmp	r3, #4
 80042be:	bf08      	it	eq
 80042c0:	1aad      	subeq	r5, r5, r2
 80042c2:	68a3      	ldr	r3, [r4, #8]
 80042c4:	6922      	ldr	r2, [r4, #16]
 80042c6:	bf0c      	ite	eq
 80042c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042cc:	2500      	movne	r5, #0
 80042ce:	4293      	cmp	r3, r2
 80042d0:	bfc4      	itt	gt
 80042d2:	1a9b      	subgt	r3, r3, r2
 80042d4:	18ed      	addgt	r5, r5, r3
 80042d6:	2600      	movs	r6, #0
 80042d8:	341a      	adds	r4, #26
 80042da:	42b5      	cmp	r5, r6
 80042dc:	d11a      	bne.n	8004314 <_printf_common+0xc8>
 80042de:	2000      	movs	r0, #0
 80042e0:	e008      	b.n	80042f4 <_printf_common+0xa8>
 80042e2:	2301      	movs	r3, #1
 80042e4:	4652      	mov	r2, sl
 80042e6:	4649      	mov	r1, r9
 80042e8:	4638      	mov	r0, r7
 80042ea:	47c0      	blx	r8
 80042ec:	3001      	adds	r0, #1
 80042ee:	d103      	bne.n	80042f8 <_printf_common+0xac>
 80042f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f8:	3501      	adds	r5, #1
 80042fa:	e7c6      	b.n	800428a <_printf_common+0x3e>
 80042fc:	18e1      	adds	r1, r4, r3
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	2030      	movs	r0, #48	; 0x30
 8004302:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004306:	4422      	add	r2, r4
 8004308:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800430c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004310:	3302      	adds	r3, #2
 8004312:	e7c7      	b.n	80042a4 <_printf_common+0x58>
 8004314:	2301      	movs	r3, #1
 8004316:	4622      	mov	r2, r4
 8004318:	4649      	mov	r1, r9
 800431a:	4638      	mov	r0, r7
 800431c:	47c0      	blx	r8
 800431e:	3001      	adds	r0, #1
 8004320:	d0e6      	beq.n	80042f0 <_printf_common+0xa4>
 8004322:	3601      	adds	r6, #1
 8004324:	e7d9      	b.n	80042da <_printf_common+0x8e>
	...

08004328 <_printf_i>:
 8004328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800432c:	7e0f      	ldrb	r7, [r1, #24]
 800432e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004330:	2f78      	cmp	r7, #120	; 0x78
 8004332:	4691      	mov	r9, r2
 8004334:	4680      	mov	r8, r0
 8004336:	460c      	mov	r4, r1
 8004338:	469a      	mov	sl, r3
 800433a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800433e:	d807      	bhi.n	8004350 <_printf_i+0x28>
 8004340:	2f62      	cmp	r7, #98	; 0x62
 8004342:	d80a      	bhi.n	800435a <_printf_i+0x32>
 8004344:	2f00      	cmp	r7, #0
 8004346:	f000 80d8 	beq.w	80044fa <_printf_i+0x1d2>
 800434a:	2f58      	cmp	r7, #88	; 0x58
 800434c:	f000 80a3 	beq.w	8004496 <_printf_i+0x16e>
 8004350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004354:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004358:	e03a      	b.n	80043d0 <_printf_i+0xa8>
 800435a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800435e:	2b15      	cmp	r3, #21
 8004360:	d8f6      	bhi.n	8004350 <_printf_i+0x28>
 8004362:	a101      	add	r1, pc, #4	; (adr r1, 8004368 <_printf_i+0x40>)
 8004364:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004368:	080043c1 	.word	0x080043c1
 800436c:	080043d5 	.word	0x080043d5
 8004370:	08004351 	.word	0x08004351
 8004374:	08004351 	.word	0x08004351
 8004378:	08004351 	.word	0x08004351
 800437c:	08004351 	.word	0x08004351
 8004380:	080043d5 	.word	0x080043d5
 8004384:	08004351 	.word	0x08004351
 8004388:	08004351 	.word	0x08004351
 800438c:	08004351 	.word	0x08004351
 8004390:	08004351 	.word	0x08004351
 8004394:	080044e1 	.word	0x080044e1
 8004398:	08004405 	.word	0x08004405
 800439c:	080044c3 	.word	0x080044c3
 80043a0:	08004351 	.word	0x08004351
 80043a4:	08004351 	.word	0x08004351
 80043a8:	08004503 	.word	0x08004503
 80043ac:	08004351 	.word	0x08004351
 80043b0:	08004405 	.word	0x08004405
 80043b4:	08004351 	.word	0x08004351
 80043b8:	08004351 	.word	0x08004351
 80043bc:	080044cb 	.word	0x080044cb
 80043c0:	682b      	ldr	r3, [r5, #0]
 80043c2:	1d1a      	adds	r2, r3, #4
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	602a      	str	r2, [r5, #0]
 80043c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0a3      	b.n	800451c <_printf_i+0x1f4>
 80043d4:	6820      	ldr	r0, [r4, #0]
 80043d6:	6829      	ldr	r1, [r5, #0]
 80043d8:	0606      	lsls	r6, r0, #24
 80043da:	f101 0304 	add.w	r3, r1, #4
 80043de:	d50a      	bpl.n	80043f6 <_printf_i+0xce>
 80043e0:	680e      	ldr	r6, [r1, #0]
 80043e2:	602b      	str	r3, [r5, #0]
 80043e4:	2e00      	cmp	r6, #0
 80043e6:	da03      	bge.n	80043f0 <_printf_i+0xc8>
 80043e8:	232d      	movs	r3, #45	; 0x2d
 80043ea:	4276      	negs	r6, r6
 80043ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043f0:	485e      	ldr	r0, [pc, #376]	; (800456c <_printf_i+0x244>)
 80043f2:	230a      	movs	r3, #10
 80043f4:	e019      	b.n	800442a <_printf_i+0x102>
 80043f6:	680e      	ldr	r6, [r1, #0]
 80043f8:	602b      	str	r3, [r5, #0]
 80043fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043fe:	bf18      	it	ne
 8004400:	b236      	sxthne	r6, r6
 8004402:	e7ef      	b.n	80043e4 <_printf_i+0xbc>
 8004404:	682b      	ldr	r3, [r5, #0]
 8004406:	6820      	ldr	r0, [r4, #0]
 8004408:	1d19      	adds	r1, r3, #4
 800440a:	6029      	str	r1, [r5, #0]
 800440c:	0601      	lsls	r1, r0, #24
 800440e:	d501      	bpl.n	8004414 <_printf_i+0xec>
 8004410:	681e      	ldr	r6, [r3, #0]
 8004412:	e002      	b.n	800441a <_printf_i+0xf2>
 8004414:	0646      	lsls	r6, r0, #25
 8004416:	d5fb      	bpl.n	8004410 <_printf_i+0xe8>
 8004418:	881e      	ldrh	r6, [r3, #0]
 800441a:	4854      	ldr	r0, [pc, #336]	; (800456c <_printf_i+0x244>)
 800441c:	2f6f      	cmp	r7, #111	; 0x6f
 800441e:	bf0c      	ite	eq
 8004420:	2308      	moveq	r3, #8
 8004422:	230a      	movne	r3, #10
 8004424:	2100      	movs	r1, #0
 8004426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800442a:	6865      	ldr	r5, [r4, #4]
 800442c:	60a5      	str	r5, [r4, #8]
 800442e:	2d00      	cmp	r5, #0
 8004430:	bfa2      	ittt	ge
 8004432:	6821      	ldrge	r1, [r4, #0]
 8004434:	f021 0104 	bicge.w	r1, r1, #4
 8004438:	6021      	strge	r1, [r4, #0]
 800443a:	b90e      	cbnz	r6, 8004440 <_printf_i+0x118>
 800443c:	2d00      	cmp	r5, #0
 800443e:	d04d      	beq.n	80044dc <_printf_i+0x1b4>
 8004440:	4615      	mov	r5, r2
 8004442:	fbb6 f1f3 	udiv	r1, r6, r3
 8004446:	fb03 6711 	mls	r7, r3, r1, r6
 800444a:	5dc7      	ldrb	r7, [r0, r7]
 800444c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004450:	4637      	mov	r7, r6
 8004452:	42bb      	cmp	r3, r7
 8004454:	460e      	mov	r6, r1
 8004456:	d9f4      	bls.n	8004442 <_printf_i+0x11a>
 8004458:	2b08      	cmp	r3, #8
 800445a:	d10b      	bne.n	8004474 <_printf_i+0x14c>
 800445c:	6823      	ldr	r3, [r4, #0]
 800445e:	07de      	lsls	r6, r3, #31
 8004460:	d508      	bpl.n	8004474 <_printf_i+0x14c>
 8004462:	6923      	ldr	r3, [r4, #16]
 8004464:	6861      	ldr	r1, [r4, #4]
 8004466:	4299      	cmp	r1, r3
 8004468:	bfde      	ittt	le
 800446a:	2330      	movle	r3, #48	; 0x30
 800446c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004470:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004474:	1b52      	subs	r2, r2, r5
 8004476:	6122      	str	r2, [r4, #16]
 8004478:	f8cd a000 	str.w	sl, [sp]
 800447c:	464b      	mov	r3, r9
 800447e:	aa03      	add	r2, sp, #12
 8004480:	4621      	mov	r1, r4
 8004482:	4640      	mov	r0, r8
 8004484:	f7ff fee2 	bl	800424c <_printf_common>
 8004488:	3001      	adds	r0, #1
 800448a:	d14c      	bne.n	8004526 <_printf_i+0x1fe>
 800448c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004490:	b004      	add	sp, #16
 8004492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004496:	4835      	ldr	r0, [pc, #212]	; (800456c <_printf_i+0x244>)
 8004498:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800449c:	6829      	ldr	r1, [r5, #0]
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80044a4:	6029      	str	r1, [r5, #0]
 80044a6:	061d      	lsls	r5, r3, #24
 80044a8:	d514      	bpl.n	80044d4 <_printf_i+0x1ac>
 80044aa:	07df      	lsls	r7, r3, #31
 80044ac:	bf44      	itt	mi
 80044ae:	f043 0320 	orrmi.w	r3, r3, #32
 80044b2:	6023      	strmi	r3, [r4, #0]
 80044b4:	b91e      	cbnz	r6, 80044be <_printf_i+0x196>
 80044b6:	6823      	ldr	r3, [r4, #0]
 80044b8:	f023 0320 	bic.w	r3, r3, #32
 80044bc:	6023      	str	r3, [r4, #0]
 80044be:	2310      	movs	r3, #16
 80044c0:	e7b0      	b.n	8004424 <_printf_i+0xfc>
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	f043 0320 	orr.w	r3, r3, #32
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	2378      	movs	r3, #120	; 0x78
 80044cc:	4828      	ldr	r0, [pc, #160]	; (8004570 <_printf_i+0x248>)
 80044ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044d2:	e7e3      	b.n	800449c <_printf_i+0x174>
 80044d4:	0659      	lsls	r1, r3, #25
 80044d6:	bf48      	it	mi
 80044d8:	b2b6      	uxthmi	r6, r6
 80044da:	e7e6      	b.n	80044aa <_printf_i+0x182>
 80044dc:	4615      	mov	r5, r2
 80044de:	e7bb      	b.n	8004458 <_printf_i+0x130>
 80044e0:	682b      	ldr	r3, [r5, #0]
 80044e2:	6826      	ldr	r6, [r4, #0]
 80044e4:	6961      	ldr	r1, [r4, #20]
 80044e6:	1d18      	adds	r0, r3, #4
 80044e8:	6028      	str	r0, [r5, #0]
 80044ea:	0635      	lsls	r5, r6, #24
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	d501      	bpl.n	80044f4 <_printf_i+0x1cc>
 80044f0:	6019      	str	r1, [r3, #0]
 80044f2:	e002      	b.n	80044fa <_printf_i+0x1d2>
 80044f4:	0670      	lsls	r0, r6, #25
 80044f6:	d5fb      	bpl.n	80044f0 <_printf_i+0x1c8>
 80044f8:	8019      	strh	r1, [r3, #0]
 80044fa:	2300      	movs	r3, #0
 80044fc:	6123      	str	r3, [r4, #16]
 80044fe:	4615      	mov	r5, r2
 8004500:	e7ba      	b.n	8004478 <_printf_i+0x150>
 8004502:	682b      	ldr	r3, [r5, #0]
 8004504:	1d1a      	adds	r2, r3, #4
 8004506:	602a      	str	r2, [r5, #0]
 8004508:	681d      	ldr	r5, [r3, #0]
 800450a:	6862      	ldr	r2, [r4, #4]
 800450c:	2100      	movs	r1, #0
 800450e:	4628      	mov	r0, r5
 8004510:	f7fb fe6e 	bl	80001f0 <memchr>
 8004514:	b108      	cbz	r0, 800451a <_printf_i+0x1f2>
 8004516:	1b40      	subs	r0, r0, r5
 8004518:	6060      	str	r0, [r4, #4]
 800451a:	6863      	ldr	r3, [r4, #4]
 800451c:	6123      	str	r3, [r4, #16]
 800451e:	2300      	movs	r3, #0
 8004520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004524:	e7a8      	b.n	8004478 <_printf_i+0x150>
 8004526:	6923      	ldr	r3, [r4, #16]
 8004528:	462a      	mov	r2, r5
 800452a:	4649      	mov	r1, r9
 800452c:	4640      	mov	r0, r8
 800452e:	47d0      	blx	sl
 8004530:	3001      	adds	r0, #1
 8004532:	d0ab      	beq.n	800448c <_printf_i+0x164>
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	079b      	lsls	r3, r3, #30
 8004538:	d413      	bmi.n	8004562 <_printf_i+0x23a>
 800453a:	68e0      	ldr	r0, [r4, #12]
 800453c:	9b03      	ldr	r3, [sp, #12]
 800453e:	4298      	cmp	r0, r3
 8004540:	bfb8      	it	lt
 8004542:	4618      	movlt	r0, r3
 8004544:	e7a4      	b.n	8004490 <_printf_i+0x168>
 8004546:	2301      	movs	r3, #1
 8004548:	4632      	mov	r2, r6
 800454a:	4649      	mov	r1, r9
 800454c:	4640      	mov	r0, r8
 800454e:	47d0      	blx	sl
 8004550:	3001      	adds	r0, #1
 8004552:	d09b      	beq.n	800448c <_printf_i+0x164>
 8004554:	3501      	adds	r5, #1
 8004556:	68e3      	ldr	r3, [r4, #12]
 8004558:	9903      	ldr	r1, [sp, #12]
 800455a:	1a5b      	subs	r3, r3, r1
 800455c:	42ab      	cmp	r3, r5
 800455e:	dcf2      	bgt.n	8004546 <_printf_i+0x21e>
 8004560:	e7eb      	b.n	800453a <_printf_i+0x212>
 8004562:	2500      	movs	r5, #0
 8004564:	f104 0619 	add.w	r6, r4, #25
 8004568:	e7f5      	b.n	8004556 <_printf_i+0x22e>
 800456a:	bf00      	nop
 800456c:	080048ed 	.word	0x080048ed
 8004570:	080048fe 	.word	0x080048fe

08004574 <_read_r>:
 8004574:	b538      	push	{r3, r4, r5, lr}
 8004576:	4d07      	ldr	r5, [pc, #28]	; (8004594 <_read_r+0x20>)
 8004578:	4604      	mov	r4, r0
 800457a:	4608      	mov	r0, r1
 800457c:	4611      	mov	r1, r2
 800457e:	2200      	movs	r2, #0
 8004580:	602a      	str	r2, [r5, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	f7fe ff29 	bl	80033da <_read>
 8004588:	1c43      	adds	r3, r0, #1
 800458a:	d102      	bne.n	8004592 <_read_r+0x1e>
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	b103      	cbz	r3, 8004592 <_read_r+0x1e>
 8004590:	6023      	str	r3, [r4, #0]
 8004592:	bd38      	pop	{r3, r4, r5, pc}
 8004594:	200001e4 	.word	0x200001e4

08004598 <__swbuf_r>:
 8004598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459a:	460e      	mov	r6, r1
 800459c:	4614      	mov	r4, r2
 800459e:	4605      	mov	r5, r0
 80045a0:	b118      	cbz	r0, 80045aa <__swbuf_r+0x12>
 80045a2:	6983      	ldr	r3, [r0, #24]
 80045a4:	b90b      	cbnz	r3, 80045aa <__swbuf_r+0x12>
 80045a6:	f7ff f9db 	bl	8003960 <__sinit>
 80045aa:	4b21      	ldr	r3, [pc, #132]	; (8004630 <__swbuf_r+0x98>)
 80045ac:	429c      	cmp	r4, r3
 80045ae:	d12b      	bne.n	8004608 <__swbuf_r+0x70>
 80045b0:	686c      	ldr	r4, [r5, #4]
 80045b2:	69a3      	ldr	r3, [r4, #24]
 80045b4:	60a3      	str	r3, [r4, #8]
 80045b6:	89a3      	ldrh	r3, [r4, #12]
 80045b8:	071a      	lsls	r2, r3, #28
 80045ba:	d52f      	bpl.n	800461c <__swbuf_r+0x84>
 80045bc:	6923      	ldr	r3, [r4, #16]
 80045be:	b36b      	cbz	r3, 800461c <__swbuf_r+0x84>
 80045c0:	6923      	ldr	r3, [r4, #16]
 80045c2:	6820      	ldr	r0, [r4, #0]
 80045c4:	1ac0      	subs	r0, r0, r3
 80045c6:	6963      	ldr	r3, [r4, #20]
 80045c8:	b2f6      	uxtb	r6, r6
 80045ca:	4283      	cmp	r3, r0
 80045cc:	4637      	mov	r7, r6
 80045ce:	dc04      	bgt.n	80045da <__swbuf_r+0x42>
 80045d0:	4621      	mov	r1, r4
 80045d2:	4628      	mov	r0, r5
 80045d4:	f7ff fc3a 	bl	8003e4c <_fflush_r>
 80045d8:	bb30      	cbnz	r0, 8004628 <__swbuf_r+0x90>
 80045da:	68a3      	ldr	r3, [r4, #8]
 80045dc:	3b01      	subs	r3, #1
 80045de:	60a3      	str	r3, [r4, #8]
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	6022      	str	r2, [r4, #0]
 80045e6:	701e      	strb	r6, [r3, #0]
 80045e8:	6963      	ldr	r3, [r4, #20]
 80045ea:	3001      	adds	r0, #1
 80045ec:	4283      	cmp	r3, r0
 80045ee:	d004      	beq.n	80045fa <__swbuf_r+0x62>
 80045f0:	89a3      	ldrh	r3, [r4, #12]
 80045f2:	07db      	lsls	r3, r3, #31
 80045f4:	d506      	bpl.n	8004604 <__swbuf_r+0x6c>
 80045f6:	2e0a      	cmp	r6, #10
 80045f8:	d104      	bne.n	8004604 <__swbuf_r+0x6c>
 80045fa:	4621      	mov	r1, r4
 80045fc:	4628      	mov	r0, r5
 80045fe:	f7ff fc25 	bl	8003e4c <_fflush_r>
 8004602:	b988      	cbnz	r0, 8004628 <__swbuf_r+0x90>
 8004604:	4638      	mov	r0, r7
 8004606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004608:	4b0a      	ldr	r3, [pc, #40]	; (8004634 <__swbuf_r+0x9c>)
 800460a:	429c      	cmp	r4, r3
 800460c:	d101      	bne.n	8004612 <__swbuf_r+0x7a>
 800460e:	68ac      	ldr	r4, [r5, #8]
 8004610:	e7cf      	b.n	80045b2 <__swbuf_r+0x1a>
 8004612:	4b09      	ldr	r3, [pc, #36]	; (8004638 <__swbuf_r+0xa0>)
 8004614:	429c      	cmp	r4, r3
 8004616:	bf08      	it	eq
 8004618:	68ec      	ldreq	r4, [r5, #12]
 800461a:	e7ca      	b.n	80045b2 <__swbuf_r+0x1a>
 800461c:	4621      	mov	r1, r4
 800461e:	4628      	mov	r0, r5
 8004620:	f000 f80c 	bl	800463c <__swsetup_r>
 8004624:	2800      	cmp	r0, #0
 8004626:	d0cb      	beq.n	80045c0 <__swbuf_r+0x28>
 8004628:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800462c:	e7ea      	b.n	8004604 <__swbuf_r+0x6c>
 800462e:	bf00      	nop
 8004630:	08004898 	.word	0x08004898
 8004634:	080048b8 	.word	0x080048b8
 8004638:	08004878 	.word	0x08004878

0800463c <__swsetup_r>:
 800463c:	4b32      	ldr	r3, [pc, #200]	; (8004708 <__swsetup_r+0xcc>)
 800463e:	b570      	push	{r4, r5, r6, lr}
 8004640:	681d      	ldr	r5, [r3, #0]
 8004642:	4606      	mov	r6, r0
 8004644:	460c      	mov	r4, r1
 8004646:	b125      	cbz	r5, 8004652 <__swsetup_r+0x16>
 8004648:	69ab      	ldr	r3, [r5, #24]
 800464a:	b913      	cbnz	r3, 8004652 <__swsetup_r+0x16>
 800464c:	4628      	mov	r0, r5
 800464e:	f7ff f987 	bl	8003960 <__sinit>
 8004652:	4b2e      	ldr	r3, [pc, #184]	; (800470c <__swsetup_r+0xd0>)
 8004654:	429c      	cmp	r4, r3
 8004656:	d10f      	bne.n	8004678 <__swsetup_r+0x3c>
 8004658:	686c      	ldr	r4, [r5, #4]
 800465a:	89a3      	ldrh	r3, [r4, #12]
 800465c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004660:	0719      	lsls	r1, r3, #28
 8004662:	d42c      	bmi.n	80046be <__swsetup_r+0x82>
 8004664:	06dd      	lsls	r5, r3, #27
 8004666:	d411      	bmi.n	800468c <__swsetup_r+0x50>
 8004668:	2309      	movs	r3, #9
 800466a:	6033      	str	r3, [r6, #0]
 800466c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004670:	81a3      	strh	r3, [r4, #12]
 8004672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004676:	e03e      	b.n	80046f6 <__swsetup_r+0xba>
 8004678:	4b25      	ldr	r3, [pc, #148]	; (8004710 <__swsetup_r+0xd4>)
 800467a:	429c      	cmp	r4, r3
 800467c:	d101      	bne.n	8004682 <__swsetup_r+0x46>
 800467e:	68ac      	ldr	r4, [r5, #8]
 8004680:	e7eb      	b.n	800465a <__swsetup_r+0x1e>
 8004682:	4b24      	ldr	r3, [pc, #144]	; (8004714 <__swsetup_r+0xd8>)
 8004684:	429c      	cmp	r4, r3
 8004686:	bf08      	it	eq
 8004688:	68ec      	ldreq	r4, [r5, #12]
 800468a:	e7e6      	b.n	800465a <__swsetup_r+0x1e>
 800468c:	0758      	lsls	r0, r3, #29
 800468e:	d512      	bpl.n	80046b6 <__swsetup_r+0x7a>
 8004690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004692:	b141      	cbz	r1, 80046a6 <__swsetup_r+0x6a>
 8004694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004698:	4299      	cmp	r1, r3
 800469a:	d002      	beq.n	80046a2 <__swsetup_r+0x66>
 800469c:	4630      	mov	r0, r6
 800469e:	f7ff fc2f 	bl	8003f00 <_free_r>
 80046a2:	2300      	movs	r3, #0
 80046a4:	6363      	str	r3, [r4, #52]	; 0x34
 80046a6:	89a3      	ldrh	r3, [r4, #12]
 80046a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046ac:	81a3      	strh	r3, [r4, #12]
 80046ae:	2300      	movs	r3, #0
 80046b0:	6063      	str	r3, [r4, #4]
 80046b2:	6923      	ldr	r3, [r4, #16]
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	89a3      	ldrh	r3, [r4, #12]
 80046b8:	f043 0308 	orr.w	r3, r3, #8
 80046bc:	81a3      	strh	r3, [r4, #12]
 80046be:	6923      	ldr	r3, [r4, #16]
 80046c0:	b94b      	cbnz	r3, 80046d6 <__swsetup_r+0x9a>
 80046c2:	89a3      	ldrh	r3, [r4, #12]
 80046c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046cc:	d003      	beq.n	80046d6 <__swsetup_r+0x9a>
 80046ce:	4621      	mov	r1, r4
 80046d0:	4630      	mov	r0, r6
 80046d2:	f000 f847 	bl	8004764 <__smakebuf_r>
 80046d6:	89a0      	ldrh	r0, [r4, #12]
 80046d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046dc:	f010 0301 	ands.w	r3, r0, #1
 80046e0:	d00a      	beq.n	80046f8 <__swsetup_r+0xbc>
 80046e2:	2300      	movs	r3, #0
 80046e4:	60a3      	str	r3, [r4, #8]
 80046e6:	6963      	ldr	r3, [r4, #20]
 80046e8:	425b      	negs	r3, r3
 80046ea:	61a3      	str	r3, [r4, #24]
 80046ec:	6923      	ldr	r3, [r4, #16]
 80046ee:	b943      	cbnz	r3, 8004702 <__swsetup_r+0xc6>
 80046f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046f4:	d1ba      	bne.n	800466c <__swsetup_r+0x30>
 80046f6:	bd70      	pop	{r4, r5, r6, pc}
 80046f8:	0781      	lsls	r1, r0, #30
 80046fa:	bf58      	it	pl
 80046fc:	6963      	ldrpl	r3, [r4, #20]
 80046fe:	60a3      	str	r3, [r4, #8]
 8004700:	e7f4      	b.n	80046ec <__swsetup_r+0xb0>
 8004702:	2000      	movs	r0, #0
 8004704:	e7f7      	b.n	80046f6 <__swsetup_r+0xba>
 8004706:	bf00      	nop
 8004708:	20000014 	.word	0x20000014
 800470c:	08004898 	.word	0x08004898
 8004710:	080048b8 	.word	0x080048b8
 8004714:	08004878 	.word	0x08004878

08004718 <__swhatbuf_r>:
 8004718:	b570      	push	{r4, r5, r6, lr}
 800471a:	460e      	mov	r6, r1
 800471c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004720:	2900      	cmp	r1, #0
 8004722:	b096      	sub	sp, #88	; 0x58
 8004724:	4614      	mov	r4, r2
 8004726:	461d      	mov	r5, r3
 8004728:	da08      	bge.n	800473c <__swhatbuf_r+0x24>
 800472a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	602a      	str	r2, [r5, #0]
 8004732:	061a      	lsls	r2, r3, #24
 8004734:	d410      	bmi.n	8004758 <__swhatbuf_r+0x40>
 8004736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800473a:	e00e      	b.n	800475a <__swhatbuf_r+0x42>
 800473c:	466a      	mov	r2, sp
 800473e:	f000 f851 	bl	80047e4 <_fstat_r>
 8004742:	2800      	cmp	r0, #0
 8004744:	dbf1      	blt.n	800472a <__swhatbuf_r+0x12>
 8004746:	9a01      	ldr	r2, [sp, #4]
 8004748:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800474c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004750:	425a      	negs	r2, r3
 8004752:	415a      	adcs	r2, r3
 8004754:	602a      	str	r2, [r5, #0]
 8004756:	e7ee      	b.n	8004736 <__swhatbuf_r+0x1e>
 8004758:	2340      	movs	r3, #64	; 0x40
 800475a:	2000      	movs	r0, #0
 800475c:	6023      	str	r3, [r4, #0]
 800475e:	b016      	add	sp, #88	; 0x58
 8004760:	bd70      	pop	{r4, r5, r6, pc}
	...

08004764 <__smakebuf_r>:
 8004764:	898b      	ldrh	r3, [r1, #12]
 8004766:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004768:	079d      	lsls	r5, r3, #30
 800476a:	4606      	mov	r6, r0
 800476c:	460c      	mov	r4, r1
 800476e:	d507      	bpl.n	8004780 <__smakebuf_r+0x1c>
 8004770:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	6123      	str	r3, [r4, #16]
 8004778:	2301      	movs	r3, #1
 800477a:	6163      	str	r3, [r4, #20]
 800477c:	b002      	add	sp, #8
 800477e:	bd70      	pop	{r4, r5, r6, pc}
 8004780:	ab01      	add	r3, sp, #4
 8004782:	466a      	mov	r2, sp
 8004784:	f7ff ffc8 	bl	8004718 <__swhatbuf_r>
 8004788:	9900      	ldr	r1, [sp, #0]
 800478a:	4605      	mov	r5, r0
 800478c:	4630      	mov	r0, r6
 800478e:	f7ff f9d5 	bl	8003b3c <_malloc_r>
 8004792:	b948      	cbnz	r0, 80047a8 <__smakebuf_r+0x44>
 8004794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004798:	059a      	lsls	r2, r3, #22
 800479a:	d4ef      	bmi.n	800477c <__smakebuf_r+0x18>
 800479c:	f023 0303 	bic.w	r3, r3, #3
 80047a0:	f043 0302 	orr.w	r3, r3, #2
 80047a4:	81a3      	strh	r3, [r4, #12]
 80047a6:	e7e3      	b.n	8004770 <__smakebuf_r+0xc>
 80047a8:	4b0d      	ldr	r3, [pc, #52]	; (80047e0 <__smakebuf_r+0x7c>)
 80047aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80047ac:	89a3      	ldrh	r3, [r4, #12]
 80047ae:	6020      	str	r0, [r4, #0]
 80047b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b4:	81a3      	strh	r3, [r4, #12]
 80047b6:	9b00      	ldr	r3, [sp, #0]
 80047b8:	6163      	str	r3, [r4, #20]
 80047ba:	9b01      	ldr	r3, [sp, #4]
 80047bc:	6120      	str	r0, [r4, #16]
 80047be:	b15b      	cbz	r3, 80047d8 <__smakebuf_r+0x74>
 80047c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047c4:	4630      	mov	r0, r6
 80047c6:	f000 f81f 	bl	8004808 <_isatty_r>
 80047ca:	b128      	cbz	r0, 80047d8 <__smakebuf_r+0x74>
 80047cc:	89a3      	ldrh	r3, [r4, #12]
 80047ce:	f023 0303 	bic.w	r3, r3, #3
 80047d2:	f043 0301 	orr.w	r3, r3, #1
 80047d6:	81a3      	strh	r3, [r4, #12]
 80047d8:	89a0      	ldrh	r0, [r4, #12]
 80047da:	4305      	orrs	r5, r0
 80047dc:	81a5      	strh	r5, [r4, #12]
 80047de:	e7cd      	b.n	800477c <__smakebuf_r+0x18>
 80047e0:	080038f9 	.word	0x080038f9

080047e4 <_fstat_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	4d07      	ldr	r5, [pc, #28]	; (8004804 <_fstat_r+0x20>)
 80047e8:	2300      	movs	r3, #0
 80047ea:	4604      	mov	r4, r0
 80047ec:	4608      	mov	r0, r1
 80047ee:	4611      	mov	r1, r2
 80047f0:	602b      	str	r3, [r5, #0]
 80047f2:	f7fe fed4 	bl	800359e <_fstat>
 80047f6:	1c43      	adds	r3, r0, #1
 80047f8:	d102      	bne.n	8004800 <_fstat_r+0x1c>
 80047fa:	682b      	ldr	r3, [r5, #0]
 80047fc:	b103      	cbz	r3, 8004800 <_fstat_r+0x1c>
 80047fe:	6023      	str	r3, [r4, #0]
 8004800:	bd38      	pop	{r3, r4, r5, pc}
 8004802:	bf00      	nop
 8004804:	200001e4 	.word	0x200001e4

08004808 <_isatty_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	4d06      	ldr	r5, [pc, #24]	; (8004824 <_isatty_r+0x1c>)
 800480c:	2300      	movs	r3, #0
 800480e:	4604      	mov	r4, r0
 8004810:	4608      	mov	r0, r1
 8004812:	602b      	str	r3, [r5, #0]
 8004814:	f7ff f82a 	bl	800386c <_isatty>
 8004818:	1c43      	adds	r3, r0, #1
 800481a:	d102      	bne.n	8004822 <_isatty_r+0x1a>
 800481c:	682b      	ldr	r3, [r5, #0]
 800481e:	b103      	cbz	r3, 8004822 <_isatty_r+0x1a>
 8004820:	6023      	str	r3, [r4, #0]
 8004822:	bd38      	pop	{r3, r4, r5, pc}
 8004824:	200001e4 	.word	0x200001e4

08004828 <_init>:
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800482a:	bf00      	nop
 800482c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800482e:	bc08      	pop	{r3}
 8004830:	469e      	mov	lr, r3
 8004832:	4770      	bx	lr

08004834 <_fini>:
 8004834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004836:	bf00      	nop
 8004838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800483a:	bc08      	pop	{r3}
 800483c:	469e      	mov	lr, r3
 800483e:	4770      	bx	lr
