
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003940  08003940  00013940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039ac  080039ac  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080039ac  080039ac  000139ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039b4  080039b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039b4  080039b4  000139b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039b8  080039b8  000139b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080039bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000070  08003a2c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08003a2c  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008bd2  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000170f  00000000  00000000  00028cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000978  00000000  00000000  0002a3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000074b  00000000  00000000  0002ad40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015a4f  00000000  00000000  0002b48b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a4ee  00000000  00000000  00040eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089e8c  00000000  00000000  0004b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003230  00000000  00000000  000d5254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d8484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003928 	.word	0x08003928

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003928 	.word	0x08003928

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fbc0 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f814 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f916 	bl	80007c8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800059c:	f000 f870 	bl	8000680 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005a0:	f000 f8c0 	bl	8000724 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <main+0x2c>)
 80005a6:	f001 fbe5 	bl	8001d74 <HAL_TIM_Base_Start_IT>
//  HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
  HAL_TIM_Base_Start(&htim2);
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <main+0x30>)
 80005ac:	f001 fb88 	bl	8001cc0 <HAL_TIM_Base_Start>
  initialise_monitor_handles();
 80005b0:	f002 fa06 	bl	80029c0 <initialise_monitor_handles>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <main+0x28>
 80005b6:	bf00      	nop
 80005b8:	2000008c 	.word	0x2000008c
 80005bc:	200000d4 	.word	0x200000d4

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fb89 	bl	8002ce6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <SystemClock_Config+0xb8>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a22      	ldr	r2, [pc, #136]	; (8000678 <SystemClock_Config+0xb8>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b20      	ldr	r3, [pc, #128]	; (8000678 <SystemClock_Config+0xb8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <SystemClock_Config+0xbc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a1c      	ldr	r2, [pc, #112]	; (800067c <SystemClock_Config+0xbc>)
 800060a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <SystemClock_Config+0xbc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000624:	2310      	movs	r3, #16
 8000626:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000628:	2300      	movs	r3, #0
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fe91 	bl	8001358 <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800063c:	f000 fa14 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8000648:	23b0      	movs	r3, #176	; 0xb0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800064c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f001 f8f2 	bl	8001848 <HAL_RCC_ClockConfig>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800066a:	f000 f9fd 	bl	8000a68 <Error_Handler>
  }
}
 800066e:	bf00      	nop
 8000670:	3750      	adds	r7, #80	; 0x50
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <MX_TIM1_Init+0x9c>)
 800069e:	4a20      	ldr	r2, [pc, #128]	; (8000720 <MX_TIM1_Init+0xa0>)
 80006a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2000-1;
 80006a2:	4b1e      	ldr	r3, [pc, #120]	; (800071c <MX_TIM1_Init+0x9c>)
 80006a4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80006a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <MX_TIM1_Init+0x9c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_TIM1_Init+0x9c>)
 80006b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_TIM1_Init+0x9c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006be:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_TIM1_Init+0x9c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c4:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_TIM1_Init+0x9c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006ca:	4814      	ldr	r0, [pc, #80]	; (800071c <MX_TIM1_Init+0x9c>)
 80006cc:	f001 faa8 	bl	8001c20 <HAL_TIM_Base_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80006d6:	f000 f9c7 	bl	8000a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	4619      	mov	r1, r3
 80006e6:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_TIM1_Init+0x9c>)
 80006e8:	f001 fcae 	bl	8002048 <HAL_TIM_ConfigClockSource>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80006f2:	f000 f9b9 	bl	8000a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f6:	2300      	movs	r3, #0
 80006f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006fe:	463b      	mov	r3, r7
 8000700:	4619      	mov	r1, r3
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <MX_TIM1_Init+0x9c>)
 8000704:	f001 feb4 	bl	8002470 <HAL_TIMEx_MasterConfigSynchronization>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800070e:	f000 f9ab 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000008c 	.word	0x2000008c
 8000720:	40010000 	.word	0x40010000

08000724 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000740:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <MX_TIM2_Init+0xa0>)
 8000742:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000746:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <MX_TIM2_Init+0xa0>)
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074e:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_TIM2_Init+0xa0>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_TIM2_Init+0xa0>)
 8000756:	2263      	movs	r2, #99	; 0x63
 8000758:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_TIM2_Init+0xa0>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000760:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_TIM2_Init+0xa0>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000766:	4817      	ldr	r0, [pc, #92]	; (80007c4 <MX_TIM2_Init+0xa0>)
 8000768:	f001 fa5a 	bl	8001c20 <HAL_TIM_Base_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8000772:	f000 f979 	bl	8000a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800077a:	60bb      	str	r3, [r7, #8]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockFilter = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000788:	f107 0308 	add.w	r3, r7, #8
 800078c:	4619      	mov	r1, r3
 800078e:	480d      	ldr	r0, [pc, #52]	; (80007c4 <MX_TIM2_Init+0xa0>)
 8000790:	f001 fc5a 	bl	8002048 <HAL_TIM_ConfigClockSource>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800079a:	f000 f965 	bl	8000a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079e:	2300      	movs	r3, #0
 80007a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a6:	463b      	mov	r3, r7
 80007a8:	4619      	mov	r1, r3
 80007aa:	4806      	ldr	r0, [pc, #24]	; (80007c4 <MX_TIM2_Init+0xa0>)
 80007ac:	f001 fe60 	bl	8002470 <HAL_TIMEx_MasterConfigSynchronization>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80007b6:	f000 f957 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000d4 	.word	0x200000d4

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
 80007e2:	4b9b      	ldr	r3, [pc, #620]	; (8000a50 <MX_GPIO_Init+0x288>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a9a      	ldr	r2, [pc, #616]	; (8000a50 <MX_GPIO_Init+0x288>)
 80007e8:	f043 0310 	orr.w	r3, r3, #16
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b98      	ldr	r3, [pc, #608]	; (8000a50 <MX_GPIO_Init+0x288>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0310 	and.w	r3, r3, #16
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	4b94      	ldr	r3, [pc, #592]	; (8000a50 <MX_GPIO_Init+0x288>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a93      	ldr	r2, [pc, #588]	; (8000a50 <MX_GPIO_Init+0x288>)
 8000804:	f043 0304 	orr.w	r3, r3, #4
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b91      	ldr	r3, [pc, #580]	; (8000a50 <MX_GPIO_Init+0x288>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0304 	and.w	r3, r3, #4
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b8d      	ldr	r3, [pc, #564]	; (8000a50 <MX_GPIO_Init+0x288>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a8c      	ldr	r2, [pc, #560]	; (8000a50 <MX_GPIO_Init+0x288>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b8a      	ldr	r3, [pc, #552]	; (8000a50 <MX_GPIO_Init+0x288>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b86      	ldr	r3, [pc, #536]	; (8000a50 <MX_GPIO_Init+0x288>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a85      	ldr	r2, [pc, #532]	; (8000a50 <MX_GPIO_Init+0x288>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b83      	ldr	r3, [pc, #524]	; (8000a50 <MX_GPIO_Init+0x288>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b7f      	ldr	r3, [pc, #508]	; (8000a50 <MX_GPIO_Init+0x288>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a7e      	ldr	r2, [pc, #504]	; (8000a50 <MX_GPIO_Init+0x288>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b7c      	ldr	r3, [pc, #496]	; (8000a50 <MX_GPIO_Init+0x288>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b78      	ldr	r3, [pc, #480]	; (8000a50 <MX_GPIO_Init+0x288>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a77      	ldr	r2, [pc, #476]	; (8000a50 <MX_GPIO_Init+0x288>)
 8000874:	f043 0308 	orr.w	r3, r3, #8
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b75      	ldr	r3, [pc, #468]	; (8000a50 <MX_GPIO_Init+0x288>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0308 	and.w	r3, r3, #8
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2108      	movs	r1, #8
 800088a:	4872      	ldr	r0, [pc, #456]	; (8000a54 <MX_GPIO_Init+0x28c>)
 800088c:	f000 fd4a 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2101      	movs	r1, #1
 8000894:	4870      	ldr	r0, [pc, #448]	; (8000a58 <MX_GPIO_Init+0x290>)
 8000896:	f000 fd45 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ziel_Pin|pomarancz_Pin|czerwona_Pin|niebieska_Pin
 800089a:	2200      	movs	r2, #0
 800089c:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008a0:	486e      	ldr	r0, [pc, #440]	; (8000a5c <MX_GPIO_Init+0x294>)
 80008a2:	f000 fd3f 	bl	8001324 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008a6:	2304      	movs	r3, #4
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	4866      	ldr	r0, [pc, #408]	; (8000a54 <MX_GPIO_Init+0x28c>)
 80008ba:	f000 fbaf 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008be:	2308      	movs	r3, #8
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	485f      	ldr	r0, [pc, #380]	; (8000a54 <MX_GPIO_Init+0x28c>)
 80008d6:	f000 fba1 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80008da:	2332      	movs	r3, #50	; 0x32
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008de:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	4859      	ldr	r0, [pc, #356]	; (8000a54 <MX_GPIO_Init+0x28c>)
 80008f0:	f000 fb94 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4853      	ldr	r0, [pc, #332]	; (8000a58 <MX_GPIO_Init+0x290>)
 800090c:	f000 fb86 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000910:	2308      	movs	r3, #8
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000920:	2305      	movs	r3, #5
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	484b      	ldr	r0, [pc, #300]	; (8000a58 <MX_GPIO_Init+0x290>)
 800092c:	f000 fb76 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000930:	2310      	movs	r3, #16
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000940:	2306      	movs	r3, #6
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4845      	ldr	r0, [pc, #276]	; (8000a60 <MX_GPIO_Init+0x298>)
 800094c:	f000 fb66 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000950:	23e0      	movs	r3, #224	; 0xe0
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000960:	2305      	movs	r3, #5
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	483d      	ldr	r0, [pc, #244]	; (8000a60 <MX_GPIO_Init+0x298>)
 800096c:	f000 fb56 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000970:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000982:	2305      	movs	r3, #5
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4835      	ldr	r0, [pc, #212]	; (8000a64 <MX_GPIO_Init+0x29c>)
 800098e:	f000 fb45 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : ziel_Pin pomarancz_Pin czerwona_Pin niebieska_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = ziel_Pin|pomarancz_Pin|czerwona_Pin|niebieska_Pin
 8000992:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000996:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	4619      	mov	r1, r3
 80009aa:	482c      	ldr	r0, [pc, #176]	; (8000a5c <MX_GPIO_Init+0x294>)
 80009ac:	f000 fb36 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009b0:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009c2:	2306      	movs	r3, #6
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4822      	ldr	r0, [pc, #136]	; (8000a58 <MX_GPIO_Init+0x290>)
 80009ce:	f000 fb25 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009e0:	f107 031c 	add.w	r3, r7, #28
 80009e4:	4619      	mov	r1, r3
 80009e6:	481e      	ldr	r0, [pc, #120]	; (8000a60 <MX_GPIO_Init+0x298>)
 80009e8:	f000 fb18 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fa:	2303      	movs	r3, #3
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009fe:	230a      	movs	r3, #10
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4815      	ldr	r0, [pc, #84]	; (8000a60 <MX_GPIO_Init+0x298>)
 8000a0a:	f000 fb07 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a0e:	2320      	movs	r3, #32
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	480e      	ldr	r0, [pc, #56]	; (8000a5c <MX_GPIO_Init+0x294>)
 8000a22:	f000 fafb 	bl	800101c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a26:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2c:	2312      	movs	r3, #18
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	4808      	ldr	r0, [pc, #32]	; (8000a64 <MX_GPIO_Init+0x29c>)
 8000a44:	f000 faea 	bl	800101c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a48:	bf00      	nop
 8000a4a:	3730      	adds	r7, #48	; 0x30
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40021000 	.word	0x40021000
 8000a58:	40020800 	.word	0x40020800
 8000a5c:	40020c00 	.word	0x40020c00
 8000a60:	40020000 	.word	0x40020000
 8000a64:	40020400 	.word	0x40020400

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <Error_Handler+0x8>
	...

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a88:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ab2:	2007      	movs	r0, #7
 8000ab4:	f000 fa70 	bl	8000f98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a2b      	ldr	r2, [pc, #172]	; (8000b90 <HAL_TIM_Base_MspInit+0xcc>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d116      	bne.n	8000b14 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b2a      	ldr	r3, [pc, #168]	; (8000b94 <HAL_TIM_Base_MspInit+0xd0>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a29      	ldr	r2, [pc, #164]	; (8000b94 <HAL_TIM_Base_MspInit+0xd0>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b27      	ldr	r3, [pc, #156]	; (8000b94 <HAL_TIM_Base_MspInit+0xd0>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2100      	movs	r1, #0
 8000b06:	2019      	movs	r0, #25
 8000b08:	f000 fa51 	bl	8000fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b0c:	2019      	movs	r0, #25
 8000b0e:	f000 fa6a 	bl	8000fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b12:	e038      	b.n	8000b86 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM2)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b1c:	d133      	bne.n	8000b86 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_TIM_Base_MspInit+0xd0>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a1b      	ldr	r2, [pc, #108]	; (8000b94 <HAL_TIM_Base_MspInit+0xd0>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_TIM_Base_MspInit+0xd0>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <HAL_TIM_Base_MspInit+0xd0>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a14      	ldr	r2, [pc, #80]	; (8000b94 <HAL_TIM_Base_MspInit+0xd0>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_TIM_Base_MspInit+0xd0>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b56:	2301      	movs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b66:	2301      	movs	r3, #1
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4809      	ldr	r0, [pc, #36]	; (8000b98 <HAL_TIM_Base_MspInit+0xd4>)
 8000b72:	f000 fa53 	bl	800101c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	201c      	movs	r0, #28
 8000b7c:	f000 fa17 	bl	8000fae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b80:	201c      	movs	r0, #28
 8000b82:	f000 fa30 	bl	8000fe6 <HAL_NVIC_EnableIRQ>
}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40010000 	.word	0x40010000
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020000 	.word	0x40020000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <NMI_Handler+0x4>

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler+0x4>

08000bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be8:	f000 f8e6 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	printf("test %d\n", TIM2->CNT);
 8000bf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <TIM1_UP_TIM10_IRQHandler+0x24>)
 8000bfe:	f002 f81d 	bl	8002c3c <iprintf>
	TIM2->CNT=0;
 8000c02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c0a:	4803      	ldr	r0, [pc, #12]	; (8000c18 <TIM1_UP_TIM10_IRQHandler+0x28>)
 8000c0c:	f001 f914 	bl	8001e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	08003940 	.word	0x08003940
 8000c18:	2000008c 	.word	0x2000008c

08000c1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	HAL_GPIO_TogglePin(czerwona_GPIO_Port, czerwona_Pin);


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <TIM2_IRQHandler+0x10>)
 8000c22:	f001 f909 	bl	8001e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200000d4 	.word	0x200000d4

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f002 f890 	bl	8002d84 <__errno>
 8000c64:	4603      	mov	r3, r0
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20020000 	.word	0x20020000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	2000011c 	.word	0x2000011c
 8000c98:	20000320 	.word	0x20000320

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cc6:	490e      	ldr	r1, [pc, #56]	; (8000d00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cc8:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0b      	ldr	r2, [pc, #44]	; (8000d08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cdc:	4c0b      	ldr	r4, [pc, #44]	; (8000d0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cea:	f7ff ffd7 	bl	8000c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cee:	f002 f84f 	bl	8002d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fc4b 	bl	800058c <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d04:	080039bc 	.word	0x080039bc
  ldr r2, =_sbss
 8000d08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d0c:	2000031c 	.word	0x2000031c

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f92b 	bl	8000f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fe94 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f943 	bl	8001002 <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f90b 	bl	8000fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000120 	.word	0x20000120

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000120 	.word	0x20000120

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4907      	ldr	r1, [pc, #28]	; (8000e94 <__NVIC_EnableIRQ+0x38>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f64:	d301      	bcc.n	8000f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00f      	b.n	8000f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <SysTick_Config+0x40>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f72:	210f      	movs	r1, #15
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f7ff ff8e 	bl	8000e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <SysTick_Config+0x40>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <SysTick_Config+0x40>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	e000e010 	.word	0xe000e010

08000f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff ff29 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b086      	sub	sp, #24
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	607a      	str	r2, [r7, #4]
 8000fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc0:	f7ff ff3e 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	6978      	ldr	r0, [r7, #20]
 8000fcc:	f7ff ff8e 	bl	8000eec <NVIC_EncodePriority>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff5d 	bl	8000e98 <__NVIC_SetPriority>
}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff31 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffa2 	bl	8000f54 <SysTick_Config>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
 8001036:	e159      	b.n	80012ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001038:	2201      	movs	r2, #1
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	429a      	cmp	r2, r3
 8001052:	f040 8148 	bne.w	80012e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b01      	cmp	r3, #1
 8001060:	d005      	beq.n	800106e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106a:	2b02      	cmp	r3, #2
 800106c:	d130      	bne.n	80010d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	68da      	ldr	r2, [r3, #12]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a4:	2201      	movs	r2, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	091b      	lsrs	r3, r3, #4
 80010ba:	f003 0201 	and.w	r2, r3, #1
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d017      	beq.n	800110c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d123      	bne.n	8001160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	08da      	lsrs	r2, r3, #3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3208      	adds	r2, #8
 8001120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	220f      	movs	r2, #15
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	08da      	lsrs	r2, r3, #3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3208      	adds	r2, #8
 800115a:	69b9      	ldr	r1, [r7, #24]
 800115c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0203 	and.w	r2, r3, #3
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 80a2 	beq.w	80012e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b57      	ldr	r3, [pc, #348]	; (8001304 <HAL_GPIO_Init+0x2e8>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a56      	ldr	r2, [pc, #344]	; (8001304 <HAL_GPIO_Init+0x2e8>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
 80011b2:	4b54      	ldr	r3, [pc, #336]	; (8001304 <HAL_GPIO_Init+0x2e8>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011be:	4a52      	ldr	r2, [pc, #328]	; (8001308 <HAL_GPIO_Init+0x2ec>)
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	3302      	adds	r3, #2
 80011c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	220f      	movs	r2, #15
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a49      	ldr	r2, [pc, #292]	; (800130c <HAL_GPIO_Init+0x2f0>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d019      	beq.n	800121e <HAL_GPIO_Init+0x202>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a48      	ldr	r2, [pc, #288]	; (8001310 <HAL_GPIO_Init+0x2f4>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0x1fe>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a47      	ldr	r2, [pc, #284]	; (8001314 <HAL_GPIO_Init+0x2f8>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00d      	beq.n	8001216 <HAL_GPIO_Init+0x1fa>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a46      	ldr	r2, [pc, #280]	; (8001318 <HAL_GPIO_Init+0x2fc>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d007      	beq.n	8001212 <HAL_GPIO_Init+0x1f6>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a45      	ldr	r2, [pc, #276]	; (800131c <HAL_GPIO_Init+0x300>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <HAL_GPIO_Init+0x1f2>
 800120a:	2304      	movs	r3, #4
 800120c:	e008      	b.n	8001220 <HAL_GPIO_Init+0x204>
 800120e:	2307      	movs	r3, #7
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x204>
 8001212:	2303      	movs	r3, #3
 8001214:	e004      	b.n	8001220 <HAL_GPIO_Init+0x204>
 8001216:	2302      	movs	r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x204>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_GPIO_Init+0x204>
 800121e:	2300      	movs	r3, #0
 8001220:	69fa      	ldr	r2, [r7, #28]
 8001222:	f002 0203 	and.w	r2, r2, #3
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	4093      	lsls	r3, r2
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001230:	4935      	ldr	r1, [pc, #212]	; (8001308 <HAL_GPIO_Init+0x2ec>)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123e:	4b38      	ldr	r3, [pc, #224]	; (8001320 <HAL_GPIO_Init+0x304>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001262:	4a2f      	ldr	r2, [pc, #188]	; (8001320 <HAL_GPIO_Init+0x304>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001268:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <HAL_GPIO_Init+0x304>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800128c:	4a24      	ldr	r2, [pc, #144]	; (8001320 <HAL_GPIO_Init+0x304>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001292:	4b23      	ldr	r3, [pc, #140]	; (8001320 <HAL_GPIO_Init+0x304>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012b6:	4a1a      	ldr	r2, [pc, #104]	; (8001320 <HAL_GPIO_Init+0x304>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012bc:	4b18      	ldr	r3, [pc, #96]	; (8001320 <HAL_GPIO_Init+0x304>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e0:	4a0f      	ldr	r2, [pc, #60]	; (8001320 <HAL_GPIO_Init+0x304>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3301      	adds	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2b0f      	cmp	r3, #15
 80012f0:	f67f aea2 	bls.w	8001038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40013800 	.word	0x40013800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800
 8001318:	40020c00 	.word	0x40020c00
 800131c:	40021000 	.word	0x40021000
 8001320:	40013c00 	.word	0x40013c00

08001324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
 8001330:	4613      	mov	r3, r2
 8001332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001334:	787b      	ldrb	r3, [r7, #1]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001340:	e003      	b.n	800134a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	041a      	lsls	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	619a      	str	r2, [r3, #24]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e267      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d075      	beq.n	8001462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001376:	4b88      	ldr	r3, [pc, #544]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b04      	cmp	r3, #4
 8001380:	d00c      	beq.n	800139c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001382:	4b85      	ldr	r3, [pc, #532]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800138a:	2b08      	cmp	r3, #8
 800138c:	d112      	bne.n	80013b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800138e:	4b82      	ldr	r3, [pc, #520]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800139a:	d10b      	bne.n	80013b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139c:	4b7e      	ldr	r3, [pc, #504]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d05b      	beq.n	8001460 <HAL_RCC_OscConfig+0x108>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d157      	bne.n	8001460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e242      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013bc:	d106      	bne.n	80013cc <HAL_RCC_OscConfig+0x74>
 80013be:	4b76      	ldr	r3, [pc, #472]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a75      	ldr	r2, [pc, #468]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e01d      	b.n	8001408 <HAL_RCC_OscConfig+0xb0>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x98>
 80013d6:	4b70      	ldr	r3, [pc, #448]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a6f      	ldr	r2, [pc, #444]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b6d      	ldr	r3, [pc, #436]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a6c      	ldr	r2, [pc, #432]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e00b      	b.n	8001408 <HAL_RCC_OscConfig+0xb0>
 80013f0:	4b69      	ldr	r3, [pc, #420]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a68      	ldr	r2, [pc, #416]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b66      	ldr	r3, [pc, #408]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a65      	ldr	r2, [pc, #404]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d013      	beq.n	8001438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fce6 	bl	8000de0 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fce2 	bl	8000de0 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	; 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e207      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	4b5b      	ldr	r3, [pc, #364]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0xc0>
 8001436:	e014      	b.n	8001462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fcd2 	bl	8000de0 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fcce 	bl	8000de0 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e1f3      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001452:	4b51      	ldr	r3, [pc, #324]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0xe8>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d063      	beq.n	8001536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800146e:	4b4a      	ldr	r3, [pc, #296]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00b      	beq.n	8001492 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800147a:	4b47      	ldr	r3, [pc, #284]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001482:	2b08      	cmp	r3, #8
 8001484:	d11c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001486:	4b44      	ldr	r3, [pc, #272]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d116      	bne.n	80014c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001492:	4b41      	ldr	r3, [pc, #260]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <HAL_RCC_OscConfig+0x152>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d001      	beq.n	80014aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e1c7      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014aa:	4b3b      	ldr	r3, [pc, #236]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4937      	ldr	r1, [pc, #220]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014be:	e03a      	b.n	8001536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d020      	beq.n	800150a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c8:	4b34      	ldr	r3, [pc, #208]	; (800159c <HAL_RCC_OscConfig+0x244>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ce:	f7ff fc87 	bl	8000de0 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff fc83 	bl	8000de0 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e1a8      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e8:	4b2b      	ldr	r3, [pc, #172]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b28      	ldr	r3, [pc, #160]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4925      	ldr	r1, [pc, #148]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 8001504:	4313      	orrs	r3, r2
 8001506:	600b      	str	r3, [r1, #0]
 8001508:	e015      	b.n	8001536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150a:	4b24      	ldr	r3, [pc, #144]	; (800159c <HAL_RCC_OscConfig+0x244>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff fc66 	bl	8000de0 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001518:	f7ff fc62 	bl	8000de0 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e187      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d036      	beq.n	80015b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d016      	beq.n	8001578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_RCC_OscConfig+0x248>)
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001550:	f7ff fc46 	bl	8000de0 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff fc42 	bl	8000de0 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e167      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <HAL_RCC_OscConfig+0x240>)
 800156c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x200>
 8001576:	e01b      	b.n	80015b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_RCC_OscConfig+0x248>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157e:	f7ff fc2f 	bl	8000de0 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001584:	e00e      	b.n	80015a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001586:	f7ff fc2b 	bl	8000de0 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d907      	bls.n	80015a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e150      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
 8001598:	40023800 	.word	0x40023800
 800159c:	42470000 	.word	0x42470000
 80015a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a4:	4b88      	ldr	r3, [pc, #544]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ea      	bne.n	8001586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 8097 	beq.w	80016ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c2:	4b81      	ldr	r3, [pc, #516]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10f      	bne.n	80015ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	4b7d      	ldr	r3, [pc, #500]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a7c      	ldr	r2, [pc, #496]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
 80015de:	4b7a      	ldr	r3, [pc, #488]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ea:	2301      	movs	r3, #1
 80015ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ee:	4b77      	ldr	r3, [pc, #476]	; (80017cc <HAL_RCC_OscConfig+0x474>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d118      	bne.n	800162c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fa:	4b74      	ldr	r3, [pc, #464]	; (80017cc <HAL_RCC_OscConfig+0x474>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a73      	ldr	r2, [pc, #460]	; (80017cc <HAL_RCC_OscConfig+0x474>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001606:	f7ff fbeb 	bl	8000de0 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160e:	f7ff fbe7 	bl	8000de0 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e10c      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	4b6a      	ldr	r3, [pc, #424]	; (80017cc <HAL_RCC_OscConfig+0x474>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d106      	bne.n	8001642 <HAL_RCC_OscConfig+0x2ea>
 8001634:	4b64      	ldr	r3, [pc, #400]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001638:	4a63      	ldr	r2, [pc, #396]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6713      	str	r3, [r2, #112]	; 0x70
 8001640:	e01c      	b.n	800167c <HAL_RCC_OscConfig+0x324>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b05      	cmp	r3, #5
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x30c>
 800164a:	4b5f      	ldr	r3, [pc, #380]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 800164c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800164e:	4a5e      	ldr	r2, [pc, #376]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6713      	str	r3, [r2, #112]	; 0x70
 8001656:	4b5c      	ldr	r3, [pc, #368]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165a:	4a5b      	ldr	r2, [pc, #364]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6713      	str	r3, [r2, #112]	; 0x70
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0x324>
 8001664:	4b58      	ldr	r3, [pc, #352]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001668:	4a57      	ldr	r2, [pc, #348]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	6713      	str	r3, [r2, #112]	; 0x70
 8001670:	4b55      	ldr	r3, [pc, #340]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001674:	4a54      	ldr	r2, [pc, #336]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001676:	f023 0304 	bic.w	r3, r3, #4
 800167a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d015      	beq.n	80016b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001684:	f7ff fbac 	bl	8000de0 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168c:	f7ff fba8 	bl	8000de0 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	; 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e0cb      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a2:	4b49      	ldr	r3, [pc, #292]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0ee      	beq.n	800168c <HAL_RCC_OscConfig+0x334>
 80016ae:	e014      	b.n	80016da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b0:	f7ff fb96 	bl	8000de0 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7ff fb92 	bl	8000de0 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e0b5      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ce:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1ee      	bne.n	80016b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d105      	bne.n	80016ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e0:	4b39      	ldr	r3, [pc, #228]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	4a38      	ldr	r2, [pc, #224]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 80a1 	beq.w	8001838 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016f6:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d05c      	beq.n	80017bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d141      	bne.n	800178e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170a:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <HAL_RCC_OscConfig+0x478>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fb66 	bl	8000de0 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff fb62 	bl	8000de0 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e087      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172a:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69da      	ldr	r2, [r3, #28]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	019b      	lsls	r3, r3, #6
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174c:	085b      	lsrs	r3, r3, #1
 800174e:	3b01      	subs	r3, #1
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	061b      	lsls	r3, r3, #24
 800175a:	491b      	ldr	r1, [pc, #108]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <HAL_RCC_OscConfig+0x478>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7ff fb3b 	bl	8000de0 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800176e:	f7ff fb37 	bl	8000de0 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e05c      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001780:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x416>
 800178c:	e054      	b.n	8001838 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <HAL_RCC_OscConfig+0x478>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fb24 	bl	8000de0 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff fb20 	bl	8000de0 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e045      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_RCC_OscConfig+0x470>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x444>
 80017ba:	e03d      	b.n	8001838 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e038      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40007000 	.word	0x40007000
 80017d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_RCC_OscConfig+0x4ec>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d028      	beq.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d121      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d11a      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001804:	4013      	ands	r3, r2
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800180a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800180c:	4293      	cmp	r3, r2
 800180e:	d111      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	085b      	lsrs	r3, r3, #1
 800181c:	3b01      	subs	r3, #1
 800181e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001820:	429a      	cmp	r2, r3
 8001822:	d107      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0cc      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800185c:	4b68      	ldr	r3, [pc, #416]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d90c      	bls.n	8001884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b65      	ldr	r3, [pc, #404]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b63      	ldr	r3, [pc, #396]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0b8      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800189c:	4b59      	ldr	r3, [pc, #356]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a58      	ldr	r2, [pc, #352]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b4:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	4a52      	ldr	r2, [pc, #328]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c0:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	494d      	ldr	r1, [pc, #308]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d044      	beq.n	8001968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d119      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e07f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d003      	beq.n	8001906 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001902:	2b03      	cmp	r3, #3
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001906:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e06f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001916:	4b3b      	ldr	r3, [pc, #236]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e067      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001926:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f023 0203 	bic.w	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4934      	ldr	r1, [pc, #208]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	4313      	orrs	r3, r2
 8001936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001938:	f7ff fa52 	bl	8000de0 <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193e:	e00a      	b.n	8001956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001940:	f7ff fa4e 	bl	8000de0 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	; 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e04f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 020c 	and.w	r2, r3, #12
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	429a      	cmp	r2, r3
 8001966:	d1eb      	bne.n	8001940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001968:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d20c      	bcs.n	8001990 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e032      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800199c:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4916      	ldr	r1, [pc, #88]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d009      	beq.n	80019ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	490e      	ldr	r1, [pc, #56]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ce:	f000 f821 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 80019d2:	4602      	mov	r2, r0
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	490a      	ldr	r1, [pc, #40]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 80019e0:	5ccb      	ldrb	r3, [r1, r3]
 80019e2:	fa22 f303 	lsr.w	r3, r2, r3
 80019e6:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_RCC_ClockConfig+0x1c8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f9b2 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023c00 	.word	0x40023c00
 8001a04:	40023800 	.word	0x40023800
 8001a08:	0800394c 	.word	0x0800394c
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000004 	.word	0x20000004

08001a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a18:	b094      	sub	sp, #80	; 0x50
 8001a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8001a20:	2300      	movs	r3, #0
 8001a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a24:	2300      	movs	r3, #0
 8001a26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a2c:	4b79      	ldr	r3, [pc, #484]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d00d      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x40>
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	f200 80e1 	bhi.w	8001c00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0x34>
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d003      	beq.n	8001a4e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a46:	e0db      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a48:	4b73      	ldr	r3, [pc, #460]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001a4c:	e0db      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a4e:	4b73      	ldr	r3, [pc, #460]	; (8001c1c <HAL_RCC_GetSysClockFreq+0x208>)
 8001a50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a52:	e0d8      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a54:	4b6f      	ldr	r3, [pc, #444]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a5e:	4b6d      	ldr	r3, [pc, #436]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d063      	beq.n	8001b32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6a:	4b6a      	ldr	r3, [pc, #424]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	099b      	lsrs	r3, r3, #6
 8001a70:	2200      	movs	r2, #0
 8001a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a7e:	2300      	movs	r3, #0
 8001a80:	637b      	str	r3, [r7, #52]	; 0x34
 8001a82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a86:	4622      	mov	r2, r4
 8001a88:	462b      	mov	r3, r5
 8001a8a:	f04f 0000 	mov.w	r0, #0
 8001a8e:	f04f 0100 	mov.w	r1, #0
 8001a92:	0159      	lsls	r1, r3, #5
 8001a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a98:	0150      	lsls	r0, r2, #5
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	1a51      	subs	r1, r2, r1
 8001aa2:	6139      	str	r1, [r7, #16]
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ab8:	4659      	mov	r1, fp
 8001aba:	018b      	lsls	r3, r1, #6
 8001abc:	4651      	mov	r1, sl
 8001abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ac2:	4651      	mov	r1, sl
 8001ac4:	018a      	lsls	r2, r1, #6
 8001ac6:	4651      	mov	r1, sl
 8001ac8:	ebb2 0801 	subs.w	r8, r2, r1
 8001acc:	4659      	mov	r1, fp
 8001ace:	eb63 0901 	sbc.w	r9, r3, r1
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ade:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ae2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ae6:	4690      	mov	r8, r2
 8001ae8:	4699      	mov	r9, r3
 8001aea:	4623      	mov	r3, r4
 8001aec:	eb18 0303 	adds.w	r3, r8, r3
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	462b      	mov	r3, r5
 8001af4:	eb49 0303 	adc.w	r3, r9, r3
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b06:	4629      	mov	r1, r5
 8001b08:	024b      	lsls	r3, r1, #9
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b10:	4621      	mov	r1, r4
 8001b12:	024a      	lsls	r2, r1, #9
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b24:	f7fe fbb4 	bl	8000290 <__aeabi_uldivmod>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b30:	e058      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b32:	4b38      	ldr	r3, [pc, #224]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	099b      	lsrs	r3, r3, #6
 8001b38:	2200      	movs	r2, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b42:	623b      	str	r3, [r7, #32]
 8001b44:	2300      	movs	r3, #0
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
 8001b48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b4c:	4642      	mov	r2, r8
 8001b4e:	464b      	mov	r3, r9
 8001b50:	f04f 0000 	mov.w	r0, #0
 8001b54:	f04f 0100 	mov.w	r1, #0
 8001b58:	0159      	lsls	r1, r3, #5
 8001b5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b5e:	0150      	lsls	r0, r2, #5
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4641      	mov	r1, r8
 8001b66:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b6a:	4649      	mov	r1, r9
 8001b6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b84:	ebb2 040a 	subs.w	r4, r2, sl
 8001b88:	eb63 050b 	sbc.w	r5, r3, fp
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	00eb      	lsls	r3, r5, #3
 8001b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b9a:	00e2      	lsls	r2, r4, #3
 8001b9c:	4614      	mov	r4, r2
 8001b9e:	461d      	mov	r5, r3
 8001ba0:	4643      	mov	r3, r8
 8001ba2:	18e3      	adds	r3, r4, r3
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	464b      	mov	r3, r9
 8001ba8:	eb45 0303 	adc.w	r3, r5, r3
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bba:	4629      	mov	r1, r5
 8001bbc:	028b      	lsls	r3, r1, #10
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	028a      	lsls	r2, r1, #10
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
 8001bd2:	61fa      	str	r2, [r7, #28]
 8001bd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd8:	f7fe fb5a 	bl	8000290 <__aeabi_uldivmod>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4613      	mov	r3, r2
 8001be2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001bf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bfe:	e002      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3750      	adds	r7, #80	; 0x50
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	00f42400 	.word	0x00f42400
 8001c1c:	007a1200 	.word	0x007a1200

08001c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e041      	b.n	8001cb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7fe ff3c 	bl	8000ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4610      	mov	r0, r2
 8001c60:	f000 faec 	bl	800223c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d001      	beq.n	8001cd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e03c      	b.n	8001d52 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a1e      	ldr	r2, [pc, #120]	; (8001d60 <HAL_TIM_Base_Start+0xa0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d018      	beq.n	8001d1c <HAL_TIM_Base_Start+0x5c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf2:	d013      	beq.n	8001d1c <HAL_TIM_Base_Start+0x5c>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a1a      	ldr	r2, [pc, #104]	; (8001d64 <HAL_TIM_Base_Start+0xa4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00e      	beq.n	8001d1c <HAL_TIM_Base_Start+0x5c>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_TIM_Base_Start+0xa8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d009      	beq.n	8001d1c <HAL_TIM_Base_Start+0x5c>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <HAL_TIM_Base_Start+0xac>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d004      	beq.n	8001d1c <HAL_TIM_Base_Start+0x5c>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a16      	ldr	r2, [pc, #88]	; (8001d70 <HAL_TIM_Base_Start+0xb0>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d111      	bne.n	8001d40 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d010      	beq.n	8001d50 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3e:	e007      	b.n	8001d50 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0201 	orr.w	r2, r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40010000 	.word	0x40010000
 8001d64:	40000400 	.word	0x40000400
 8001d68:	40000800 	.word	0x40000800
 8001d6c:	40000c00 	.word	0x40000c00
 8001d70:	40014000 	.word	0x40014000

08001d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d001      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e044      	b.n	8001e16 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1e      	ldr	r2, [pc, #120]	; (8001e24 <HAL_TIM_Base_Start_IT+0xb0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d018      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x6c>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db6:	d013      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x6c>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1a      	ldr	r2, [pc, #104]	; (8001e28 <HAL_TIM_Base_Start_IT+0xb4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00e      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x6c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a19      	ldr	r2, [pc, #100]	; (8001e2c <HAL_TIM_Base_Start_IT+0xb8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d009      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x6c>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a17      	ldr	r2, [pc, #92]	; (8001e30 <HAL_TIM_Base_Start_IT+0xbc>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d004      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x6c>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a16      	ldr	r2, [pc, #88]	; (8001e34 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d111      	bne.n	8001e04 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d010      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0201 	orr.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e02:	e007      	b.n	8001e14 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40010000 	.word	0x40010000
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	40000800 	.word	0x40000800
 8001e30:	40000c00 	.word	0x40000c00
 8001e34:	40014000 	.word	0x40014000

08001e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d122      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d11b      	bne.n	8001e94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0202 	mvn.w	r2, #2
 8001e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f9bf 	bl	80021fe <HAL_TIM_IC_CaptureCallback>
 8001e80:	e005      	b.n	8001e8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f9b1 	bl	80021ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f9c2 	bl	8002212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d122      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d11b      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0204 	mvn.w	r2, #4
 8001eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f995 	bl	80021fe <HAL_TIM_IC_CaptureCallback>
 8001ed4:	e005      	b.n	8001ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f987 	bl	80021ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f998 	bl	8002212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d122      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d11b      	bne.n	8001f3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f06f 0208 	mvn.w	r2, #8
 8001f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2204      	movs	r2, #4
 8001f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f96b 	bl	80021fe <HAL_TIM_IC_CaptureCallback>
 8001f28:	e005      	b.n	8001f36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f95d 	bl	80021ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f96e 	bl	8002212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	f003 0310 	and.w	r3, r3, #16
 8001f46:	2b10      	cmp	r3, #16
 8001f48:	d122      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	2b10      	cmp	r3, #16
 8001f56:	d11b      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0210 	mvn.w	r2, #16
 8001f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2208      	movs	r2, #8
 8001f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f941 	bl	80021fe <HAL_TIM_IC_CaptureCallback>
 8001f7c:	e005      	b.n	8001f8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f933 	bl	80021ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f944 	bl	8002212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d10e      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d107      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0201 	mvn.w	r2, #1
 8001fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f90d 	bl	80021d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc6:	2b80      	cmp	r3, #128	; 0x80
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd4:	2b80      	cmp	r3, #128	; 0x80
 8001fd6:	d107      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fabc 	bl	8002560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff2:	2b40      	cmp	r3, #64	; 0x40
 8001ff4:	d10e      	bne.n	8002014 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002000:	2b40      	cmp	r3, #64	; 0x40
 8002002:	d107      	bne.n	8002014 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800200c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f909 	bl	8002226 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	2b20      	cmp	r3, #32
 8002020:	d10e      	bne.n	8002040 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0320 	and.w	r3, r3, #32
 800202c:	2b20      	cmp	r3, #32
 800202e:	d107      	bne.n	8002040 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0220 	mvn.w	r2, #32
 8002038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fa86 	bl	800254c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_TIM_ConfigClockSource+0x1c>
 8002060:	2302      	movs	r3, #2
 8002062:	e0b4      	b.n	80021ce <HAL_TIM_ConfigClockSource+0x186>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2202      	movs	r2, #2
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800208a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68ba      	ldr	r2, [r7, #8]
 8002092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800209c:	d03e      	beq.n	800211c <HAL_TIM_ConfigClockSource+0xd4>
 800209e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020a2:	f200 8087 	bhi.w	80021b4 <HAL_TIM_ConfigClockSource+0x16c>
 80020a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020aa:	f000 8086 	beq.w	80021ba <HAL_TIM_ConfigClockSource+0x172>
 80020ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b2:	d87f      	bhi.n	80021b4 <HAL_TIM_ConfigClockSource+0x16c>
 80020b4:	2b70      	cmp	r3, #112	; 0x70
 80020b6:	d01a      	beq.n	80020ee <HAL_TIM_ConfigClockSource+0xa6>
 80020b8:	2b70      	cmp	r3, #112	; 0x70
 80020ba:	d87b      	bhi.n	80021b4 <HAL_TIM_ConfigClockSource+0x16c>
 80020bc:	2b60      	cmp	r3, #96	; 0x60
 80020be:	d050      	beq.n	8002162 <HAL_TIM_ConfigClockSource+0x11a>
 80020c0:	2b60      	cmp	r3, #96	; 0x60
 80020c2:	d877      	bhi.n	80021b4 <HAL_TIM_ConfigClockSource+0x16c>
 80020c4:	2b50      	cmp	r3, #80	; 0x50
 80020c6:	d03c      	beq.n	8002142 <HAL_TIM_ConfigClockSource+0xfa>
 80020c8:	2b50      	cmp	r3, #80	; 0x50
 80020ca:	d873      	bhi.n	80021b4 <HAL_TIM_ConfigClockSource+0x16c>
 80020cc:	2b40      	cmp	r3, #64	; 0x40
 80020ce:	d058      	beq.n	8002182 <HAL_TIM_ConfigClockSource+0x13a>
 80020d0:	2b40      	cmp	r3, #64	; 0x40
 80020d2:	d86f      	bhi.n	80021b4 <HAL_TIM_ConfigClockSource+0x16c>
 80020d4:	2b30      	cmp	r3, #48	; 0x30
 80020d6:	d064      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0x15a>
 80020d8:	2b30      	cmp	r3, #48	; 0x30
 80020da:	d86b      	bhi.n	80021b4 <HAL_TIM_ConfigClockSource+0x16c>
 80020dc:	2b20      	cmp	r3, #32
 80020de:	d060      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0x15a>
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d867      	bhi.n	80021b4 <HAL_TIM_ConfigClockSource+0x16c>
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d05c      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0x15a>
 80020e8:	2b10      	cmp	r3, #16
 80020ea:	d05a      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0x15a>
 80020ec:	e062      	b.n	80021b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	6899      	ldr	r1, [r3, #8]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f000 f997 	bl	8002430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002110:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	609a      	str	r2, [r3, #8]
      break;
 800211a:	e04f      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6899      	ldr	r1, [r3, #8]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f000 f980 	bl	8002430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800213e:	609a      	str	r2, [r3, #8]
      break;
 8002140:	e03c      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6859      	ldr	r1, [r3, #4]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	461a      	mov	r2, r3
 8002150:	f000 f8f4 	bl	800233c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2150      	movs	r1, #80	; 0x50
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f94d 	bl	80023fa <TIM_ITRx_SetConfig>
      break;
 8002160:	e02c      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	6859      	ldr	r1, [r3, #4]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	461a      	mov	r2, r3
 8002170:	f000 f913 	bl	800239a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2160      	movs	r1, #96	; 0x60
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f93d 	bl	80023fa <TIM_ITRx_SetConfig>
      break;
 8002180:	e01c      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	6859      	ldr	r1, [r3, #4]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	461a      	mov	r2, r3
 8002190:	f000 f8d4 	bl	800233c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2140      	movs	r1, #64	; 0x40
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f92d 	bl	80023fa <TIM_ITRx_SetConfig>
      break;
 80021a0:	e00c      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4619      	mov	r1, r3
 80021ac:	4610      	mov	r0, r2
 80021ae:	f000 f924 	bl	80023fa <TIM_ITRx_SetConfig>
      break;
 80021b2:	e003      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
      break;
 80021b8:	e000      	b.n	80021bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80021ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a34      	ldr	r2, [pc, #208]	; (8002320 <TIM_Base_SetConfig+0xe4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00f      	beq.n	8002274 <TIM_Base_SetConfig+0x38>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800225a:	d00b      	beq.n	8002274 <TIM_Base_SetConfig+0x38>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a31      	ldr	r2, [pc, #196]	; (8002324 <TIM_Base_SetConfig+0xe8>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d007      	beq.n	8002274 <TIM_Base_SetConfig+0x38>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a30      	ldr	r2, [pc, #192]	; (8002328 <TIM_Base_SetConfig+0xec>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d003      	beq.n	8002274 <TIM_Base_SetConfig+0x38>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a2f      	ldr	r2, [pc, #188]	; (800232c <TIM_Base_SetConfig+0xf0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d108      	bne.n	8002286 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a25      	ldr	r2, [pc, #148]	; (8002320 <TIM_Base_SetConfig+0xe4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01b      	beq.n	80022c6 <TIM_Base_SetConfig+0x8a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002294:	d017      	beq.n	80022c6 <TIM_Base_SetConfig+0x8a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a22      	ldr	r2, [pc, #136]	; (8002324 <TIM_Base_SetConfig+0xe8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d013      	beq.n	80022c6 <TIM_Base_SetConfig+0x8a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a21      	ldr	r2, [pc, #132]	; (8002328 <TIM_Base_SetConfig+0xec>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00f      	beq.n	80022c6 <TIM_Base_SetConfig+0x8a>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a20      	ldr	r2, [pc, #128]	; (800232c <TIM_Base_SetConfig+0xf0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00b      	beq.n	80022c6 <TIM_Base_SetConfig+0x8a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a1f      	ldr	r2, [pc, #124]	; (8002330 <TIM_Base_SetConfig+0xf4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d007      	beq.n	80022c6 <TIM_Base_SetConfig+0x8a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a1e      	ldr	r2, [pc, #120]	; (8002334 <TIM_Base_SetConfig+0xf8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d003      	beq.n	80022c6 <TIM_Base_SetConfig+0x8a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <TIM_Base_SetConfig+0xfc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d108      	bne.n	80022d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68fa      	ldr	r2, [r7, #12]
 80022ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a08      	ldr	r2, [pc, #32]	; (8002320 <TIM_Base_SetConfig+0xe4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d103      	bne.n	800230c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	615a      	str	r2, [r3, #20]
}
 8002312:	bf00      	nop
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40010000 	.word	0x40010000
 8002324:	40000400 	.word	0x40000400
 8002328:	40000800 	.word	0x40000800
 800232c:	40000c00 	.word	0x40000c00
 8002330:	40014000 	.word	0x40014000
 8002334:	40014400 	.word	0x40014400
 8002338:	40014800 	.word	0x40014800

0800233c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	f023 0201 	bic.w	r2, r3, #1
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f023 030a 	bic.w	r3, r3, #10
 8002378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4313      	orrs	r3, r2
 8002380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	621a      	str	r2, [r3, #32]
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800239a:	b480      	push	{r7}
 800239c:	b087      	sub	sp, #28
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	f023 0210 	bic.w	r2, r3, #16
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	031b      	lsls	r3, r3, #12
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	621a      	str	r2, [r3, #32]
}
 80023ee:	bf00      	nop
 80023f0:	371c      	adds	r7, #28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b085      	sub	sp, #20
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4313      	orrs	r3, r2
 8002418:	f043 0307 	orr.w	r3, r3, #7
 800241c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	609a      	str	r2, [r3, #8]
}
 8002424:	bf00      	nop
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
 800243c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800244a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	021a      	lsls	r2, r3, #8
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	431a      	orrs	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4313      	orrs	r3, r2
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	4313      	orrs	r3, r2
 800245c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	609a      	str	r2, [r3, #8]
}
 8002464:	bf00      	nop
 8002466:	371c      	adds	r7, #28
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002480:	2b01      	cmp	r3, #1
 8002482:	d101      	bne.n	8002488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002484:	2302      	movs	r3, #2
 8002486:	e050      	b.n	800252a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1c      	ldr	r2, [pc, #112]	; (8002538 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d018      	beq.n	80024fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d4:	d013      	beq.n	80024fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a18      	ldr	r2, [pc, #96]	; (800253c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d00e      	beq.n	80024fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a16      	ldr	r2, [pc, #88]	; (8002540 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d009      	beq.n	80024fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a15      	ldr	r2, [pc, #84]	; (8002544 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d004      	beq.n	80024fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a13      	ldr	r2, [pc, #76]	; (8002548 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d10c      	bne.n	8002518 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002504:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	4313      	orrs	r3, r2
 800250e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40010000 	.word	0x40010000
 800253c:	40000400 	.word	0x40000400
 8002540:	40000800 	.word	0x40000800
 8002544:	40000c00 	.word	0x40000c00
 8002548:	40014000 	.word	0x40014000

0800254c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <findslot>:
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <findslot+0x2c>)
 8002576:	b510      	push	{r4, lr}
 8002578:	4604      	mov	r4, r0
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	b118      	cbz	r0, 8002586 <findslot+0x12>
 800257e:	6a03      	ldr	r3, [r0, #32]
 8002580:	b90b      	cbnz	r3, 8002586 <findslot+0x12>
 8002582:	f000 fb25 	bl	8002bd0 <__sinit>
 8002586:	2c13      	cmp	r4, #19
 8002588:	d807      	bhi.n	800259a <findslot+0x26>
 800258a:	4806      	ldr	r0, [pc, #24]	; (80025a4 <findslot+0x30>)
 800258c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002590:	3201      	adds	r2, #1
 8002592:	d002      	beq.n	800259a <findslot+0x26>
 8002594:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002598:	bd10      	pop	{r4, pc}
 800259a:	2000      	movs	r0, #0
 800259c:	e7fc      	b.n	8002598 <findslot+0x24>
 800259e:	bf00      	nop
 80025a0:	2000006c 	.word	0x2000006c
 80025a4:	20000130 	.word	0x20000130

080025a8 <error>:
 80025a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025aa:	4604      	mov	r4, r0
 80025ac:	f000 fbea 	bl	8002d84 <__errno>
 80025b0:	2613      	movs	r6, #19
 80025b2:	4605      	mov	r5, r0
 80025b4:	2700      	movs	r7, #0
 80025b6:	4630      	mov	r0, r6
 80025b8:	4639      	mov	r1, r7
 80025ba:	beab      	bkpt	0x00ab
 80025bc:	4606      	mov	r6, r0
 80025be:	602e      	str	r6, [r5, #0]
 80025c0:	4620      	mov	r0, r4
 80025c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080025c4 <checkerror>:
 80025c4:	1c43      	adds	r3, r0, #1
 80025c6:	d101      	bne.n	80025cc <checkerror+0x8>
 80025c8:	f7ff bfee 	b.w	80025a8 <error>
 80025cc:	4770      	bx	lr

080025ce <_swiread>:
 80025ce:	b530      	push	{r4, r5, lr}
 80025d0:	b085      	sub	sp, #20
 80025d2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80025d6:	9203      	str	r2, [sp, #12]
 80025d8:	2406      	movs	r4, #6
 80025da:	ad01      	add	r5, sp, #4
 80025dc:	4620      	mov	r0, r4
 80025de:	4629      	mov	r1, r5
 80025e0:	beab      	bkpt	0x00ab
 80025e2:	4604      	mov	r4, r0
 80025e4:	4620      	mov	r0, r4
 80025e6:	f7ff ffed 	bl	80025c4 <checkerror>
 80025ea:	b005      	add	sp, #20
 80025ec:	bd30      	pop	{r4, r5, pc}

080025ee <_read>:
 80025ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80025f0:	4615      	mov	r5, r2
 80025f2:	9101      	str	r1, [sp, #4]
 80025f4:	f7ff ffbe 	bl	8002574 <findslot>
 80025f8:	9901      	ldr	r1, [sp, #4]
 80025fa:	4604      	mov	r4, r0
 80025fc:	b938      	cbnz	r0, 800260e <_read+0x20>
 80025fe:	f000 fbc1 	bl	8002d84 <__errno>
 8002602:	2309      	movs	r3, #9
 8002604:	6003      	str	r3, [r0, #0]
 8002606:	f04f 30ff 	mov.w	r0, #4294967295
 800260a:	b003      	add	sp, #12
 800260c:	bd30      	pop	{r4, r5, pc}
 800260e:	6800      	ldr	r0, [r0, #0]
 8002610:	462a      	mov	r2, r5
 8002612:	f7ff ffdc 	bl	80025ce <_swiread>
 8002616:	1c43      	adds	r3, r0, #1
 8002618:	d0f7      	beq.n	800260a <_read+0x1c>
 800261a:	6863      	ldr	r3, [r4, #4]
 800261c:	1a2a      	subs	r2, r5, r0
 800261e:	4413      	add	r3, r2
 8002620:	6063      	str	r3, [r4, #4]
 8002622:	4610      	mov	r0, r2
 8002624:	e7f1      	b.n	800260a <_read+0x1c>

08002626 <_swilseek>:
 8002626:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002628:	460c      	mov	r4, r1
 800262a:	4616      	mov	r6, r2
 800262c:	f7ff ffa2 	bl	8002574 <findslot>
 8002630:	4605      	mov	r5, r0
 8002632:	b940      	cbnz	r0, 8002646 <_swilseek+0x20>
 8002634:	f000 fba6 	bl	8002d84 <__errno>
 8002638:	2309      	movs	r3, #9
 800263a:	6003      	str	r3, [r0, #0]
 800263c:	f04f 34ff 	mov.w	r4, #4294967295
 8002640:	4620      	mov	r0, r4
 8002642:	b003      	add	sp, #12
 8002644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002646:	2e02      	cmp	r6, #2
 8002648:	d903      	bls.n	8002652 <_swilseek+0x2c>
 800264a:	f000 fb9b 	bl	8002d84 <__errno>
 800264e:	2316      	movs	r3, #22
 8002650:	e7f3      	b.n	800263a <_swilseek+0x14>
 8002652:	2e01      	cmp	r6, #1
 8002654:	d112      	bne.n	800267c <_swilseek+0x56>
 8002656:	6843      	ldr	r3, [r0, #4]
 8002658:	18e4      	adds	r4, r4, r3
 800265a:	d4f6      	bmi.n	800264a <_swilseek+0x24>
 800265c:	682b      	ldr	r3, [r5, #0]
 800265e:	260a      	movs	r6, #10
 8002660:	e9cd 3400 	strd	r3, r4, [sp]
 8002664:	466f      	mov	r7, sp
 8002666:	4630      	mov	r0, r6
 8002668:	4639      	mov	r1, r7
 800266a:	beab      	bkpt	0x00ab
 800266c:	4606      	mov	r6, r0
 800266e:	4630      	mov	r0, r6
 8002670:	f7ff ffa8 	bl	80025c4 <checkerror>
 8002674:	2800      	cmp	r0, #0
 8002676:	dbe1      	blt.n	800263c <_swilseek+0x16>
 8002678:	606c      	str	r4, [r5, #4]
 800267a:	e7e1      	b.n	8002640 <_swilseek+0x1a>
 800267c:	2e02      	cmp	r6, #2
 800267e:	6803      	ldr	r3, [r0, #0]
 8002680:	d1ec      	bne.n	800265c <_swilseek+0x36>
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	260c      	movs	r6, #12
 8002686:	466f      	mov	r7, sp
 8002688:	4630      	mov	r0, r6
 800268a:	4639      	mov	r1, r7
 800268c:	beab      	bkpt	0x00ab
 800268e:	4606      	mov	r6, r0
 8002690:	4630      	mov	r0, r6
 8002692:	f7ff ff97 	bl	80025c4 <checkerror>
 8002696:	1c43      	adds	r3, r0, #1
 8002698:	d0d0      	beq.n	800263c <_swilseek+0x16>
 800269a:	4404      	add	r4, r0
 800269c:	e7de      	b.n	800265c <_swilseek+0x36>

0800269e <_lseek>:
 800269e:	f7ff bfc2 	b.w	8002626 <_swilseek>

080026a2 <_swiwrite>:
 80026a2:	b530      	push	{r4, r5, lr}
 80026a4:	b085      	sub	sp, #20
 80026a6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80026aa:	9203      	str	r2, [sp, #12]
 80026ac:	2405      	movs	r4, #5
 80026ae:	ad01      	add	r5, sp, #4
 80026b0:	4620      	mov	r0, r4
 80026b2:	4629      	mov	r1, r5
 80026b4:	beab      	bkpt	0x00ab
 80026b6:	4604      	mov	r4, r0
 80026b8:	4620      	mov	r0, r4
 80026ba:	f7ff ff83 	bl	80025c4 <checkerror>
 80026be:	b005      	add	sp, #20
 80026c0:	bd30      	pop	{r4, r5, pc}

080026c2 <_write>:
 80026c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80026c4:	4615      	mov	r5, r2
 80026c6:	9101      	str	r1, [sp, #4]
 80026c8:	f7ff ff54 	bl	8002574 <findslot>
 80026cc:	9901      	ldr	r1, [sp, #4]
 80026ce:	4604      	mov	r4, r0
 80026d0:	b930      	cbnz	r0, 80026e0 <_write+0x1e>
 80026d2:	f000 fb57 	bl	8002d84 <__errno>
 80026d6:	2309      	movs	r3, #9
 80026d8:	6003      	str	r3, [r0, #0]
 80026da:	f04f 30ff 	mov.w	r0, #4294967295
 80026de:	e012      	b.n	8002706 <_write+0x44>
 80026e0:	6800      	ldr	r0, [r0, #0]
 80026e2:	462a      	mov	r2, r5
 80026e4:	f7ff ffdd 	bl	80026a2 <_swiwrite>
 80026e8:	2800      	cmp	r0, #0
 80026ea:	dbf6      	blt.n	80026da <_write+0x18>
 80026ec:	6862      	ldr	r2, [r4, #4]
 80026ee:	1a2b      	subs	r3, r5, r0
 80026f0:	441a      	add	r2, r3
 80026f2:	42a8      	cmp	r0, r5
 80026f4:	6062      	str	r2, [r4, #4]
 80026f6:	d105      	bne.n	8002704 <_write+0x42>
 80026f8:	2000      	movs	r0, #0
 80026fa:	b003      	add	sp, #12
 80026fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002700:	f7ff bf52 	b.w	80025a8 <error>
 8002704:	4618      	mov	r0, r3
 8002706:	b003      	add	sp, #12
 8002708:	bd30      	pop	{r4, r5, pc}

0800270a <_swiclose>:
 800270a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800270c:	2402      	movs	r4, #2
 800270e:	9001      	str	r0, [sp, #4]
 8002710:	ad01      	add	r5, sp, #4
 8002712:	4620      	mov	r0, r4
 8002714:	4629      	mov	r1, r5
 8002716:	beab      	bkpt	0x00ab
 8002718:	4604      	mov	r4, r0
 800271a:	4620      	mov	r0, r4
 800271c:	f7ff ff52 	bl	80025c4 <checkerror>
 8002720:	b003      	add	sp, #12
 8002722:	bd30      	pop	{r4, r5, pc}

08002724 <_close>:
 8002724:	b538      	push	{r3, r4, r5, lr}
 8002726:	4605      	mov	r5, r0
 8002728:	f7ff ff24 	bl	8002574 <findslot>
 800272c:	4604      	mov	r4, r0
 800272e:	b930      	cbnz	r0, 800273e <_close+0x1a>
 8002730:	f000 fb28 	bl	8002d84 <__errno>
 8002734:	2309      	movs	r3, #9
 8002736:	6003      	str	r3, [r0, #0]
 8002738:	f04f 30ff 	mov.w	r0, #4294967295
 800273c:	bd38      	pop	{r3, r4, r5, pc}
 800273e:	3d01      	subs	r5, #1
 8002740:	2d01      	cmp	r5, #1
 8002742:	d809      	bhi.n	8002758 <_close+0x34>
 8002744:	4b09      	ldr	r3, [pc, #36]	; (800276c <_close+0x48>)
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	429a      	cmp	r2, r3
 800274c:	d104      	bne.n	8002758 <_close+0x34>
 800274e:	f04f 33ff 	mov.w	r3, #4294967295
 8002752:	6003      	str	r3, [r0, #0]
 8002754:	2000      	movs	r0, #0
 8002756:	e7f1      	b.n	800273c <_close+0x18>
 8002758:	6820      	ldr	r0, [r4, #0]
 800275a:	f7ff ffd6 	bl	800270a <_swiclose>
 800275e:	2800      	cmp	r0, #0
 8002760:	d1ec      	bne.n	800273c <_close+0x18>
 8002762:	f04f 33ff 	mov.w	r3, #4294967295
 8002766:	6023      	str	r3, [r4, #0]
 8002768:	e7e8      	b.n	800273c <_close+0x18>
 800276a:	bf00      	nop
 800276c:	20000130 	.word	0x20000130

08002770 <_swistat>:
 8002770:	b570      	push	{r4, r5, r6, lr}
 8002772:	460c      	mov	r4, r1
 8002774:	f7ff fefe 	bl	8002574 <findslot>
 8002778:	4605      	mov	r5, r0
 800277a:	b930      	cbnz	r0, 800278a <_swistat+0x1a>
 800277c:	f000 fb02 	bl	8002d84 <__errno>
 8002780:	2309      	movs	r3, #9
 8002782:	6003      	str	r3, [r0, #0]
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	bd70      	pop	{r4, r5, r6, pc}
 800278a:	6863      	ldr	r3, [r4, #4]
 800278c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002790:	6063      	str	r3, [r4, #4]
 8002792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002796:	64a3      	str	r3, [r4, #72]	; 0x48
 8002798:	260c      	movs	r6, #12
 800279a:	4630      	mov	r0, r6
 800279c:	4629      	mov	r1, r5
 800279e:	beab      	bkpt	0x00ab
 80027a0:	4605      	mov	r5, r0
 80027a2:	4628      	mov	r0, r5
 80027a4:	f7ff ff0e 	bl	80025c4 <checkerror>
 80027a8:	1c43      	adds	r3, r0, #1
 80027aa:	bf1c      	itt	ne
 80027ac:	6120      	strne	r0, [r4, #16]
 80027ae:	2000      	movne	r0, #0
 80027b0:	e7ea      	b.n	8002788 <_swistat+0x18>

080027b2 <_fstat>:
 80027b2:	460b      	mov	r3, r1
 80027b4:	b510      	push	{r4, lr}
 80027b6:	2100      	movs	r1, #0
 80027b8:	4604      	mov	r4, r0
 80027ba:	2258      	movs	r2, #88	; 0x58
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 fa92 	bl	8002ce6 <memset>
 80027c2:	4601      	mov	r1, r0
 80027c4:	4620      	mov	r0, r4
 80027c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027ca:	f7ff bfd1 	b.w	8002770 <_swistat>

080027ce <_stat>:
 80027ce:	b538      	push	{r3, r4, r5, lr}
 80027d0:	460d      	mov	r5, r1
 80027d2:	4604      	mov	r4, r0
 80027d4:	2258      	movs	r2, #88	; 0x58
 80027d6:	2100      	movs	r1, #0
 80027d8:	4628      	mov	r0, r5
 80027da:	f000 fa84 	bl	8002ce6 <memset>
 80027de:	4620      	mov	r0, r4
 80027e0:	2100      	movs	r1, #0
 80027e2:	f000 f811 	bl	8002808 <_swiopen>
 80027e6:	1c43      	adds	r3, r0, #1
 80027e8:	4604      	mov	r4, r0
 80027ea:	d00b      	beq.n	8002804 <_stat+0x36>
 80027ec:	686b      	ldr	r3, [r5, #4]
 80027ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80027f2:	606b      	str	r3, [r5, #4]
 80027f4:	4629      	mov	r1, r5
 80027f6:	f7ff ffbb 	bl	8002770 <_swistat>
 80027fa:	4605      	mov	r5, r0
 80027fc:	4620      	mov	r0, r4
 80027fe:	f7ff ff91 	bl	8002724 <_close>
 8002802:	462c      	mov	r4, r5
 8002804:	4620      	mov	r0, r4
 8002806:	bd38      	pop	{r3, r4, r5, pc}

08002808 <_swiopen>:
 8002808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800280c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80028b8 <_swiopen+0xb0>
 8002810:	b097      	sub	sp, #92	; 0x5c
 8002812:	4607      	mov	r7, r0
 8002814:	460e      	mov	r6, r1
 8002816:	2500      	movs	r5, #0
 8002818:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 800281c:	1c61      	adds	r1, r4, #1
 800281e:	d037      	beq.n	8002890 <_swiopen+0x88>
 8002820:	3501      	adds	r5, #1
 8002822:	2d14      	cmp	r5, #20
 8002824:	d1f8      	bne.n	8002818 <_swiopen+0x10>
 8002826:	f000 faad 	bl	8002d84 <__errno>
 800282a:	2318      	movs	r3, #24
 800282c:	6003      	str	r3, [r0, #0]
 800282e:	f04f 34ff 	mov.w	r4, #4294967295
 8002832:	e03d      	b.n	80028b0 <_swiopen+0xa8>
 8002834:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002838:	f240 6301 	movw	r3, #1537	; 0x601
 800283c:	07b2      	lsls	r2, r6, #30
 800283e:	bf48      	it	mi
 8002840:	f044 0402 	orrmi.w	r4, r4, #2
 8002844:	421e      	tst	r6, r3
 8002846:	bf18      	it	ne
 8002848:	f044 0404 	orrne.w	r4, r4, #4
 800284c:	0733      	lsls	r3, r6, #28
 800284e:	bf48      	it	mi
 8002850:	f024 0404 	bicmi.w	r4, r4, #4
 8002854:	4638      	mov	r0, r7
 8002856:	bf48      	it	mi
 8002858:	f044 0408 	orrmi.w	r4, r4, #8
 800285c:	9700      	str	r7, [sp, #0]
 800285e:	f7fd fcbf 	bl	80001e0 <strlen>
 8002862:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002866:	2401      	movs	r4, #1
 8002868:	4620      	mov	r0, r4
 800286a:	4649      	mov	r1, r9
 800286c:	beab      	bkpt	0x00ab
 800286e:	4604      	mov	r4, r0
 8002870:	2c00      	cmp	r4, #0
 8002872:	db08      	blt.n	8002886 <_swiopen+0x7e>
 8002874:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002878:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800287c:	2300      	movs	r3, #0
 800287e:	f8c8 3004 	str.w	r3, [r8, #4]
 8002882:	462c      	mov	r4, r5
 8002884:	e014      	b.n	80028b0 <_swiopen+0xa8>
 8002886:	4620      	mov	r0, r4
 8002888:	f7ff fe8e 	bl	80025a8 <error>
 800288c:	4604      	mov	r4, r0
 800288e:	e00f      	b.n	80028b0 <_swiopen+0xa8>
 8002890:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002894:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002898:	46e9      	mov	r9, sp
 800289a:	d1cb      	bne.n	8002834 <_swiopen+0x2c>
 800289c:	4649      	mov	r1, r9
 800289e:	4638      	mov	r0, r7
 80028a0:	f7ff ff95 	bl	80027ce <_stat>
 80028a4:	3001      	adds	r0, #1
 80028a6:	d0c5      	beq.n	8002834 <_swiopen+0x2c>
 80028a8:	f000 fa6c 	bl	8002d84 <__errno>
 80028ac:	2311      	movs	r3, #17
 80028ae:	6003      	str	r3, [r0, #0]
 80028b0:	4620      	mov	r0, r4
 80028b2:	b017      	add	sp, #92	; 0x5c
 80028b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028b8:	20000130 	.word	0x20000130

080028bc <_get_semihosting_exts>:
 80028bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80028c0:	4606      	mov	r6, r0
 80028c2:	460f      	mov	r7, r1
 80028c4:	482a      	ldr	r0, [pc, #168]	; (8002970 <_get_semihosting_exts+0xb4>)
 80028c6:	2100      	movs	r1, #0
 80028c8:	4615      	mov	r5, r2
 80028ca:	f7ff ff9d 	bl	8002808 <_swiopen>
 80028ce:	462a      	mov	r2, r5
 80028d0:	4604      	mov	r4, r0
 80028d2:	2100      	movs	r1, #0
 80028d4:	4630      	mov	r0, r6
 80028d6:	f000 fa06 	bl	8002ce6 <memset>
 80028da:	1c63      	adds	r3, r4, #1
 80028dc:	d016      	beq.n	800290c <_get_semihosting_exts+0x50>
 80028de:	4620      	mov	r0, r4
 80028e0:	f7ff fe48 	bl	8002574 <findslot>
 80028e4:	f04f 080c 	mov.w	r8, #12
 80028e8:	4681      	mov	r9, r0
 80028ea:	4640      	mov	r0, r8
 80028ec:	4649      	mov	r1, r9
 80028ee:	beab      	bkpt	0x00ab
 80028f0:	4680      	mov	r8, r0
 80028f2:	4640      	mov	r0, r8
 80028f4:	f7ff fe66 	bl	80025c4 <checkerror>
 80028f8:	2803      	cmp	r0, #3
 80028fa:	dd02      	ble.n	8002902 <_get_semihosting_exts+0x46>
 80028fc:	1ec3      	subs	r3, r0, #3
 80028fe:	42ab      	cmp	r3, r5
 8002900:	dc08      	bgt.n	8002914 <_get_semihosting_exts+0x58>
 8002902:	4620      	mov	r0, r4
 8002904:	f7ff ff0e 	bl	8002724 <_close>
 8002908:	f04f 34ff 	mov.w	r4, #4294967295
 800290c:	4620      	mov	r0, r4
 800290e:	b003      	add	sp, #12
 8002910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002914:	2204      	movs	r2, #4
 8002916:	eb0d 0102 	add.w	r1, sp, r2
 800291a:	4620      	mov	r0, r4
 800291c:	f7ff fe67 	bl	80025ee <_read>
 8002920:	2803      	cmp	r0, #3
 8002922:	ddee      	ble.n	8002902 <_get_semihosting_exts+0x46>
 8002924:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002928:	2b53      	cmp	r3, #83	; 0x53
 800292a:	d1ea      	bne.n	8002902 <_get_semihosting_exts+0x46>
 800292c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002930:	2b48      	cmp	r3, #72	; 0x48
 8002932:	d1e6      	bne.n	8002902 <_get_semihosting_exts+0x46>
 8002934:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002938:	2b46      	cmp	r3, #70	; 0x46
 800293a:	d1e2      	bne.n	8002902 <_get_semihosting_exts+0x46>
 800293c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002940:	2b42      	cmp	r3, #66	; 0x42
 8002942:	d1de      	bne.n	8002902 <_get_semihosting_exts+0x46>
 8002944:	2201      	movs	r2, #1
 8002946:	4639      	mov	r1, r7
 8002948:	4620      	mov	r0, r4
 800294a:	f7ff fe6c 	bl	8002626 <_swilseek>
 800294e:	2800      	cmp	r0, #0
 8002950:	dbd7      	blt.n	8002902 <_get_semihosting_exts+0x46>
 8002952:	462a      	mov	r2, r5
 8002954:	4631      	mov	r1, r6
 8002956:	4620      	mov	r0, r4
 8002958:	f7ff fe49 	bl	80025ee <_read>
 800295c:	4605      	mov	r5, r0
 800295e:	4620      	mov	r0, r4
 8002960:	f7ff fee0 	bl	8002724 <_close>
 8002964:	4628      	mov	r0, r5
 8002966:	f7ff fe2d 	bl	80025c4 <checkerror>
 800296a:	4604      	mov	r4, r0
 800296c:	e7ce      	b.n	800290c <_get_semihosting_exts+0x50>
 800296e:	bf00      	nop
 8002970:	0800395c 	.word	0x0800395c

08002974 <initialise_semihosting_exts>:
 8002974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002976:	4d0a      	ldr	r5, [pc, #40]	; (80029a0 <initialise_semihosting_exts+0x2c>)
 8002978:	4c0a      	ldr	r4, [pc, #40]	; (80029a4 <initialise_semihosting_exts+0x30>)
 800297a:	2100      	movs	r1, #0
 800297c:	2201      	movs	r2, #1
 800297e:	a801      	add	r0, sp, #4
 8002980:	6029      	str	r1, [r5, #0]
 8002982:	6022      	str	r2, [r4, #0]
 8002984:	f7ff ff9a 	bl	80028bc <_get_semihosting_exts>
 8002988:	2800      	cmp	r0, #0
 800298a:	dd07      	ble.n	800299c <initialise_semihosting_exts+0x28>
 800298c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002990:	f003 0201 	and.w	r2, r3, #1
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	602a      	str	r2, [r5, #0]
 800299a:	6023      	str	r3, [r4, #0]
 800299c:	b003      	add	sp, #12
 800299e:	bd30      	pop	{r4, r5, pc}
 80029a0:	2000000c 	.word	0x2000000c
 80029a4:	20000010 	.word	0x20000010

080029a8 <_has_ext_stdout_stderr>:
 80029a8:	b510      	push	{r4, lr}
 80029aa:	4c04      	ldr	r4, [pc, #16]	; (80029bc <_has_ext_stdout_stderr+0x14>)
 80029ac:	6823      	ldr	r3, [r4, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	da01      	bge.n	80029b6 <_has_ext_stdout_stderr+0xe>
 80029b2:	f7ff ffdf 	bl	8002974 <initialise_semihosting_exts>
 80029b6:	6820      	ldr	r0, [r4, #0]
 80029b8:	bd10      	pop	{r4, pc}
 80029ba:	bf00      	nop
 80029bc:	20000010 	.word	0x20000010

080029c0 <initialise_monitor_handles>:
 80029c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029c4:	b085      	sub	sp, #20
 80029c6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002a78 <initialise_monitor_handles+0xb8>
 80029ca:	f8cd 9004 	str.w	r9, [sp, #4]
 80029ce:	2303      	movs	r3, #3
 80029d0:	2400      	movs	r4, #0
 80029d2:	9303      	str	r3, [sp, #12]
 80029d4:	af01      	add	r7, sp, #4
 80029d6:	9402      	str	r4, [sp, #8]
 80029d8:	2501      	movs	r5, #1
 80029da:	4628      	mov	r0, r5
 80029dc:	4639      	mov	r1, r7
 80029de:	beab      	bkpt	0x00ab
 80029e0:	4605      	mov	r5, r0
 80029e2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002a7c <initialise_monitor_handles+0xbc>
 80029e6:	4623      	mov	r3, r4
 80029e8:	4c20      	ldr	r4, [pc, #128]	; (8002a6c <initialise_monitor_handles+0xac>)
 80029ea:	f8c8 5000 	str.w	r5, [r8]
 80029ee:	f04f 32ff 	mov.w	r2, #4294967295
 80029f2:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80029f6:	3301      	adds	r3, #1
 80029f8:	2b14      	cmp	r3, #20
 80029fa:	d1fa      	bne.n	80029f2 <initialise_monitor_handles+0x32>
 80029fc:	f7ff ffd4 	bl	80029a8 <_has_ext_stdout_stderr>
 8002a00:	4d1b      	ldr	r5, [pc, #108]	; (8002a70 <initialise_monitor_handles+0xb0>)
 8002a02:	b1d0      	cbz	r0, 8002a3a <initialise_monitor_handles+0x7a>
 8002a04:	f04f 0a03 	mov.w	sl, #3
 8002a08:	2304      	movs	r3, #4
 8002a0a:	f8cd 9004 	str.w	r9, [sp, #4]
 8002a0e:	2601      	movs	r6, #1
 8002a10:	f8cd a00c 	str.w	sl, [sp, #12]
 8002a14:	9302      	str	r3, [sp, #8]
 8002a16:	4630      	mov	r0, r6
 8002a18:	4639      	mov	r1, r7
 8002a1a:	beab      	bkpt	0x00ab
 8002a1c:	4683      	mov	fp, r0
 8002a1e:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <initialise_monitor_handles+0xb4>)
 8002a20:	f8cd 9004 	str.w	r9, [sp, #4]
 8002a24:	f8c3 b000 	str.w	fp, [r3]
 8002a28:	2308      	movs	r3, #8
 8002a2a:	f8cd a00c 	str.w	sl, [sp, #12]
 8002a2e:	9302      	str	r3, [sp, #8]
 8002a30:	4630      	mov	r0, r6
 8002a32:	4639      	mov	r1, r7
 8002a34:	beab      	bkpt	0x00ab
 8002a36:	4606      	mov	r6, r0
 8002a38:	602e      	str	r6, [r5, #0]
 8002a3a:	682b      	ldr	r3, [r5, #0]
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	bf02      	ittt	eq
 8002a40:	4b0c      	ldreq	r3, [pc, #48]	; (8002a74 <initialise_monitor_handles+0xb4>)
 8002a42:	681b      	ldreq	r3, [r3, #0]
 8002a44:	602b      	streq	r3, [r5, #0]
 8002a46:	2600      	movs	r6, #0
 8002a48:	f8d8 3000 	ldr.w	r3, [r8]
 8002a4c:	6023      	str	r3, [r4, #0]
 8002a4e:	6066      	str	r6, [r4, #4]
 8002a50:	f7ff ffaa 	bl	80029a8 <_has_ext_stdout_stderr>
 8002a54:	b130      	cbz	r0, 8002a64 <initialise_monitor_handles+0xa4>
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <initialise_monitor_handles+0xb4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002a5e:	682b      	ldr	r3, [r5, #0]
 8002a60:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002a64:	b005      	add	sp, #20
 8002a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000130 	.word	0x20000130
 8002a70:	20000124 	.word	0x20000124
 8002a74:	2000012c 	.word	0x2000012c
 8002a78:	08003972 	.word	0x08003972
 8002a7c:	20000128 	.word	0x20000128

08002a80 <_isatty>:
 8002a80:	b570      	push	{r4, r5, r6, lr}
 8002a82:	f7ff fd77 	bl	8002574 <findslot>
 8002a86:	2509      	movs	r5, #9
 8002a88:	4604      	mov	r4, r0
 8002a8a:	b920      	cbnz	r0, 8002a96 <_isatty+0x16>
 8002a8c:	f000 f97a 	bl	8002d84 <__errno>
 8002a90:	6005      	str	r5, [r0, #0]
 8002a92:	4620      	mov	r0, r4
 8002a94:	bd70      	pop	{r4, r5, r6, pc}
 8002a96:	4628      	mov	r0, r5
 8002a98:	4621      	mov	r1, r4
 8002a9a:	beab      	bkpt	0x00ab
 8002a9c:	4604      	mov	r4, r0
 8002a9e:	2c01      	cmp	r4, #1
 8002aa0:	d0f7      	beq.n	8002a92 <_isatty+0x12>
 8002aa2:	f000 f96f 	bl	8002d84 <__errno>
 8002aa6:	2400      	movs	r4, #0
 8002aa8:	4605      	mov	r5, r0
 8002aaa:	2613      	movs	r6, #19
 8002aac:	4630      	mov	r0, r6
 8002aae:	4621      	mov	r1, r4
 8002ab0:	beab      	bkpt	0x00ab
 8002ab2:	4606      	mov	r6, r0
 8002ab4:	602e      	str	r6, [r5, #0]
 8002ab6:	e7ec      	b.n	8002a92 <_isatty+0x12>

08002ab8 <std>:
 8002ab8:	2300      	movs	r3, #0
 8002aba:	b510      	push	{r4, lr}
 8002abc:	4604      	mov	r4, r0
 8002abe:	e9c0 3300 	strd	r3, r3, [r0]
 8002ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ac6:	6083      	str	r3, [r0, #8]
 8002ac8:	8181      	strh	r1, [r0, #12]
 8002aca:	6643      	str	r3, [r0, #100]	; 0x64
 8002acc:	81c2      	strh	r2, [r0, #14]
 8002ace:	6183      	str	r3, [r0, #24]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	2208      	movs	r2, #8
 8002ad4:	305c      	adds	r0, #92	; 0x5c
 8002ad6:	f000 f906 	bl	8002ce6 <memset>
 8002ada:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <std+0x58>)
 8002adc:	6263      	str	r3, [r4, #36]	; 0x24
 8002ade:	4b0d      	ldr	r3, [pc, #52]	; (8002b14 <std+0x5c>)
 8002ae0:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <std+0x60>)
 8002ae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <std+0x64>)
 8002ae8:	6323      	str	r3, [r4, #48]	; 0x30
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <std+0x68>)
 8002aec:	6224      	str	r4, [r4, #32]
 8002aee:	429c      	cmp	r4, r3
 8002af0:	d006      	beq.n	8002b00 <std+0x48>
 8002af2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002af6:	4294      	cmp	r4, r2
 8002af8:	d002      	beq.n	8002b00 <std+0x48>
 8002afa:	33d0      	adds	r3, #208	; 0xd0
 8002afc:	429c      	cmp	r4, r3
 8002afe:	d105      	bne.n	8002b0c <std+0x54>
 8002b00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b08:	f000 b966 	b.w	8002dd8 <__retarget_lock_init_recursive>
 8002b0c:	bd10      	pop	{r4, pc}
 8002b0e:	bf00      	nop
 8002b10:	08002c61 	.word	0x08002c61
 8002b14:	08002c83 	.word	0x08002c83
 8002b18:	08002cbb 	.word	0x08002cbb
 8002b1c:	08002cdf 	.word	0x08002cdf
 8002b20:	200001d0 	.word	0x200001d0

08002b24 <stdio_exit_handler>:
 8002b24:	4a02      	ldr	r2, [pc, #8]	; (8002b30 <stdio_exit_handler+0xc>)
 8002b26:	4903      	ldr	r1, [pc, #12]	; (8002b34 <stdio_exit_handler+0x10>)
 8002b28:	4803      	ldr	r0, [pc, #12]	; (8002b38 <stdio_exit_handler+0x14>)
 8002b2a:	f000 b869 	b.w	8002c00 <_fwalk_sglue>
 8002b2e:	bf00      	nop
 8002b30:	20000014 	.word	0x20000014
 8002b34:	08003685 	.word	0x08003685
 8002b38:	20000020 	.word	0x20000020

08002b3c <cleanup_stdio>:
 8002b3c:	6841      	ldr	r1, [r0, #4]
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <cleanup_stdio+0x34>)
 8002b40:	4299      	cmp	r1, r3
 8002b42:	b510      	push	{r4, lr}
 8002b44:	4604      	mov	r4, r0
 8002b46:	d001      	beq.n	8002b4c <cleanup_stdio+0x10>
 8002b48:	f000 fd9c 	bl	8003684 <_fflush_r>
 8002b4c:	68a1      	ldr	r1, [r4, #8]
 8002b4e:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <cleanup_stdio+0x38>)
 8002b50:	4299      	cmp	r1, r3
 8002b52:	d002      	beq.n	8002b5a <cleanup_stdio+0x1e>
 8002b54:	4620      	mov	r0, r4
 8002b56:	f000 fd95 	bl	8003684 <_fflush_r>
 8002b5a:	68e1      	ldr	r1, [r4, #12]
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <cleanup_stdio+0x3c>)
 8002b5e:	4299      	cmp	r1, r3
 8002b60:	d004      	beq.n	8002b6c <cleanup_stdio+0x30>
 8002b62:	4620      	mov	r0, r4
 8002b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b68:	f000 bd8c 	b.w	8003684 <_fflush_r>
 8002b6c:	bd10      	pop	{r4, pc}
 8002b6e:	bf00      	nop
 8002b70:	200001d0 	.word	0x200001d0
 8002b74:	20000238 	.word	0x20000238
 8002b78:	200002a0 	.word	0x200002a0

08002b7c <global_stdio_init.part.0>:
 8002b7c:	b510      	push	{r4, lr}
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <global_stdio_init.part.0+0x30>)
 8002b80:	4c0b      	ldr	r4, [pc, #44]	; (8002bb0 <global_stdio_init.part.0+0x34>)
 8002b82:	4a0c      	ldr	r2, [pc, #48]	; (8002bb4 <global_stdio_init.part.0+0x38>)
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	4620      	mov	r0, r4
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2104      	movs	r1, #4
 8002b8c:	f7ff ff94 	bl	8002ab8 <std>
 8002b90:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002b94:	2201      	movs	r2, #1
 8002b96:	2109      	movs	r1, #9
 8002b98:	f7ff ff8e 	bl	8002ab8 <std>
 8002b9c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ba6:	2112      	movs	r1, #18
 8002ba8:	f7ff bf86 	b.w	8002ab8 <std>
 8002bac:	20000308 	.word	0x20000308
 8002bb0:	200001d0 	.word	0x200001d0
 8002bb4:	08002b25 	.word	0x08002b25

08002bb8 <__sfp_lock_acquire>:
 8002bb8:	4801      	ldr	r0, [pc, #4]	; (8002bc0 <__sfp_lock_acquire+0x8>)
 8002bba:	f000 b90e 	b.w	8002dda <__retarget_lock_acquire_recursive>
 8002bbe:	bf00      	nop
 8002bc0:	20000311 	.word	0x20000311

08002bc4 <__sfp_lock_release>:
 8002bc4:	4801      	ldr	r0, [pc, #4]	; (8002bcc <__sfp_lock_release+0x8>)
 8002bc6:	f000 b909 	b.w	8002ddc <__retarget_lock_release_recursive>
 8002bca:	bf00      	nop
 8002bcc:	20000311 	.word	0x20000311

08002bd0 <__sinit>:
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	f7ff fff0 	bl	8002bb8 <__sfp_lock_acquire>
 8002bd8:	6a23      	ldr	r3, [r4, #32]
 8002bda:	b11b      	cbz	r3, 8002be4 <__sinit+0x14>
 8002bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002be0:	f7ff bff0 	b.w	8002bc4 <__sfp_lock_release>
 8002be4:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <__sinit+0x28>)
 8002be6:	6223      	str	r3, [r4, #32]
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <__sinit+0x2c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1f5      	bne.n	8002bdc <__sinit+0xc>
 8002bf0:	f7ff ffc4 	bl	8002b7c <global_stdio_init.part.0>
 8002bf4:	e7f2      	b.n	8002bdc <__sinit+0xc>
 8002bf6:	bf00      	nop
 8002bf8:	08002b3d 	.word	0x08002b3d
 8002bfc:	20000308 	.word	0x20000308

08002c00 <_fwalk_sglue>:
 8002c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c04:	4607      	mov	r7, r0
 8002c06:	4688      	mov	r8, r1
 8002c08:	4614      	mov	r4, r2
 8002c0a:	2600      	movs	r6, #0
 8002c0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c10:	f1b9 0901 	subs.w	r9, r9, #1
 8002c14:	d505      	bpl.n	8002c22 <_fwalk_sglue+0x22>
 8002c16:	6824      	ldr	r4, [r4, #0]
 8002c18:	2c00      	cmp	r4, #0
 8002c1a:	d1f7      	bne.n	8002c0c <_fwalk_sglue+0xc>
 8002c1c:	4630      	mov	r0, r6
 8002c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c22:	89ab      	ldrh	r3, [r5, #12]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d907      	bls.n	8002c38 <_fwalk_sglue+0x38>
 8002c28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	d003      	beq.n	8002c38 <_fwalk_sglue+0x38>
 8002c30:	4629      	mov	r1, r5
 8002c32:	4638      	mov	r0, r7
 8002c34:	47c0      	blx	r8
 8002c36:	4306      	orrs	r6, r0
 8002c38:	3568      	adds	r5, #104	; 0x68
 8002c3a:	e7e9      	b.n	8002c10 <_fwalk_sglue+0x10>

08002c3c <iprintf>:
 8002c3c:	b40f      	push	{r0, r1, r2, r3}
 8002c3e:	b507      	push	{r0, r1, r2, lr}
 8002c40:	4906      	ldr	r1, [pc, #24]	; (8002c5c <iprintf+0x20>)
 8002c42:	ab04      	add	r3, sp, #16
 8002c44:	6808      	ldr	r0, [r1, #0]
 8002c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c4a:	6881      	ldr	r1, [r0, #8]
 8002c4c:	9301      	str	r3, [sp, #4]
 8002c4e:	f000 f9e9 	bl	8003024 <_vfiprintf_r>
 8002c52:	b003      	add	sp, #12
 8002c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c58:	b004      	add	sp, #16
 8002c5a:	4770      	bx	lr
 8002c5c:	2000006c 	.word	0x2000006c

08002c60 <__sread>:
 8002c60:	b510      	push	{r4, lr}
 8002c62:	460c      	mov	r4, r1
 8002c64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c68:	f000 f868 	bl	8002d3c <_read_r>
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	bfab      	itete	ge
 8002c70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002c72:	89a3      	ldrhlt	r3, [r4, #12]
 8002c74:	181b      	addge	r3, r3, r0
 8002c76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c7a:	bfac      	ite	ge
 8002c7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c7e:	81a3      	strhlt	r3, [r4, #12]
 8002c80:	bd10      	pop	{r4, pc}

08002c82 <__swrite>:
 8002c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c86:	461f      	mov	r7, r3
 8002c88:	898b      	ldrh	r3, [r1, #12]
 8002c8a:	05db      	lsls	r3, r3, #23
 8002c8c:	4605      	mov	r5, r0
 8002c8e:	460c      	mov	r4, r1
 8002c90:	4616      	mov	r6, r2
 8002c92:	d505      	bpl.n	8002ca0 <__swrite+0x1e>
 8002c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c98:	2302      	movs	r3, #2
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f000 f83c 	bl	8002d18 <_lseek_r>
 8002ca0:	89a3      	ldrh	r3, [r4, #12]
 8002ca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002caa:	81a3      	strh	r3, [r4, #12]
 8002cac:	4632      	mov	r2, r6
 8002cae:	463b      	mov	r3, r7
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002cb6:	f000 b853 	b.w	8002d60 <_write_r>

08002cba <__sseek>:
 8002cba:	b510      	push	{r4, lr}
 8002cbc:	460c      	mov	r4, r1
 8002cbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cc2:	f000 f829 	bl	8002d18 <_lseek_r>
 8002cc6:	1c43      	adds	r3, r0, #1
 8002cc8:	89a3      	ldrh	r3, [r4, #12]
 8002cca:	bf15      	itete	ne
 8002ccc:	6560      	strne	r0, [r4, #84]	; 0x54
 8002cce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002cd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002cd6:	81a3      	strheq	r3, [r4, #12]
 8002cd8:	bf18      	it	ne
 8002cda:	81a3      	strhne	r3, [r4, #12]
 8002cdc:	bd10      	pop	{r4, pc}

08002cde <__sclose>:
 8002cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ce2:	f000 b809 	b.w	8002cf8 <_close_r>

08002ce6 <memset>:
 8002ce6:	4402      	add	r2, r0
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d100      	bne.n	8002cf0 <memset+0xa>
 8002cee:	4770      	bx	lr
 8002cf0:	f803 1b01 	strb.w	r1, [r3], #1
 8002cf4:	e7f9      	b.n	8002cea <memset+0x4>
	...

08002cf8 <_close_r>:
 8002cf8:	b538      	push	{r3, r4, r5, lr}
 8002cfa:	4d06      	ldr	r5, [pc, #24]	; (8002d14 <_close_r+0x1c>)
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	4604      	mov	r4, r0
 8002d00:	4608      	mov	r0, r1
 8002d02:	602b      	str	r3, [r5, #0]
 8002d04:	f7ff fd0e 	bl	8002724 <_close>
 8002d08:	1c43      	adds	r3, r0, #1
 8002d0a:	d102      	bne.n	8002d12 <_close_r+0x1a>
 8002d0c:	682b      	ldr	r3, [r5, #0]
 8002d0e:	b103      	cbz	r3, 8002d12 <_close_r+0x1a>
 8002d10:	6023      	str	r3, [r4, #0]
 8002d12:	bd38      	pop	{r3, r4, r5, pc}
 8002d14:	2000030c 	.word	0x2000030c

08002d18 <_lseek_r>:
 8002d18:	b538      	push	{r3, r4, r5, lr}
 8002d1a:	4d07      	ldr	r5, [pc, #28]	; (8002d38 <_lseek_r+0x20>)
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	4608      	mov	r0, r1
 8002d20:	4611      	mov	r1, r2
 8002d22:	2200      	movs	r2, #0
 8002d24:	602a      	str	r2, [r5, #0]
 8002d26:	461a      	mov	r2, r3
 8002d28:	f7ff fcb9 	bl	800269e <_lseek>
 8002d2c:	1c43      	adds	r3, r0, #1
 8002d2e:	d102      	bne.n	8002d36 <_lseek_r+0x1e>
 8002d30:	682b      	ldr	r3, [r5, #0]
 8002d32:	b103      	cbz	r3, 8002d36 <_lseek_r+0x1e>
 8002d34:	6023      	str	r3, [r4, #0]
 8002d36:	bd38      	pop	{r3, r4, r5, pc}
 8002d38:	2000030c 	.word	0x2000030c

08002d3c <_read_r>:
 8002d3c:	b538      	push	{r3, r4, r5, lr}
 8002d3e:	4d07      	ldr	r5, [pc, #28]	; (8002d5c <_read_r+0x20>)
 8002d40:	4604      	mov	r4, r0
 8002d42:	4608      	mov	r0, r1
 8002d44:	4611      	mov	r1, r2
 8002d46:	2200      	movs	r2, #0
 8002d48:	602a      	str	r2, [r5, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	f7ff fc4f 	bl	80025ee <_read>
 8002d50:	1c43      	adds	r3, r0, #1
 8002d52:	d102      	bne.n	8002d5a <_read_r+0x1e>
 8002d54:	682b      	ldr	r3, [r5, #0]
 8002d56:	b103      	cbz	r3, 8002d5a <_read_r+0x1e>
 8002d58:	6023      	str	r3, [r4, #0]
 8002d5a:	bd38      	pop	{r3, r4, r5, pc}
 8002d5c:	2000030c 	.word	0x2000030c

08002d60 <_write_r>:
 8002d60:	b538      	push	{r3, r4, r5, lr}
 8002d62:	4d07      	ldr	r5, [pc, #28]	; (8002d80 <_write_r+0x20>)
 8002d64:	4604      	mov	r4, r0
 8002d66:	4608      	mov	r0, r1
 8002d68:	4611      	mov	r1, r2
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	602a      	str	r2, [r5, #0]
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f7ff fca7 	bl	80026c2 <_write>
 8002d74:	1c43      	adds	r3, r0, #1
 8002d76:	d102      	bne.n	8002d7e <_write_r+0x1e>
 8002d78:	682b      	ldr	r3, [r5, #0]
 8002d7a:	b103      	cbz	r3, 8002d7e <_write_r+0x1e>
 8002d7c:	6023      	str	r3, [r4, #0]
 8002d7e:	bd38      	pop	{r3, r4, r5, pc}
 8002d80:	2000030c 	.word	0x2000030c

08002d84 <__errno>:
 8002d84:	4b01      	ldr	r3, [pc, #4]	; (8002d8c <__errno+0x8>)
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	2000006c 	.word	0x2000006c

08002d90 <__libc_init_array>:
 8002d90:	b570      	push	{r4, r5, r6, lr}
 8002d92:	4d0d      	ldr	r5, [pc, #52]	; (8002dc8 <__libc_init_array+0x38>)
 8002d94:	4c0d      	ldr	r4, [pc, #52]	; (8002dcc <__libc_init_array+0x3c>)
 8002d96:	1b64      	subs	r4, r4, r5
 8002d98:	10a4      	asrs	r4, r4, #2
 8002d9a:	2600      	movs	r6, #0
 8002d9c:	42a6      	cmp	r6, r4
 8002d9e:	d109      	bne.n	8002db4 <__libc_init_array+0x24>
 8002da0:	4d0b      	ldr	r5, [pc, #44]	; (8002dd0 <__libc_init_array+0x40>)
 8002da2:	4c0c      	ldr	r4, [pc, #48]	; (8002dd4 <__libc_init_array+0x44>)
 8002da4:	f000 fdc0 	bl	8003928 <_init>
 8002da8:	1b64      	subs	r4, r4, r5
 8002daa:	10a4      	asrs	r4, r4, #2
 8002dac:	2600      	movs	r6, #0
 8002dae:	42a6      	cmp	r6, r4
 8002db0:	d105      	bne.n	8002dbe <__libc_init_array+0x2e>
 8002db2:	bd70      	pop	{r4, r5, r6, pc}
 8002db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db8:	4798      	blx	r3
 8002dba:	3601      	adds	r6, #1
 8002dbc:	e7ee      	b.n	8002d9c <__libc_init_array+0xc>
 8002dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc2:	4798      	blx	r3
 8002dc4:	3601      	adds	r6, #1
 8002dc6:	e7f2      	b.n	8002dae <__libc_init_array+0x1e>
 8002dc8:	080039b4 	.word	0x080039b4
 8002dcc:	080039b4 	.word	0x080039b4
 8002dd0:	080039b4 	.word	0x080039b4
 8002dd4:	080039b8 	.word	0x080039b8

08002dd8 <__retarget_lock_init_recursive>:
 8002dd8:	4770      	bx	lr

08002dda <__retarget_lock_acquire_recursive>:
 8002dda:	4770      	bx	lr

08002ddc <__retarget_lock_release_recursive>:
 8002ddc:	4770      	bx	lr
	...

08002de0 <_free_r>:
 8002de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002de2:	2900      	cmp	r1, #0
 8002de4:	d044      	beq.n	8002e70 <_free_r+0x90>
 8002de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dea:	9001      	str	r0, [sp, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f1a1 0404 	sub.w	r4, r1, #4
 8002df2:	bfb8      	it	lt
 8002df4:	18e4      	addlt	r4, r4, r3
 8002df6:	f000 f8df 	bl	8002fb8 <__malloc_lock>
 8002dfa:	4a1e      	ldr	r2, [pc, #120]	; (8002e74 <_free_r+0x94>)
 8002dfc:	9801      	ldr	r0, [sp, #4]
 8002dfe:	6813      	ldr	r3, [r2, #0]
 8002e00:	b933      	cbnz	r3, 8002e10 <_free_r+0x30>
 8002e02:	6063      	str	r3, [r4, #4]
 8002e04:	6014      	str	r4, [r2, #0]
 8002e06:	b003      	add	sp, #12
 8002e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e0c:	f000 b8da 	b.w	8002fc4 <__malloc_unlock>
 8002e10:	42a3      	cmp	r3, r4
 8002e12:	d908      	bls.n	8002e26 <_free_r+0x46>
 8002e14:	6825      	ldr	r5, [r4, #0]
 8002e16:	1961      	adds	r1, r4, r5
 8002e18:	428b      	cmp	r3, r1
 8002e1a:	bf01      	itttt	eq
 8002e1c:	6819      	ldreq	r1, [r3, #0]
 8002e1e:	685b      	ldreq	r3, [r3, #4]
 8002e20:	1949      	addeq	r1, r1, r5
 8002e22:	6021      	streq	r1, [r4, #0]
 8002e24:	e7ed      	b.n	8002e02 <_free_r+0x22>
 8002e26:	461a      	mov	r2, r3
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	b10b      	cbz	r3, 8002e30 <_free_r+0x50>
 8002e2c:	42a3      	cmp	r3, r4
 8002e2e:	d9fa      	bls.n	8002e26 <_free_r+0x46>
 8002e30:	6811      	ldr	r1, [r2, #0]
 8002e32:	1855      	adds	r5, r2, r1
 8002e34:	42a5      	cmp	r5, r4
 8002e36:	d10b      	bne.n	8002e50 <_free_r+0x70>
 8002e38:	6824      	ldr	r4, [r4, #0]
 8002e3a:	4421      	add	r1, r4
 8002e3c:	1854      	adds	r4, r2, r1
 8002e3e:	42a3      	cmp	r3, r4
 8002e40:	6011      	str	r1, [r2, #0]
 8002e42:	d1e0      	bne.n	8002e06 <_free_r+0x26>
 8002e44:	681c      	ldr	r4, [r3, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	6053      	str	r3, [r2, #4]
 8002e4a:	440c      	add	r4, r1
 8002e4c:	6014      	str	r4, [r2, #0]
 8002e4e:	e7da      	b.n	8002e06 <_free_r+0x26>
 8002e50:	d902      	bls.n	8002e58 <_free_r+0x78>
 8002e52:	230c      	movs	r3, #12
 8002e54:	6003      	str	r3, [r0, #0]
 8002e56:	e7d6      	b.n	8002e06 <_free_r+0x26>
 8002e58:	6825      	ldr	r5, [r4, #0]
 8002e5a:	1961      	adds	r1, r4, r5
 8002e5c:	428b      	cmp	r3, r1
 8002e5e:	bf04      	itt	eq
 8002e60:	6819      	ldreq	r1, [r3, #0]
 8002e62:	685b      	ldreq	r3, [r3, #4]
 8002e64:	6063      	str	r3, [r4, #4]
 8002e66:	bf04      	itt	eq
 8002e68:	1949      	addeq	r1, r1, r5
 8002e6a:	6021      	streq	r1, [r4, #0]
 8002e6c:	6054      	str	r4, [r2, #4]
 8002e6e:	e7ca      	b.n	8002e06 <_free_r+0x26>
 8002e70:	b003      	add	sp, #12
 8002e72:	bd30      	pop	{r4, r5, pc}
 8002e74:	20000314 	.word	0x20000314

08002e78 <sbrk_aligned>:
 8002e78:	b570      	push	{r4, r5, r6, lr}
 8002e7a:	4e0e      	ldr	r6, [pc, #56]	; (8002eb4 <sbrk_aligned+0x3c>)
 8002e7c:	460c      	mov	r4, r1
 8002e7e:	6831      	ldr	r1, [r6, #0]
 8002e80:	4605      	mov	r5, r0
 8002e82:	b911      	cbnz	r1, 8002e8a <sbrk_aligned+0x12>
 8002e84:	f000 fcbc 	bl	8003800 <_sbrk_r>
 8002e88:	6030      	str	r0, [r6, #0]
 8002e8a:	4621      	mov	r1, r4
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	f000 fcb7 	bl	8003800 <_sbrk_r>
 8002e92:	1c43      	adds	r3, r0, #1
 8002e94:	d00a      	beq.n	8002eac <sbrk_aligned+0x34>
 8002e96:	1cc4      	adds	r4, r0, #3
 8002e98:	f024 0403 	bic.w	r4, r4, #3
 8002e9c:	42a0      	cmp	r0, r4
 8002e9e:	d007      	beq.n	8002eb0 <sbrk_aligned+0x38>
 8002ea0:	1a21      	subs	r1, r4, r0
 8002ea2:	4628      	mov	r0, r5
 8002ea4:	f000 fcac 	bl	8003800 <_sbrk_r>
 8002ea8:	3001      	adds	r0, #1
 8002eaa:	d101      	bne.n	8002eb0 <sbrk_aligned+0x38>
 8002eac:	f04f 34ff 	mov.w	r4, #4294967295
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	bd70      	pop	{r4, r5, r6, pc}
 8002eb4:	20000318 	.word	0x20000318

08002eb8 <_malloc_r>:
 8002eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ebc:	1ccd      	adds	r5, r1, #3
 8002ebe:	f025 0503 	bic.w	r5, r5, #3
 8002ec2:	3508      	adds	r5, #8
 8002ec4:	2d0c      	cmp	r5, #12
 8002ec6:	bf38      	it	cc
 8002ec8:	250c      	movcc	r5, #12
 8002eca:	2d00      	cmp	r5, #0
 8002ecc:	4607      	mov	r7, r0
 8002ece:	db01      	blt.n	8002ed4 <_malloc_r+0x1c>
 8002ed0:	42a9      	cmp	r1, r5
 8002ed2:	d905      	bls.n	8002ee0 <_malloc_r+0x28>
 8002ed4:	230c      	movs	r3, #12
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	2600      	movs	r6, #0
 8002eda:	4630      	mov	r0, r6
 8002edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ee0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002fb4 <_malloc_r+0xfc>
 8002ee4:	f000 f868 	bl	8002fb8 <__malloc_lock>
 8002ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8002eec:	461c      	mov	r4, r3
 8002eee:	bb5c      	cbnz	r4, 8002f48 <_malloc_r+0x90>
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	4638      	mov	r0, r7
 8002ef4:	f7ff ffc0 	bl	8002e78 <sbrk_aligned>
 8002ef8:	1c43      	adds	r3, r0, #1
 8002efa:	4604      	mov	r4, r0
 8002efc:	d155      	bne.n	8002faa <_malloc_r+0xf2>
 8002efe:	f8d8 4000 	ldr.w	r4, [r8]
 8002f02:	4626      	mov	r6, r4
 8002f04:	2e00      	cmp	r6, #0
 8002f06:	d145      	bne.n	8002f94 <_malloc_r+0xdc>
 8002f08:	2c00      	cmp	r4, #0
 8002f0a:	d048      	beq.n	8002f9e <_malloc_r+0xe6>
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	4631      	mov	r1, r6
 8002f10:	4638      	mov	r0, r7
 8002f12:	eb04 0903 	add.w	r9, r4, r3
 8002f16:	f000 fc73 	bl	8003800 <_sbrk_r>
 8002f1a:	4581      	cmp	r9, r0
 8002f1c:	d13f      	bne.n	8002f9e <_malloc_r+0xe6>
 8002f1e:	6821      	ldr	r1, [r4, #0]
 8002f20:	1a6d      	subs	r5, r5, r1
 8002f22:	4629      	mov	r1, r5
 8002f24:	4638      	mov	r0, r7
 8002f26:	f7ff ffa7 	bl	8002e78 <sbrk_aligned>
 8002f2a:	3001      	adds	r0, #1
 8002f2c:	d037      	beq.n	8002f9e <_malloc_r+0xe6>
 8002f2e:	6823      	ldr	r3, [r4, #0]
 8002f30:	442b      	add	r3, r5
 8002f32:	6023      	str	r3, [r4, #0]
 8002f34:	f8d8 3000 	ldr.w	r3, [r8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d038      	beq.n	8002fae <_malloc_r+0xf6>
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	42a2      	cmp	r2, r4
 8002f40:	d12b      	bne.n	8002f9a <_malloc_r+0xe2>
 8002f42:	2200      	movs	r2, #0
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	e00f      	b.n	8002f68 <_malloc_r+0xb0>
 8002f48:	6822      	ldr	r2, [r4, #0]
 8002f4a:	1b52      	subs	r2, r2, r5
 8002f4c:	d41f      	bmi.n	8002f8e <_malloc_r+0xd6>
 8002f4e:	2a0b      	cmp	r2, #11
 8002f50:	d917      	bls.n	8002f82 <_malloc_r+0xca>
 8002f52:	1961      	adds	r1, r4, r5
 8002f54:	42a3      	cmp	r3, r4
 8002f56:	6025      	str	r5, [r4, #0]
 8002f58:	bf18      	it	ne
 8002f5a:	6059      	strne	r1, [r3, #4]
 8002f5c:	6863      	ldr	r3, [r4, #4]
 8002f5e:	bf08      	it	eq
 8002f60:	f8c8 1000 	streq.w	r1, [r8]
 8002f64:	5162      	str	r2, [r4, r5]
 8002f66:	604b      	str	r3, [r1, #4]
 8002f68:	4638      	mov	r0, r7
 8002f6a:	f104 060b 	add.w	r6, r4, #11
 8002f6e:	f000 f829 	bl	8002fc4 <__malloc_unlock>
 8002f72:	f026 0607 	bic.w	r6, r6, #7
 8002f76:	1d23      	adds	r3, r4, #4
 8002f78:	1af2      	subs	r2, r6, r3
 8002f7a:	d0ae      	beq.n	8002eda <_malloc_r+0x22>
 8002f7c:	1b9b      	subs	r3, r3, r6
 8002f7e:	50a3      	str	r3, [r4, r2]
 8002f80:	e7ab      	b.n	8002eda <_malloc_r+0x22>
 8002f82:	42a3      	cmp	r3, r4
 8002f84:	6862      	ldr	r2, [r4, #4]
 8002f86:	d1dd      	bne.n	8002f44 <_malloc_r+0x8c>
 8002f88:	f8c8 2000 	str.w	r2, [r8]
 8002f8c:	e7ec      	b.n	8002f68 <_malloc_r+0xb0>
 8002f8e:	4623      	mov	r3, r4
 8002f90:	6864      	ldr	r4, [r4, #4]
 8002f92:	e7ac      	b.n	8002eee <_malloc_r+0x36>
 8002f94:	4634      	mov	r4, r6
 8002f96:	6876      	ldr	r6, [r6, #4]
 8002f98:	e7b4      	b.n	8002f04 <_malloc_r+0x4c>
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	e7cc      	b.n	8002f38 <_malloc_r+0x80>
 8002f9e:	230c      	movs	r3, #12
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	4638      	mov	r0, r7
 8002fa4:	f000 f80e 	bl	8002fc4 <__malloc_unlock>
 8002fa8:	e797      	b.n	8002eda <_malloc_r+0x22>
 8002faa:	6025      	str	r5, [r4, #0]
 8002fac:	e7dc      	b.n	8002f68 <_malloc_r+0xb0>
 8002fae:	605b      	str	r3, [r3, #4]
 8002fb0:	deff      	udf	#255	; 0xff
 8002fb2:	bf00      	nop
 8002fb4:	20000314 	.word	0x20000314

08002fb8 <__malloc_lock>:
 8002fb8:	4801      	ldr	r0, [pc, #4]	; (8002fc0 <__malloc_lock+0x8>)
 8002fba:	f7ff bf0e 	b.w	8002dda <__retarget_lock_acquire_recursive>
 8002fbe:	bf00      	nop
 8002fc0:	20000310 	.word	0x20000310

08002fc4 <__malloc_unlock>:
 8002fc4:	4801      	ldr	r0, [pc, #4]	; (8002fcc <__malloc_unlock+0x8>)
 8002fc6:	f7ff bf09 	b.w	8002ddc <__retarget_lock_release_recursive>
 8002fca:	bf00      	nop
 8002fcc:	20000310 	.word	0x20000310

08002fd0 <__sfputc_r>:
 8002fd0:	6893      	ldr	r3, [r2, #8]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	b410      	push	{r4}
 8002fd8:	6093      	str	r3, [r2, #8]
 8002fda:	da08      	bge.n	8002fee <__sfputc_r+0x1e>
 8002fdc:	6994      	ldr	r4, [r2, #24]
 8002fde:	42a3      	cmp	r3, r4
 8002fe0:	db01      	blt.n	8002fe6 <__sfputc_r+0x16>
 8002fe2:	290a      	cmp	r1, #10
 8002fe4:	d103      	bne.n	8002fee <__sfputc_r+0x1e>
 8002fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fea:	f000 bb73 	b.w	80036d4 <__swbuf_r>
 8002fee:	6813      	ldr	r3, [r2, #0]
 8002ff0:	1c58      	adds	r0, r3, #1
 8002ff2:	6010      	str	r0, [r2, #0]
 8002ff4:	7019      	strb	r1, [r3, #0]
 8002ff6:	4608      	mov	r0, r1
 8002ff8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <__sfputs_r>:
 8002ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003000:	4606      	mov	r6, r0
 8003002:	460f      	mov	r7, r1
 8003004:	4614      	mov	r4, r2
 8003006:	18d5      	adds	r5, r2, r3
 8003008:	42ac      	cmp	r4, r5
 800300a:	d101      	bne.n	8003010 <__sfputs_r+0x12>
 800300c:	2000      	movs	r0, #0
 800300e:	e007      	b.n	8003020 <__sfputs_r+0x22>
 8003010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003014:	463a      	mov	r2, r7
 8003016:	4630      	mov	r0, r6
 8003018:	f7ff ffda 	bl	8002fd0 <__sfputc_r>
 800301c:	1c43      	adds	r3, r0, #1
 800301e:	d1f3      	bne.n	8003008 <__sfputs_r+0xa>
 8003020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003024 <_vfiprintf_r>:
 8003024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003028:	460d      	mov	r5, r1
 800302a:	b09d      	sub	sp, #116	; 0x74
 800302c:	4614      	mov	r4, r2
 800302e:	4698      	mov	r8, r3
 8003030:	4606      	mov	r6, r0
 8003032:	b118      	cbz	r0, 800303c <_vfiprintf_r+0x18>
 8003034:	6a03      	ldr	r3, [r0, #32]
 8003036:	b90b      	cbnz	r3, 800303c <_vfiprintf_r+0x18>
 8003038:	f7ff fdca 	bl	8002bd0 <__sinit>
 800303c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800303e:	07d9      	lsls	r1, r3, #31
 8003040:	d405      	bmi.n	800304e <_vfiprintf_r+0x2a>
 8003042:	89ab      	ldrh	r3, [r5, #12]
 8003044:	059a      	lsls	r2, r3, #22
 8003046:	d402      	bmi.n	800304e <_vfiprintf_r+0x2a>
 8003048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800304a:	f7ff fec6 	bl	8002dda <__retarget_lock_acquire_recursive>
 800304e:	89ab      	ldrh	r3, [r5, #12]
 8003050:	071b      	lsls	r3, r3, #28
 8003052:	d501      	bpl.n	8003058 <_vfiprintf_r+0x34>
 8003054:	692b      	ldr	r3, [r5, #16]
 8003056:	b99b      	cbnz	r3, 8003080 <_vfiprintf_r+0x5c>
 8003058:	4629      	mov	r1, r5
 800305a:	4630      	mov	r0, r6
 800305c:	f000 fb78 	bl	8003750 <__swsetup_r>
 8003060:	b170      	cbz	r0, 8003080 <_vfiprintf_r+0x5c>
 8003062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003064:	07dc      	lsls	r4, r3, #31
 8003066:	d504      	bpl.n	8003072 <_vfiprintf_r+0x4e>
 8003068:	f04f 30ff 	mov.w	r0, #4294967295
 800306c:	b01d      	add	sp, #116	; 0x74
 800306e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003072:	89ab      	ldrh	r3, [r5, #12]
 8003074:	0598      	lsls	r0, r3, #22
 8003076:	d4f7      	bmi.n	8003068 <_vfiprintf_r+0x44>
 8003078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800307a:	f7ff feaf 	bl	8002ddc <__retarget_lock_release_recursive>
 800307e:	e7f3      	b.n	8003068 <_vfiprintf_r+0x44>
 8003080:	2300      	movs	r3, #0
 8003082:	9309      	str	r3, [sp, #36]	; 0x24
 8003084:	2320      	movs	r3, #32
 8003086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800308a:	f8cd 800c 	str.w	r8, [sp, #12]
 800308e:	2330      	movs	r3, #48	; 0x30
 8003090:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003244 <_vfiprintf_r+0x220>
 8003094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003098:	f04f 0901 	mov.w	r9, #1
 800309c:	4623      	mov	r3, r4
 800309e:	469a      	mov	sl, r3
 80030a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030a4:	b10a      	cbz	r2, 80030aa <_vfiprintf_r+0x86>
 80030a6:	2a25      	cmp	r2, #37	; 0x25
 80030a8:	d1f9      	bne.n	800309e <_vfiprintf_r+0x7a>
 80030aa:	ebba 0b04 	subs.w	fp, sl, r4
 80030ae:	d00b      	beq.n	80030c8 <_vfiprintf_r+0xa4>
 80030b0:	465b      	mov	r3, fp
 80030b2:	4622      	mov	r2, r4
 80030b4:	4629      	mov	r1, r5
 80030b6:	4630      	mov	r0, r6
 80030b8:	f7ff ffa1 	bl	8002ffe <__sfputs_r>
 80030bc:	3001      	adds	r0, #1
 80030be:	f000 80a9 	beq.w	8003214 <_vfiprintf_r+0x1f0>
 80030c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030c4:	445a      	add	r2, fp
 80030c6:	9209      	str	r2, [sp, #36]	; 0x24
 80030c8:	f89a 3000 	ldrb.w	r3, [sl]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80a1 	beq.w	8003214 <_vfiprintf_r+0x1f0>
 80030d2:	2300      	movs	r3, #0
 80030d4:	f04f 32ff 	mov.w	r2, #4294967295
 80030d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030dc:	f10a 0a01 	add.w	sl, sl, #1
 80030e0:	9304      	str	r3, [sp, #16]
 80030e2:	9307      	str	r3, [sp, #28]
 80030e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030e8:	931a      	str	r3, [sp, #104]	; 0x68
 80030ea:	4654      	mov	r4, sl
 80030ec:	2205      	movs	r2, #5
 80030ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030f2:	4854      	ldr	r0, [pc, #336]	; (8003244 <_vfiprintf_r+0x220>)
 80030f4:	f7fd f87c 	bl	80001f0 <memchr>
 80030f8:	9a04      	ldr	r2, [sp, #16]
 80030fa:	b9d8      	cbnz	r0, 8003134 <_vfiprintf_r+0x110>
 80030fc:	06d1      	lsls	r1, r2, #27
 80030fe:	bf44      	itt	mi
 8003100:	2320      	movmi	r3, #32
 8003102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003106:	0713      	lsls	r3, r2, #28
 8003108:	bf44      	itt	mi
 800310a:	232b      	movmi	r3, #43	; 0x2b
 800310c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003110:	f89a 3000 	ldrb.w	r3, [sl]
 8003114:	2b2a      	cmp	r3, #42	; 0x2a
 8003116:	d015      	beq.n	8003144 <_vfiprintf_r+0x120>
 8003118:	9a07      	ldr	r2, [sp, #28]
 800311a:	4654      	mov	r4, sl
 800311c:	2000      	movs	r0, #0
 800311e:	f04f 0c0a 	mov.w	ip, #10
 8003122:	4621      	mov	r1, r4
 8003124:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003128:	3b30      	subs	r3, #48	; 0x30
 800312a:	2b09      	cmp	r3, #9
 800312c:	d94d      	bls.n	80031ca <_vfiprintf_r+0x1a6>
 800312e:	b1b0      	cbz	r0, 800315e <_vfiprintf_r+0x13a>
 8003130:	9207      	str	r2, [sp, #28]
 8003132:	e014      	b.n	800315e <_vfiprintf_r+0x13a>
 8003134:	eba0 0308 	sub.w	r3, r0, r8
 8003138:	fa09 f303 	lsl.w	r3, r9, r3
 800313c:	4313      	orrs	r3, r2
 800313e:	9304      	str	r3, [sp, #16]
 8003140:	46a2      	mov	sl, r4
 8003142:	e7d2      	b.n	80030ea <_vfiprintf_r+0xc6>
 8003144:	9b03      	ldr	r3, [sp, #12]
 8003146:	1d19      	adds	r1, r3, #4
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	9103      	str	r1, [sp, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	bfbb      	ittet	lt
 8003150:	425b      	neglt	r3, r3
 8003152:	f042 0202 	orrlt.w	r2, r2, #2
 8003156:	9307      	strge	r3, [sp, #28]
 8003158:	9307      	strlt	r3, [sp, #28]
 800315a:	bfb8      	it	lt
 800315c:	9204      	strlt	r2, [sp, #16]
 800315e:	7823      	ldrb	r3, [r4, #0]
 8003160:	2b2e      	cmp	r3, #46	; 0x2e
 8003162:	d10c      	bne.n	800317e <_vfiprintf_r+0x15a>
 8003164:	7863      	ldrb	r3, [r4, #1]
 8003166:	2b2a      	cmp	r3, #42	; 0x2a
 8003168:	d134      	bne.n	80031d4 <_vfiprintf_r+0x1b0>
 800316a:	9b03      	ldr	r3, [sp, #12]
 800316c:	1d1a      	adds	r2, r3, #4
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	9203      	str	r2, [sp, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	bfb8      	it	lt
 8003176:	f04f 33ff 	movlt.w	r3, #4294967295
 800317a:	3402      	adds	r4, #2
 800317c:	9305      	str	r3, [sp, #20]
 800317e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003254 <_vfiprintf_r+0x230>
 8003182:	7821      	ldrb	r1, [r4, #0]
 8003184:	2203      	movs	r2, #3
 8003186:	4650      	mov	r0, sl
 8003188:	f7fd f832 	bl	80001f0 <memchr>
 800318c:	b138      	cbz	r0, 800319e <_vfiprintf_r+0x17a>
 800318e:	9b04      	ldr	r3, [sp, #16]
 8003190:	eba0 000a 	sub.w	r0, r0, sl
 8003194:	2240      	movs	r2, #64	; 0x40
 8003196:	4082      	lsls	r2, r0
 8003198:	4313      	orrs	r3, r2
 800319a:	3401      	adds	r4, #1
 800319c:	9304      	str	r3, [sp, #16]
 800319e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031a2:	4829      	ldr	r0, [pc, #164]	; (8003248 <_vfiprintf_r+0x224>)
 80031a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80031a8:	2206      	movs	r2, #6
 80031aa:	f7fd f821 	bl	80001f0 <memchr>
 80031ae:	2800      	cmp	r0, #0
 80031b0:	d03f      	beq.n	8003232 <_vfiprintf_r+0x20e>
 80031b2:	4b26      	ldr	r3, [pc, #152]	; (800324c <_vfiprintf_r+0x228>)
 80031b4:	bb1b      	cbnz	r3, 80031fe <_vfiprintf_r+0x1da>
 80031b6:	9b03      	ldr	r3, [sp, #12]
 80031b8:	3307      	adds	r3, #7
 80031ba:	f023 0307 	bic.w	r3, r3, #7
 80031be:	3308      	adds	r3, #8
 80031c0:	9303      	str	r3, [sp, #12]
 80031c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031c4:	443b      	add	r3, r7
 80031c6:	9309      	str	r3, [sp, #36]	; 0x24
 80031c8:	e768      	b.n	800309c <_vfiprintf_r+0x78>
 80031ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80031ce:	460c      	mov	r4, r1
 80031d0:	2001      	movs	r0, #1
 80031d2:	e7a6      	b.n	8003122 <_vfiprintf_r+0xfe>
 80031d4:	2300      	movs	r3, #0
 80031d6:	3401      	adds	r4, #1
 80031d8:	9305      	str	r3, [sp, #20]
 80031da:	4619      	mov	r1, r3
 80031dc:	f04f 0c0a 	mov.w	ip, #10
 80031e0:	4620      	mov	r0, r4
 80031e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031e6:	3a30      	subs	r2, #48	; 0x30
 80031e8:	2a09      	cmp	r2, #9
 80031ea:	d903      	bls.n	80031f4 <_vfiprintf_r+0x1d0>
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d0c6      	beq.n	800317e <_vfiprintf_r+0x15a>
 80031f0:	9105      	str	r1, [sp, #20]
 80031f2:	e7c4      	b.n	800317e <_vfiprintf_r+0x15a>
 80031f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80031f8:	4604      	mov	r4, r0
 80031fa:	2301      	movs	r3, #1
 80031fc:	e7f0      	b.n	80031e0 <_vfiprintf_r+0x1bc>
 80031fe:	ab03      	add	r3, sp, #12
 8003200:	9300      	str	r3, [sp, #0]
 8003202:	462a      	mov	r2, r5
 8003204:	4b12      	ldr	r3, [pc, #72]	; (8003250 <_vfiprintf_r+0x22c>)
 8003206:	a904      	add	r1, sp, #16
 8003208:	4630      	mov	r0, r6
 800320a:	f3af 8000 	nop.w
 800320e:	4607      	mov	r7, r0
 8003210:	1c78      	adds	r0, r7, #1
 8003212:	d1d6      	bne.n	80031c2 <_vfiprintf_r+0x19e>
 8003214:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003216:	07d9      	lsls	r1, r3, #31
 8003218:	d405      	bmi.n	8003226 <_vfiprintf_r+0x202>
 800321a:	89ab      	ldrh	r3, [r5, #12]
 800321c:	059a      	lsls	r2, r3, #22
 800321e:	d402      	bmi.n	8003226 <_vfiprintf_r+0x202>
 8003220:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003222:	f7ff fddb 	bl	8002ddc <__retarget_lock_release_recursive>
 8003226:	89ab      	ldrh	r3, [r5, #12]
 8003228:	065b      	lsls	r3, r3, #25
 800322a:	f53f af1d 	bmi.w	8003068 <_vfiprintf_r+0x44>
 800322e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003230:	e71c      	b.n	800306c <_vfiprintf_r+0x48>
 8003232:	ab03      	add	r3, sp, #12
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	462a      	mov	r2, r5
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <_vfiprintf_r+0x22c>)
 800323a:	a904      	add	r1, sp, #16
 800323c:	4630      	mov	r0, r6
 800323e:	f000 f879 	bl	8003334 <_printf_i>
 8003242:	e7e4      	b.n	800320e <_vfiprintf_r+0x1ea>
 8003244:	08003976 	.word	0x08003976
 8003248:	08003980 	.word	0x08003980
 800324c:	00000000 	.word	0x00000000
 8003250:	08002fff 	.word	0x08002fff
 8003254:	0800397c 	.word	0x0800397c

08003258 <_printf_common>:
 8003258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800325c:	4616      	mov	r6, r2
 800325e:	4699      	mov	r9, r3
 8003260:	688a      	ldr	r2, [r1, #8]
 8003262:	690b      	ldr	r3, [r1, #16]
 8003264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003268:	4293      	cmp	r3, r2
 800326a:	bfb8      	it	lt
 800326c:	4613      	movlt	r3, r2
 800326e:	6033      	str	r3, [r6, #0]
 8003270:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003274:	4607      	mov	r7, r0
 8003276:	460c      	mov	r4, r1
 8003278:	b10a      	cbz	r2, 800327e <_printf_common+0x26>
 800327a:	3301      	adds	r3, #1
 800327c:	6033      	str	r3, [r6, #0]
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	0699      	lsls	r1, r3, #26
 8003282:	bf42      	ittt	mi
 8003284:	6833      	ldrmi	r3, [r6, #0]
 8003286:	3302      	addmi	r3, #2
 8003288:	6033      	strmi	r3, [r6, #0]
 800328a:	6825      	ldr	r5, [r4, #0]
 800328c:	f015 0506 	ands.w	r5, r5, #6
 8003290:	d106      	bne.n	80032a0 <_printf_common+0x48>
 8003292:	f104 0a19 	add.w	sl, r4, #25
 8003296:	68e3      	ldr	r3, [r4, #12]
 8003298:	6832      	ldr	r2, [r6, #0]
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	42ab      	cmp	r3, r5
 800329e:	dc26      	bgt.n	80032ee <_printf_common+0x96>
 80032a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032a4:	1e13      	subs	r3, r2, #0
 80032a6:	6822      	ldr	r2, [r4, #0]
 80032a8:	bf18      	it	ne
 80032aa:	2301      	movne	r3, #1
 80032ac:	0692      	lsls	r2, r2, #26
 80032ae:	d42b      	bmi.n	8003308 <_printf_common+0xb0>
 80032b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032b4:	4649      	mov	r1, r9
 80032b6:	4638      	mov	r0, r7
 80032b8:	47c0      	blx	r8
 80032ba:	3001      	adds	r0, #1
 80032bc:	d01e      	beq.n	80032fc <_printf_common+0xa4>
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	6922      	ldr	r2, [r4, #16]
 80032c2:	f003 0306 	and.w	r3, r3, #6
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	bf02      	ittt	eq
 80032ca:	68e5      	ldreq	r5, [r4, #12]
 80032cc:	6833      	ldreq	r3, [r6, #0]
 80032ce:	1aed      	subeq	r5, r5, r3
 80032d0:	68a3      	ldr	r3, [r4, #8]
 80032d2:	bf0c      	ite	eq
 80032d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032d8:	2500      	movne	r5, #0
 80032da:	4293      	cmp	r3, r2
 80032dc:	bfc4      	itt	gt
 80032de:	1a9b      	subgt	r3, r3, r2
 80032e0:	18ed      	addgt	r5, r5, r3
 80032e2:	2600      	movs	r6, #0
 80032e4:	341a      	adds	r4, #26
 80032e6:	42b5      	cmp	r5, r6
 80032e8:	d11a      	bne.n	8003320 <_printf_common+0xc8>
 80032ea:	2000      	movs	r0, #0
 80032ec:	e008      	b.n	8003300 <_printf_common+0xa8>
 80032ee:	2301      	movs	r3, #1
 80032f0:	4652      	mov	r2, sl
 80032f2:	4649      	mov	r1, r9
 80032f4:	4638      	mov	r0, r7
 80032f6:	47c0      	blx	r8
 80032f8:	3001      	adds	r0, #1
 80032fa:	d103      	bne.n	8003304 <_printf_common+0xac>
 80032fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003304:	3501      	adds	r5, #1
 8003306:	e7c6      	b.n	8003296 <_printf_common+0x3e>
 8003308:	18e1      	adds	r1, r4, r3
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	2030      	movs	r0, #48	; 0x30
 800330e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003312:	4422      	add	r2, r4
 8003314:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003318:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800331c:	3302      	adds	r3, #2
 800331e:	e7c7      	b.n	80032b0 <_printf_common+0x58>
 8003320:	2301      	movs	r3, #1
 8003322:	4622      	mov	r2, r4
 8003324:	4649      	mov	r1, r9
 8003326:	4638      	mov	r0, r7
 8003328:	47c0      	blx	r8
 800332a:	3001      	adds	r0, #1
 800332c:	d0e6      	beq.n	80032fc <_printf_common+0xa4>
 800332e:	3601      	adds	r6, #1
 8003330:	e7d9      	b.n	80032e6 <_printf_common+0x8e>
	...

08003334 <_printf_i>:
 8003334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003338:	7e0f      	ldrb	r7, [r1, #24]
 800333a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800333c:	2f78      	cmp	r7, #120	; 0x78
 800333e:	4691      	mov	r9, r2
 8003340:	4680      	mov	r8, r0
 8003342:	460c      	mov	r4, r1
 8003344:	469a      	mov	sl, r3
 8003346:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800334a:	d807      	bhi.n	800335c <_printf_i+0x28>
 800334c:	2f62      	cmp	r7, #98	; 0x62
 800334e:	d80a      	bhi.n	8003366 <_printf_i+0x32>
 8003350:	2f00      	cmp	r7, #0
 8003352:	f000 80d4 	beq.w	80034fe <_printf_i+0x1ca>
 8003356:	2f58      	cmp	r7, #88	; 0x58
 8003358:	f000 80c0 	beq.w	80034dc <_printf_i+0x1a8>
 800335c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003360:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003364:	e03a      	b.n	80033dc <_printf_i+0xa8>
 8003366:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800336a:	2b15      	cmp	r3, #21
 800336c:	d8f6      	bhi.n	800335c <_printf_i+0x28>
 800336e:	a101      	add	r1, pc, #4	; (adr r1, 8003374 <_printf_i+0x40>)
 8003370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003374:	080033cd 	.word	0x080033cd
 8003378:	080033e1 	.word	0x080033e1
 800337c:	0800335d 	.word	0x0800335d
 8003380:	0800335d 	.word	0x0800335d
 8003384:	0800335d 	.word	0x0800335d
 8003388:	0800335d 	.word	0x0800335d
 800338c:	080033e1 	.word	0x080033e1
 8003390:	0800335d 	.word	0x0800335d
 8003394:	0800335d 	.word	0x0800335d
 8003398:	0800335d 	.word	0x0800335d
 800339c:	0800335d 	.word	0x0800335d
 80033a0:	080034e5 	.word	0x080034e5
 80033a4:	0800340d 	.word	0x0800340d
 80033a8:	0800349f 	.word	0x0800349f
 80033ac:	0800335d 	.word	0x0800335d
 80033b0:	0800335d 	.word	0x0800335d
 80033b4:	08003507 	.word	0x08003507
 80033b8:	0800335d 	.word	0x0800335d
 80033bc:	0800340d 	.word	0x0800340d
 80033c0:	0800335d 	.word	0x0800335d
 80033c4:	0800335d 	.word	0x0800335d
 80033c8:	080034a7 	.word	0x080034a7
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	1d1a      	adds	r2, r3, #4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	602a      	str	r2, [r5, #0]
 80033d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033dc:	2301      	movs	r3, #1
 80033de:	e09f      	b.n	8003520 <_printf_i+0x1ec>
 80033e0:	6820      	ldr	r0, [r4, #0]
 80033e2:	682b      	ldr	r3, [r5, #0]
 80033e4:	0607      	lsls	r7, r0, #24
 80033e6:	f103 0104 	add.w	r1, r3, #4
 80033ea:	6029      	str	r1, [r5, #0]
 80033ec:	d501      	bpl.n	80033f2 <_printf_i+0xbe>
 80033ee:	681e      	ldr	r6, [r3, #0]
 80033f0:	e003      	b.n	80033fa <_printf_i+0xc6>
 80033f2:	0646      	lsls	r6, r0, #25
 80033f4:	d5fb      	bpl.n	80033ee <_printf_i+0xba>
 80033f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80033fa:	2e00      	cmp	r6, #0
 80033fc:	da03      	bge.n	8003406 <_printf_i+0xd2>
 80033fe:	232d      	movs	r3, #45	; 0x2d
 8003400:	4276      	negs	r6, r6
 8003402:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003406:	485a      	ldr	r0, [pc, #360]	; (8003570 <_printf_i+0x23c>)
 8003408:	230a      	movs	r3, #10
 800340a:	e012      	b.n	8003432 <_printf_i+0xfe>
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	6820      	ldr	r0, [r4, #0]
 8003410:	1d19      	adds	r1, r3, #4
 8003412:	6029      	str	r1, [r5, #0]
 8003414:	0605      	lsls	r5, r0, #24
 8003416:	d501      	bpl.n	800341c <_printf_i+0xe8>
 8003418:	681e      	ldr	r6, [r3, #0]
 800341a:	e002      	b.n	8003422 <_printf_i+0xee>
 800341c:	0641      	lsls	r1, r0, #25
 800341e:	d5fb      	bpl.n	8003418 <_printf_i+0xe4>
 8003420:	881e      	ldrh	r6, [r3, #0]
 8003422:	4853      	ldr	r0, [pc, #332]	; (8003570 <_printf_i+0x23c>)
 8003424:	2f6f      	cmp	r7, #111	; 0x6f
 8003426:	bf0c      	ite	eq
 8003428:	2308      	moveq	r3, #8
 800342a:	230a      	movne	r3, #10
 800342c:	2100      	movs	r1, #0
 800342e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003432:	6865      	ldr	r5, [r4, #4]
 8003434:	60a5      	str	r5, [r4, #8]
 8003436:	2d00      	cmp	r5, #0
 8003438:	bfa2      	ittt	ge
 800343a:	6821      	ldrge	r1, [r4, #0]
 800343c:	f021 0104 	bicge.w	r1, r1, #4
 8003440:	6021      	strge	r1, [r4, #0]
 8003442:	b90e      	cbnz	r6, 8003448 <_printf_i+0x114>
 8003444:	2d00      	cmp	r5, #0
 8003446:	d04b      	beq.n	80034e0 <_printf_i+0x1ac>
 8003448:	4615      	mov	r5, r2
 800344a:	fbb6 f1f3 	udiv	r1, r6, r3
 800344e:	fb03 6711 	mls	r7, r3, r1, r6
 8003452:	5dc7      	ldrb	r7, [r0, r7]
 8003454:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003458:	4637      	mov	r7, r6
 800345a:	42bb      	cmp	r3, r7
 800345c:	460e      	mov	r6, r1
 800345e:	d9f4      	bls.n	800344a <_printf_i+0x116>
 8003460:	2b08      	cmp	r3, #8
 8003462:	d10b      	bne.n	800347c <_printf_i+0x148>
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	07de      	lsls	r6, r3, #31
 8003468:	d508      	bpl.n	800347c <_printf_i+0x148>
 800346a:	6923      	ldr	r3, [r4, #16]
 800346c:	6861      	ldr	r1, [r4, #4]
 800346e:	4299      	cmp	r1, r3
 8003470:	bfde      	ittt	le
 8003472:	2330      	movle	r3, #48	; 0x30
 8003474:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003478:	f105 35ff 	addle.w	r5, r5, #4294967295
 800347c:	1b52      	subs	r2, r2, r5
 800347e:	6122      	str	r2, [r4, #16]
 8003480:	f8cd a000 	str.w	sl, [sp]
 8003484:	464b      	mov	r3, r9
 8003486:	aa03      	add	r2, sp, #12
 8003488:	4621      	mov	r1, r4
 800348a:	4640      	mov	r0, r8
 800348c:	f7ff fee4 	bl	8003258 <_printf_common>
 8003490:	3001      	adds	r0, #1
 8003492:	d14a      	bne.n	800352a <_printf_i+0x1f6>
 8003494:	f04f 30ff 	mov.w	r0, #4294967295
 8003498:	b004      	add	sp, #16
 800349a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800349e:	6823      	ldr	r3, [r4, #0]
 80034a0:	f043 0320 	orr.w	r3, r3, #32
 80034a4:	6023      	str	r3, [r4, #0]
 80034a6:	4833      	ldr	r0, [pc, #204]	; (8003574 <_printf_i+0x240>)
 80034a8:	2778      	movs	r7, #120	; 0x78
 80034aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80034ae:	6823      	ldr	r3, [r4, #0]
 80034b0:	6829      	ldr	r1, [r5, #0]
 80034b2:	061f      	lsls	r7, r3, #24
 80034b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80034b8:	d402      	bmi.n	80034c0 <_printf_i+0x18c>
 80034ba:	065f      	lsls	r7, r3, #25
 80034bc:	bf48      	it	mi
 80034be:	b2b6      	uxthmi	r6, r6
 80034c0:	07df      	lsls	r7, r3, #31
 80034c2:	bf48      	it	mi
 80034c4:	f043 0320 	orrmi.w	r3, r3, #32
 80034c8:	6029      	str	r1, [r5, #0]
 80034ca:	bf48      	it	mi
 80034cc:	6023      	strmi	r3, [r4, #0]
 80034ce:	b91e      	cbnz	r6, 80034d8 <_printf_i+0x1a4>
 80034d0:	6823      	ldr	r3, [r4, #0]
 80034d2:	f023 0320 	bic.w	r3, r3, #32
 80034d6:	6023      	str	r3, [r4, #0]
 80034d8:	2310      	movs	r3, #16
 80034da:	e7a7      	b.n	800342c <_printf_i+0xf8>
 80034dc:	4824      	ldr	r0, [pc, #144]	; (8003570 <_printf_i+0x23c>)
 80034de:	e7e4      	b.n	80034aa <_printf_i+0x176>
 80034e0:	4615      	mov	r5, r2
 80034e2:	e7bd      	b.n	8003460 <_printf_i+0x12c>
 80034e4:	682b      	ldr	r3, [r5, #0]
 80034e6:	6826      	ldr	r6, [r4, #0]
 80034e8:	6961      	ldr	r1, [r4, #20]
 80034ea:	1d18      	adds	r0, r3, #4
 80034ec:	6028      	str	r0, [r5, #0]
 80034ee:	0635      	lsls	r5, r6, #24
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	d501      	bpl.n	80034f8 <_printf_i+0x1c4>
 80034f4:	6019      	str	r1, [r3, #0]
 80034f6:	e002      	b.n	80034fe <_printf_i+0x1ca>
 80034f8:	0670      	lsls	r0, r6, #25
 80034fa:	d5fb      	bpl.n	80034f4 <_printf_i+0x1c0>
 80034fc:	8019      	strh	r1, [r3, #0]
 80034fe:	2300      	movs	r3, #0
 8003500:	6123      	str	r3, [r4, #16]
 8003502:	4615      	mov	r5, r2
 8003504:	e7bc      	b.n	8003480 <_printf_i+0x14c>
 8003506:	682b      	ldr	r3, [r5, #0]
 8003508:	1d1a      	adds	r2, r3, #4
 800350a:	602a      	str	r2, [r5, #0]
 800350c:	681d      	ldr	r5, [r3, #0]
 800350e:	6862      	ldr	r2, [r4, #4]
 8003510:	2100      	movs	r1, #0
 8003512:	4628      	mov	r0, r5
 8003514:	f7fc fe6c 	bl	80001f0 <memchr>
 8003518:	b108      	cbz	r0, 800351e <_printf_i+0x1ea>
 800351a:	1b40      	subs	r0, r0, r5
 800351c:	6060      	str	r0, [r4, #4]
 800351e:	6863      	ldr	r3, [r4, #4]
 8003520:	6123      	str	r3, [r4, #16]
 8003522:	2300      	movs	r3, #0
 8003524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003528:	e7aa      	b.n	8003480 <_printf_i+0x14c>
 800352a:	6923      	ldr	r3, [r4, #16]
 800352c:	462a      	mov	r2, r5
 800352e:	4649      	mov	r1, r9
 8003530:	4640      	mov	r0, r8
 8003532:	47d0      	blx	sl
 8003534:	3001      	adds	r0, #1
 8003536:	d0ad      	beq.n	8003494 <_printf_i+0x160>
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	079b      	lsls	r3, r3, #30
 800353c:	d413      	bmi.n	8003566 <_printf_i+0x232>
 800353e:	68e0      	ldr	r0, [r4, #12]
 8003540:	9b03      	ldr	r3, [sp, #12]
 8003542:	4298      	cmp	r0, r3
 8003544:	bfb8      	it	lt
 8003546:	4618      	movlt	r0, r3
 8003548:	e7a6      	b.n	8003498 <_printf_i+0x164>
 800354a:	2301      	movs	r3, #1
 800354c:	4632      	mov	r2, r6
 800354e:	4649      	mov	r1, r9
 8003550:	4640      	mov	r0, r8
 8003552:	47d0      	blx	sl
 8003554:	3001      	adds	r0, #1
 8003556:	d09d      	beq.n	8003494 <_printf_i+0x160>
 8003558:	3501      	adds	r5, #1
 800355a:	68e3      	ldr	r3, [r4, #12]
 800355c:	9903      	ldr	r1, [sp, #12]
 800355e:	1a5b      	subs	r3, r3, r1
 8003560:	42ab      	cmp	r3, r5
 8003562:	dcf2      	bgt.n	800354a <_printf_i+0x216>
 8003564:	e7eb      	b.n	800353e <_printf_i+0x20a>
 8003566:	2500      	movs	r5, #0
 8003568:	f104 0619 	add.w	r6, r4, #25
 800356c:	e7f5      	b.n	800355a <_printf_i+0x226>
 800356e:	bf00      	nop
 8003570:	08003987 	.word	0x08003987
 8003574:	08003998 	.word	0x08003998

08003578 <__sflush_r>:
 8003578:	898a      	ldrh	r2, [r1, #12]
 800357a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800357e:	4605      	mov	r5, r0
 8003580:	0710      	lsls	r0, r2, #28
 8003582:	460c      	mov	r4, r1
 8003584:	d458      	bmi.n	8003638 <__sflush_r+0xc0>
 8003586:	684b      	ldr	r3, [r1, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	dc05      	bgt.n	8003598 <__sflush_r+0x20>
 800358c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	dc02      	bgt.n	8003598 <__sflush_r+0x20>
 8003592:	2000      	movs	r0, #0
 8003594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800359a:	2e00      	cmp	r6, #0
 800359c:	d0f9      	beq.n	8003592 <__sflush_r+0x1a>
 800359e:	2300      	movs	r3, #0
 80035a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035a4:	682f      	ldr	r7, [r5, #0]
 80035a6:	6a21      	ldr	r1, [r4, #32]
 80035a8:	602b      	str	r3, [r5, #0]
 80035aa:	d032      	beq.n	8003612 <__sflush_r+0x9a>
 80035ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035ae:	89a3      	ldrh	r3, [r4, #12]
 80035b0:	075a      	lsls	r2, r3, #29
 80035b2:	d505      	bpl.n	80035c0 <__sflush_r+0x48>
 80035b4:	6863      	ldr	r3, [r4, #4]
 80035b6:	1ac0      	subs	r0, r0, r3
 80035b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035ba:	b10b      	cbz	r3, 80035c0 <__sflush_r+0x48>
 80035bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035be:	1ac0      	subs	r0, r0, r3
 80035c0:	2300      	movs	r3, #0
 80035c2:	4602      	mov	r2, r0
 80035c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035c6:	6a21      	ldr	r1, [r4, #32]
 80035c8:	4628      	mov	r0, r5
 80035ca:	47b0      	blx	r6
 80035cc:	1c43      	adds	r3, r0, #1
 80035ce:	89a3      	ldrh	r3, [r4, #12]
 80035d0:	d106      	bne.n	80035e0 <__sflush_r+0x68>
 80035d2:	6829      	ldr	r1, [r5, #0]
 80035d4:	291d      	cmp	r1, #29
 80035d6:	d82b      	bhi.n	8003630 <__sflush_r+0xb8>
 80035d8:	4a29      	ldr	r2, [pc, #164]	; (8003680 <__sflush_r+0x108>)
 80035da:	410a      	asrs	r2, r1
 80035dc:	07d6      	lsls	r6, r2, #31
 80035de:	d427      	bmi.n	8003630 <__sflush_r+0xb8>
 80035e0:	2200      	movs	r2, #0
 80035e2:	6062      	str	r2, [r4, #4]
 80035e4:	04d9      	lsls	r1, r3, #19
 80035e6:	6922      	ldr	r2, [r4, #16]
 80035e8:	6022      	str	r2, [r4, #0]
 80035ea:	d504      	bpl.n	80035f6 <__sflush_r+0x7e>
 80035ec:	1c42      	adds	r2, r0, #1
 80035ee:	d101      	bne.n	80035f4 <__sflush_r+0x7c>
 80035f0:	682b      	ldr	r3, [r5, #0]
 80035f2:	b903      	cbnz	r3, 80035f6 <__sflush_r+0x7e>
 80035f4:	6560      	str	r0, [r4, #84]	; 0x54
 80035f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035f8:	602f      	str	r7, [r5, #0]
 80035fa:	2900      	cmp	r1, #0
 80035fc:	d0c9      	beq.n	8003592 <__sflush_r+0x1a>
 80035fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003602:	4299      	cmp	r1, r3
 8003604:	d002      	beq.n	800360c <__sflush_r+0x94>
 8003606:	4628      	mov	r0, r5
 8003608:	f7ff fbea 	bl	8002de0 <_free_r>
 800360c:	2000      	movs	r0, #0
 800360e:	6360      	str	r0, [r4, #52]	; 0x34
 8003610:	e7c0      	b.n	8003594 <__sflush_r+0x1c>
 8003612:	2301      	movs	r3, #1
 8003614:	4628      	mov	r0, r5
 8003616:	47b0      	blx	r6
 8003618:	1c41      	adds	r1, r0, #1
 800361a:	d1c8      	bne.n	80035ae <__sflush_r+0x36>
 800361c:	682b      	ldr	r3, [r5, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0c5      	beq.n	80035ae <__sflush_r+0x36>
 8003622:	2b1d      	cmp	r3, #29
 8003624:	d001      	beq.n	800362a <__sflush_r+0xb2>
 8003626:	2b16      	cmp	r3, #22
 8003628:	d101      	bne.n	800362e <__sflush_r+0xb6>
 800362a:	602f      	str	r7, [r5, #0]
 800362c:	e7b1      	b.n	8003592 <__sflush_r+0x1a>
 800362e:	89a3      	ldrh	r3, [r4, #12]
 8003630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003634:	81a3      	strh	r3, [r4, #12]
 8003636:	e7ad      	b.n	8003594 <__sflush_r+0x1c>
 8003638:	690f      	ldr	r7, [r1, #16]
 800363a:	2f00      	cmp	r7, #0
 800363c:	d0a9      	beq.n	8003592 <__sflush_r+0x1a>
 800363e:	0793      	lsls	r3, r2, #30
 8003640:	680e      	ldr	r6, [r1, #0]
 8003642:	bf08      	it	eq
 8003644:	694b      	ldreq	r3, [r1, #20]
 8003646:	600f      	str	r7, [r1, #0]
 8003648:	bf18      	it	ne
 800364a:	2300      	movne	r3, #0
 800364c:	eba6 0807 	sub.w	r8, r6, r7
 8003650:	608b      	str	r3, [r1, #8]
 8003652:	f1b8 0f00 	cmp.w	r8, #0
 8003656:	dd9c      	ble.n	8003592 <__sflush_r+0x1a>
 8003658:	6a21      	ldr	r1, [r4, #32]
 800365a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800365c:	4643      	mov	r3, r8
 800365e:	463a      	mov	r2, r7
 8003660:	4628      	mov	r0, r5
 8003662:	47b0      	blx	r6
 8003664:	2800      	cmp	r0, #0
 8003666:	dc06      	bgt.n	8003676 <__sflush_r+0xfe>
 8003668:	89a3      	ldrh	r3, [r4, #12]
 800366a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800366e:	81a3      	strh	r3, [r4, #12]
 8003670:	f04f 30ff 	mov.w	r0, #4294967295
 8003674:	e78e      	b.n	8003594 <__sflush_r+0x1c>
 8003676:	4407      	add	r7, r0
 8003678:	eba8 0800 	sub.w	r8, r8, r0
 800367c:	e7e9      	b.n	8003652 <__sflush_r+0xda>
 800367e:	bf00      	nop
 8003680:	dfbffffe 	.word	0xdfbffffe

08003684 <_fflush_r>:
 8003684:	b538      	push	{r3, r4, r5, lr}
 8003686:	690b      	ldr	r3, [r1, #16]
 8003688:	4605      	mov	r5, r0
 800368a:	460c      	mov	r4, r1
 800368c:	b913      	cbnz	r3, 8003694 <_fflush_r+0x10>
 800368e:	2500      	movs	r5, #0
 8003690:	4628      	mov	r0, r5
 8003692:	bd38      	pop	{r3, r4, r5, pc}
 8003694:	b118      	cbz	r0, 800369e <_fflush_r+0x1a>
 8003696:	6a03      	ldr	r3, [r0, #32]
 8003698:	b90b      	cbnz	r3, 800369e <_fflush_r+0x1a>
 800369a:	f7ff fa99 	bl	8002bd0 <__sinit>
 800369e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f3      	beq.n	800368e <_fflush_r+0xa>
 80036a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036a8:	07d0      	lsls	r0, r2, #31
 80036aa:	d404      	bmi.n	80036b6 <_fflush_r+0x32>
 80036ac:	0599      	lsls	r1, r3, #22
 80036ae:	d402      	bmi.n	80036b6 <_fflush_r+0x32>
 80036b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036b2:	f7ff fb92 	bl	8002dda <__retarget_lock_acquire_recursive>
 80036b6:	4628      	mov	r0, r5
 80036b8:	4621      	mov	r1, r4
 80036ba:	f7ff ff5d 	bl	8003578 <__sflush_r>
 80036be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036c0:	07da      	lsls	r2, r3, #31
 80036c2:	4605      	mov	r5, r0
 80036c4:	d4e4      	bmi.n	8003690 <_fflush_r+0xc>
 80036c6:	89a3      	ldrh	r3, [r4, #12]
 80036c8:	059b      	lsls	r3, r3, #22
 80036ca:	d4e1      	bmi.n	8003690 <_fflush_r+0xc>
 80036cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036ce:	f7ff fb85 	bl	8002ddc <__retarget_lock_release_recursive>
 80036d2:	e7dd      	b.n	8003690 <_fflush_r+0xc>

080036d4 <__swbuf_r>:
 80036d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d6:	460e      	mov	r6, r1
 80036d8:	4614      	mov	r4, r2
 80036da:	4605      	mov	r5, r0
 80036dc:	b118      	cbz	r0, 80036e6 <__swbuf_r+0x12>
 80036de:	6a03      	ldr	r3, [r0, #32]
 80036e0:	b90b      	cbnz	r3, 80036e6 <__swbuf_r+0x12>
 80036e2:	f7ff fa75 	bl	8002bd0 <__sinit>
 80036e6:	69a3      	ldr	r3, [r4, #24]
 80036e8:	60a3      	str	r3, [r4, #8]
 80036ea:	89a3      	ldrh	r3, [r4, #12]
 80036ec:	071a      	lsls	r2, r3, #28
 80036ee:	d525      	bpl.n	800373c <__swbuf_r+0x68>
 80036f0:	6923      	ldr	r3, [r4, #16]
 80036f2:	b31b      	cbz	r3, 800373c <__swbuf_r+0x68>
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	6922      	ldr	r2, [r4, #16]
 80036f8:	1a98      	subs	r0, r3, r2
 80036fa:	6963      	ldr	r3, [r4, #20]
 80036fc:	b2f6      	uxtb	r6, r6
 80036fe:	4283      	cmp	r3, r0
 8003700:	4637      	mov	r7, r6
 8003702:	dc04      	bgt.n	800370e <__swbuf_r+0x3a>
 8003704:	4621      	mov	r1, r4
 8003706:	4628      	mov	r0, r5
 8003708:	f7ff ffbc 	bl	8003684 <_fflush_r>
 800370c:	b9e0      	cbnz	r0, 8003748 <__swbuf_r+0x74>
 800370e:	68a3      	ldr	r3, [r4, #8]
 8003710:	3b01      	subs	r3, #1
 8003712:	60a3      	str	r3, [r4, #8]
 8003714:	6823      	ldr	r3, [r4, #0]
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	6022      	str	r2, [r4, #0]
 800371a:	701e      	strb	r6, [r3, #0]
 800371c:	6962      	ldr	r2, [r4, #20]
 800371e:	1c43      	adds	r3, r0, #1
 8003720:	429a      	cmp	r2, r3
 8003722:	d004      	beq.n	800372e <__swbuf_r+0x5a>
 8003724:	89a3      	ldrh	r3, [r4, #12]
 8003726:	07db      	lsls	r3, r3, #31
 8003728:	d506      	bpl.n	8003738 <__swbuf_r+0x64>
 800372a:	2e0a      	cmp	r6, #10
 800372c:	d104      	bne.n	8003738 <__swbuf_r+0x64>
 800372e:	4621      	mov	r1, r4
 8003730:	4628      	mov	r0, r5
 8003732:	f7ff ffa7 	bl	8003684 <_fflush_r>
 8003736:	b938      	cbnz	r0, 8003748 <__swbuf_r+0x74>
 8003738:	4638      	mov	r0, r7
 800373a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800373c:	4621      	mov	r1, r4
 800373e:	4628      	mov	r0, r5
 8003740:	f000 f806 	bl	8003750 <__swsetup_r>
 8003744:	2800      	cmp	r0, #0
 8003746:	d0d5      	beq.n	80036f4 <__swbuf_r+0x20>
 8003748:	f04f 37ff 	mov.w	r7, #4294967295
 800374c:	e7f4      	b.n	8003738 <__swbuf_r+0x64>
	...

08003750 <__swsetup_r>:
 8003750:	b538      	push	{r3, r4, r5, lr}
 8003752:	4b2a      	ldr	r3, [pc, #168]	; (80037fc <__swsetup_r+0xac>)
 8003754:	4605      	mov	r5, r0
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	460c      	mov	r4, r1
 800375a:	b118      	cbz	r0, 8003764 <__swsetup_r+0x14>
 800375c:	6a03      	ldr	r3, [r0, #32]
 800375e:	b90b      	cbnz	r3, 8003764 <__swsetup_r+0x14>
 8003760:	f7ff fa36 	bl	8002bd0 <__sinit>
 8003764:	89a3      	ldrh	r3, [r4, #12]
 8003766:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800376a:	0718      	lsls	r0, r3, #28
 800376c:	d422      	bmi.n	80037b4 <__swsetup_r+0x64>
 800376e:	06d9      	lsls	r1, r3, #27
 8003770:	d407      	bmi.n	8003782 <__swsetup_r+0x32>
 8003772:	2309      	movs	r3, #9
 8003774:	602b      	str	r3, [r5, #0]
 8003776:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800377a:	81a3      	strh	r3, [r4, #12]
 800377c:	f04f 30ff 	mov.w	r0, #4294967295
 8003780:	e034      	b.n	80037ec <__swsetup_r+0x9c>
 8003782:	0758      	lsls	r0, r3, #29
 8003784:	d512      	bpl.n	80037ac <__swsetup_r+0x5c>
 8003786:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003788:	b141      	cbz	r1, 800379c <__swsetup_r+0x4c>
 800378a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800378e:	4299      	cmp	r1, r3
 8003790:	d002      	beq.n	8003798 <__swsetup_r+0x48>
 8003792:	4628      	mov	r0, r5
 8003794:	f7ff fb24 	bl	8002de0 <_free_r>
 8003798:	2300      	movs	r3, #0
 800379a:	6363      	str	r3, [r4, #52]	; 0x34
 800379c:	89a3      	ldrh	r3, [r4, #12]
 800379e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80037a2:	81a3      	strh	r3, [r4, #12]
 80037a4:	2300      	movs	r3, #0
 80037a6:	6063      	str	r3, [r4, #4]
 80037a8:	6923      	ldr	r3, [r4, #16]
 80037aa:	6023      	str	r3, [r4, #0]
 80037ac:	89a3      	ldrh	r3, [r4, #12]
 80037ae:	f043 0308 	orr.w	r3, r3, #8
 80037b2:	81a3      	strh	r3, [r4, #12]
 80037b4:	6923      	ldr	r3, [r4, #16]
 80037b6:	b94b      	cbnz	r3, 80037cc <__swsetup_r+0x7c>
 80037b8:	89a3      	ldrh	r3, [r4, #12]
 80037ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80037be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037c2:	d003      	beq.n	80037cc <__swsetup_r+0x7c>
 80037c4:	4621      	mov	r1, r4
 80037c6:	4628      	mov	r0, r5
 80037c8:	f000 f850 	bl	800386c <__smakebuf_r>
 80037cc:	89a0      	ldrh	r0, [r4, #12]
 80037ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037d2:	f010 0301 	ands.w	r3, r0, #1
 80037d6:	d00a      	beq.n	80037ee <__swsetup_r+0x9e>
 80037d8:	2300      	movs	r3, #0
 80037da:	60a3      	str	r3, [r4, #8]
 80037dc:	6963      	ldr	r3, [r4, #20]
 80037de:	425b      	negs	r3, r3
 80037e0:	61a3      	str	r3, [r4, #24]
 80037e2:	6923      	ldr	r3, [r4, #16]
 80037e4:	b943      	cbnz	r3, 80037f8 <__swsetup_r+0xa8>
 80037e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80037ea:	d1c4      	bne.n	8003776 <__swsetup_r+0x26>
 80037ec:	bd38      	pop	{r3, r4, r5, pc}
 80037ee:	0781      	lsls	r1, r0, #30
 80037f0:	bf58      	it	pl
 80037f2:	6963      	ldrpl	r3, [r4, #20]
 80037f4:	60a3      	str	r3, [r4, #8]
 80037f6:	e7f4      	b.n	80037e2 <__swsetup_r+0x92>
 80037f8:	2000      	movs	r0, #0
 80037fa:	e7f7      	b.n	80037ec <__swsetup_r+0x9c>
 80037fc:	2000006c 	.word	0x2000006c

08003800 <_sbrk_r>:
 8003800:	b538      	push	{r3, r4, r5, lr}
 8003802:	4d06      	ldr	r5, [pc, #24]	; (800381c <_sbrk_r+0x1c>)
 8003804:	2300      	movs	r3, #0
 8003806:	4604      	mov	r4, r0
 8003808:	4608      	mov	r0, r1
 800380a:	602b      	str	r3, [r5, #0]
 800380c:	f7fd fa10 	bl	8000c30 <_sbrk>
 8003810:	1c43      	adds	r3, r0, #1
 8003812:	d102      	bne.n	800381a <_sbrk_r+0x1a>
 8003814:	682b      	ldr	r3, [r5, #0]
 8003816:	b103      	cbz	r3, 800381a <_sbrk_r+0x1a>
 8003818:	6023      	str	r3, [r4, #0]
 800381a:	bd38      	pop	{r3, r4, r5, pc}
 800381c:	2000030c 	.word	0x2000030c

08003820 <__swhatbuf_r>:
 8003820:	b570      	push	{r4, r5, r6, lr}
 8003822:	460c      	mov	r4, r1
 8003824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003828:	2900      	cmp	r1, #0
 800382a:	b096      	sub	sp, #88	; 0x58
 800382c:	4615      	mov	r5, r2
 800382e:	461e      	mov	r6, r3
 8003830:	da0d      	bge.n	800384e <__swhatbuf_r+0x2e>
 8003832:	89a3      	ldrh	r3, [r4, #12]
 8003834:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003838:	f04f 0100 	mov.w	r1, #0
 800383c:	bf0c      	ite	eq
 800383e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003842:	2340      	movne	r3, #64	; 0x40
 8003844:	2000      	movs	r0, #0
 8003846:	6031      	str	r1, [r6, #0]
 8003848:	602b      	str	r3, [r5, #0]
 800384a:	b016      	add	sp, #88	; 0x58
 800384c:	bd70      	pop	{r4, r5, r6, pc}
 800384e:	466a      	mov	r2, sp
 8003850:	f000 f848 	bl	80038e4 <_fstat_r>
 8003854:	2800      	cmp	r0, #0
 8003856:	dbec      	blt.n	8003832 <__swhatbuf_r+0x12>
 8003858:	9901      	ldr	r1, [sp, #4]
 800385a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800385e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003862:	4259      	negs	r1, r3
 8003864:	4159      	adcs	r1, r3
 8003866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800386a:	e7eb      	b.n	8003844 <__swhatbuf_r+0x24>

0800386c <__smakebuf_r>:
 800386c:	898b      	ldrh	r3, [r1, #12]
 800386e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003870:	079d      	lsls	r5, r3, #30
 8003872:	4606      	mov	r6, r0
 8003874:	460c      	mov	r4, r1
 8003876:	d507      	bpl.n	8003888 <__smakebuf_r+0x1c>
 8003878:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800387c:	6023      	str	r3, [r4, #0]
 800387e:	6123      	str	r3, [r4, #16]
 8003880:	2301      	movs	r3, #1
 8003882:	6163      	str	r3, [r4, #20]
 8003884:	b002      	add	sp, #8
 8003886:	bd70      	pop	{r4, r5, r6, pc}
 8003888:	ab01      	add	r3, sp, #4
 800388a:	466a      	mov	r2, sp
 800388c:	f7ff ffc8 	bl	8003820 <__swhatbuf_r>
 8003890:	9900      	ldr	r1, [sp, #0]
 8003892:	4605      	mov	r5, r0
 8003894:	4630      	mov	r0, r6
 8003896:	f7ff fb0f 	bl	8002eb8 <_malloc_r>
 800389a:	b948      	cbnz	r0, 80038b0 <__smakebuf_r+0x44>
 800389c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038a0:	059a      	lsls	r2, r3, #22
 80038a2:	d4ef      	bmi.n	8003884 <__smakebuf_r+0x18>
 80038a4:	f023 0303 	bic.w	r3, r3, #3
 80038a8:	f043 0302 	orr.w	r3, r3, #2
 80038ac:	81a3      	strh	r3, [r4, #12]
 80038ae:	e7e3      	b.n	8003878 <__smakebuf_r+0xc>
 80038b0:	89a3      	ldrh	r3, [r4, #12]
 80038b2:	6020      	str	r0, [r4, #0]
 80038b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b8:	81a3      	strh	r3, [r4, #12]
 80038ba:	9b00      	ldr	r3, [sp, #0]
 80038bc:	6163      	str	r3, [r4, #20]
 80038be:	9b01      	ldr	r3, [sp, #4]
 80038c0:	6120      	str	r0, [r4, #16]
 80038c2:	b15b      	cbz	r3, 80038dc <__smakebuf_r+0x70>
 80038c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038c8:	4630      	mov	r0, r6
 80038ca:	f000 f81d 	bl	8003908 <_isatty_r>
 80038ce:	b128      	cbz	r0, 80038dc <__smakebuf_r+0x70>
 80038d0:	89a3      	ldrh	r3, [r4, #12]
 80038d2:	f023 0303 	bic.w	r3, r3, #3
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	81a3      	strh	r3, [r4, #12]
 80038dc:	89a3      	ldrh	r3, [r4, #12]
 80038de:	431d      	orrs	r5, r3
 80038e0:	81a5      	strh	r5, [r4, #12]
 80038e2:	e7cf      	b.n	8003884 <__smakebuf_r+0x18>

080038e4 <_fstat_r>:
 80038e4:	b538      	push	{r3, r4, r5, lr}
 80038e6:	4d07      	ldr	r5, [pc, #28]	; (8003904 <_fstat_r+0x20>)
 80038e8:	2300      	movs	r3, #0
 80038ea:	4604      	mov	r4, r0
 80038ec:	4608      	mov	r0, r1
 80038ee:	4611      	mov	r1, r2
 80038f0:	602b      	str	r3, [r5, #0]
 80038f2:	f7fe ff5e 	bl	80027b2 <_fstat>
 80038f6:	1c43      	adds	r3, r0, #1
 80038f8:	d102      	bne.n	8003900 <_fstat_r+0x1c>
 80038fa:	682b      	ldr	r3, [r5, #0]
 80038fc:	b103      	cbz	r3, 8003900 <_fstat_r+0x1c>
 80038fe:	6023      	str	r3, [r4, #0]
 8003900:	bd38      	pop	{r3, r4, r5, pc}
 8003902:	bf00      	nop
 8003904:	2000030c 	.word	0x2000030c

08003908 <_isatty_r>:
 8003908:	b538      	push	{r3, r4, r5, lr}
 800390a:	4d06      	ldr	r5, [pc, #24]	; (8003924 <_isatty_r+0x1c>)
 800390c:	2300      	movs	r3, #0
 800390e:	4604      	mov	r4, r0
 8003910:	4608      	mov	r0, r1
 8003912:	602b      	str	r3, [r5, #0]
 8003914:	f7ff f8b4 	bl	8002a80 <_isatty>
 8003918:	1c43      	adds	r3, r0, #1
 800391a:	d102      	bne.n	8003922 <_isatty_r+0x1a>
 800391c:	682b      	ldr	r3, [r5, #0]
 800391e:	b103      	cbz	r3, 8003922 <_isatty_r+0x1a>
 8003920:	6023      	str	r3, [r4, #0]
 8003922:	bd38      	pop	{r3, r4, r5, pc}
 8003924:	2000030c 	.word	0x2000030c

08003928 <_init>:
 8003928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392a:	bf00      	nop
 800392c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800392e:	bc08      	pop	{r3}
 8003930:	469e      	mov	lr, r3
 8003932:	4770      	bx	lr

08003934 <_fini>:
 8003934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003936:	bf00      	nop
 8003938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800393a:	bc08      	pop	{r3}
 800393c:	469e      	mov	lr, r3
 800393e:	4770      	bx	lr
