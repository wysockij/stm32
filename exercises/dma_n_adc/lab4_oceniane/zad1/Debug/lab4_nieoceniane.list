
lab4_nieoceniane.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08005a98  08005a98  00015a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e64  08005e64  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005e64  08005e64  00015e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e6c  08005e6c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e6c  08005e6c  00015e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e70  08005e70  00015e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200001dc  08006050  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08006050  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000050cf  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012cf  00000000  00000000  0002531e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000518  00000000  00000000  000265f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003b5  00000000  00000000  00026b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016006  00000000  00000000  00026ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000068b7  00000000  00000000  0003cec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d51c  00000000  00000000  0004377a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002730  00000000  00000000  000d0c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d33c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005a80 	.word	0x08005a80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08005a80 	.word	0x08005a80

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	0000      	movs	r0, r0
	...

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ebc:	f000 fb96 	bl	80015ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec0:	f000 f878 	bl	8000fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec4:	f000 f934 	bl	8001130 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ec8:	f000 f8de 	bl	8001088 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  initialise_monitor_handles();
 8000ecc:	f002 f882 	bl	8002fd4 <initialise_monitor_handles>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //1
	  HAL_ADC_Start(&hadc1);
 8000ed0:	482f      	ldr	r0, [pc, #188]	; (8000f90 <main+0xd8>)
 8000ed2:	f000 fc65 	bl	80017a0 <HAL_ADC_Start>
//	  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
//	  sConfig.Rank = 1;
//	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
//	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
//	  HAL_ADC_PollForConversion(&hadc1, 100);
	  dane[0] = HAL_ADC_GetValue(&hadc1);
 8000ed6:	482e      	ldr	r0, [pc, #184]	; (8000f90 <main+0xd8>)
 8000ed8:	f000 fd16 	bl	8001908 <HAL_ADC_GetValue>
 8000edc:	4603      	mov	r3, r0
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	4b2c      	ldr	r3, [pc, #176]	; (8000f94 <main+0xdc>)
 8000ee2:	801a      	strh	r2, [r3, #0]
	  printf("temp hexa %x\n", dane[0]);
 8000ee4:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <main+0xdc>)
 8000ee6:	881b      	ldrh	r3, [r3, #0]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	482b      	ldr	r0, [pc, #172]	; (8000f98 <main+0xe0>)
 8000eec:	f002 fe16 	bl	8003b1c <iprintf>
	  printf("temp dec %d\n", dane[0]);
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <main+0xdc>)
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4829      	ldr	r0, [pc, #164]	; (8000f9c <main+0xe4>)
 8000ef8:	f002 fe10 	bl	8003b1c <iprintf>

	  printf("temp celc %f\n",  ((((3.3*(float)dane[0]/4096)-0.76)/2.5)+25));
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <main+0xdc>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	ee07 3a90 	vmov	s15, r3
 8000f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f08:	ee17 0a90 	vmov	r0, s15
 8000f0c:	f7ff fb24 	bl	8000558 <__aeabi_f2d>
 8000f10:	a31b      	add	r3, pc, #108	; (adr r3, 8000f80 <main+0xc8>)
 8000f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f16:	f7ff fb77 	bl	8000608 <__aeabi_dmul>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4619      	mov	r1, r3
 8000f22:	f04f 0200 	mov.w	r2, #0
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <main+0xe8>)
 8000f28:	f7ff fc98 	bl	800085c <__aeabi_ddiv>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	4610      	mov	r0, r2
 8000f32:	4619      	mov	r1, r3
 8000f34:	a314      	add	r3, pc, #80	; (adr r3, 8000f88 <main+0xd0>)
 8000f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3a:	f7ff f9ad 	bl	8000298 <__aeabi_dsub>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	4610      	mov	r0, r2
 8000f44:	4619      	mov	r1, r3
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <main+0xec>)
 8000f4c:	f7ff fc86 	bl	800085c <__aeabi_ddiv>
 8000f50:	4602      	mov	r2, r0
 8000f52:	460b      	mov	r3, r1
 8000f54:	4610      	mov	r0, r2
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 0200 	mov.w	r2, #0
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <main+0xf0>)
 8000f5e:	f7ff f99d 	bl	800029c <__adddf3>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	4811      	ldr	r0, [pc, #68]	; (8000fac <main+0xf4>)
 8000f68:	f002 fdd8 	bl	8003b1c <iprintf>
//	  HAL_ADC_Start_DMA(&hadc1, &dane, 12);
//	  for(int i=0;i<16;i++){
//		  printf("%x\t", dane[i]);
//	  }
	  //printf("\n");
	  HAL_GPIO_TogglePin(blue_GPIO_Port, blue_Pin);
 8000f6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f70:	480f      	ldr	r0, [pc, #60]	; (8000fb0 <main+0xf8>)
 8000f72:	f001 f988 	bl	8002286 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000f76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f7a:	f000 fba9 	bl	80016d0 <HAL_Delay>
  {
 8000f7e:	e7a7      	b.n	8000ed0 <main+0x18>
 8000f80:	66666666 	.word	0x66666666
 8000f84:	400a6666 	.word	0x400a6666
 8000f88:	851eb852 	.word	0x851eb852
 8000f8c:	3fe851eb 	.word	0x3fe851eb
 8000f90:	200001f8 	.word	0x200001f8
 8000f94:	20000240 	.word	0x20000240
 8000f98:	08005a98 	.word	0x08005a98
 8000f9c:	08005aa8 	.word	0x08005aa8
 8000fa0:	40b00000 	.word	0x40b00000
 8000fa4:	40040000 	.word	0x40040000
 8000fa8:	40390000 	.word	0x40390000
 8000fac:	08005ab8 	.word	0x08005ab8
 8000fb0:	40020c00 	.word	0x40020c00

08000fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b094      	sub	sp, #80	; 0x50
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 0320 	add.w	r3, r7, #32
 8000fbe:	2230      	movs	r2, #48	; 0x30
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f002 fdff 	bl	8003bc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	4b28      	ldr	r3, [pc, #160]	; (8001080 <SystemClock_Config+0xcc>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	4a27      	ldr	r2, [pc, #156]	; (8001080 <SystemClock_Config+0xcc>)
 8000fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe8:	4b25      	ldr	r3, [pc, #148]	; (8001080 <SystemClock_Config+0xcc>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	4b22      	ldr	r3, [pc, #136]	; (8001084 <SystemClock_Config+0xd0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a21      	ldr	r2, [pc, #132]	; (8001084 <SystemClock_Config+0xd0>)
 8000ffe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <SystemClock_Config+0xd0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001010:	2302      	movs	r3, #2
 8001012:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001014:	2301      	movs	r3, #1
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001018:	2310      	movs	r3, #16
 800101a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101c:	2302      	movs	r3, #2
 800101e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001020:	2300      	movs	r3, #0
 8001022:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001024:	2308      	movs	r3, #8
 8001026:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001028:	23c0      	movs	r3, #192	; 0xc0
 800102a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800102c:	2304      	movs	r3, #4
 800102e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001030:	2308      	movs	r3, #8
 8001032:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001034:	f107 0320 	add.w	r3, r7, #32
 8001038:	4618      	mov	r0, r3
 800103a:	f001 f93f 	bl	80022bc <HAL_RCC_OscConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001044:	f000 f9c4 	bl	80013d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001048:	230f      	movs	r3, #15
 800104a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104c:	2302      	movs	r3, #2
 800104e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001054:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001058:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800105a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	2103      	movs	r1, #3
 8001066:	4618      	mov	r0, r3
 8001068:	f001 fba0 	bl	80027ac <HAL_RCC_ClockConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001072:	f000 f9ad 	bl	80013d0 <Error_Handler>
  }
}
 8001076:	bf00      	nop
 8001078:	3750      	adds	r7, #80	; 0x50
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40007000 	.word	0x40007000

08001088 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108e:	463b      	mov	r3, r7
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800109a:	4b21      	ldr	r3, [pc, #132]	; (8001120 <MX_ADC1_Init+0x98>)
 800109c:	4a21      	ldr	r2, [pc, #132]	; (8001124 <MX_ADC1_Init+0x9c>)
 800109e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010a0:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <MX_ADC1_Init+0x98>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a6:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <MX_ADC1_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80010ac:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <MX_ADC1_Init+0x98>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010b2:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_ADC1_Init+0x98>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <MX_ADC1_Init+0x98>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <MX_ADC1_Init+0x98>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c6:	4b16      	ldr	r3, [pc, #88]	; (8001120 <MX_ADC1_Init+0x98>)
 80010c8:	4a17      	ldr	r2, [pc, #92]	; (8001128 <MX_ADC1_Init+0xa0>)
 80010ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010cc:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_ADC1_Init+0x98>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <MX_ADC1_Init+0x98>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_ADC1_Init+0x98>)
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_ADC1_Init+0x98>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010e6:	480e      	ldr	r0, [pc, #56]	; (8001120 <MX_ADC1_Init+0x98>)
 80010e8:	f000 fb16 	bl	8001718 <HAL_ADC_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010f2:	f000 f96d 	bl	80013d0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <MX_ADC1_Init+0xa4>)
 80010f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010fa:	2301      	movs	r3, #1
 80010fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010fe:	2307      	movs	r3, #7
 8001100:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001102:	463b      	mov	r3, r7
 8001104:	4619      	mov	r1, r3
 8001106:	4806      	ldr	r0, [pc, #24]	; (8001120 <MX_ADC1_Init+0x98>)
 8001108:	f000 fc0c 	bl	8001924 <HAL_ADC_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001112:	f000 f95d 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001f8 	.word	0x200001f8
 8001124:	40012000 	.word	0x40012000
 8001128:	0f000001 	.word	0x0f000001
 800112c:	10000012 	.word	0x10000012

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	; 0x30
 8001134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
 800114a:	4b9b      	ldr	r3, [pc, #620]	; (80013b8 <MX_GPIO_Init+0x288>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a9a      	ldr	r2, [pc, #616]	; (80013b8 <MX_GPIO_Init+0x288>)
 8001150:	f043 0310 	orr.w	r3, r3, #16
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b98      	ldr	r3, [pc, #608]	; (80013b8 <MX_GPIO_Init+0x288>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0310 	and.w	r3, r3, #16
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	4b94      	ldr	r3, [pc, #592]	; (80013b8 <MX_GPIO_Init+0x288>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a93      	ldr	r2, [pc, #588]	; (80013b8 <MX_GPIO_Init+0x288>)
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b91      	ldr	r3, [pc, #580]	; (80013b8 <MX_GPIO_Init+0x288>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b8d      	ldr	r3, [pc, #564]	; (80013b8 <MX_GPIO_Init+0x288>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a8c      	ldr	r2, [pc, #560]	; (80013b8 <MX_GPIO_Init+0x288>)
 8001188:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b8a      	ldr	r3, [pc, #552]	; (80013b8 <MX_GPIO_Init+0x288>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b86      	ldr	r3, [pc, #536]	; (80013b8 <MX_GPIO_Init+0x288>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a85      	ldr	r2, [pc, #532]	; (80013b8 <MX_GPIO_Init+0x288>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b83      	ldr	r3, [pc, #524]	; (80013b8 <MX_GPIO_Init+0x288>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	4b7f      	ldr	r3, [pc, #508]	; (80013b8 <MX_GPIO_Init+0x288>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a7e      	ldr	r2, [pc, #504]	; (80013b8 <MX_GPIO_Init+0x288>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b7c      	ldr	r3, [pc, #496]	; (80013b8 <MX_GPIO_Init+0x288>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	4b78      	ldr	r3, [pc, #480]	; (80013b8 <MX_GPIO_Init+0x288>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a77      	ldr	r2, [pc, #476]	; (80013b8 <MX_GPIO_Init+0x288>)
 80011dc:	f043 0308 	orr.w	r3, r3, #8
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b75      	ldr	r3, [pc, #468]	; (80013b8 <MX_GPIO_Init+0x288>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	2108      	movs	r1, #8
 80011f2:	4872      	ldr	r0, [pc, #456]	; (80013bc <MX_GPIO_Init+0x28c>)
 80011f4:	f001 f82e 	bl	8002254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2101      	movs	r1, #1
 80011fc:	4870      	ldr	r0, [pc, #448]	; (80013c0 <MX_GPIO_Init+0x290>)
 80011fe:	f001 f829 	bl	8002254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|blue_Pin
 8001202:	2200      	movs	r2, #0
 8001204:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001208:	486e      	ldr	r0, [pc, #440]	; (80013c4 <MX_GPIO_Init+0x294>)
 800120a:	f001 f823 	bl	8002254 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800120e:	2304      	movs	r3, #4
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	4866      	ldr	r0, [pc, #408]	; (80013bc <MX_GPIO_Init+0x28c>)
 8001222:	f000 fe93 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001226:	2308      	movs	r3, #8
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122a:	2301      	movs	r3, #1
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	485f      	ldr	r0, [pc, #380]	; (80013bc <MX_GPIO_Init+0x28c>)
 800123e:	f000 fe85 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8001242:	2332      	movs	r3, #50	; 0x32
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001246:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800124a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	4859      	ldr	r0, [pc, #356]	; (80013bc <MX_GPIO_Init+0x28c>)
 8001258:	f000 fe78 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800125c:	2301      	movs	r3, #1
 800125e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001260:	2301      	movs	r3, #1
 8001262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4619      	mov	r1, r3
 8001272:	4853      	ldr	r0, [pc, #332]	; (80013c0 <MX_GPIO_Init+0x290>)
 8001274:	f000 fe6a 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001278:	2308      	movs	r3, #8
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001288:	2305      	movs	r3, #5
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	4619      	mov	r1, r3
 8001292:	484b      	ldr	r0, [pc, #300]	; (80013c0 <MX_GPIO_Init+0x290>)
 8001294:	f000 fe5a 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001298:	2310      	movs	r3, #16
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012a8:	2306      	movs	r3, #6
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4845      	ldr	r0, [pc, #276]	; (80013c8 <MX_GPIO_Init+0x298>)
 80012b4:	f000 fe4a 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80012b8:	23e0      	movs	r3, #224	; 0xe0
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012c8:	2305      	movs	r3, #5
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	483d      	ldr	r0, [pc, #244]	; (80013c8 <MX_GPIO_Init+0x298>)
 80012d4:	f000 fe3a 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80012d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ea:	2305      	movs	r3, #5
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	4835      	ldr	r0, [pc, #212]	; (80013cc <MX_GPIO_Init+0x29c>)
 80012f6:	f000 fe29 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin blue_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|blue_Pin
 80012fa:	f24f 0310 	movw	r3, #61456	; 0xf010
 80012fe:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	482c      	ldr	r0, [pc, #176]	; (80013c4 <MX_GPIO_Init+0x294>)
 8001314:	f000 fe1a 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001318:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800132a:	2306      	movs	r3, #6
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	4619      	mov	r1, r3
 8001334:	4822      	ldr	r0, [pc, #136]	; (80013c0 <MX_GPIO_Init+0x290>)
 8001336:	f000 fe09 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800133a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	481e      	ldr	r0, [pc, #120]	; (80013c8 <MX_GPIO_Init+0x298>)
 8001350:	f000 fdfc 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001354:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001358:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001366:	230a      	movs	r3, #10
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	4815      	ldr	r0, [pc, #84]	; (80013c8 <MX_GPIO_Init+0x298>)
 8001372:	f000 fdeb 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001376:	2320      	movs	r3, #32
 8001378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	480e      	ldr	r0, [pc, #56]	; (80013c4 <MX_GPIO_Init+0x294>)
 800138a:	f000 fddf 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800138e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001394:	2312      	movs	r3, #18
 8001396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013a0:	2304      	movs	r3, #4
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4619      	mov	r1, r3
 80013aa:	4808      	ldr	r0, [pc, #32]	; (80013cc <MX_GPIO_Init+0x29c>)
 80013ac:	f000 fdce 	bl	8001f4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013b0:	bf00      	nop
 80013b2:	3730      	adds	r7, #48	; 0x30
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40020400 	.word	0x40020400

080013d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d4:	b672      	cpsid	i
}
 80013d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <Error_Handler+0x8>
	...

080013dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <HAL_MspInit+0x4c>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <HAL_MspInit+0x4c>)
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HAL_MspInit+0x4c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_MspInit+0x4c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a08      	ldr	r2, [pc, #32]	; (8001428 <HAL_MspInit+0x4c>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_MspInit+0x4c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800141a:	2007      	movs	r0, #7
 800141c:	f000 fd62 	bl	8001ee4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40023800 	.word	0x40023800

0800142c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a17      	ldr	r2, [pc, #92]	; (80014a8 <HAL_ADC_MspInit+0x7c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d127      	bne.n	800149e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <HAL_ADC_MspInit+0x80>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a15      	ldr	r2, [pc, #84]	; (80014ac <HAL_ADC_MspInit+0x80>)
 8001458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <HAL_ADC_MspInit+0x80>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <HAL_ADC_MspInit+0x80>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <HAL_ADC_MspInit+0x80>)
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <HAL_ADC_MspInit+0x80>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001486:	2301      	movs	r3, #1
 8001488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148a:	2303      	movs	r3, #3
 800148c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001492:	f107 0314 	add.w	r3, r7, #20
 8001496:	4619      	mov	r1, r3
 8001498:	4805      	ldr	r0, [pc, #20]	; (80014b0 <HAL_ADC_MspInit+0x84>)
 800149a:	f000 fd57 	bl	8001f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800149e:	bf00      	nop
 80014a0:	3728      	adds	r7, #40	; 0x28
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40012000 	.word	0x40012000
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40020000 	.word	0x40020000

080014b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <NMI_Handler+0x4>

080014ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <HardFault_Handler+0x4>

080014c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <MemManage_Handler+0x4>

080014c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ca:	e7fe      	b.n	80014ca <BusFault_Handler+0x4>

080014cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <UsageFault_Handler+0x4>

080014d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001500:	f000 f8c6 	bl	8001690 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001510:	4a14      	ldr	r2, [pc, #80]	; (8001564 <_sbrk+0x5c>)
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <_sbrk+0x60>)
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d102      	bne.n	800152a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <_sbrk+0x64>)
 8001526:	4a12      	ldr	r2, [pc, #72]	; (8001570 <_sbrk+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	429a      	cmp	r2, r3
 8001536:	d207      	bcs.n	8001548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001538:	f002 fb98 	bl	8003c6c <__errno>
 800153c:	4603      	mov	r3, r0
 800153e:	220c      	movs	r2, #12
 8001540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	e009      	b.n	800155c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <_sbrk+0x64>)
 8001558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155a:	68fb      	ldr	r3, [r7, #12]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20020000 	.word	0x20020000
 8001568:	00000400 	.word	0x00000400
 800156c:	20000260 	.word	0x20000260
 8001570:	20000460 	.word	0x20000460

08001574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <SystemInit+0x20>)
 800157a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <SystemInit+0x20>)
 8001580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800159c:	480d      	ldr	r0, [pc, #52]	; (80015d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800159e:	490e      	ldr	r1, [pc, #56]	; (80015d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015a0:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a4:	e002      	b.n	80015ac <LoopCopyDataInit>

080015a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015aa:	3304      	adds	r3, #4

080015ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b0:	d3f9      	bcc.n	80015a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b2:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015b4:	4c0b      	ldr	r4, [pc, #44]	; (80015e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b8:	e001      	b.n	80015be <LoopFillZerobss>

080015ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015bc:	3204      	adds	r2, #4

080015be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c0:	d3fb      	bcc.n	80015ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015c2:	f7ff ffd7 	bl	8001574 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015c6:	f002 fb57 	bl	8003c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ca:	f7ff fc75 	bl	8000eb8 <main>
  bx  lr    
 80015ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80015dc:	08005e74 	.word	0x08005e74
  ldr r2, =_sbss
 80015e0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80015e4:	20000460 	.word	0x20000460

080015e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e8:	e7fe      	b.n	80015e8 <ADC_IRQHandler>
	...

080015ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_Init+0x40>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0d      	ldr	r2, [pc, #52]	; (800162c <HAL_Init+0x40>)
 80015f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015fc:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0a      	ldr	r2, [pc, #40]	; (800162c <HAL_Init+0x40>)
 8001602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001606:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a07      	ldr	r2, [pc, #28]	; (800162c <HAL_Init+0x40>)
 800160e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001612:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001614:	2003      	movs	r0, #3
 8001616:	f000 fc65 	bl	8001ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800161a:	2000      	movs	r0, #0
 800161c:	f000 f808 	bl	8001630 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001620:	f7ff fedc 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40023c00 	.word	0x40023c00

08001630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001638:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_InitTick+0x54>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_InitTick+0x58>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001646:	fbb3 f3f1 	udiv	r3, r3, r1
 800164a:	fbb2 f3f3 	udiv	r3, r2, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f000 fc6f 	bl	8001f32 <HAL_SYSTICK_Config>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e00e      	b.n	800167c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2b0f      	cmp	r3, #15
 8001662:	d80a      	bhi.n	800167a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001664:	2200      	movs	r2, #0
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	f04f 30ff 	mov.w	r0, #4294967295
 800166c:	f000 fc45 	bl	8001efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001670:	4a06      	ldr	r2, [pc, #24]	; (800168c <HAL_InitTick+0x5c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e000      	b.n	800167c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000000 	.word	0x20000000
 8001688:	20000008 	.word	0x20000008
 800168c:	20000004 	.word	0x20000004

08001690 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_IncTick+0x20>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	461a      	mov	r2, r3
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_IncTick+0x24>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4413      	add	r3, r2
 80016a0:	4a04      	ldr	r2, [pc, #16]	; (80016b4 <HAL_IncTick+0x24>)
 80016a2:	6013      	str	r3, [r2, #0]
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	20000008 	.word	0x20000008
 80016b4:	20000264 	.word	0x20000264

080016b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return uwTick;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <HAL_GetTick+0x14>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000264 	.word	0x20000264

080016d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d8:	f7ff ffee 	bl	80016b8 <HAL_GetTick>
 80016dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e8:	d005      	beq.n	80016f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_Delay+0x44>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4413      	add	r3, r2
 80016f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016f6:	bf00      	nop
 80016f8:	f7ff ffde 	bl	80016b8 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	429a      	cmp	r2, r3
 8001706:	d8f7      	bhi.n	80016f8 <HAL_Delay+0x28>
  {
  }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000008 	.word	0x20000008

08001718 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e033      	b.n	8001796 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	2b00      	cmp	r3, #0
 8001734:	d109      	bne.n	800174a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fe78 	bl	800142c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f003 0310 	and.w	r3, r3, #16
 8001752:	2b00      	cmp	r3, #0
 8001754:	d118      	bne.n	8001788 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800175e:	f023 0302 	bic.w	r3, r3, #2
 8001762:	f043 0202 	orr.w	r2, r3, #2
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 fa0c 	bl	8001b88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f023 0303 	bic.w	r3, r3, #3
 800177e:	f043 0201 	orr.w	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	641a      	str	r2, [r3, #64]	; 0x40
 8001786:	e001      	b.n	800178c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_ADC_Start+0x1a>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e097      	b.n	80018ea <HAL_ADC_Start+0x14a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d018      	beq.n	8001802 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017e0:	4b45      	ldr	r3, [pc, #276]	; (80018f8 <HAL_ADC_Start+0x158>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a45      	ldr	r2, [pc, #276]	; (80018fc <HAL_ADC_Start+0x15c>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0c9a      	lsrs	r2, r3, #18
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80017f4:	e002      	b.n	80017fc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f9      	bne.n	80017f6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b01      	cmp	r3, #1
 800180e:	d15f      	bne.n	80018d0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182e:	2b00      	cmp	r3, #0
 8001830:	d007      	beq.n	8001842 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800183a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800184a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800184e:	d106      	bne.n	800185e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001854:	f023 0206 	bic.w	r2, r3, #6
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	645a      	str	r2, [r3, #68]	; 0x44
 800185c:	e002      	b.n	8001864 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800186c:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_ADC_Start+0x160>)
 800186e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001878:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 031f 	and.w	r3, r3, #31
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10f      	bne.n	80018a6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d129      	bne.n	80018e8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	e020      	b.n	80018e8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a16      	ldr	r2, [pc, #88]	; (8001904 <HAL_ADC_Start+0x164>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d11b      	bne.n	80018e8 <HAL_ADC_Start+0x148>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d114      	bne.n	80018e8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	e00b      	b.n	80018e8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f043 0210 	orr.w	r2, r3, #16
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e0:	f043 0201 	orr.w	r2, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	20000000 	.word	0x20000000
 80018fc:	431bde83 	.word	0x431bde83
 8001900:	40012300 	.word	0x40012300
 8001904:	40012000 	.word	0x40012000

08001908 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x1c>
 800193c:	2302      	movs	r3, #2
 800193e:	e113      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x244>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b09      	cmp	r3, #9
 800194e:	d925      	bls.n	800199c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68d9      	ldr	r1, [r3, #12]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	b29b      	uxth	r3, r3
 800195c:	461a      	mov	r2, r3
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	3b1e      	subs	r3, #30
 8001966:	2207      	movs	r2, #7
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43da      	mvns	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	400a      	ands	r2, r1
 8001974:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68d9      	ldr	r1, [r3, #12]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	b29b      	uxth	r3, r3
 8001986:	4618      	mov	r0, r3
 8001988:	4603      	mov	r3, r0
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4403      	add	r3, r0
 800198e:	3b1e      	subs	r3, #30
 8001990:	409a      	lsls	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	e022      	b.n	80019e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6919      	ldr	r1, [r3, #16]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	461a      	mov	r2, r3
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	2207      	movs	r2, #7
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43da      	mvns	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	400a      	ands	r2, r1
 80019be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6919      	ldr	r1, [r3, #16]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	4618      	mov	r0, r3
 80019d2:	4603      	mov	r3, r0
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4403      	add	r3, r0
 80019d8:	409a      	lsls	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d824      	bhi.n	8001a34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	3b05      	subs	r3, #5
 80019fc:	221f      	movs	r2, #31
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	400a      	ands	r2, r1
 8001a0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	4618      	mov	r0, r3
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	3b05      	subs	r3, #5
 8001a26:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	635a      	str	r2, [r3, #52]	; 0x34
 8001a32:	e04c      	b.n	8001ace <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b0c      	cmp	r3, #12
 8001a3a:	d824      	bhi.n	8001a86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	3b23      	subs	r3, #35	; 0x23
 8001a4e:	221f      	movs	r2, #31
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43da      	mvns	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	400a      	ands	r2, r1
 8001a5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	4413      	add	r3, r2
 8001a76:	3b23      	subs	r3, #35	; 0x23
 8001a78:	fa00 f203 	lsl.w	r2, r0, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	631a      	str	r2, [r3, #48]	; 0x30
 8001a84:	e023      	b.n	8001ace <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	3b41      	subs	r3, #65	; 0x41
 8001a98:	221f      	movs	r2, #31
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b41      	subs	r3, #65	; 0x41
 8001ac2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ace:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <HAL_ADC_ConfigChannel+0x250>)
 8001ad0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a28      	ldr	r2, [pc, #160]	; (8001b78 <HAL_ADC_ConfigChannel+0x254>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d10f      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x1d8>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2b12      	cmp	r3, #18
 8001ae2:	d10b      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <HAL_ADC_ConfigChannel+0x254>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d12b      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x23a>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a1c      	ldr	r2, [pc, #112]	; (8001b7c <HAL_ADC_ConfigChannel+0x258>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d003      	beq.n	8001b18 <HAL_ADC_ConfigChannel+0x1f4>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b11      	cmp	r3, #17
 8001b16:	d122      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a11      	ldr	r2, [pc, #68]	; (8001b7c <HAL_ADC_ConfigChannel+0x258>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d111      	bne.n	8001b5e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_ADC_ConfigChannel+0x25c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <HAL_ADC_ConfigChannel+0x260>)
 8001b40:	fba2 2303 	umull	r2, r3, r2, r3
 8001b44:	0c9a      	lsrs	r2, r3, #18
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b50:	e002      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	3b01      	subs	r3, #1
 8001b56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f9      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	40012300 	.word	0x40012300
 8001b78:	40012000 	.word	0x40012000
 8001b7c:	10000012 	.word	0x10000012
 8001b80:	20000000 	.word	0x20000000
 8001b84:	431bde83 	.word	0x431bde83

08001b88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b90:	4b79      	ldr	r3, [pc, #484]	; (8001d78 <ADC_Init+0x1f0>)
 8001b92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	021a      	lsls	r2, r3, #8
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001be0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6859      	ldr	r1, [r3, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6899      	ldr	r1, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1a:	4a58      	ldr	r2, [pc, #352]	; (8001d7c <ADC_Init+0x1f4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d022      	beq.n	8001c66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6899      	ldr	r1, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6899      	ldr	r1, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	e00f      	b.n	8001c86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0202 	bic.w	r2, r2, #2
 8001c94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6899      	ldr	r1, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	7e1b      	ldrb	r3, [r3, #24]
 8001ca0:	005a      	lsls	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d01b      	beq.n	8001cec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6859      	ldr	r1, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	035a      	lsls	r2, r3, #13
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	e007      	b.n	8001cfc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cfa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	051a      	lsls	r2, r3, #20
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6899      	ldr	r1, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d3e:	025a      	lsls	r2, r3, #9
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6899      	ldr	r1, [r3, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	029a      	lsls	r2, r3, #10
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	609a      	str	r2, [r3, #8]
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	40012300 	.word	0x40012300
 8001d7c:	0f000001 	.word	0x0f000001

08001d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db2:	4a04      	ldr	r2, [pc, #16]	; (8001dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	60d3      	str	r3, [r2, #12]
}
 8001db8:	bf00      	nop
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	f003 0307 	and.w	r3, r3, #7
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	db0a      	blt.n	8001e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	490c      	ldr	r1, [pc, #48]	; (8001e30 <__NVIC_SetPriority+0x4c>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	0112      	lsls	r2, r2, #4
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	440b      	add	r3, r1
 8001e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e0c:	e00a      	b.n	8001e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4908      	ldr	r1, [pc, #32]	; (8001e34 <__NVIC_SetPriority+0x50>)
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	3b04      	subs	r3, #4
 8001e1c:	0112      	lsls	r2, r2, #4
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	440b      	add	r3, r1
 8001e22:	761a      	strb	r2, [r3, #24]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000e100 	.word	0xe000e100
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f1c3 0307 	rsb	r3, r3, #7
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	bf28      	it	cs
 8001e56:	2304      	movcs	r3, #4
 8001e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	2b06      	cmp	r3, #6
 8001e60:	d902      	bls.n	8001e68 <NVIC_EncodePriority+0x30>
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3b03      	subs	r3, #3
 8001e66:	e000      	b.n	8001e6a <NVIC_EncodePriority+0x32>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43da      	mvns	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	43d9      	mvns	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	4313      	orrs	r3, r2
         );
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3724      	adds	r7, #36	; 0x24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eb0:	d301      	bcc.n	8001eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e00f      	b.n	8001ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <SysTick_Config+0x40>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ebe:	210f      	movs	r1, #15
 8001ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec4:	f7ff ff8e 	bl	8001de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <SysTick_Config+0x40>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ece:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <SysTick_Config+0x40>)
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	e000e010 	.word	0xe000e010

08001ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ff47 	bl	8001d80 <__NVIC_SetPriorityGrouping>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b086      	sub	sp, #24
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f0c:	f7ff ff5c 	bl	8001dc8 <__NVIC_GetPriorityGrouping>
 8001f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	6978      	ldr	r0, [r7, #20]
 8001f18:	f7ff ff8e 	bl	8001e38 <NVIC_EncodePriority>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff5d 	bl	8001de4 <__NVIC_SetPriority>
}
 8001f2a:	bf00      	nop
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ffb0 	bl	8001ea0 <SysTick_Config>
 8001f40:	4603      	mov	r3, r0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	e159      	b.n	800221c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f68:	2201      	movs	r2, #1
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	f040 8148 	bne.w	8002216 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d005      	beq.n	8001f9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d130      	bne.n	8002000 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	2203      	movs	r2, #3
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 0201 	and.w	r2, r3, #1
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	2b03      	cmp	r3, #3
 800200a:	d017      	beq.n	800203c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	2203      	movs	r2, #3
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d123      	bne.n	8002090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	08da      	lsrs	r2, r3, #3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3208      	adds	r2, #8
 8002050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	220f      	movs	r2, #15
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	08da      	lsrs	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3208      	adds	r2, #8
 800208a:	69b9      	ldr	r1, [r7, #24]
 800208c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2203      	movs	r2, #3
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0203 	and.w	r2, r3, #3
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 80a2 	beq.w	8002216 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	4b57      	ldr	r3, [pc, #348]	; (8002234 <HAL_GPIO_Init+0x2e8>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	4a56      	ldr	r2, [pc, #344]	; (8002234 <HAL_GPIO_Init+0x2e8>)
 80020dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e0:	6453      	str	r3, [r2, #68]	; 0x44
 80020e2:	4b54      	ldr	r3, [pc, #336]	; (8002234 <HAL_GPIO_Init+0x2e8>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ee:	4a52      	ldr	r2, [pc, #328]	; (8002238 <HAL_GPIO_Init+0x2ec>)
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	3302      	adds	r3, #2
 80020f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	220f      	movs	r2, #15
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a49      	ldr	r2, [pc, #292]	; (800223c <HAL_GPIO_Init+0x2f0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d019      	beq.n	800214e <HAL_GPIO_Init+0x202>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a48      	ldr	r2, [pc, #288]	; (8002240 <HAL_GPIO_Init+0x2f4>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d013      	beq.n	800214a <HAL_GPIO_Init+0x1fe>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a47      	ldr	r2, [pc, #284]	; (8002244 <HAL_GPIO_Init+0x2f8>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d00d      	beq.n	8002146 <HAL_GPIO_Init+0x1fa>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a46      	ldr	r2, [pc, #280]	; (8002248 <HAL_GPIO_Init+0x2fc>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d007      	beq.n	8002142 <HAL_GPIO_Init+0x1f6>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a45      	ldr	r2, [pc, #276]	; (800224c <HAL_GPIO_Init+0x300>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d101      	bne.n	800213e <HAL_GPIO_Init+0x1f2>
 800213a:	2304      	movs	r3, #4
 800213c:	e008      	b.n	8002150 <HAL_GPIO_Init+0x204>
 800213e:	2307      	movs	r3, #7
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x204>
 8002142:	2303      	movs	r3, #3
 8002144:	e004      	b.n	8002150 <HAL_GPIO_Init+0x204>
 8002146:	2302      	movs	r3, #2
 8002148:	e002      	b.n	8002150 <HAL_GPIO_Init+0x204>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_GPIO_Init+0x204>
 800214e:	2300      	movs	r3, #0
 8002150:	69fa      	ldr	r2, [r7, #28]
 8002152:	f002 0203 	and.w	r2, r2, #3
 8002156:	0092      	lsls	r2, r2, #2
 8002158:	4093      	lsls	r3, r2
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002160:	4935      	ldr	r1, [pc, #212]	; (8002238 <HAL_GPIO_Init+0x2ec>)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	3302      	adds	r3, #2
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800216e:	4b38      	ldr	r3, [pc, #224]	; (8002250 <HAL_GPIO_Init+0x304>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002192:	4a2f      	ldr	r2, [pc, #188]	; (8002250 <HAL_GPIO_Init+0x304>)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002198:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <HAL_GPIO_Init+0x304>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021bc:	4a24      	ldr	r2, [pc, #144]	; (8002250 <HAL_GPIO_Init+0x304>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021c2:	4b23      	ldr	r3, [pc, #140]	; (8002250 <HAL_GPIO_Init+0x304>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021e6:	4a1a      	ldr	r2, [pc, #104]	; (8002250 <HAL_GPIO_Init+0x304>)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ec:	4b18      	ldr	r3, [pc, #96]	; (8002250 <HAL_GPIO_Init+0x304>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002210:	4a0f      	ldr	r2, [pc, #60]	; (8002250 <HAL_GPIO_Init+0x304>)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3301      	adds	r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b0f      	cmp	r3, #15
 8002220:	f67f aea2 	bls.w	8001f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	40013800 	.word	0x40013800
 800223c:	40020000 	.word	0x40020000
 8002240:	40020400 	.word	0x40020400
 8002244:	40020800 	.word	0x40020800
 8002248:	40020c00 	.word	0x40020c00
 800224c:	40021000 	.word	0x40021000
 8002250:	40013c00 	.word	0x40013c00

08002254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	807b      	strh	r3, [r7, #2]
 8002260:	4613      	mov	r3, r2
 8002262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002264:	787b      	ldrb	r3, [r7, #1]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800226a:	887a      	ldrh	r2, [r7, #2]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002270:	e003      	b.n	800227a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002272:	887b      	ldrh	r3, [r7, #2]
 8002274:	041a      	lsls	r2, r3, #16
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	619a      	str	r2, [r3, #24]
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002286:	b480      	push	{r7}
 8002288:	b085      	sub	sp, #20
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	460b      	mov	r3, r1
 8002290:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002298:	887a      	ldrh	r2, [r7, #2]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4013      	ands	r3, r2
 800229e:	041a      	lsls	r2, r3, #16
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	43d9      	mvns	r1, r3
 80022a4:	887b      	ldrh	r3, [r7, #2]
 80022a6:	400b      	ands	r3, r1
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	619a      	str	r2, [r3, #24]
}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
	...

080022bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e267      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d075      	beq.n	80023c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022da:	4b88      	ldr	r3, [pc, #544]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d00c      	beq.n	8002300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022e6:	4b85      	ldr	r3, [pc, #532]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d112      	bne.n	8002318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f2:	4b82      	ldr	r3, [pc, #520]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022fe:	d10b      	bne.n	8002318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002300:	4b7e      	ldr	r3, [pc, #504]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d05b      	beq.n	80023c4 <HAL_RCC_OscConfig+0x108>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d157      	bne.n	80023c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e242      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002320:	d106      	bne.n	8002330 <HAL_RCC_OscConfig+0x74>
 8002322:	4b76      	ldr	r3, [pc, #472]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a75      	ldr	r2, [pc, #468]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e01d      	b.n	800236c <HAL_RCC_OscConfig+0xb0>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0x98>
 800233a:	4b70      	ldr	r3, [pc, #448]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a6f      	ldr	r2, [pc, #444]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b6d      	ldr	r3, [pc, #436]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a6c      	ldr	r2, [pc, #432]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e00b      	b.n	800236c <HAL_RCC_OscConfig+0xb0>
 8002354:	4b69      	ldr	r3, [pc, #420]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a68      	ldr	r2, [pc, #416]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 800235a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	4b66      	ldr	r3, [pc, #408]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a65      	ldr	r2, [pc, #404]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d013      	beq.n	800239c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff f9a0 	bl	80016b8 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800237c:	f7ff f99c 	bl	80016b8 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e207      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b5b      	ldr	r3, [pc, #364]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0xc0>
 800239a:	e014      	b.n	80023c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7ff f98c 	bl	80016b8 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a4:	f7ff f988 	bl	80016b8 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e1f3      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b6:	4b51      	ldr	r3, [pc, #324]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0xe8>
 80023c2:	e000      	b.n	80023c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d063      	beq.n	800249a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023d2:	4b4a      	ldr	r3, [pc, #296]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00b      	beq.n	80023f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d11c      	bne.n	8002424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ea:	4b44      	ldr	r3, [pc, #272]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d116      	bne.n	8002424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f6:	4b41      	ldr	r3, [pc, #260]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d005      	beq.n	800240e <HAL_RCC_OscConfig+0x152>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d001      	beq.n	800240e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e1c7      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240e:	4b3b      	ldr	r3, [pc, #236]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4937      	ldr	r1, [pc, #220]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	e03a      	b.n	800249a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d020      	beq.n	800246e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800242c:	4b34      	ldr	r3, [pc, #208]	; (8002500 <HAL_RCC_OscConfig+0x244>)
 800242e:	2201      	movs	r2, #1
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002432:	f7ff f941 	bl	80016b8 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800243a:	f7ff f93d 	bl	80016b8 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e1a8      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244c:	4b2b      	ldr	r3, [pc, #172]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002458:	4b28      	ldr	r3, [pc, #160]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4925      	ldr	r1, [pc, #148]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002468:	4313      	orrs	r3, r2
 800246a:	600b      	str	r3, [r1, #0]
 800246c:	e015      	b.n	800249a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800246e:	4b24      	ldr	r3, [pc, #144]	; (8002500 <HAL_RCC_OscConfig+0x244>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7ff f920 	bl	80016b8 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800247c:	f7ff f91c 	bl	80016b8 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e187      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248e:	4b1b      	ldr	r3, [pc, #108]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d036      	beq.n	8002514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d016      	beq.n	80024dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_RCC_OscConfig+0x248>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b4:	f7ff f900 	bl	80016b8 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024bc:	f7ff f8fc 	bl	80016b8 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e167      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCC_OscConfig+0x240>)
 80024d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x200>
 80024da:	e01b      	b.n	8002514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_RCC_OscConfig+0x248>)
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e2:	f7ff f8e9 	bl	80016b8 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e8:	e00e      	b.n	8002508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ea:	f7ff f8e5 	bl	80016b8 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d907      	bls.n	8002508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e150      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
 80024fc:	40023800 	.word	0x40023800
 8002500:	42470000 	.word	0x42470000
 8002504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002508:	4b88      	ldr	r3, [pc, #544]	; (800272c <HAL_RCC_OscConfig+0x470>)
 800250a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1ea      	bne.n	80024ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 8097 	beq.w	8002650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002522:	2300      	movs	r3, #0
 8002524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002526:	4b81      	ldr	r3, [pc, #516]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10f      	bne.n	8002552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	4b7d      	ldr	r3, [pc, #500]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	4a7c      	ldr	r2, [pc, #496]	; (800272c <HAL_RCC_OscConfig+0x470>)
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002540:	6413      	str	r3, [r2, #64]	; 0x40
 8002542:	4b7a      	ldr	r3, [pc, #488]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800254e:	2301      	movs	r3, #1
 8002550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002552:	4b77      	ldr	r3, [pc, #476]	; (8002730 <HAL_RCC_OscConfig+0x474>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255a:	2b00      	cmp	r3, #0
 800255c:	d118      	bne.n	8002590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800255e:	4b74      	ldr	r3, [pc, #464]	; (8002730 <HAL_RCC_OscConfig+0x474>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a73      	ldr	r2, [pc, #460]	; (8002730 <HAL_RCC_OscConfig+0x474>)
 8002564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256a:	f7ff f8a5 	bl	80016b8 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002572:	f7ff f8a1 	bl	80016b8 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e10c      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002584:	4b6a      	ldr	r3, [pc, #424]	; (8002730 <HAL_RCC_OscConfig+0x474>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d106      	bne.n	80025a6 <HAL_RCC_OscConfig+0x2ea>
 8002598:	4b64      	ldr	r3, [pc, #400]	; (800272c <HAL_RCC_OscConfig+0x470>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	4a63      	ldr	r2, [pc, #396]	; (800272c <HAL_RCC_OscConfig+0x470>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6713      	str	r3, [r2, #112]	; 0x70
 80025a4:	e01c      	b.n	80025e0 <HAL_RCC_OscConfig+0x324>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	2b05      	cmp	r3, #5
 80025ac:	d10c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x30c>
 80025ae:	4b5f      	ldr	r3, [pc, #380]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b2:	4a5e      	ldr	r2, [pc, #376]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ba:	4b5c      	ldr	r3, [pc, #368]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	4a5b      	ldr	r2, [pc, #364]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	6713      	str	r3, [r2, #112]	; 0x70
 80025c6:	e00b      	b.n	80025e0 <HAL_RCC_OscConfig+0x324>
 80025c8:	4b58      	ldr	r3, [pc, #352]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025cc:	4a57      	ldr	r2, [pc, #348]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025ce:	f023 0301 	bic.w	r3, r3, #1
 80025d2:	6713      	str	r3, [r2, #112]	; 0x70
 80025d4:	4b55      	ldr	r3, [pc, #340]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d8:	4a54      	ldr	r2, [pc, #336]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80025da:	f023 0304 	bic.w	r3, r3, #4
 80025de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d015      	beq.n	8002614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e8:	f7ff f866 	bl	80016b8 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f0:	f7ff f862 	bl	80016b8 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e0cb      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002606:	4b49      	ldr	r3, [pc, #292]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0ee      	beq.n	80025f0 <HAL_RCC_OscConfig+0x334>
 8002612:	e014      	b.n	800263e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002614:	f7ff f850 	bl	80016b8 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800261a:	e00a      	b.n	8002632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800261c:	f7ff f84c 	bl	80016b8 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	f241 3288 	movw	r2, #5000	; 0x1388
 800262a:	4293      	cmp	r3, r2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e0b5      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002632:	4b3e      	ldr	r3, [pc, #248]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1ee      	bne.n	800261c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800263e:	7dfb      	ldrb	r3, [r7, #23]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d105      	bne.n	8002650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002644:	4b39      	ldr	r3, [pc, #228]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	4a38      	ldr	r2, [pc, #224]	; (800272c <HAL_RCC_OscConfig+0x470>)
 800264a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800264e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80a1 	beq.w	800279c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800265a:	4b34      	ldr	r3, [pc, #208]	; (800272c <HAL_RCC_OscConfig+0x470>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b08      	cmp	r3, #8
 8002664:	d05c      	beq.n	8002720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d141      	bne.n	80026f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266e:	4b31      	ldr	r3, [pc, #196]	; (8002734 <HAL_RCC_OscConfig+0x478>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002674:	f7ff f820 	bl	80016b8 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800267c:	f7ff f81c 	bl	80016b8 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e087      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800268e:	4b27      	ldr	r3, [pc, #156]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69da      	ldr	r2, [r3, #28]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	019b      	lsls	r3, r3, #6
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	085b      	lsrs	r3, r3, #1
 80026b2:	3b01      	subs	r3, #1
 80026b4:	041b      	lsls	r3, r3, #16
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026bc:	061b      	lsls	r3, r3, #24
 80026be:	491b      	ldr	r1, [pc, #108]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c4:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_RCC_OscConfig+0x478>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ca:	f7fe fff5 	bl	80016b8 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d2:	f7fe fff1 	bl	80016b8 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e05c      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <HAL_RCC_OscConfig+0x470>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x416>
 80026f0:	e054      	b.n	800279c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_RCC_OscConfig+0x478>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe ffde 	bl	80016b8 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002700:	f7fe ffda 	bl	80016b8 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e045      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_RCC_OscConfig+0x470>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x444>
 800271e:	e03d      	b.n	800279c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d107      	bne.n	8002738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e038      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
 800272c:	40023800 	.word	0x40023800
 8002730:	40007000 	.word	0x40007000
 8002734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002738:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_RCC_OscConfig+0x4ec>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d028      	beq.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d121      	bne.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d11a      	bne.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002768:	4013      	ands	r3, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800276e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002770:	4293      	cmp	r3, r2
 8002772:	d111      	bne.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277e:	085b      	lsrs	r3, r3, #1
 8002780:	3b01      	subs	r3, #1
 8002782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002784:	429a      	cmp	r2, r3
 8002786:	d107      	bne.n	8002798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d001      	beq.n	800279c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3718      	adds	r7, #24
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800

080027ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0cc      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027c0:	4b68      	ldr	r3, [pc, #416]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d90c      	bls.n	80027e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b65      	ldr	r3, [pc, #404]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d6:	4b63      	ldr	r3, [pc, #396]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0b8      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002800:	4b59      	ldr	r3, [pc, #356]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a58      	ldr	r2, [pc, #352]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800280a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002818:	4b53      	ldr	r3, [pc, #332]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4a52      	ldr	r2, [pc, #328]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800281e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002824:	4b50      	ldr	r3, [pc, #320]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	494d      	ldr	r1, [pc, #308]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d044      	beq.n	80028cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d107      	bne.n	800285a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	4b47      	ldr	r3, [pc, #284]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d119      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e07f      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d003      	beq.n	800286a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002866:	2b03      	cmp	r3, #3
 8002868:	d107      	bne.n	800287a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286a:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e06f      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287a:	4b3b      	ldr	r3, [pc, #236]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e067      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288a:	4b37      	ldr	r3, [pc, #220]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f023 0203 	bic.w	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4934      	ldr	r1, [pc, #208]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	4313      	orrs	r3, r2
 800289a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800289c:	f7fe ff0c 	bl	80016b8 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a4:	f7fe ff08 	bl	80016b8 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e04f      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	4b2b      	ldr	r3, [pc, #172]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 020c 	and.w	r2, r3, #12
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d1eb      	bne.n	80028a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028cc:	4b25      	ldr	r3, [pc, #148]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d20c      	bcs.n	80028f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b22      	ldr	r3, [pc, #136]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e2:	4b20      	ldr	r3, [pc, #128]	; (8002964 <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d001      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e032      	b.n	800295a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d008      	beq.n	8002912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	4916      	ldr	r1, [pc, #88]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0308 	and.w	r3, r3, #8
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800291e:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	490e      	ldr	r1, [pc, #56]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	4313      	orrs	r3, r2
 8002930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002932:	f000 f821 	bl	8002978 <HAL_RCC_GetSysClockFreq>
 8002936:	4602      	mov	r2, r0
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	490a      	ldr	r1, [pc, #40]	; (800296c <HAL_RCC_ClockConfig+0x1c0>)
 8002944:	5ccb      	ldrb	r3, [r1, r3]
 8002946:	fa22 f303 	lsr.w	r3, r2, r3
 800294a:	4a09      	ldr	r2, [pc, #36]	; (8002970 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800294e:	4b09      	ldr	r3, [pc, #36]	; (8002974 <HAL_RCC_ClockConfig+0x1c8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fe fe6c 	bl	8001630 <HAL_InitTick>

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40023c00 	.word	0x40023c00
 8002968:	40023800 	.word	0x40023800
 800296c:	08005ac8 	.word	0x08005ac8
 8002970:	20000000 	.word	0x20000000
 8002974:	20000004 	.word	0x20000004

08002978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800297c:	b094      	sub	sp, #80	; 0x50
 800297e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	647b      	str	r3, [r7, #68]	; 0x44
 8002984:	2300      	movs	r3, #0
 8002986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002988:	2300      	movs	r3, #0
 800298a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002990:	4b79      	ldr	r3, [pc, #484]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 030c 	and.w	r3, r3, #12
 8002998:	2b08      	cmp	r3, #8
 800299a:	d00d      	beq.n	80029b8 <HAL_RCC_GetSysClockFreq+0x40>
 800299c:	2b08      	cmp	r3, #8
 800299e:	f200 80e1 	bhi.w	8002b64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0x34>
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d003      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029aa:	e0db      	b.n	8002b64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029ac:	4b73      	ldr	r3, [pc, #460]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x204>)
 80029ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029b0:	e0db      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029b2:	4b73      	ldr	r3, [pc, #460]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x208>)
 80029b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029b6:	e0d8      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029b8:	4b6f      	ldr	r3, [pc, #444]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029c2:	4b6d      	ldr	r3, [pc, #436]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d063      	beq.n	8002a96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b6a      	ldr	r3, [pc, #424]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x200>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	2200      	movs	r2, #0
 80029d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80029d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e0:	633b      	str	r3, [r7, #48]	; 0x30
 80029e2:	2300      	movs	r3, #0
 80029e4:	637b      	str	r3, [r7, #52]	; 0x34
 80029e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029ea:	4622      	mov	r2, r4
 80029ec:	462b      	mov	r3, r5
 80029ee:	f04f 0000 	mov.w	r0, #0
 80029f2:	f04f 0100 	mov.w	r1, #0
 80029f6:	0159      	lsls	r1, r3, #5
 80029f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029fc:	0150      	lsls	r0, r2, #5
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4621      	mov	r1, r4
 8002a04:	1a51      	subs	r1, r2, r1
 8002a06:	6139      	str	r1, [r7, #16]
 8002a08:	4629      	mov	r1, r5
 8002a0a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a1c:	4659      	mov	r1, fp
 8002a1e:	018b      	lsls	r3, r1, #6
 8002a20:	4651      	mov	r1, sl
 8002a22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a26:	4651      	mov	r1, sl
 8002a28:	018a      	lsls	r2, r1, #6
 8002a2a:	4651      	mov	r1, sl
 8002a2c:	ebb2 0801 	subs.w	r8, r2, r1
 8002a30:	4659      	mov	r1, fp
 8002a32:	eb63 0901 	sbc.w	r9, r3, r1
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	f04f 0300 	mov.w	r3, #0
 8002a3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a4a:	4690      	mov	r8, r2
 8002a4c:	4699      	mov	r9, r3
 8002a4e:	4623      	mov	r3, r4
 8002a50:	eb18 0303 	adds.w	r3, r8, r3
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	462b      	mov	r3, r5
 8002a58:	eb49 0303 	adc.w	r3, r9, r3
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a6a:	4629      	mov	r1, r5
 8002a6c:	024b      	lsls	r3, r1, #9
 8002a6e:	4621      	mov	r1, r4
 8002a70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a74:	4621      	mov	r1, r4
 8002a76:	024a      	lsls	r2, r1, #9
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a7e:	2200      	movs	r2, #0
 8002a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a88:	f7fe f896 	bl	8000bb8 <__aeabi_uldivmod>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4613      	mov	r3, r2
 8002a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a94:	e058      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a96:	4b38      	ldr	r3, [pc, #224]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	099b      	lsrs	r3, r3, #6
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002aa6:	623b      	str	r3, [r7, #32]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8002aac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ab0:	4642      	mov	r2, r8
 8002ab2:	464b      	mov	r3, r9
 8002ab4:	f04f 0000 	mov.w	r0, #0
 8002ab8:	f04f 0100 	mov.w	r1, #0
 8002abc:	0159      	lsls	r1, r3, #5
 8002abe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ac2:	0150      	lsls	r0, r2, #5
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4641      	mov	r1, r8
 8002aca:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ace:	4649      	mov	r1, r9
 8002ad0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ae0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ae4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ae8:	ebb2 040a 	subs.w	r4, r2, sl
 8002aec:	eb63 050b 	sbc.w	r5, r3, fp
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	00eb      	lsls	r3, r5, #3
 8002afa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002afe:	00e2      	lsls	r2, r4, #3
 8002b00:	4614      	mov	r4, r2
 8002b02:	461d      	mov	r5, r3
 8002b04:	4643      	mov	r3, r8
 8002b06:	18e3      	adds	r3, r4, r3
 8002b08:	603b      	str	r3, [r7, #0]
 8002b0a:	464b      	mov	r3, r9
 8002b0c:	eb45 0303 	adc.w	r3, r5, r3
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b1e:	4629      	mov	r1, r5
 8002b20:	028b      	lsls	r3, r1, #10
 8002b22:	4621      	mov	r1, r4
 8002b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b28:	4621      	mov	r1, r4
 8002b2a:	028a      	lsls	r2, r1, #10
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	4619      	mov	r1, r3
 8002b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b32:	2200      	movs	r2, #0
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	61fa      	str	r2, [r7, #28]
 8002b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b3c:	f7fe f83c 	bl	8000bb8 <__aeabi_uldivmod>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4613      	mov	r3, r2
 8002b46:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b48:	4b0b      	ldr	r3, [pc, #44]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	0c1b      	lsrs	r3, r3, #16
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	3301      	adds	r3, #1
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b62:	e002      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x204>)
 8002b66:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3750      	adds	r7, #80	; 0x50
 8002b70:	46bd      	mov	sp, r7
 8002b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	00f42400 	.word	0x00f42400
 8002b80:	007a1200 	.word	0x007a1200

08002b84 <findslot>:
 8002b84:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <findslot+0x2c>)
 8002b86:	b510      	push	{r4, lr}
 8002b88:	4604      	mov	r4, r0
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	b118      	cbz	r0, 8002b96 <findslot+0x12>
 8002b8e:	6a03      	ldr	r3, [r0, #32]
 8002b90:	b90b      	cbnz	r3, 8002b96 <findslot+0x12>
 8002b92:	f000 ff8d 	bl	8003ab0 <__sinit>
 8002b96:	2c13      	cmp	r4, #19
 8002b98:	d807      	bhi.n	8002baa <findslot+0x26>
 8002b9a:	4806      	ldr	r0, [pc, #24]	; (8002bb4 <findslot+0x30>)
 8002b9c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002ba0:	3201      	adds	r2, #1
 8002ba2:	d002      	beq.n	8002baa <findslot+0x26>
 8002ba4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002ba8:	bd10      	pop	{r4, pc}
 8002baa:	2000      	movs	r0, #0
 8002bac:	e7fc      	b.n	8002ba8 <findslot+0x24>
 8002bae:	bf00      	nop
 8002bb0:	2000006c 	.word	0x2000006c
 8002bb4:	20000274 	.word	0x20000274

08002bb8 <error>:
 8002bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bba:	4604      	mov	r4, r0
 8002bbc:	f001 f856 	bl	8003c6c <__errno>
 8002bc0:	2613      	movs	r6, #19
 8002bc2:	4605      	mov	r5, r0
 8002bc4:	2700      	movs	r7, #0
 8002bc6:	4630      	mov	r0, r6
 8002bc8:	4639      	mov	r1, r7
 8002bca:	beab      	bkpt	0x00ab
 8002bcc:	4606      	mov	r6, r0
 8002bce:	602e      	str	r6, [r5, #0]
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002bd4 <checkerror>:
 8002bd4:	1c43      	adds	r3, r0, #1
 8002bd6:	d101      	bne.n	8002bdc <checkerror+0x8>
 8002bd8:	f7ff bfee 	b.w	8002bb8 <error>
 8002bdc:	4770      	bx	lr

08002bde <_swiread>:
 8002bde:	b530      	push	{r4, r5, lr}
 8002be0:	b085      	sub	sp, #20
 8002be2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002be6:	9203      	str	r2, [sp, #12]
 8002be8:	2406      	movs	r4, #6
 8002bea:	ad01      	add	r5, sp, #4
 8002bec:	4620      	mov	r0, r4
 8002bee:	4629      	mov	r1, r5
 8002bf0:	beab      	bkpt	0x00ab
 8002bf2:	4604      	mov	r4, r0
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f7ff ffed 	bl	8002bd4 <checkerror>
 8002bfa:	b005      	add	sp, #20
 8002bfc:	bd30      	pop	{r4, r5, pc}

08002bfe <_read>:
 8002bfe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c00:	4615      	mov	r5, r2
 8002c02:	9101      	str	r1, [sp, #4]
 8002c04:	f7ff ffbe 	bl	8002b84 <findslot>
 8002c08:	9901      	ldr	r1, [sp, #4]
 8002c0a:	4604      	mov	r4, r0
 8002c0c:	b938      	cbnz	r0, 8002c1e <_read+0x20>
 8002c0e:	f001 f82d 	bl	8003c6c <__errno>
 8002c12:	2309      	movs	r3, #9
 8002c14:	6003      	str	r3, [r0, #0]
 8002c16:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1a:	b003      	add	sp, #12
 8002c1c:	bd30      	pop	{r4, r5, pc}
 8002c1e:	6800      	ldr	r0, [r0, #0]
 8002c20:	462a      	mov	r2, r5
 8002c22:	f7ff ffdc 	bl	8002bde <_swiread>
 8002c26:	1c43      	adds	r3, r0, #1
 8002c28:	d0f7      	beq.n	8002c1a <_read+0x1c>
 8002c2a:	6863      	ldr	r3, [r4, #4]
 8002c2c:	1a2a      	subs	r2, r5, r0
 8002c2e:	4413      	add	r3, r2
 8002c30:	6063      	str	r3, [r4, #4]
 8002c32:	4610      	mov	r0, r2
 8002c34:	e7f1      	b.n	8002c1a <_read+0x1c>

08002c36 <_swilseek>:
 8002c36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c38:	460c      	mov	r4, r1
 8002c3a:	4616      	mov	r6, r2
 8002c3c:	f7ff ffa2 	bl	8002b84 <findslot>
 8002c40:	4605      	mov	r5, r0
 8002c42:	b940      	cbnz	r0, 8002c56 <_swilseek+0x20>
 8002c44:	f001 f812 	bl	8003c6c <__errno>
 8002c48:	2309      	movs	r3, #9
 8002c4a:	6003      	str	r3, [r0, #0]
 8002c4c:	f04f 34ff 	mov.w	r4, #4294967295
 8002c50:	4620      	mov	r0, r4
 8002c52:	b003      	add	sp, #12
 8002c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c56:	2e02      	cmp	r6, #2
 8002c58:	d903      	bls.n	8002c62 <_swilseek+0x2c>
 8002c5a:	f001 f807 	bl	8003c6c <__errno>
 8002c5e:	2316      	movs	r3, #22
 8002c60:	e7f3      	b.n	8002c4a <_swilseek+0x14>
 8002c62:	2e01      	cmp	r6, #1
 8002c64:	d112      	bne.n	8002c8c <_swilseek+0x56>
 8002c66:	6843      	ldr	r3, [r0, #4]
 8002c68:	18e4      	adds	r4, r4, r3
 8002c6a:	d4f6      	bmi.n	8002c5a <_swilseek+0x24>
 8002c6c:	682b      	ldr	r3, [r5, #0]
 8002c6e:	260a      	movs	r6, #10
 8002c70:	e9cd 3400 	strd	r3, r4, [sp]
 8002c74:	466f      	mov	r7, sp
 8002c76:	4630      	mov	r0, r6
 8002c78:	4639      	mov	r1, r7
 8002c7a:	beab      	bkpt	0x00ab
 8002c7c:	4606      	mov	r6, r0
 8002c7e:	4630      	mov	r0, r6
 8002c80:	f7ff ffa8 	bl	8002bd4 <checkerror>
 8002c84:	2800      	cmp	r0, #0
 8002c86:	dbe1      	blt.n	8002c4c <_swilseek+0x16>
 8002c88:	606c      	str	r4, [r5, #4]
 8002c8a:	e7e1      	b.n	8002c50 <_swilseek+0x1a>
 8002c8c:	2e02      	cmp	r6, #2
 8002c8e:	6803      	ldr	r3, [r0, #0]
 8002c90:	d1ec      	bne.n	8002c6c <_swilseek+0x36>
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	260c      	movs	r6, #12
 8002c96:	466f      	mov	r7, sp
 8002c98:	4630      	mov	r0, r6
 8002c9a:	4639      	mov	r1, r7
 8002c9c:	beab      	bkpt	0x00ab
 8002c9e:	4606      	mov	r6, r0
 8002ca0:	4630      	mov	r0, r6
 8002ca2:	f7ff ff97 	bl	8002bd4 <checkerror>
 8002ca6:	1c43      	adds	r3, r0, #1
 8002ca8:	d0d0      	beq.n	8002c4c <_swilseek+0x16>
 8002caa:	4404      	add	r4, r0
 8002cac:	e7de      	b.n	8002c6c <_swilseek+0x36>

08002cae <_lseek>:
 8002cae:	f7ff bfc2 	b.w	8002c36 <_swilseek>

08002cb2 <_swiwrite>:
 8002cb2:	b530      	push	{r4, r5, lr}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002cba:	9203      	str	r2, [sp, #12]
 8002cbc:	2405      	movs	r4, #5
 8002cbe:	ad01      	add	r5, sp, #4
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	4629      	mov	r1, r5
 8002cc4:	beab      	bkpt	0x00ab
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	4620      	mov	r0, r4
 8002cca:	f7ff ff83 	bl	8002bd4 <checkerror>
 8002cce:	b005      	add	sp, #20
 8002cd0:	bd30      	pop	{r4, r5, pc}

08002cd2 <_write>:
 8002cd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002cd4:	4615      	mov	r5, r2
 8002cd6:	9101      	str	r1, [sp, #4]
 8002cd8:	f7ff ff54 	bl	8002b84 <findslot>
 8002cdc:	9901      	ldr	r1, [sp, #4]
 8002cde:	4604      	mov	r4, r0
 8002ce0:	b930      	cbnz	r0, 8002cf0 <_write+0x1e>
 8002ce2:	f000 ffc3 	bl	8003c6c <__errno>
 8002ce6:	2309      	movs	r3, #9
 8002ce8:	6003      	str	r3, [r0, #0]
 8002cea:	f04f 30ff 	mov.w	r0, #4294967295
 8002cee:	e012      	b.n	8002d16 <_write+0x44>
 8002cf0:	6800      	ldr	r0, [r0, #0]
 8002cf2:	462a      	mov	r2, r5
 8002cf4:	f7ff ffdd 	bl	8002cb2 <_swiwrite>
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	dbf6      	blt.n	8002cea <_write+0x18>
 8002cfc:	6862      	ldr	r2, [r4, #4]
 8002cfe:	1a2b      	subs	r3, r5, r0
 8002d00:	441a      	add	r2, r3
 8002d02:	42a8      	cmp	r0, r5
 8002d04:	6062      	str	r2, [r4, #4]
 8002d06:	d105      	bne.n	8002d14 <_write+0x42>
 8002d08:	2000      	movs	r0, #0
 8002d0a:	b003      	add	sp, #12
 8002d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d10:	f7ff bf52 	b.w	8002bb8 <error>
 8002d14:	4618      	mov	r0, r3
 8002d16:	b003      	add	sp, #12
 8002d18:	bd30      	pop	{r4, r5, pc}

08002d1a <_swiclose>:
 8002d1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d1c:	2402      	movs	r4, #2
 8002d1e:	9001      	str	r0, [sp, #4]
 8002d20:	ad01      	add	r5, sp, #4
 8002d22:	4620      	mov	r0, r4
 8002d24:	4629      	mov	r1, r5
 8002d26:	beab      	bkpt	0x00ab
 8002d28:	4604      	mov	r4, r0
 8002d2a:	4620      	mov	r0, r4
 8002d2c:	f7ff ff52 	bl	8002bd4 <checkerror>
 8002d30:	b003      	add	sp, #12
 8002d32:	bd30      	pop	{r4, r5, pc}

08002d34 <_close>:
 8002d34:	b538      	push	{r3, r4, r5, lr}
 8002d36:	4605      	mov	r5, r0
 8002d38:	f7ff ff24 	bl	8002b84 <findslot>
 8002d3c:	4604      	mov	r4, r0
 8002d3e:	b930      	cbnz	r0, 8002d4e <_close+0x1a>
 8002d40:	f000 ff94 	bl	8003c6c <__errno>
 8002d44:	2309      	movs	r3, #9
 8002d46:	6003      	str	r3, [r0, #0]
 8002d48:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4c:	bd38      	pop	{r3, r4, r5, pc}
 8002d4e:	3d01      	subs	r5, #1
 8002d50:	2d01      	cmp	r5, #1
 8002d52:	d809      	bhi.n	8002d68 <_close+0x34>
 8002d54:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <_close+0x48>)
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d104      	bne.n	8002d68 <_close+0x34>
 8002d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d62:	6003      	str	r3, [r0, #0]
 8002d64:	2000      	movs	r0, #0
 8002d66:	e7f1      	b.n	8002d4c <_close+0x18>
 8002d68:	6820      	ldr	r0, [r4, #0]
 8002d6a:	f7ff ffd6 	bl	8002d1a <_swiclose>
 8002d6e:	2800      	cmp	r0, #0
 8002d70:	d1ec      	bne.n	8002d4c <_close+0x18>
 8002d72:	f04f 33ff 	mov.w	r3, #4294967295
 8002d76:	6023      	str	r3, [r4, #0]
 8002d78:	e7e8      	b.n	8002d4c <_close+0x18>
 8002d7a:	bf00      	nop
 8002d7c:	20000274 	.word	0x20000274

08002d80 <_getpid>:
 8002d80:	2001      	movs	r0, #1
 8002d82:	4770      	bx	lr

08002d84 <_swistat>:
 8002d84:	b570      	push	{r4, r5, r6, lr}
 8002d86:	460c      	mov	r4, r1
 8002d88:	f7ff fefc 	bl	8002b84 <findslot>
 8002d8c:	4605      	mov	r5, r0
 8002d8e:	b930      	cbnz	r0, 8002d9e <_swistat+0x1a>
 8002d90:	f000 ff6c 	bl	8003c6c <__errno>
 8002d94:	2309      	movs	r3, #9
 8002d96:	6003      	str	r3, [r0, #0]
 8002d98:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9c:	bd70      	pop	{r4, r5, r6, pc}
 8002d9e:	6863      	ldr	r3, [r4, #4]
 8002da0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002da4:	6063      	str	r3, [r4, #4]
 8002da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002daa:	64a3      	str	r3, [r4, #72]	; 0x48
 8002dac:	260c      	movs	r6, #12
 8002dae:	4630      	mov	r0, r6
 8002db0:	4629      	mov	r1, r5
 8002db2:	beab      	bkpt	0x00ab
 8002db4:	4605      	mov	r5, r0
 8002db6:	4628      	mov	r0, r5
 8002db8:	f7ff ff0c 	bl	8002bd4 <checkerror>
 8002dbc:	1c43      	adds	r3, r0, #1
 8002dbe:	bf1c      	itt	ne
 8002dc0:	6120      	strne	r0, [r4, #16]
 8002dc2:	2000      	movne	r0, #0
 8002dc4:	e7ea      	b.n	8002d9c <_swistat+0x18>

08002dc6 <_fstat>:
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	b510      	push	{r4, lr}
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4604      	mov	r4, r0
 8002dce:	2258      	movs	r2, #88	; 0x58
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fef8 	bl	8003bc6 <memset>
 8002dd6:	4601      	mov	r1, r0
 8002dd8:	4620      	mov	r0, r4
 8002dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dde:	f7ff bfd1 	b.w	8002d84 <_swistat>

08002de2 <_stat>:
 8002de2:	b538      	push	{r3, r4, r5, lr}
 8002de4:	460d      	mov	r5, r1
 8002de6:	4604      	mov	r4, r0
 8002de8:	2258      	movs	r2, #88	; 0x58
 8002dea:	2100      	movs	r1, #0
 8002dec:	4628      	mov	r0, r5
 8002dee:	f000 feea 	bl	8003bc6 <memset>
 8002df2:	4620      	mov	r0, r4
 8002df4:	2100      	movs	r1, #0
 8002df6:	f000 f811 	bl	8002e1c <_swiopen>
 8002dfa:	1c43      	adds	r3, r0, #1
 8002dfc:	4604      	mov	r4, r0
 8002dfe:	d00b      	beq.n	8002e18 <_stat+0x36>
 8002e00:	686b      	ldr	r3, [r5, #4]
 8002e02:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002e06:	606b      	str	r3, [r5, #4]
 8002e08:	4629      	mov	r1, r5
 8002e0a:	f7ff ffbb 	bl	8002d84 <_swistat>
 8002e0e:	4605      	mov	r5, r0
 8002e10:	4620      	mov	r0, r4
 8002e12:	f7ff ff8f 	bl	8002d34 <_close>
 8002e16:	462c      	mov	r4, r5
 8002e18:	4620      	mov	r0, r4
 8002e1a:	bd38      	pop	{r3, r4, r5, pc}

08002e1c <_swiopen>:
 8002e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e20:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002ecc <_swiopen+0xb0>
 8002e24:	b097      	sub	sp, #92	; 0x5c
 8002e26:	4607      	mov	r7, r0
 8002e28:	460e      	mov	r6, r1
 8002e2a:	2500      	movs	r5, #0
 8002e2c:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8002e30:	1c61      	adds	r1, r4, #1
 8002e32:	d037      	beq.n	8002ea4 <_swiopen+0x88>
 8002e34:	3501      	adds	r5, #1
 8002e36:	2d14      	cmp	r5, #20
 8002e38:	d1f8      	bne.n	8002e2c <_swiopen+0x10>
 8002e3a:	f000 ff17 	bl	8003c6c <__errno>
 8002e3e:	2318      	movs	r3, #24
 8002e40:	6003      	str	r3, [r0, #0]
 8002e42:	f04f 34ff 	mov.w	r4, #4294967295
 8002e46:	e03d      	b.n	8002ec4 <_swiopen+0xa8>
 8002e48:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002e4c:	f240 6301 	movw	r3, #1537	; 0x601
 8002e50:	07b2      	lsls	r2, r6, #30
 8002e52:	bf48      	it	mi
 8002e54:	f044 0402 	orrmi.w	r4, r4, #2
 8002e58:	421e      	tst	r6, r3
 8002e5a:	bf18      	it	ne
 8002e5c:	f044 0404 	orrne.w	r4, r4, #4
 8002e60:	0733      	lsls	r3, r6, #28
 8002e62:	bf48      	it	mi
 8002e64:	f024 0404 	bicmi.w	r4, r4, #4
 8002e68:	4638      	mov	r0, r7
 8002e6a:	bf48      	it	mi
 8002e6c:	f044 0408 	orrmi.w	r4, r4, #8
 8002e70:	9700      	str	r7, [sp, #0]
 8002e72:	f7fd fa05 	bl	8000280 <strlen>
 8002e76:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002e7a:	2401      	movs	r4, #1
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	4649      	mov	r1, r9
 8002e80:	beab      	bkpt	0x00ab
 8002e82:	4604      	mov	r4, r0
 8002e84:	2c00      	cmp	r4, #0
 8002e86:	db08      	blt.n	8002e9a <_swiopen+0x7e>
 8002e88:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002e8c:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8002e90:	2300      	movs	r3, #0
 8002e92:	f8c8 3004 	str.w	r3, [r8, #4]
 8002e96:	462c      	mov	r4, r5
 8002e98:	e014      	b.n	8002ec4 <_swiopen+0xa8>
 8002e9a:	4620      	mov	r0, r4
 8002e9c:	f7ff fe8c 	bl	8002bb8 <error>
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	e00f      	b.n	8002ec4 <_swiopen+0xa8>
 8002ea4:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002ea8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002eac:	46e9      	mov	r9, sp
 8002eae:	d1cb      	bne.n	8002e48 <_swiopen+0x2c>
 8002eb0:	4649      	mov	r1, r9
 8002eb2:	4638      	mov	r0, r7
 8002eb4:	f7ff ff95 	bl	8002de2 <_stat>
 8002eb8:	3001      	adds	r0, #1
 8002eba:	d0c5      	beq.n	8002e48 <_swiopen+0x2c>
 8002ebc:	f000 fed6 	bl	8003c6c <__errno>
 8002ec0:	2311      	movs	r3, #17
 8002ec2:	6003      	str	r3, [r0, #0]
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	b017      	add	sp, #92	; 0x5c
 8002ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ecc:	20000274 	.word	0x20000274

08002ed0 <_get_semihosting_exts>:
 8002ed0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002ed4:	4606      	mov	r6, r0
 8002ed6:	460f      	mov	r7, r1
 8002ed8:	482a      	ldr	r0, [pc, #168]	; (8002f84 <_get_semihosting_exts+0xb4>)
 8002eda:	2100      	movs	r1, #0
 8002edc:	4615      	mov	r5, r2
 8002ede:	f7ff ff9d 	bl	8002e1c <_swiopen>
 8002ee2:	462a      	mov	r2, r5
 8002ee4:	4604      	mov	r4, r0
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	4630      	mov	r0, r6
 8002eea:	f000 fe6c 	bl	8003bc6 <memset>
 8002eee:	1c63      	adds	r3, r4, #1
 8002ef0:	d016      	beq.n	8002f20 <_get_semihosting_exts+0x50>
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	f7ff fe46 	bl	8002b84 <findslot>
 8002ef8:	f04f 080c 	mov.w	r8, #12
 8002efc:	4681      	mov	r9, r0
 8002efe:	4640      	mov	r0, r8
 8002f00:	4649      	mov	r1, r9
 8002f02:	beab      	bkpt	0x00ab
 8002f04:	4680      	mov	r8, r0
 8002f06:	4640      	mov	r0, r8
 8002f08:	f7ff fe64 	bl	8002bd4 <checkerror>
 8002f0c:	2803      	cmp	r0, #3
 8002f0e:	dd02      	ble.n	8002f16 <_get_semihosting_exts+0x46>
 8002f10:	1ec3      	subs	r3, r0, #3
 8002f12:	42ab      	cmp	r3, r5
 8002f14:	dc08      	bgt.n	8002f28 <_get_semihosting_exts+0x58>
 8002f16:	4620      	mov	r0, r4
 8002f18:	f7ff ff0c 	bl	8002d34 <_close>
 8002f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8002f20:	4620      	mov	r0, r4
 8002f22:	b003      	add	sp, #12
 8002f24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f28:	2204      	movs	r2, #4
 8002f2a:	eb0d 0102 	add.w	r1, sp, r2
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f7ff fe65 	bl	8002bfe <_read>
 8002f34:	2803      	cmp	r0, #3
 8002f36:	ddee      	ble.n	8002f16 <_get_semihosting_exts+0x46>
 8002f38:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f3c:	2b53      	cmp	r3, #83	; 0x53
 8002f3e:	d1ea      	bne.n	8002f16 <_get_semihosting_exts+0x46>
 8002f40:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002f44:	2b48      	cmp	r3, #72	; 0x48
 8002f46:	d1e6      	bne.n	8002f16 <_get_semihosting_exts+0x46>
 8002f48:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002f4c:	2b46      	cmp	r3, #70	; 0x46
 8002f4e:	d1e2      	bne.n	8002f16 <_get_semihosting_exts+0x46>
 8002f50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002f54:	2b42      	cmp	r3, #66	; 0x42
 8002f56:	d1de      	bne.n	8002f16 <_get_semihosting_exts+0x46>
 8002f58:	2201      	movs	r2, #1
 8002f5a:	4639      	mov	r1, r7
 8002f5c:	4620      	mov	r0, r4
 8002f5e:	f7ff fe6a 	bl	8002c36 <_swilseek>
 8002f62:	2800      	cmp	r0, #0
 8002f64:	dbd7      	blt.n	8002f16 <_get_semihosting_exts+0x46>
 8002f66:	462a      	mov	r2, r5
 8002f68:	4631      	mov	r1, r6
 8002f6a:	4620      	mov	r0, r4
 8002f6c:	f7ff fe47 	bl	8002bfe <_read>
 8002f70:	4605      	mov	r5, r0
 8002f72:	4620      	mov	r0, r4
 8002f74:	f7ff fede 	bl	8002d34 <_close>
 8002f78:	4628      	mov	r0, r5
 8002f7a:	f7ff fe2b 	bl	8002bd4 <checkerror>
 8002f7e:	4604      	mov	r4, r0
 8002f80:	e7ce      	b.n	8002f20 <_get_semihosting_exts+0x50>
 8002f82:	bf00      	nop
 8002f84:	08005ad8 	.word	0x08005ad8

08002f88 <initialise_semihosting_exts>:
 8002f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f8a:	4d0a      	ldr	r5, [pc, #40]	; (8002fb4 <initialise_semihosting_exts+0x2c>)
 8002f8c:	4c0a      	ldr	r4, [pc, #40]	; (8002fb8 <initialise_semihosting_exts+0x30>)
 8002f8e:	2100      	movs	r1, #0
 8002f90:	2201      	movs	r2, #1
 8002f92:	a801      	add	r0, sp, #4
 8002f94:	6029      	str	r1, [r5, #0]
 8002f96:	6022      	str	r2, [r4, #0]
 8002f98:	f7ff ff9a 	bl	8002ed0 <_get_semihosting_exts>
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	dd07      	ble.n	8002fb0 <initialise_semihosting_exts+0x28>
 8002fa0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002fa4:	f003 0201 	and.w	r2, r3, #1
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	602a      	str	r2, [r5, #0]
 8002fae:	6023      	str	r3, [r4, #0]
 8002fb0:	b003      	add	sp, #12
 8002fb2:	bd30      	pop	{r4, r5, pc}
 8002fb4:	2000000c 	.word	0x2000000c
 8002fb8:	20000010 	.word	0x20000010

08002fbc <_has_ext_stdout_stderr>:
 8002fbc:	b510      	push	{r4, lr}
 8002fbe:	4c04      	ldr	r4, [pc, #16]	; (8002fd0 <_has_ext_stdout_stderr+0x14>)
 8002fc0:	6823      	ldr	r3, [r4, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	da01      	bge.n	8002fca <_has_ext_stdout_stderr+0xe>
 8002fc6:	f7ff ffdf 	bl	8002f88 <initialise_semihosting_exts>
 8002fca:	6820      	ldr	r0, [r4, #0]
 8002fcc:	bd10      	pop	{r4, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000010 	.word	0x20000010

08002fd4 <initialise_monitor_handles>:
 8002fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fd8:	b085      	sub	sp, #20
 8002fda:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800308c <initialise_monitor_handles+0xb8>
 8002fde:	f8cd 9004 	str.w	r9, [sp, #4]
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	2400      	movs	r4, #0
 8002fe6:	9303      	str	r3, [sp, #12]
 8002fe8:	af01      	add	r7, sp, #4
 8002fea:	9402      	str	r4, [sp, #8]
 8002fec:	2501      	movs	r5, #1
 8002fee:	4628      	mov	r0, r5
 8002ff0:	4639      	mov	r1, r7
 8002ff2:	beab      	bkpt	0x00ab
 8002ff4:	4605      	mov	r5, r0
 8002ff6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003090 <initialise_monitor_handles+0xbc>
 8002ffa:	4623      	mov	r3, r4
 8002ffc:	4c20      	ldr	r4, [pc, #128]	; (8003080 <initialise_monitor_handles+0xac>)
 8002ffe:	f8c8 5000 	str.w	r5, [r8]
 8003002:	f04f 32ff 	mov.w	r2, #4294967295
 8003006:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800300a:	3301      	adds	r3, #1
 800300c:	2b14      	cmp	r3, #20
 800300e:	d1fa      	bne.n	8003006 <initialise_monitor_handles+0x32>
 8003010:	f7ff ffd4 	bl	8002fbc <_has_ext_stdout_stderr>
 8003014:	4d1b      	ldr	r5, [pc, #108]	; (8003084 <initialise_monitor_handles+0xb0>)
 8003016:	b1d0      	cbz	r0, 800304e <initialise_monitor_handles+0x7a>
 8003018:	f04f 0a03 	mov.w	sl, #3
 800301c:	2304      	movs	r3, #4
 800301e:	f8cd 9004 	str.w	r9, [sp, #4]
 8003022:	2601      	movs	r6, #1
 8003024:	f8cd a00c 	str.w	sl, [sp, #12]
 8003028:	9302      	str	r3, [sp, #8]
 800302a:	4630      	mov	r0, r6
 800302c:	4639      	mov	r1, r7
 800302e:	beab      	bkpt	0x00ab
 8003030:	4683      	mov	fp, r0
 8003032:	4b15      	ldr	r3, [pc, #84]	; (8003088 <initialise_monitor_handles+0xb4>)
 8003034:	f8cd 9004 	str.w	r9, [sp, #4]
 8003038:	f8c3 b000 	str.w	fp, [r3]
 800303c:	2308      	movs	r3, #8
 800303e:	f8cd a00c 	str.w	sl, [sp, #12]
 8003042:	9302      	str	r3, [sp, #8]
 8003044:	4630      	mov	r0, r6
 8003046:	4639      	mov	r1, r7
 8003048:	beab      	bkpt	0x00ab
 800304a:	4606      	mov	r6, r0
 800304c:	602e      	str	r6, [r5, #0]
 800304e:	682b      	ldr	r3, [r5, #0]
 8003050:	3301      	adds	r3, #1
 8003052:	bf02      	ittt	eq
 8003054:	4b0c      	ldreq	r3, [pc, #48]	; (8003088 <initialise_monitor_handles+0xb4>)
 8003056:	681b      	ldreq	r3, [r3, #0]
 8003058:	602b      	streq	r3, [r5, #0]
 800305a:	2600      	movs	r6, #0
 800305c:	f8d8 3000 	ldr.w	r3, [r8]
 8003060:	6023      	str	r3, [r4, #0]
 8003062:	6066      	str	r6, [r4, #4]
 8003064:	f7ff ffaa 	bl	8002fbc <_has_ext_stdout_stderr>
 8003068:	b130      	cbz	r0, 8003078 <initialise_monitor_handles+0xa4>
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <initialise_monitor_handles+0xb4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003072:	682b      	ldr	r3, [r5, #0]
 8003074:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003078:	b005      	add	sp, #20
 800307a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800307e:	bf00      	nop
 8003080:	20000274 	.word	0x20000274
 8003084:	20000268 	.word	0x20000268
 8003088:	20000270 	.word	0x20000270
 800308c:	08005aee 	.word	0x08005aee
 8003090:	2000026c 	.word	0x2000026c

08003094 <_isatty>:
 8003094:	b570      	push	{r4, r5, r6, lr}
 8003096:	f7ff fd75 	bl	8002b84 <findslot>
 800309a:	2509      	movs	r5, #9
 800309c:	4604      	mov	r4, r0
 800309e:	b920      	cbnz	r0, 80030aa <_isatty+0x16>
 80030a0:	f000 fde4 	bl	8003c6c <__errno>
 80030a4:	6005      	str	r5, [r0, #0]
 80030a6:	4620      	mov	r0, r4
 80030a8:	bd70      	pop	{r4, r5, r6, pc}
 80030aa:	4628      	mov	r0, r5
 80030ac:	4621      	mov	r1, r4
 80030ae:	beab      	bkpt	0x00ab
 80030b0:	4604      	mov	r4, r0
 80030b2:	2c01      	cmp	r4, #1
 80030b4:	d0f7      	beq.n	80030a6 <_isatty+0x12>
 80030b6:	f000 fdd9 	bl	8003c6c <__errno>
 80030ba:	2400      	movs	r4, #0
 80030bc:	4605      	mov	r5, r0
 80030be:	2613      	movs	r6, #19
 80030c0:	4630      	mov	r0, r6
 80030c2:	4621      	mov	r1, r4
 80030c4:	beab      	bkpt	0x00ab
 80030c6:	4606      	mov	r6, r0
 80030c8:	602e      	str	r6, [r5, #0]
 80030ca:	e7ec      	b.n	80030a6 <_isatty+0x12>

080030cc <__cvt>:
 80030cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80030d0:	ec55 4b10 	vmov	r4, r5, d0
 80030d4:	2d00      	cmp	r5, #0
 80030d6:	460e      	mov	r6, r1
 80030d8:	4619      	mov	r1, r3
 80030da:	462b      	mov	r3, r5
 80030dc:	bfbb      	ittet	lt
 80030de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80030e2:	461d      	movlt	r5, r3
 80030e4:	2300      	movge	r3, #0
 80030e6:	232d      	movlt	r3, #45	; 0x2d
 80030e8:	700b      	strb	r3, [r1, #0]
 80030ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80030f0:	4691      	mov	r9, r2
 80030f2:	f023 0820 	bic.w	r8, r3, #32
 80030f6:	bfbc      	itt	lt
 80030f8:	4622      	movlt	r2, r4
 80030fa:	4614      	movlt	r4, r2
 80030fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003100:	d005      	beq.n	800310e <__cvt+0x42>
 8003102:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003106:	d100      	bne.n	800310a <__cvt+0x3e>
 8003108:	3601      	adds	r6, #1
 800310a:	2102      	movs	r1, #2
 800310c:	e000      	b.n	8003110 <__cvt+0x44>
 800310e:	2103      	movs	r1, #3
 8003110:	ab03      	add	r3, sp, #12
 8003112:	9301      	str	r3, [sp, #4]
 8003114:	ab02      	add	r3, sp, #8
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	ec45 4b10 	vmov	d0, r4, r5
 800311c:	4653      	mov	r3, sl
 800311e:	4632      	mov	r2, r6
 8003120:	f000 fe5a 	bl	8003dd8 <_dtoa_r>
 8003124:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003128:	4607      	mov	r7, r0
 800312a:	d102      	bne.n	8003132 <__cvt+0x66>
 800312c:	f019 0f01 	tst.w	r9, #1
 8003130:	d022      	beq.n	8003178 <__cvt+0xac>
 8003132:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003136:	eb07 0906 	add.w	r9, r7, r6
 800313a:	d110      	bne.n	800315e <__cvt+0x92>
 800313c:	783b      	ldrb	r3, [r7, #0]
 800313e:	2b30      	cmp	r3, #48	; 0x30
 8003140:	d10a      	bne.n	8003158 <__cvt+0x8c>
 8003142:	2200      	movs	r2, #0
 8003144:	2300      	movs	r3, #0
 8003146:	4620      	mov	r0, r4
 8003148:	4629      	mov	r1, r5
 800314a:	f7fd fcc5 	bl	8000ad8 <__aeabi_dcmpeq>
 800314e:	b918      	cbnz	r0, 8003158 <__cvt+0x8c>
 8003150:	f1c6 0601 	rsb	r6, r6, #1
 8003154:	f8ca 6000 	str.w	r6, [sl]
 8003158:	f8da 3000 	ldr.w	r3, [sl]
 800315c:	4499      	add	r9, r3
 800315e:	2200      	movs	r2, #0
 8003160:	2300      	movs	r3, #0
 8003162:	4620      	mov	r0, r4
 8003164:	4629      	mov	r1, r5
 8003166:	f7fd fcb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800316a:	b108      	cbz	r0, 8003170 <__cvt+0xa4>
 800316c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003170:	2230      	movs	r2, #48	; 0x30
 8003172:	9b03      	ldr	r3, [sp, #12]
 8003174:	454b      	cmp	r3, r9
 8003176:	d307      	bcc.n	8003188 <__cvt+0xbc>
 8003178:	9b03      	ldr	r3, [sp, #12]
 800317a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800317c:	1bdb      	subs	r3, r3, r7
 800317e:	4638      	mov	r0, r7
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	b004      	add	sp, #16
 8003184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003188:	1c59      	adds	r1, r3, #1
 800318a:	9103      	str	r1, [sp, #12]
 800318c:	701a      	strb	r2, [r3, #0]
 800318e:	e7f0      	b.n	8003172 <__cvt+0xa6>

08003190 <__exponent>:
 8003190:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003192:	4603      	mov	r3, r0
 8003194:	2900      	cmp	r1, #0
 8003196:	bfb8      	it	lt
 8003198:	4249      	neglt	r1, r1
 800319a:	f803 2b02 	strb.w	r2, [r3], #2
 800319e:	bfb4      	ite	lt
 80031a0:	222d      	movlt	r2, #45	; 0x2d
 80031a2:	222b      	movge	r2, #43	; 0x2b
 80031a4:	2909      	cmp	r1, #9
 80031a6:	7042      	strb	r2, [r0, #1]
 80031a8:	dd2a      	ble.n	8003200 <__exponent+0x70>
 80031aa:	f10d 0207 	add.w	r2, sp, #7
 80031ae:	4617      	mov	r7, r2
 80031b0:	260a      	movs	r6, #10
 80031b2:	4694      	mov	ip, r2
 80031b4:	fb91 f5f6 	sdiv	r5, r1, r6
 80031b8:	fb06 1415 	mls	r4, r6, r5, r1
 80031bc:	3430      	adds	r4, #48	; 0x30
 80031be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80031c2:	460c      	mov	r4, r1
 80031c4:	2c63      	cmp	r4, #99	; 0x63
 80031c6:	f102 32ff 	add.w	r2, r2, #4294967295
 80031ca:	4629      	mov	r1, r5
 80031cc:	dcf1      	bgt.n	80031b2 <__exponent+0x22>
 80031ce:	3130      	adds	r1, #48	; 0x30
 80031d0:	f1ac 0402 	sub.w	r4, ip, #2
 80031d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80031d8:	1c41      	adds	r1, r0, #1
 80031da:	4622      	mov	r2, r4
 80031dc:	42ba      	cmp	r2, r7
 80031de:	d30a      	bcc.n	80031f6 <__exponent+0x66>
 80031e0:	f10d 0209 	add.w	r2, sp, #9
 80031e4:	eba2 020c 	sub.w	r2, r2, ip
 80031e8:	42bc      	cmp	r4, r7
 80031ea:	bf88      	it	hi
 80031ec:	2200      	movhi	r2, #0
 80031ee:	4413      	add	r3, r2
 80031f0:	1a18      	subs	r0, r3, r0
 80031f2:	b003      	add	sp, #12
 80031f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80031fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80031fe:	e7ed      	b.n	80031dc <__exponent+0x4c>
 8003200:	2330      	movs	r3, #48	; 0x30
 8003202:	3130      	adds	r1, #48	; 0x30
 8003204:	7083      	strb	r3, [r0, #2]
 8003206:	70c1      	strb	r1, [r0, #3]
 8003208:	1d03      	adds	r3, r0, #4
 800320a:	e7f1      	b.n	80031f0 <__exponent+0x60>

0800320c <_printf_float>:
 800320c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003210:	ed2d 8b02 	vpush	{d8}
 8003214:	b08d      	sub	sp, #52	; 0x34
 8003216:	460c      	mov	r4, r1
 8003218:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800321c:	4616      	mov	r6, r2
 800321e:	461f      	mov	r7, r3
 8003220:	4605      	mov	r5, r0
 8003222:	f000 fcd9 	bl	8003bd8 <_localeconv_r>
 8003226:	f8d0 a000 	ldr.w	sl, [r0]
 800322a:	4650      	mov	r0, sl
 800322c:	f7fd f828 	bl	8000280 <strlen>
 8003230:	2300      	movs	r3, #0
 8003232:	930a      	str	r3, [sp, #40]	; 0x28
 8003234:	6823      	ldr	r3, [r4, #0]
 8003236:	9305      	str	r3, [sp, #20]
 8003238:	f8d8 3000 	ldr.w	r3, [r8]
 800323c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003240:	3307      	adds	r3, #7
 8003242:	f023 0307 	bic.w	r3, r3, #7
 8003246:	f103 0208 	add.w	r2, r3, #8
 800324a:	f8c8 2000 	str.w	r2, [r8]
 800324e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003252:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003256:	9307      	str	r3, [sp, #28]
 8003258:	f8cd 8018 	str.w	r8, [sp, #24]
 800325c:	ee08 0a10 	vmov	s16, r0
 8003260:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003264:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003268:	4b9e      	ldr	r3, [pc, #632]	; (80034e4 <_printf_float+0x2d8>)
 800326a:	f04f 32ff 	mov.w	r2, #4294967295
 800326e:	f7fd fc65 	bl	8000b3c <__aeabi_dcmpun>
 8003272:	bb88      	cbnz	r0, 80032d8 <_printf_float+0xcc>
 8003274:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003278:	4b9a      	ldr	r3, [pc, #616]	; (80034e4 <_printf_float+0x2d8>)
 800327a:	f04f 32ff 	mov.w	r2, #4294967295
 800327e:	f7fd fc3f 	bl	8000b00 <__aeabi_dcmple>
 8003282:	bb48      	cbnz	r0, 80032d8 <_printf_float+0xcc>
 8003284:	2200      	movs	r2, #0
 8003286:	2300      	movs	r3, #0
 8003288:	4640      	mov	r0, r8
 800328a:	4649      	mov	r1, r9
 800328c:	f7fd fc2e 	bl	8000aec <__aeabi_dcmplt>
 8003290:	b110      	cbz	r0, 8003298 <_printf_float+0x8c>
 8003292:	232d      	movs	r3, #45	; 0x2d
 8003294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003298:	4a93      	ldr	r2, [pc, #588]	; (80034e8 <_printf_float+0x2dc>)
 800329a:	4b94      	ldr	r3, [pc, #592]	; (80034ec <_printf_float+0x2e0>)
 800329c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80032a0:	bf94      	ite	ls
 80032a2:	4690      	movls	r8, r2
 80032a4:	4698      	movhi	r8, r3
 80032a6:	2303      	movs	r3, #3
 80032a8:	6123      	str	r3, [r4, #16]
 80032aa:	9b05      	ldr	r3, [sp, #20]
 80032ac:	f023 0304 	bic.w	r3, r3, #4
 80032b0:	6023      	str	r3, [r4, #0]
 80032b2:	f04f 0900 	mov.w	r9, #0
 80032b6:	9700      	str	r7, [sp, #0]
 80032b8:	4633      	mov	r3, r6
 80032ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80032bc:	4621      	mov	r1, r4
 80032be:	4628      	mov	r0, r5
 80032c0:	f000 f9da 	bl	8003678 <_printf_common>
 80032c4:	3001      	adds	r0, #1
 80032c6:	f040 8090 	bne.w	80033ea <_printf_float+0x1de>
 80032ca:	f04f 30ff 	mov.w	r0, #4294967295
 80032ce:	b00d      	add	sp, #52	; 0x34
 80032d0:	ecbd 8b02 	vpop	{d8}
 80032d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032d8:	4642      	mov	r2, r8
 80032da:	464b      	mov	r3, r9
 80032dc:	4640      	mov	r0, r8
 80032de:	4649      	mov	r1, r9
 80032e0:	f7fd fc2c 	bl	8000b3c <__aeabi_dcmpun>
 80032e4:	b140      	cbz	r0, 80032f8 <_printf_float+0xec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	bfbc      	itt	lt
 80032ec:	232d      	movlt	r3, #45	; 0x2d
 80032ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80032f2:	4a7f      	ldr	r2, [pc, #508]	; (80034f0 <_printf_float+0x2e4>)
 80032f4:	4b7f      	ldr	r3, [pc, #508]	; (80034f4 <_printf_float+0x2e8>)
 80032f6:	e7d1      	b.n	800329c <_printf_float+0x90>
 80032f8:	6863      	ldr	r3, [r4, #4]
 80032fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80032fe:	9206      	str	r2, [sp, #24]
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	d13f      	bne.n	8003384 <_printf_float+0x178>
 8003304:	2306      	movs	r3, #6
 8003306:	6063      	str	r3, [r4, #4]
 8003308:	9b05      	ldr	r3, [sp, #20]
 800330a:	6861      	ldr	r1, [r4, #4]
 800330c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003310:	2300      	movs	r3, #0
 8003312:	9303      	str	r3, [sp, #12]
 8003314:	ab0a      	add	r3, sp, #40	; 0x28
 8003316:	e9cd b301 	strd	fp, r3, [sp, #4]
 800331a:	ab09      	add	r3, sp, #36	; 0x24
 800331c:	ec49 8b10 	vmov	d0, r8, r9
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	6022      	str	r2, [r4, #0]
 8003324:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003328:	4628      	mov	r0, r5
 800332a:	f7ff fecf 	bl	80030cc <__cvt>
 800332e:	9b06      	ldr	r3, [sp, #24]
 8003330:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003332:	2b47      	cmp	r3, #71	; 0x47
 8003334:	4680      	mov	r8, r0
 8003336:	d108      	bne.n	800334a <_printf_float+0x13e>
 8003338:	1cc8      	adds	r0, r1, #3
 800333a:	db02      	blt.n	8003342 <_printf_float+0x136>
 800333c:	6863      	ldr	r3, [r4, #4]
 800333e:	4299      	cmp	r1, r3
 8003340:	dd41      	ble.n	80033c6 <_printf_float+0x1ba>
 8003342:	f1ab 0302 	sub.w	r3, fp, #2
 8003346:	fa5f fb83 	uxtb.w	fp, r3
 800334a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800334e:	d820      	bhi.n	8003392 <_printf_float+0x186>
 8003350:	3901      	subs	r1, #1
 8003352:	465a      	mov	r2, fp
 8003354:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003358:	9109      	str	r1, [sp, #36]	; 0x24
 800335a:	f7ff ff19 	bl	8003190 <__exponent>
 800335e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003360:	1813      	adds	r3, r2, r0
 8003362:	2a01      	cmp	r2, #1
 8003364:	4681      	mov	r9, r0
 8003366:	6123      	str	r3, [r4, #16]
 8003368:	dc02      	bgt.n	8003370 <_printf_float+0x164>
 800336a:	6822      	ldr	r2, [r4, #0]
 800336c:	07d2      	lsls	r2, r2, #31
 800336e:	d501      	bpl.n	8003374 <_printf_float+0x168>
 8003370:	3301      	adds	r3, #1
 8003372:	6123      	str	r3, [r4, #16]
 8003374:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003378:	2b00      	cmp	r3, #0
 800337a:	d09c      	beq.n	80032b6 <_printf_float+0xaa>
 800337c:	232d      	movs	r3, #45	; 0x2d
 800337e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003382:	e798      	b.n	80032b6 <_printf_float+0xaa>
 8003384:	9a06      	ldr	r2, [sp, #24]
 8003386:	2a47      	cmp	r2, #71	; 0x47
 8003388:	d1be      	bne.n	8003308 <_printf_float+0xfc>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1bc      	bne.n	8003308 <_printf_float+0xfc>
 800338e:	2301      	movs	r3, #1
 8003390:	e7b9      	b.n	8003306 <_printf_float+0xfa>
 8003392:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003396:	d118      	bne.n	80033ca <_printf_float+0x1be>
 8003398:	2900      	cmp	r1, #0
 800339a:	6863      	ldr	r3, [r4, #4]
 800339c:	dd0b      	ble.n	80033b6 <_printf_float+0x1aa>
 800339e:	6121      	str	r1, [r4, #16]
 80033a0:	b913      	cbnz	r3, 80033a8 <_printf_float+0x19c>
 80033a2:	6822      	ldr	r2, [r4, #0]
 80033a4:	07d0      	lsls	r0, r2, #31
 80033a6:	d502      	bpl.n	80033ae <_printf_float+0x1a2>
 80033a8:	3301      	adds	r3, #1
 80033aa:	440b      	add	r3, r1
 80033ac:	6123      	str	r3, [r4, #16]
 80033ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80033b0:	f04f 0900 	mov.w	r9, #0
 80033b4:	e7de      	b.n	8003374 <_printf_float+0x168>
 80033b6:	b913      	cbnz	r3, 80033be <_printf_float+0x1b2>
 80033b8:	6822      	ldr	r2, [r4, #0]
 80033ba:	07d2      	lsls	r2, r2, #31
 80033bc:	d501      	bpl.n	80033c2 <_printf_float+0x1b6>
 80033be:	3302      	adds	r3, #2
 80033c0:	e7f4      	b.n	80033ac <_printf_float+0x1a0>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e7f2      	b.n	80033ac <_printf_float+0x1a0>
 80033c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80033ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033cc:	4299      	cmp	r1, r3
 80033ce:	db05      	blt.n	80033dc <_printf_float+0x1d0>
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	6121      	str	r1, [r4, #16]
 80033d4:	07d8      	lsls	r0, r3, #31
 80033d6:	d5ea      	bpl.n	80033ae <_printf_float+0x1a2>
 80033d8:	1c4b      	adds	r3, r1, #1
 80033da:	e7e7      	b.n	80033ac <_printf_float+0x1a0>
 80033dc:	2900      	cmp	r1, #0
 80033de:	bfd4      	ite	le
 80033e0:	f1c1 0202 	rsble	r2, r1, #2
 80033e4:	2201      	movgt	r2, #1
 80033e6:	4413      	add	r3, r2
 80033e8:	e7e0      	b.n	80033ac <_printf_float+0x1a0>
 80033ea:	6823      	ldr	r3, [r4, #0]
 80033ec:	055a      	lsls	r2, r3, #21
 80033ee:	d407      	bmi.n	8003400 <_printf_float+0x1f4>
 80033f0:	6923      	ldr	r3, [r4, #16]
 80033f2:	4642      	mov	r2, r8
 80033f4:	4631      	mov	r1, r6
 80033f6:	4628      	mov	r0, r5
 80033f8:	47b8      	blx	r7
 80033fa:	3001      	adds	r0, #1
 80033fc:	d12c      	bne.n	8003458 <_printf_float+0x24c>
 80033fe:	e764      	b.n	80032ca <_printf_float+0xbe>
 8003400:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003404:	f240 80e0 	bls.w	80035c8 <_printf_float+0x3bc>
 8003408:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800340c:	2200      	movs	r2, #0
 800340e:	2300      	movs	r3, #0
 8003410:	f7fd fb62 	bl	8000ad8 <__aeabi_dcmpeq>
 8003414:	2800      	cmp	r0, #0
 8003416:	d034      	beq.n	8003482 <_printf_float+0x276>
 8003418:	4a37      	ldr	r2, [pc, #220]	; (80034f8 <_printf_float+0x2ec>)
 800341a:	2301      	movs	r3, #1
 800341c:	4631      	mov	r1, r6
 800341e:	4628      	mov	r0, r5
 8003420:	47b8      	blx	r7
 8003422:	3001      	adds	r0, #1
 8003424:	f43f af51 	beq.w	80032ca <_printf_float+0xbe>
 8003428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800342c:	429a      	cmp	r2, r3
 800342e:	db02      	blt.n	8003436 <_printf_float+0x22a>
 8003430:	6823      	ldr	r3, [r4, #0]
 8003432:	07d8      	lsls	r0, r3, #31
 8003434:	d510      	bpl.n	8003458 <_printf_float+0x24c>
 8003436:	ee18 3a10 	vmov	r3, s16
 800343a:	4652      	mov	r2, sl
 800343c:	4631      	mov	r1, r6
 800343e:	4628      	mov	r0, r5
 8003440:	47b8      	blx	r7
 8003442:	3001      	adds	r0, #1
 8003444:	f43f af41 	beq.w	80032ca <_printf_float+0xbe>
 8003448:	f04f 0800 	mov.w	r8, #0
 800344c:	f104 091a 	add.w	r9, r4, #26
 8003450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003452:	3b01      	subs	r3, #1
 8003454:	4543      	cmp	r3, r8
 8003456:	dc09      	bgt.n	800346c <_printf_float+0x260>
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	079b      	lsls	r3, r3, #30
 800345c:	f100 8107 	bmi.w	800366e <_printf_float+0x462>
 8003460:	68e0      	ldr	r0, [r4, #12]
 8003462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003464:	4298      	cmp	r0, r3
 8003466:	bfb8      	it	lt
 8003468:	4618      	movlt	r0, r3
 800346a:	e730      	b.n	80032ce <_printf_float+0xc2>
 800346c:	2301      	movs	r3, #1
 800346e:	464a      	mov	r2, r9
 8003470:	4631      	mov	r1, r6
 8003472:	4628      	mov	r0, r5
 8003474:	47b8      	blx	r7
 8003476:	3001      	adds	r0, #1
 8003478:	f43f af27 	beq.w	80032ca <_printf_float+0xbe>
 800347c:	f108 0801 	add.w	r8, r8, #1
 8003480:	e7e6      	b.n	8003450 <_printf_float+0x244>
 8003482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003484:	2b00      	cmp	r3, #0
 8003486:	dc39      	bgt.n	80034fc <_printf_float+0x2f0>
 8003488:	4a1b      	ldr	r2, [pc, #108]	; (80034f8 <_printf_float+0x2ec>)
 800348a:	2301      	movs	r3, #1
 800348c:	4631      	mov	r1, r6
 800348e:	4628      	mov	r0, r5
 8003490:	47b8      	blx	r7
 8003492:	3001      	adds	r0, #1
 8003494:	f43f af19 	beq.w	80032ca <_printf_float+0xbe>
 8003498:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800349c:	4313      	orrs	r3, r2
 800349e:	d102      	bne.n	80034a6 <_printf_float+0x29a>
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	07d9      	lsls	r1, r3, #31
 80034a4:	d5d8      	bpl.n	8003458 <_printf_float+0x24c>
 80034a6:	ee18 3a10 	vmov	r3, s16
 80034aa:	4652      	mov	r2, sl
 80034ac:	4631      	mov	r1, r6
 80034ae:	4628      	mov	r0, r5
 80034b0:	47b8      	blx	r7
 80034b2:	3001      	adds	r0, #1
 80034b4:	f43f af09 	beq.w	80032ca <_printf_float+0xbe>
 80034b8:	f04f 0900 	mov.w	r9, #0
 80034bc:	f104 0a1a 	add.w	sl, r4, #26
 80034c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034c2:	425b      	negs	r3, r3
 80034c4:	454b      	cmp	r3, r9
 80034c6:	dc01      	bgt.n	80034cc <_printf_float+0x2c0>
 80034c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034ca:	e792      	b.n	80033f2 <_printf_float+0x1e6>
 80034cc:	2301      	movs	r3, #1
 80034ce:	4652      	mov	r2, sl
 80034d0:	4631      	mov	r1, r6
 80034d2:	4628      	mov	r0, r5
 80034d4:	47b8      	blx	r7
 80034d6:	3001      	adds	r0, #1
 80034d8:	f43f aef7 	beq.w	80032ca <_printf_float+0xbe>
 80034dc:	f109 0901 	add.w	r9, r9, #1
 80034e0:	e7ee      	b.n	80034c0 <_printf_float+0x2b4>
 80034e2:	bf00      	nop
 80034e4:	7fefffff 	.word	0x7fefffff
 80034e8:	08005af2 	.word	0x08005af2
 80034ec:	08005af6 	.word	0x08005af6
 80034f0:	08005afa 	.word	0x08005afa
 80034f4:	08005afe 	.word	0x08005afe
 80034f8:	08005b02 	.word	0x08005b02
 80034fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003500:	429a      	cmp	r2, r3
 8003502:	bfa8      	it	ge
 8003504:	461a      	movge	r2, r3
 8003506:	2a00      	cmp	r2, #0
 8003508:	4691      	mov	r9, r2
 800350a:	dc37      	bgt.n	800357c <_printf_float+0x370>
 800350c:	f04f 0b00 	mov.w	fp, #0
 8003510:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003514:	f104 021a 	add.w	r2, r4, #26
 8003518:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800351a:	9305      	str	r3, [sp, #20]
 800351c:	eba3 0309 	sub.w	r3, r3, r9
 8003520:	455b      	cmp	r3, fp
 8003522:	dc33      	bgt.n	800358c <_printf_float+0x380>
 8003524:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003528:	429a      	cmp	r2, r3
 800352a:	db3b      	blt.n	80035a4 <_printf_float+0x398>
 800352c:	6823      	ldr	r3, [r4, #0]
 800352e:	07da      	lsls	r2, r3, #31
 8003530:	d438      	bmi.n	80035a4 <_printf_float+0x398>
 8003532:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003536:	eba2 0903 	sub.w	r9, r2, r3
 800353a:	9b05      	ldr	r3, [sp, #20]
 800353c:	1ad2      	subs	r2, r2, r3
 800353e:	4591      	cmp	r9, r2
 8003540:	bfa8      	it	ge
 8003542:	4691      	movge	r9, r2
 8003544:	f1b9 0f00 	cmp.w	r9, #0
 8003548:	dc35      	bgt.n	80035b6 <_printf_float+0x3aa>
 800354a:	f04f 0800 	mov.w	r8, #0
 800354e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003552:	f104 0a1a 	add.w	sl, r4, #26
 8003556:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	eba3 0309 	sub.w	r3, r3, r9
 8003560:	4543      	cmp	r3, r8
 8003562:	f77f af79 	ble.w	8003458 <_printf_float+0x24c>
 8003566:	2301      	movs	r3, #1
 8003568:	4652      	mov	r2, sl
 800356a:	4631      	mov	r1, r6
 800356c:	4628      	mov	r0, r5
 800356e:	47b8      	blx	r7
 8003570:	3001      	adds	r0, #1
 8003572:	f43f aeaa 	beq.w	80032ca <_printf_float+0xbe>
 8003576:	f108 0801 	add.w	r8, r8, #1
 800357a:	e7ec      	b.n	8003556 <_printf_float+0x34a>
 800357c:	4613      	mov	r3, r2
 800357e:	4631      	mov	r1, r6
 8003580:	4642      	mov	r2, r8
 8003582:	4628      	mov	r0, r5
 8003584:	47b8      	blx	r7
 8003586:	3001      	adds	r0, #1
 8003588:	d1c0      	bne.n	800350c <_printf_float+0x300>
 800358a:	e69e      	b.n	80032ca <_printf_float+0xbe>
 800358c:	2301      	movs	r3, #1
 800358e:	4631      	mov	r1, r6
 8003590:	4628      	mov	r0, r5
 8003592:	9205      	str	r2, [sp, #20]
 8003594:	47b8      	blx	r7
 8003596:	3001      	adds	r0, #1
 8003598:	f43f ae97 	beq.w	80032ca <_printf_float+0xbe>
 800359c:	9a05      	ldr	r2, [sp, #20]
 800359e:	f10b 0b01 	add.w	fp, fp, #1
 80035a2:	e7b9      	b.n	8003518 <_printf_float+0x30c>
 80035a4:	ee18 3a10 	vmov	r3, s16
 80035a8:	4652      	mov	r2, sl
 80035aa:	4631      	mov	r1, r6
 80035ac:	4628      	mov	r0, r5
 80035ae:	47b8      	blx	r7
 80035b0:	3001      	adds	r0, #1
 80035b2:	d1be      	bne.n	8003532 <_printf_float+0x326>
 80035b4:	e689      	b.n	80032ca <_printf_float+0xbe>
 80035b6:	9a05      	ldr	r2, [sp, #20]
 80035b8:	464b      	mov	r3, r9
 80035ba:	4442      	add	r2, r8
 80035bc:	4631      	mov	r1, r6
 80035be:	4628      	mov	r0, r5
 80035c0:	47b8      	blx	r7
 80035c2:	3001      	adds	r0, #1
 80035c4:	d1c1      	bne.n	800354a <_printf_float+0x33e>
 80035c6:	e680      	b.n	80032ca <_printf_float+0xbe>
 80035c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80035ca:	2a01      	cmp	r2, #1
 80035cc:	dc01      	bgt.n	80035d2 <_printf_float+0x3c6>
 80035ce:	07db      	lsls	r3, r3, #31
 80035d0:	d53a      	bpl.n	8003648 <_printf_float+0x43c>
 80035d2:	2301      	movs	r3, #1
 80035d4:	4642      	mov	r2, r8
 80035d6:	4631      	mov	r1, r6
 80035d8:	4628      	mov	r0, r5
 80035da:	47b8      	blx	r7
 80035dc:	3001      	adds	r0, #1
 80035de:	f43f ae74 	beq.w	80032ca <_printf_float+0xbe>
 80035e2:	ee18 3a10 	vmov	r3, s16
 80035e6:	4652      	mov	r2, sl
 80035e8:	4631      	mov	r1, r6
 80035ea:	4628      	mov	r0, r5
 80035ec:	47b8      	blx	r7
 80035ee:	3001      	adds	r0, #1
 80035f0:	f43f ae6b 	beq.w	80032ca <_printf_float+0xbe>
 80035f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80035f8:	2200      	movs	r2, #0
 80035fa:	2300      	movs	r3, #0
 80035fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003600:	f7fd fa6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8003604:	b9d8      	cbnz	r0, 800363e <_printf_float+0x432>
 8003606:	f10a 33ff 	add.w	r3, sl, #4294967295
 800360a:	f108 0201 	add.w	r2, r8, #1
 800360e:	4631      	mov	r1, r6
 8003610:	4628      	mov	r0, r5
 8003612:	47b8      	blx	r7
 8003614:	3001      	adds	r0, #1
 8003616:	d10e      	bne.n	8003636 <_printf_float+0x42a>
 8003618:	e657      	b.n	80032ca <_printf_float+0xbe>
 800361a:	2301      	movs	r3, #1
 800361c:	4652      	mov	r2, sl
 800361e:	4631      	mov	r1, r6
 8003620:	4628      	mov	r0, r5
 8003622:	47b8      	blx	r7
 8003624:	3001      	adds	r0, #1
 8003626:	f43f ae50 	beq.w	80032ca <_printf_float+0xbe>
 800362a:	f108 0801 	add.w	r8, r8, #1
 800362e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003630:	3b01      	subs	r3, #1
 8003632:	4543      	cmp	r3, r8
 8003634:	dcf1      	bgt.n	800361a <_printf_float+0x40e>
 8003636:	464b      	mov	r3, r9
 8003638:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800363c:	e6da      	b.n	80033f4 <_printf_float+0x1e8>
 800363e:	f04f 0800 	mov.w	r8, #0
 8003642:	f104 0a1a 	add.w	sl, r4, #26
 8003646:	e7f2      	b.n	800362e <_printf_float+0x422>
 8003648:	2301      	movs	r3, #1
 800364a:	4642      	mov	r2, r8
 800364c:	e7df      	b.n	800360e <_printf_float+0x402>
 800364e:	2301      	movs	r3, #1
 8003650:	464a      	mov	r2, r9
 8003652:	4631      	mov	r1, r6
 8003654:	4628      	mov	r0, r5
 8003656:	47b8      	blx	r7
 8003658:	3001      	adds	r0, #1
 800365a:	f43f ae36 	beq.w	80032ca <_printf_float+0xbe>
 800365e:	f108 0801 	add.w	r8, r8, #1
 8003662:	68e3      	ldr	r3, [r4, #12]
 8003664:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003666:	1a5b      	subs	r3, r3, r1
 8003668:	4543      	cmp	r3, r8
 800366a:	dcf0      	bgt.n	800364e <_printf_float+0x442>
 800366c:	e6f8      	b.n	8003460 <_printf_float+0x254>
 800366e:	f04f 0800 	mov.w	r8, #0
 8003672:	f104 0919 	add.w	r9, r4, #25
 8003676:	e7f4      	b.n	8003662 <_printf_float+0x456>

08003678 <_printf_common>:
 8003678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800367c:	4616      	mov	r6, r2
 800367e:	4699      	mov	r9, r3
 8003680:	688a      	ldr	r2, [r1, #8]
 8003682:	690b      	ldr	r3, [r1, #16]
 8003684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003688:	4293      	cmp	r3, r2
 800368a:	bfb8      	it	lt
 800368c:	4613      	movlt	r3, r2
 800368e:	6033      	str	r3, [r6, #0]
 8003690:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003694:	4607      	mov	r7, r0
 8003696:	460c      	mov	r4, r1
 8003698:	b10a      	cbz	r2, 800369e <_printf_common+0x26>
 800369a:	3301      	adds	r3, #1
 800369c:	6033      	str	r3, [r6, #0]
 800369e:	6823      	ldr	r3, [r4, #0]
 80036a0:	0699      	lsls	r1, r3, #26
 80036a2:	bf42      	ittt	mi
 80036a4:	6833      	ldrmi	r3, [r6, #0]
 80036a6:	3302      	addmi	r3, #2
 80036a8:	6033      	strmi	r3, [r6, #0]
 80036aa:	6825      	ldr	r5, [r4, #0]
 80036ac:	f015 0506 	ands.w	r5, r5, #6
 80036b0:	d106      	bne.n	80036c0 <_printf_common+0x48>
 80036b2:	f104 0a19 	add.w	sl, r4, #25
 80036b6:	68e3      	ldr	r3, [r4, #12]
 80036b8:	6832      	ldr	r2, [r6, #0]
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	42ab      	cmp	r3, r5
 80036be:	dc26      	bgt.n	800370e <_printf_common+0x96>
 80036c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036c4:	1e13      	subs	r3, r2, #0
 80036c6:	6822      	ldr	r2, [r4, #0]
 80036c8:	bf18      	it	ne
 80036ca:	2301      	movne	r3, #1
 80036cc:	0692      	lsls	r2, r2, #26
 80036ce:	d42b      	bmi.n	8003728 <_printf_common+0xb0>
 80036d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80036d4:	4649      	mov	r1, r9
 80036d6:	4638      	mov	r0, r7
 80036d8:	47c0      	blx	r8
 80036da:	3001      	adds	r0, #1
 80036dc:	d01e      	beq.n	800371c <_printf_common+0xa4>
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	6922      	ldr	r2, [r4, #16]
 80036e2:	f003 0306 	and.w	r3, r3, #6
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	bf02      	ittt	eq
 80036ea:	68e5      	ldreq	r5, [r4, #12]
 80036ec:	6833      	ldreq	r3, [r6, #0]
 80036ee:	1aed      	subeq	r5, r5, r3
 80036f0:	68a3      	ldr	r3, [r4, #8]
 80036f2:	bf0c      	ite	eq
 80036f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036f8:	2500      	movne	r5, #0
 80036fa:	4293      	cmp	r3, r2
 80036fc:	bfc4      	itt	gt
 80036fe:	1a9b      	subgt	r3, r3, r2
 8003700:	18ed      	addgt	r5, r5, r3
 8003702:	2600      	movs	r6, #0
 8003704:	341a      	adds	r4, #26
 8003706:	42b5      	cmp	r5, r6
 8003708:	d11a      	bne.n	8003740 <_printf_common+0xc8>
 800370a:	2000      	movs	r0, #0
 800370c:	e008      	b.n	8003720 <_printf_common+0xa8>
 800370e:	2301      	movs	r3, #1
 8003710:	4652      	mov	r2, sl
 8003712:	4649      	mov	r1, r9
 8003714:	4638      	mov	r0, r7
 8003716:	47c0      	blx	r8
 8003718:	3001      	adds	r0, #1
 800371a:	d103      	bne.n	8003724 <_printf_common+0xac>
 800371c:	f04f 30ff 	mov.w	r0, #4294967295
 8003720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003724:	3501      	adds	r5, #1
 8003726:	e7c6      	b.n	80036b6 <_printf_common+0x3e>
 8003728:	18e1      	adds	r1, r4, r3
 800372a:	1c5a      	adds	r2, r3, #1
 800372c:	2030      	movs	r0, #48	; 0x30
 800372e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003732:	4422      	add	r2, r4
 8003734:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003738:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800373c:	3302      	adds	r3, #2
 800373e:	e7c7      	b.n	80036d0 <_printf_common+0x58>
 8003740:	2301      	movs	r3, #1
 8003742:	4622      	mov	r2, r4
 8003744:	4649      	mov	r1, r9
 8003746:	4638      	mov	r0, r7
 8003748:	47c0      	blx	r8
 800374a:	3001      	adds	r0, #1
 800374c:	d0e6      	beq.n	800371c <_printf_common+0xa4>
 800374e:	3601      	adds	r6, #1
 8003750:	e7d9      	b.n	8003706 <_printf_common+0x8e>
	...

08003754 <_printf_i>:
 8003754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003758:	7e0f      	ldrb	r7, [r1, #24]
 800375a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800375c:	2f78      	cmp	r7, #120	; 0x78
 800375e:	4691      	mov	r9, r2
 8003760:	4680      	mov	r8, r0
 8003762:	460c      	mov	r4, r1
 8003764:	469a      	mov	sl, r3
 8003766:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800376a:	d807      	bhi.n	800377c <_printf_i+0x28>
 800376c:	2f62      	cmp	r7, #98	; 0x62
 800376e:	d80a      	bhi.n	8003786 <_printf_i+0x32>
 8003770:	2f00      	cmp	r7, #0
 8003772:	f000 80d4 	beq.w	800391e <_printf_i+0x1ca>
 8003776:	2f58      	cmp	r7, #88	; 0x58
 8003778:	f000 80c0 	beq.w	80038fc <_printf_i+0x1a8>
 800377c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003780:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003784:	e03a      	b.n	80037fc <_printf_i+0xa8>
 8003786:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800378a:	2b15      	cmp	r3, #21
 800378c:	d8f6      	bhi.n	800377c <_printf_i+0x28>
 800378e:	a101      	add	r1, pc, #4	; (adr r1, 8003794 <_printf_i+0x40>)
 8003790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003794:	080037ed 	.word	0x080037ed
 8003798:	08003801 	.word	0x08003801
 800379c:	0800377d 	.word	0x0800377d
 80037a0:	0800377d 	.word	0x0800377d
 80037a4:	0800377d 	.word	0x0800377d
 80037a8:	0800377d 	.word	0x0800377d
 80037ac:	08003801 	.word	0x08003801
 80037b0:	0800377d 	.word	0x0800377d
 80037b4:	0800377d 	.word	0x0800377d
 80037b8:	0800377d 	.word	0x0800377d
 80037bc:	0800377d 	.word	0x0800377d
 80037c0:	08003905 	.word	0x08003905
 80037c4:	0800382d 	.word	0x0800382d
 80037c8:	080038bf 	.word	0x080038bf
 80037cc:	0800377d 	.word	0x0800377d
 80037d0:	0800377d 	.word	0x0800377d
 80037d4:	08003927 	.word	0x08003927
 80037d8:	0800377d 	.word	0x0800377d
 80037dc:	0800382d 	.word	0x0800382d
 80037e0:	0800377d 	.word	0x0800377d
 80037e4:	0800377d 	.word	0x0800377d
 80037e8:	080038c7 	.word	0x080038c7
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	1d1a      	adds	r2, r3, #4
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	602a      	str	r2, [r5, #0]
 80037f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037fc:	2301      	movs	r3, #1
 80037fe:	e09f      	b.n	8003940 <_printf_i+0x1ec>
 8003800:	6820      	ldr	r0, [r4, #0]
 8003802:	682b      	ldr	r3, [r5, #0]
 8003804:	0607      	lsls	r7, r0, #24
 8003806:	f103 0104 	add.w	r1, r3, #4
 800380a:	6029      	str	r1, [r5, #0]
 800380c:	d501      	bpl.n	8003812 <_printf_i+0xbe>
 800380e:	681e      	ldr	r6, [r3, #0]
 8003810:	e003      	b.n	800381a <_printf_i+0xc6>
 8003812:	0646      	lsls	r6, r0, #25
 8003814:	d5fb      	bpl.n	800380e <_printf_i+0xba>
 8003816:	f9b3 6000 	ldrsh.w	r6, [r3]
 800381a:	2e00      	cmp	r6, #0
 800381c:	da03      	bge.n	8003826 <_printf_i+0xd2>
 800381e:	232d      	movs	r3, #45	; 0x2d
 8003820:	4276      	negs	r6, r6
 8003822:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003826:	485a      	ldr	r0, [pc, #360]	; (8003990 <_printf_i+0x23c>)
 8003828:	230a      	movs	r3, #10
 800382a:	e012      	b.n	8003852 <_printf_i+0xfe>
 800382c:	682b      	ldr	r3, [r5, #0]
 800382e:	6820      	ldr	r0, [r4, #0]
 8003830:	1d19      	adds	r1, r3, #4
 8003832:	6029      	str	r1, [r5, #0]
 8003834:	0605      	lsls	r5, r0, #24
 8003836:	d501      	bpl.n	800383c <_printf_i+0xe8>
 8003838:	681e      	ldr	r6, [r3, #0]
 800383a:	e002      	b.n	8003842 <_printf_i+0xee>
 800383c:	0641      	lsls	r1, r0, #25
 800383e:	d5fb      	bpl.n	8003838 <_printf_i+0xe4>
 8003840:	881e      	ldrh	r6, [r3, #0]
 8003842:	4853      	ldr	r0, [pc, #332]	; (8003990 <_printf_i+0x23c>)
 8003844:	2f6f      	cmp	r7, #111	; 0x6f
 8003846:	bf0c      	ite	eq
 8003848:	2308      	moveq	r3, #8
 800384a:	230a      	movne	r3, #10
 800384c:	2100      	movs	r1, #0
 800384e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003852:	6865      	ldr	r5, [r4, #4]
 8003854:	60a5      	str	r5, [r4, #8]
 8003856:	2d00      	cmp	r5, #0
 8003858:	bfa2      	ittt	ge
 800385a:	6821      	ldrge	r1, [r4, #0]
 800385c:	f021 0104 	bicge.w	r1, r1, #4
 8003860:	6021      	strge	r1, [r4, #0]
 8003862:	b90e      	cbnz	r6, 8003868 <_printf_i+0x114>
 8003864:	2d00      	cmp	r5, #0
 8003866:	d04b      	beq.n	8003900 <_printf_i+0x1ac>
 8003868:	4615      	mov	r5, r2
 800386a:	fbb6 f1f3 	udiv	r1, r6, r3
 800386e:	fb03 6711 	mls	r7, r3, r1, r6
 8003872:	5dc7      	ldrb	r7, [r0, r7]
 8003874:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003878:	4637      	mov	r7, r6
 800387a:	42bb      	cmp	r3, r7
 800387c:	460e      	mov	r6, r1
 800387e:	d9f4      	bls.n	800386a <_printf_i+0x116>
 8003880:	2b08      	cmp	r3, #8
 8003882:	d10b      	bne.n	800389c <_printf_i+0x148>
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	07de      	lsls	r6, r3, #31
 8003888:	d508      	bpl.n	800389c <_printf_i+0x148>
 800388a:	6923      	ldr	r3, [r4, #16]
 800388c:	6861      	ldr	r1, [r4, #4]
 800388e:	4299      	cmp	r1, r3
 8003890:	bfde      	ittt	le
 8003892:	2330      	movle	r3, #48	; 0x30
 8003894:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003898:	f105 35ff 	addle.w	r5, r5, #4294967295
 800389c:	1b52      	subs	r2, r2, r5
 800389e:	6122      	str	r2, [r4, #16]
 80038a0:	f8cd a000 	str.w	sl, [sp]
 80038a4:	464b      	mov	r3, r9
 80038a6:	aa03      	add	r2, sp, #12
 80038a8:	4621      	mov	r1, r4
 80038aa:	4640      	mov	r0, r8
 80038ac:	f7ff fee4 	bl	8003678 <_printf_common>
 80038b0:	3001      	adds	r0, #1
 80038b2:	d14a      	bne.n	800394a <_printf_i+0x1f6>
 80038b4:	f04f 30ff 	mov.w	r0, #4294967295
 80038b8:	b004      	add	sp, #16
 80038ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	f043 0320 	orr.w	r3, r3, #32
 80038c4:	6023      	str	r3, [r4, #0]
 80038c6:	4833      	ldr	r0, [pc, #204]	; (8003994 <_printf_i+0x240>)
 80038c8:	2778      	movs	r7, #120	; 0x78
 80038ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	6829      	ldr	r1, [r5, #0]
 80038d2:	061f      	lsls	r7, r3, #24
 80038d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80038d8:	d402      	bmi.n	80038e0 <_printf_i+0x18c>
 80038da:	065f      	lsls	r7, r3, #25
 80038dc:	bf48      	it	mi
 80038de:	b2b6      	uxthmi	r6, r6
 80038e0:	07df      	lsls	r7, r3, #31
 80038e2:	bf48      	it	mi
 80038e4:	f043 0320 	orrmi.w	r3, r3, #32
 80038e8:	6029      	str	r1, [r5, #0]
 80038ea:	bf48      	it	mi
 80038ec:	6023      	strmi	r3, [r4, #0]
 80038ee:	b91e      	cbnz	r6, 80038f8 <_printf_i+0x1a4>
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	f023 0320 	bic.w	r3, r3, #32
 80038f6:	6023      	str	r3, [r4, #0]
 80038f8:	2310      	movs	r3, #16
 80038fa:	e7a7      	b.n	800384c <_printf_i+0xf8>
 80038fc:	4824      	ldr	r0, [pc, #144]	; (8003990 <_printf_i+0x23c>)
 80038fe:	e7e4      	b.n	80038ca <_printf_i+0x176>
 8003900:	4615      	mov	r5, r2
 8003902:	e7bd      	b.n	8003880 <_printf_i+0x12c>
 8003904:	682b      	ldr	r3, [r5, #0]
 8003906:	6826      	ldr	r6, [r4, #0]
 8003908:	6961      	ldr	r1, [r4, #20]
 800390a:	1d18      	adds	r0, r3, #4
 800390c:	6028      	str	r0, [r5, #0]
 800390e:	0635      	lsls	r5, r6, #24
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	d501      	bpl.n	8003918 <_printf_i+0x1c4>
 8003914:	6019      	str	r1, [r3, #0]
 8003916:	e002      	b.n	800391e <_printf_i+0x1ca>
 8003918:	0670      	lsls	r0, r6, #25
 800391a:	d5fb      	bpl.n	8003914 <_printf_i+0x1c0>
 800391c:	8019      	strh	r1, [r3, #0]
 800391e:	2300      	movs	r3, #0
 8003920:	6123      	str	r3, [r4, #16]
 8003922:	4615      	mov	r5, r2
 8003924:	e7bc      	b.n	80038a0 <_printf_i+0x14c>
 8003926:	682b      	ldr	r3, [r5, #0]
 8003928:	1d1a      	adds	r2, r3, #4
 800392a:	602a      	str	r2, [r5, #0]
 800392c:	681d      	ldr	r5, [r3, #0]
 800392e:	6862      	ldr	r2, [r4, #4]
 8003930:	2100      	movs	r1, #0
 8003932:	4628      	mov	r0, r5
 8003934:	f7fc fc54 	bl	80001e0 <memchr>
 8003938:	b108      	cbz	r0, 800393e <_printf_i+0x1ea>
 800393a:	1b40      	subs	r0, r0, r5
 800393c:	6060      	str	r0, [r4, #4]
 800393e:	6863      	ldr	r3, [r4, #4]
 8003940:	6123      	str	r3, [r4, #16]
 8003942:	2300      	movs	r3, #0
 8003944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003948:	e7aa      	b.n	80038a0 <_printf_i+0x14c>
 800394a:	6923      	ldr	r3, [r4, #16]
 800394c:	462a      	mov	r2, r5
 800394e:	4649      	mov	r1, r9
 8003950:	4640      	mov	r0, r8
 8003952:	47d0      	blx	sl
 8003954:	3001      	adds	r0, #1
 8003956:	d0ad      	beq.n	80038b4 <_printf_i+0x160>
 8003958:	6823      	ldr	r3, [r4, #0]
 800395a:	079b      	lsls	r3, r3, #30
 800395c:	d413      	bmi.n	8003986 <_printf_i+0x232>
 800395e:	68e0      	ldr	r0, [r4, #12]
 8003960:	9b03      	ldr	r3, [sp, #12]
 8003962:	4298      	cmp	r0, r3
 8003964:	bfb8      	it	lt
 8003966:	4618      	movlt	r0, r3
 8003968:	e7a6      	b.n	80038b8 <_printf_i+0x164>
 800396a:	2301      	movs	r3, #1
 800396c:	4632      	mov	r2, r6
 800396e:	4649      	mov	r1, r9
 8003970:	4640      	mov	r0, r8
 8003972:	47d0      	blx	sl
 8003974:	3001      	adds	r0, #1
 8003976:	d09d      	beq.n	80038b4 <_printf_i+0x160>
 8003978:	3501      	adds	r5, #1
 800397a:	68e3      	ldr	r3, [r4, #12]
 800397c:	9903      	ldr	r1, [sp, #12]
 800397e:	1a5b      	subs	r3, r3, r1
 8003980:	42ab      	cmp	r3, r5
 8003982:	dcf2      	bgt.n	800396a <_printf_i+0x216>
 8003984:	e7eb      	b.n	800395e <_printf_i+0x20a>
 8003986:	2500      	movs	r5, #0
 8003988:	f104 0619 	add.w	r6, r4, #25
 800398c:	e7f5      	b.n	800397a <_printf_i+0x226>
 800398e:	bf00      	nop
 8003990:	08005b04 	.word	0x08005b04
 8003994:	08005b15 	.word	0x08005b15

08003998 <std>:
 8003998:	2300      	movs	r3, #0
 800399a:	b510      	push	{r4, lr}
 800399c:	4604      	mov	r4, r0
 800399e:	e9c0 3300 	strd	r3, r3, [r0]
 80039a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039a6:	6083      	str	r3, [r0, #8]
 80039a8:	8181      	strh	r1, [r0, #12]
 80039aa:	6643      	str	r3, [r0, #100]	; 0x64
 80039ac:	81c2      	strh	r2, [r0, #14]
 80039ae:	6183      	str	r3, [r0, #24]
 80039b0:	4619      	mov	r1, r3
 80039b2:	2208      	movs	r2, #8
 80039b4:	305c      	adds	r0, #92	; 0x5c
 80039b6:	f000 f906 	bl	8003bc6 <memset>
 80039ba:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <std+0x58>)
 80039bc:	6263      	str	r3, [r4, #36]	; 0x24
 80039be:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <std+0x5c>)
 80039c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80039c2:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <std+0x60>)
 80039c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80039c6:	4b0d      	ldr	r3, [pc, #52]	; (80039fc <std+0x64>)
 80039c8:	6323      	str	r3, [r4, #48]	; 0x30
 80039ca:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <std+0x68>)
 80039cc:	6224      	str	r4, [r4, #32]
 80039ce:	429c      	cmp	r4, r3
 80039d0:	d006      	beq.n	80039e0 <std+0x48>
 80039d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80039d6:	4294      	cmp	r4, r2
 80039d8:	d002      	beq.n	80039e0 <std+0x48>
 80039da:	33d0      	adds	r3, #208	; 0xd0
 80039dc:	429c      	cmp	r4, r3
 80039de:	d105      	bne.n	80039ec <std+0x54>
 80039e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80039e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039e8:	f000 b96a 	b.w	8003cc0 <__retarget_lock_init_recursive>
 80039ec:	bd10      	pop	{r4, pc}
 80039ee:	bf00      	nop
 80039f0:	08003b41 	.word	0x08003b41
 80039f4:	08003b63 	.word	0x08003b63
 80039f8:	08003b9b 	.word	0x08003b9b
 80039fc:	08003bbf 	.word	0x08003bbf
 8003a00:	20000314 	.word	0x20000314

08003a04 <stdio_exit_handler>:
 8003a04:	4a02      	ldr	r2, [pc, #8]	; (8003a10 <stdio_exit_handler+0xc>)
 8003a06:	4903      	ldr	r1, [pc, #12]	; (8003a14 <stdio_exit_handler+0x10>)
 8003a08:	4803      	ldr	r0, [pc, #12]	; (8003a18 <stdio_exit_handler+0x14>)
 8003a0a:	f000 b869 	b.w	8003ae0 <_fwalk_sglue>
 8003a0e:	bf00      	nop
 8003a10:	20000014 	.word	0x20000014
 8003a14:	08005649 	.word	0x08005649
 8003a18:	20000020 	.word	0x20000020

08003a1c <cleanup_stdio>:
 8003a1c:	6841      	ldr	r1, [r0, #4]
 8003a1e:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <cleanup_stdio+0x34>)
 8003a20:	4299      	cmp	r1, r3
 8003a22:	b510      	push	{r4, lr}
 8003a24:	4604      	mov	r4, r0
 8003a26:	d001      	beq.n	8003a2c <cleanup_stdio+0x10>
 8003a28:	f001 fe0e 	bl	8005648 <_fflush_r>
 8003a2c:	68a1      	ldr	r1, [r4, #8]
 8003a2e:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <cleanup_stdio+0x38>)
 8003a30:	4299      	cmp	r1, r3
 8003a32:	d002      	beq.n	8003a3a <cleanup_stdio+0x1e>
 8003a34:	4620      	mov	r0, r4
 8003a36:	f001 fe07 	bl	8005648 <_fflush_r>
 8003a3a:	68e1      	ldr	r1, [r4, #12]
 8003a3c:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <cleanup_stdio+0x3c>)
 8003a3e:	4299      	cmp	r1, r3
 8003a40:	d004      	beq.n	8003a4c <cleanup_stdio+0x30>
 8003a42:	4620      	mov	r0, r4
 8003a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a48:	f001 bdfe 	b.w	8005648 <_fflush_r>
 8003a4c:	bd10      	pop	{r4, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000314 	.word	0x20000314
 8003a54:	2000037c 	.word	0x2000037c
 8003a58:	200003e4 	.word	0x200003e4

08003a5c <global_stdio_init.part.0>:
 8003a5c:	b510      	push	{r4, lr}
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <global_stdio_init.part.0+0x30>)
 8003a60:	4c0b      	ldr	r4, [pc, #44]	; (8003a90 <global_stdio_init.part.0+0x34>)
 8003a62:	4a0c      	ldr	r2, [pc, #48]	; (8003a94 <global_stdio_init.part.0+0x38>)
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	4620      	mov	r0, r4
 8003a68:	2200      	movs	r2, #0
 8003a6a:	2104      	movs	r1, #4
 8003a6c:	f7ff ff94 	bl	8003998 <std>
 8003a70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003a74:	2201      	movs	r2, #1
 8003a76:	2109      	movs	r1, #9
 8003a78:	f7ff ff8e 	bl	8003998 <std>
 8003a7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003a80:	2202      	movs	r2, #2
 8003a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a86:	2112      	movs	r1, #18
 8003a88:	f7ff bf86 	b.w	8003998 <std>
 8003a8c:	2000044c 	.word	0x2000044c
 8003a90:	20000314 	.word	0x20000314
 8003a94:	08003a05 	.word	0x08003a05

08003a98 <__sfp_lock_acquire>:
 8003a98:	4801      	ldr	r0, [pc, #4]	; (8003aa0 <__sfp_lock_acquire+0x8>)
 8003a9a:	f000 b912 	b.w	8003cc2 <__retarget_lock_acquire_recursive>
 8003a9e:	bf00      	nop
 8003aa0:	20000455 	.word	0x20000455

08003aa4 <__sfp_lock_release>:
 8003aa4:	4801      	ldr	r0, [pc, #4]	; (8003aac <__sfp_lock_release+0x8>)
 8003aa6:	f000 b90d 	b.w	8003cc4 <__retarget_lock_release_recursive>
 8003aaa:	bf00      	nop
 8003aac:	20000455 	.word	0x20000455

08003ab0 <__sinit>:
 8003ab0:	b510      	push	{r4, lr}
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	f7ff fff0 	bl	8003a98 <__sfp_lock_acquire>
 8003ab8:	6a23      	ldr	r3, [r4, #32]
 8003aba:	b11b      	cbz	r3, 8003ac4 <__sinit+0x14>
 8003abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ac0:	f7ff bff0 	b.w	8003aa4 <__sfp_lock_release>
 8003ac4:	4b04      	ldr	r3, [pc, #16]	; (8003ad8 <__sinit+0x28>)
 8003ac6:	6223      	str	r3, [r4, #32]
 8003ac8:	4b04      	ldr	r3, [pc, #16]	; (8003adc <__sinit+0x2c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f5      	bne.n	8003abc <__sinit+0xc>
 8003ad0:	f7ff ffc4 	bl	8003a5c <global_stdio_init.part.0>
 8003ad4:	e7f2      	b.n	8003abc <__sinit+0xc>
 8003ad6:	bf00      	nop
 8003ad8:	08003a1d 	.word	0x08003a1d
 8003adc:	2000044c 	.word	0x2000044c

08003ae0 <_fwalk_sglue>:
 8003ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ae4:	4607      	mov	r7, r0
 8003ae6:	4688      	mov	r8, r1
 8003ae8:	4614      	mov	r4, r2
 8003aea:	2600      	movs	r6, #0
 8003aec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003af0:	f1b9 0901 	subs.w	r9, r9, #1
 8003af4:	d505      	bpl.n	8003b02 <_fwalk_sglue+0x22>
 8003af6:	6824      	ldr	r4, [r4, #0]
 8003af8:	2c00      	cmp	r4, #0
 8003afa:	d1f7      	bne.n	8003aec <_fwalk_sglue+0xc>
 8003afc:	4630      	mov	r0, r6
 8003afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b02:	89ab      	ldrh	r3, [r5, #12]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d907      	bls.n	8003b18 <_fwalk_sglue+0x38>
 8003b08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	d003      	beq.n	8003b18 <_fwalk_sglue+0x38>
 8003b10:	4629      	mov	r1, r5
 8003b12:	4638      	mov	r0, r7
 8003b14:	47c0      	blx	r8
 8003b16:	4306      	orrs	r6, r0
 8003b18:	3568      	adds	r5, #104	; 0x68
 8003b1a:	e7e9      	b.n	8003af0 <_fwalk_sglue+0x10>

08003b1c <iprintf>:
 8003b1c:	b40f      	push	{r0, r1, r2, r3}
 8003b1e:	b507      	push	{r0, r1, r2, lr}
 8003b20:	4906      	ldr	r1, [pc, #24]	; (8003b3c <iprintf+0x20>)
 8003b22:	ab04      	add	r3, sp, #16
 8003b24:	6808      	ldr	r0, [r1, #0]
 8003b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b2a:	6881      	ldr	r1, [r0, #8]
 8003b2c:	9301      	str	r3, [sp, #4]
 8003b2e:	f001 fbeb 	bl	8005308 <_vfiprintf_r>
 8003b32:	b003      	add	sp, #12
 8003b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b38:	b004      	add	sp, #16
 8003b3a:	4770      	bx	lr
 8003b3c:	2000006c 	.word	0x2000006c

08003b40 <__sread>:
 8003b40:	b510      	push	{r4, lr}
 8003b42:	460c      	mov	r4, r1
 8003b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b48:	f000 f86c 	bl	8003c24 <_read_r>
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	bfab      	itete	ge
 8003b50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b52:	89a3      	ldrhlt	r3, [r4, #12]
 8003b54:	181b      	addge	r3, r3, r0
 8003b56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b5a:	bfac      	ite	ge
 8003b5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b5e:	81a3      	strhlt	r3, [r4, #12]
 8003b60:	bd10      	pop	{r4, pc}

08003b62 <__swrite>:
 8003b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b66:	461f      	mov	r7, r3
 8003b68:	898b      	ldrh	r3, [r1, #12]
 8003b6a:	05db      	lsls	r3, r3, #23
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	460c      	mov	r4, r1
 8003b70:	4616      	mov	r6, r2
 8003b72:	d505      	bpl.n	8003b80 <__swrite+0x1e>
 8003b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b78:	2302      	movs	r3, #2
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f000 f840 	bl	8003c00 <_lseek_r>
 8003b80:	89a3      	ldrh	r3, [r4, #12]
 8003b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b8a:	81a3      	strh	r3, [r4, #12]
 8003b8c:	4632      	mov	r2, r6
 8003b8e:	463b      	mov	r3, r7
 8003b90:	4628      	mov	r0, r5
 8003b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b96:	f000 b857 	b.w	8003c48 <_write_r>

08003b9a <__sseek>:
 8003b9a:	b510      	push	{r4, lr}
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba2:	f000 f82d 	bl	8003c00 <_lseek_r>
 8003ba6:	1c43      	adds	r3, r0, #1
 8003ba8:	89a3      	ldrh	r3, [r4, #12]
 8003baa:	bf15      	itete	ne
 8003bac:	6560      	strne	r0, [r4, #84]	; 0x54
 8003bae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003bb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003bb6:	81a3      	strheq	r3, [r4, #12]
 8003bb8:	bf18      	it	ne
 8003bba:	81a3      	strhne	r3, [r4, #12]
 8003bbc:	bd10      	pop	{r4, pc}

08003bbe <__sclose>:
 8003bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bc2:	f000 b80d 	b.w	8003be0 <_close_r>

08003bc6 <memset>:
 8003bc6:	4402      	add	r2, r0
 8003bc8:	4603      	mov	r3, r0
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d100      	bne.n	8003bd0 <memset+0xa>
 8003bce:	4770      	bx	lr
 8003bd0:	f803 1b01 	strb.w	r1, [r3], #1
 8003bd4:	e7f9      	b.n	8003bca <memset+0x4>
	...

08003bd8 <_localeconv_r>:
 8003bd8:	4800      	ldr	r0, [pc, #0]	; (8003bdc <_localeconv_r+0x4>)
 8003bda:	4770      	bx	lr
 8003bdc:	20000160 	.word	0x20000160

08003be0 <_close_r>:
 8003be0:	b538      	push	{r3, r4, r5, lr}
 8003be2:	4d06      	ldr	r5, [pc, #24]	; (8003bfc <_close_r+0x1c>)
 8003be4:	2300      	movs	r3, #0
 8003be6:	4604      	mov	r4, r0
 8003be8:	4608      	mov	r0, r1
 8003bea:	602b      	str	r3, [r5, #0]
 8003bec:	f7ff f8a2 	bl	8002d34 <_close>
 8003bf0:	1c43      	adds	r3, r0, #1
 8003bf2:	d102      	bne.n	8003bfa <_close_r+0x1a>
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	b103      	cbz	r3, 8003bfa <_close_r+0x1a>
 8003bf8:	6023      	str	r3, [r4, #0]
 8003bfa:	bd38      	pop	{r3, r4, r5, pc}
 8003bfc:	20000450 	.word	0x20000450

08003c00 <_lseek_r>:
 8003c00:	b538      	push	{r3, r4, r5, lr}
 8003c02:	4d07      	ldr	r5, [pc, #28]	; (8003c20 <_lseek_r+0x20>)
 8003c04:	4604      	mov	r4, r0
 8003c06:	4608      	mov	r0, r1
 8003c08:	4611      	mov	r1, r2
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	602a      	str	r2, [r5, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f7ff f84d 	bl	8002cae <_lseek>
 8003c14:	1c43      	adds	r3, r0, #1
 8003c16:	d102      	bne.n	8003c1e <_lseek_r+0x1e>
 8003c18:	682b      	ldr	r3, [r5, #0]
 8003c1a:	b103      	cbz	r3, 8003c1e <_lseek_r+0x1e>
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	bd38      	pop	{r3, r4, r5, pc}
 8003c20:	20000450 	.word	0x20000450

08003c24 <_read_r>:
 8003c24:	b538      	push	{r3, r4, r5, lr}
 8003c26:	4d07      	ldr	r5, [pc, #28]	; (8003c44 <_read_r+0x20>)
 8003c28:	4604      	mov	r4, r0
 8003c2a:	4608      	mov	r0, r1
 8003c2c:	4611      	mov	r1, r2
 8003c2e:	2200      	movs	r2, #0
 8003c30:	602a      	str	r2, [r5, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f7fe ffe3 	bl	8002bfe <_read>
 8003c38:	1c43      	adds	r3, r0, #1
 8003c3a:	d102      	bne.n	8003c42 <_read_r+0x1e>
 8003c3c:	682b      	ldr	r3, [r5, #0]
 8003c3e:	b103      	cbz	r3, 8003c42 <_read_r+0x1e>
 8003c40:	6023      	str	r3, [r4, #0]
 8003c42:	bd38      	pop	{r3, r4, r5, pc}
 8003c44:	20000450 	.word	0x20000450

08003c48 <_write_r>:
 8003c48:	b538      	push	{r3, r4, r5, lr}
 8003c4a:	4d07      	ldr	r5, [pc, #28]	; (8003c68 <_write_r+0x20>)
 8003c4c:	4604      	mov	r4, r0
 8003c4e:	4608      	mov	r0, r1
 8003c50:	4611      	mov	r1, r2
 8003c52:	2200      	movs	r2, #0
 8003c54:	602a      	str	r2, [r5, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	f7ff f83b 	bl	8002cd2 <_write>
 8003c5c:	1c43      	adds	r3, r0, #1
 8003c5e:	d102      	bne.n	8003c66 <_write_r+0x1e>
 8003c60:	682b      	ldr	r3, [r5, #0]
 8003c62:	b103      	cbz	r3, 8003c66 <_write_r+0x1e>
 8003c64:	6023      	str	r3, [r4, #0]
 8003c66:	bd38      	pop	{r3, r4, r5, pc}
 8003c68:	20000450 	.word	0x20000450

08003c6c <__errno>:
 8003c6c:	4b01      	ldr	r3, [pc, #4]	; (8003c74 <__errno+0x8>)
 8003c6e:	6818      	ldr	r0, [r3, #0]
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	2000006c 	.word	0x2000006c

08003c78 <__libc_init_array>:
 8003c78:	b570      	push	{r4, r5, r6, lr}
 8003c7a:	4d0d      	ldr	r5, [pc, #52]	; (8003cb0 <__libc_init_array+0x38>)
 8003c7c:	4c0d      	ldr	r4, [pc, #52]	; (8003cb4 <__libc_init_array+0x3c>)
 8003c7e:	1b64      	subs	r4, r4, r5
 8003c80:	10a4      	asrs	r4, r4, #2
 8003c82:	2600      	movs	r6, #0
 8003c84:	42a6      	cmp	r6, r4
 8003c86:	d109      	bne.n	8003c9c <__libc_init_array+0x24>
 8003c88:	4d0b      	ldr	r5, [pc, #44]	; (8003cb8 <__libc_init_array+0x40>)
 8003c8a:	4c0c      	ldr	r4, [pc, #48]	; (8003cbc <__libc_init_array+0x44>)
 8003c8c:	f001 fef8 	bl	8005a80 <_init>
 8003c90:	1b64      	subs	r4, r4, r5
 8003c92:	10a4      	asrs	r4, r4, #2
 8003c94:	2600      	movs	r6, #0
 8003c96:	42a6      	cmp	r6, r4
 8003c98:	d105      	bne.n	8003ca6 <__libc_init_array+0x2e>
 8003c9a:	bd70      	pop	{r4, r5, r6, pc}
 8003c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ca0:	4798      	blx	r3
 8003ca2:	3601      	adds	r6, #1
 8003ca4:	e7ee      	b.n	8003c84 <__libc_init_array+0xc>
 8003ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003caa:	4798      	blx	r3
 8003cac:	3601      	adds	r6, #1
 8003cae:	e7f2      	b.n	8003c96 <__libc_init_array+0x1e>
 8003cb0:	08005e6c 	.word	0x08005e6c
 8003cb4:	08005e6c 	.word	0x08005e6c
 8003cb8:	08005e6c 	.word	0x08005e6c
 8003cbc:	08005e70 	.word	0x08005e70

08003cc0 <__retarget_lock_init_recursive>:
 8003cc0:	4770      	bx	lr

08003cc2 <__retarget_lock_acquire_recursive>:
 8003cc2:	4770      	bx	lr

08003cc4 <__retarget_lock_release_recursive>:
 8003cc4:	4770      	bx	lr

08003cc6 <quorem>:
 8003cc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cca:	6903      	ldr	r3, [r0, #16]
 8003ccc:	690c      	ldr	r4, [r1, #16]
 8003cce:	42a3      	cmp	r3, r4
 8003cd0:	4607      	mov	r7, r0
 8003cd2:	db7e      	blt.n	8003dd2 <quorem+0x10c>
 8003cd4:	3c01      	subs	r4, #1
 8003cd6:	f101 0814 	add.w	r8, r1, #20
 8003cda:	f100 0514 	add.w	r5, r0, #20
 8003cde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ce2:	9301      	str	r3, [sp, #4]
 8003ce4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003ce8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003cec:	3301      	adds	r3, #1
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003cf4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003cf8:	fbb2 f6f3 	udiv	r6, r2, r3
 8003cfc:	d331      	bcc.n	8003d62 <quorem+0x9c>
 8003cfe:	f04f 0e00 	mov.w	lr, #0
 8003d02:	4640      	mov	r0, r8
 8003d04:	46ac      	mov	ip, r5
 8003d06:	46f2      	mov	sl, lr
 8003d08:	f850 2b04 	ldr.w	r2, [r0], #4
 8003d0c:	b293      	uxth	r3, r2
 8003d0e:	fb06 e303 	mla	r3, r6, r3, lr
 8003d12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003d16:	0c1a      	lsrs	r2, r3, #16
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	ebaa 0303 	sub.w	r3, sl, r3
 8003d1e:	f8dc a000 	ldr.w	sl, [ip]
 8003d22:	fa13 f38a 	uxtah	r3, r3, sl
 8003d26:	fb06 220e 	mla	r2, r6, lr, r2
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	9b00      	ldr	r3, [sp, #0]
 8003d2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003d32:	b292      	uxth	r2, r2
 8003d34:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003d38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8003d40:	4581      	cmp	r9, r0
 8003d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d46:	f84c 3b04 	str.w	r3, [ip], #4
 8003d4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003d4e:	d2db      	bcs.n	8003d08 <quorem+0x42>
 8003d50:	f855 300b 	ldr.w	r3, [r5, fp]
 8003d54:	b92b      	cbnz	r3, 8003d62 <quorem+0x9c>
 8003d56:	9b01      	ldr	r3, [sp, #4]
 8003d58:	3b04      	subs	r3, #4
 8003d5a:	429d      	cmp	r5, r3
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	d32c      	bcc.n	8003dba <quorem+0xf4>
 8003d60:	613c      	str	r4, [r7, #16]
 8003d62:	4638      	mov	r0, r7
 8003d64:	f001 f9a6 	bl	80050b4 <__mcmp>
 8003d68:	2800      	cmp	r0, #0
 8003d6a:	db22      	blt.n	8003db2 <quorem+0xec>
 8003d6c:	3601      	adds	r6, #1
 8003d6e:	4629      	mov	r1, r5
 8003d70:	2000      	movs	r0, #0
 8003d72:	f858 2b04 	ldr.w	r2, [r8], #4
 8003d76:	f8d1 c000 	ldr.w	ip, [r1]
 8003d7a:	b293      	uxth	r3, r2
 8003d7c:	1ac3      	subs	r3, r0, r3
 8003d7e:	0c12      	lsrs	r2, r2, #16
 8003d80:	fa13 f38c 	uxtah	r3, r3, ip
 8003d84:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003d88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d92:	45c1      	cmp	r9, r8
 8003d94:	f841 3b04 	str.w	r3, [r1], #4
 8003d98:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003d9c:	d2e9      	bcs.n	8003d72 <quorem+0xac>
 8003d9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003da2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003da6:	b922      	cbnz	r2, 8003db2 <quorem+0xec>
 8003da8:	3b04      	subs	r3, #4
 8003daa:	429d      	cmp	r5, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	d30a      	bcc.n	8003dc6 <quorem+0x100>
 8003db0:	613c      	str	r4, [r7, #16]
 8003db2:	4630      	mov	r0, r6
 8003db4:	b003      	add	sp, #12
 8003db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	3b04      	subs	r3, #4
 8003dbe:	2a00      	cmp	r2, #0
 8003dc0:	d1ce      	bne.n	8003d60 <quorem+0x9a>
 8003dc2:	3c01      	subs	r4, #1
 8003dc4:	e7c9      	b.n	8003d5a <quorem+0x94>
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	3b04      	subs	r3, #4
 8003dca:	2a00      	cmp	r2, #0
 8003dcc:	d1f0      	bne.n	8003db0 <quorem+0xea>
 8003dce:	3c01      	subs	r4, #1
 8003dd0:	e7eb      	b.n	8003daa <quorem+0xe4>
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	e7ee      	b.n	8003db4 <quorem+0xee>
	...

08003dd8 <_dtoa_r>:
 8003dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ddc:	ed2d 8b04 	vpush	{d8-d9}
 8003de0:	69c5      	ldr	r5, [r0, #28]
 8003de2:	b093      	sub	sp, #76	; 0x4c
 8003de4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003de8:	ec57 6b10 	vmov	r6, r7, d0
 8003dec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003df0:	9107      	str	r1, [sp, #28]
 8003df2:	4604      	mov	r4, r0
 8003df4:	920a      	str	r2, [sp, #40]	; 0x28
 8003df6:	930d      	str	r3, [sp, #52]	; 0x34
 8003df8:	b975      	cbnz	r5, 8003e18 <_dtoa_r+0x40>
 8003dfa:	2010      	movs	r0, #16
 8003dfc:	f000 fe2a 	bl	8004a54 <malloc>
 8003e00:	4602      	mov	r2, r0
 8003e02:	61e0      	str	r0, [r4, #28]
 8003e04:	b920      	cbnz	r0, 8003e10 <_dtoa_r+0x38>
 8003e06:	4bae      	ldr	r3, [pc, #696]	; (80040c0 <_dtoa_r+0x2e8>)
 8003e08:	21ef      	movs	r1, #239	; 0xef
 8003e0a:	48ae      	ldr	r0, [pc, #696]	; (80040c4 <_dtoa_r+0x2ec>)
 8003e0c:	f001 fcf8 	bl	8005800 <__assert_func>
 8003e10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003e14:	6005      	str	r5, [r0, #0]
 8003e16:	60c5      	str	r5, [r0, #12]
 8003e18:	69e3      	ldr	r3, [r4, #28]
 8003e1a:	6819      	ldr	r1, [r3, #0]
 8003e1c:	b151      	cbz	r1, 8003e34 <_dtoa_r+0x5c>
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	604a      	str	r2, [r1, #4]
 8003e22:	2301      	movs	r3, #1
 8003e24:	4093      	lsls	r3, r2
 8003e26:	608b      	str	r3, [r1, #8]
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f000 ff07 	bl	8004c3c <_Bfree>
 8003e2e:	69e3      	ldr	r3, [r4, #28]
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	1e3b      	subs	r3, r7, #0
 8003e36:	bfbb      	ittet	lt
 8003e38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003e3c:	9303      	strlt	r3, [sp, #12]
 8003e3e:	2300      	movge	r3, #0
 8003e40:	2201      	movlt	r2, #1
 8003e42:	bfac      	ite	ge
 8003e44:	f8c8 3000 	strge.w	r3, [r8]
 8003e48:	f8c8 2000 	strlt.w	r2, [r8]
 8003e4c:	4b9e      	ldr	r3, [pc, #632]	; (80040c8 <_dtoa_r+0x2f0>)
 8003e4e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003e52:	ea33 0308 	bics.w	r3, r3, r8
 8003e56:	d11b      	bne.n	8003e90 <_dtoa_r+0xb8>
 8003e58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003e5a:	f242 730f 	movw	r3, #9999	; 0x270f
 8003e5e:	6013      	str	r3, [r2, #0]
 8003e60:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003e64:	4333      	orrs	r3, r6
 8003e66:	f000 8593 	beq.w	8004990 <_dtoa_r+0xbb8>
 8003e6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e6c:	b963      	cbnz	r3, 8003e88 <_dtoa_r+0xb0>
 8003e6e:	4b97      	ldr	r3, [pc, #604]	; (80040cc <_dtoa_r+0x2f4>)
 8003e70:	e027      	b.n	8003ec2 <_dtoa_r+0xea>
 8003e72:	4b97      	ldr	r3, [pc, #604]	; (80040d0 <_dtoa_r+0x2f8>)
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	3308      	adds	r3, #8
 8003e78:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	9800      	ldr	r0, [sp, #0]
 8003e7e:	b013      	add	sp, #76	; 0x4c
 8003e80:	ecbd 8b04 	vpop	{d8-d9}
 8003e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e88:	4b90      	ldr	r3, [pc, #576]	; (80040cc <_dtoa_r+0x2f4>)
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	3303      	adds	r3, #3
 8003e8e:	e7f3      	b.n	8003e78 <_dtoa_r+0xa0>
 8003e90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003e94:	2200      	movs	r2, #0
 8003e96:	ec51 0b17 	vmov	r0, r1, d7
 8003e9a:	eeb0 8a47 	vmov.f32	s16, s14
 8003e9e:	eef0 8a67 	vmov.f32	s17, s15
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f7fc fe18 	bl	8000ad8 <__aeabi_dcmpeq>
 8003ea8:	4681      	mov	r9, r0
 8003eaa:	b160      	cbz	r0, 8003ec6 <_dtoa_r+0xee>
 8003eac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003eae:	2301      	movs	r3, #1
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 8568 	beq.w	800498a <_dtoa_r+0xbb2>
 8003eba:	4b86      	ldr	r3, [pc, #536]	; (80040d4 <_dtoa_r+0x2fc>)
 8003ebc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	e7da      	b.n	8003e7c <_dtoa_r+0xa4>
 8003ec6:	aa10      	add	r2, sp, #64	; 0x40
 8003ec8:	a911      	add	r1, sp, #68	; 0x44
 8003eca:	4620      	mov	r0, r4
 8003ecc:	eeb0 0a48 	vmov.f32	s0, s16
 8003ed0:	eef0 0a68 	vmov.f32	s1, s17
 8003ed4:	f001 f994 	bl	8005200 <__d2b>
 8003ed8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003edc:	4682      	mov	sl, r0
 8003ede:	2d00      	cmp	r5, #0
 8003ee0:	d07f      	beq.n	8003fe2 <_dtoa_r+0x20a>
 8003ee2:	ee18 3a90 	vmov	r3, s17
 8003ee6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eea:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003eee:	ec51 0b18 	vmov	r0, r1, d8
 8003ef2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003ef6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003efa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003efe:	4619      	mov	r1, r3
 8003f00:	2200      	movs	r2, #0
 8003f02:	4b75      	ldr	r3, [pc, #468]	; (80040d8 <_dtoa_r+0x300>)
 8003f04:	f7fc f9c8 	bl	8000298 <__aeabi_dsub>
 8003f08:	a367      	add	r3, pc, #412	; (adr r3, 80040a8 <_dtoa_r+0x2d0>)
 8003f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0e:	f7fc fb7b 	bl	8000608 <__aeabi_dmul>
 8003f12:	a367      	add	r3, pc, #412	; (adr r3, 80040b0 <_dtoa_r+0x2d8>)
 8003f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f18:	f7fc f9c0 	bl	800029c <__adddf3>
 8003f1c:	4606      	mov	r6, r0
 8003f1e:	4628      	mov	r0, r5
 8003f20:	460f      	mov	r7, r1
 8003f22:	f7fc fb07 	bl	8000534 <__aeabi_i2d>
 8003f26:	a364      	add	r3, pc, #400	; (adr r3, 80040b8 <_dtoa_r+0x2e0>)
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	f7fc fb6c 	bl	8000608 <__aeabi_dmul>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4630      	mov	r0, r6
 8003f36:	4639      	mov	r1, r7
 8003f38:	f7fc f9b0 	bl	800029c <__adddf3>
 8003f3c:	4606      	mov	r6, r0
 8003f3e:	460f      	mov	r7, r1
 8003f40:	f7fc fe12 	bl	8000b68 <__aeabi_d2iz>
 8003f44:	2200      	movs	r2, #0
 8003f46:	4683      	mov	fp, r0
 8003f48:	2300      	movs	r3, #0
 8003f4a:	4630      	mov	r0, r6
 8003f4c:	4639      	mov	r1, r7
 8003f4e:	f7fc fdcd 	bl	8000aec <__aeabi_dcmplt>
 8003f52:	b148      	cbz	r0, 8003f68 <_dtoa_r+0x190>
 8003f54:	4658      	mov	r0, fp
 8003f56:	f7fc faed 	bl	8000534 <__aeabi_i2d>
 8003f5a:	4632      	mov	r2, r6
 8003f5c:	463b      	mov	r3, r7
 8003f5e:	f7fc fdbb 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f62:	b908      	cbnz	r0, 8003f68 <_dtoa_r+0x190>
 8003f64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003f68:	f1bb 0f16 	cmp.w	fp, #22
 8003f6c:	d857      	bhi.n	800401e <_dtoa_r+0x246>
 8003f6e:	4b5b      	ldr	r3, [pc, #364]	; (80040dc <_dtoa_r+0x304>)
 8003f70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f78:	ec51 0b18 	vmov	r0, r1, d8
 8003f7c:	f7fc fdb6 	bl	8000aec <__aeabi_dcmplt>
 8003f80:	2800      	cmp	r0, #0
 8003f82:	d04e      	beq.n	8004022 <_dtoa_r+0x24a>
 8003f84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003f88:	2300      	movs	r3, #0
 8003f8a:	930c      	str	r3, [sp, #48]	; 0x30
 8003f8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003f8e:	1b5b      	subs	r3, r3, r5
 8003f90:	1e5a      	subs	r2, r3, #1
 8003f92:	bf45      	ittet	mi
 8003f94:	f1c3 0301 	rsbmi	r3, r3, #1
 8003f98:	9305      	strmi	r3, [sp, #20]
 8003f9a:	2300      	movpl	r3, #0
 8003f9c:	2300      	movmi	r3, #0
 8003f9e:	9206      	str	r2, [sp, #24]
 8003fa0:	bf54      	ite	pl
 8003fa2:	9305      	strpl	r3, [sp, #20]
 8003fa4:	9306      	strmi	r3, [sp, #24]
 8003fa6:	f1bb 0f00 	cmp.w	fp, #0
 8003faa:	db3c      	blt.n	8004026 <_dtoa_r+0x24e>
 8003fac:	9b06      	ldr	r3, [sp, #24]
 8003fae:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003fb2:	445b      	add	r3, fp
 8003fb4:	9306      	str	r3, [sp, #24]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	9308      	str	r3, [sp, #32]
 8003fba:	9b07      	ldr	r3, [sp, #28]
 8003fbc:	2b09      	cmp	r3, #9
 8003fbe:	d868      	bhi.n	8004092 <_dtoa_r+0x2ba>
 8003fc0:	2b05      	cmp	r3, #5
 8003fc2:	bfc4      	itt	gt
 8003fc4:	3b04      	subgt	r3, #4
 8003fc6:	9307      	strgt	r3, [sp, #28]
 8003fc8:	9b07      	ldr	r3, [sp, #28]
 8003fca:	f1a3 0302 	sub.w	r3, r3, #2
 8003fce:	bfcc      	ite	gt
 8003fd0:	2500      	movgt	r5, #0
 8003fd2:	2501      	movle	r5, #1
 8003fd4:	2b03      	cmp	r3, #3
 8003fd6:	f200 8085 	bhi.w	80040e4 <_dtoa_r+0x30c>
 8003fda:	e8df f003 	tbb	[pc, r3]
 8003fde:	3b2e      	.short	0x3b2e
 8003fe0:	5839      	.short	0x5839
 8003fe2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003fe6:	441d      	add	r5, r3
 8003fe8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003fec:	2b20      	cmp	r3, #32
 8003fee:	bfc1      	itttt	gt
 8003ff0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003ff4:	fa08 f803 	lslgt.w	r8, r8, r3
 8003ff8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8003ffc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004000:	bfd6      	itet	le
 8004002:	f1c3 0320 	rsble	r3, r3, #32
 8004006:	ea48 0003 	orrgt.w	r0, r8, r3
 800400a:	fa06 f003 	lslle.w	r0, r6, r3
 800400e:	f7fc fa81 	bl	8000514 <__aeabi_ui2d>
 8004012:	2201      	movs	r2, #1
 8004014:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004018:	3d01      	subs	r5, #1
 800401a:	920e      	str	r2, [sp, #56]	; 0x38
 800401c:	e76f      	b.n	8003efe <_dtoa_r+0x126>
 800401e:	2301      	movs	r3, #1
 8004020:	e7b3      	b.n	8003f8a <_dtoa_r+0x1b2>
 8004022:	900c      	str	r0, [sp, #48]	; 0x30
 8004024:	e7b2      	b.n	8003f8c <_dtoa_r+0x1b4>
 8004026:	9b05      	ldr	r3, [sp, #20]
 8004028:	eba3 030b 	sub.w	r3, r3, fp
 800402c:	9305      	str	r3, [sp, #20]
 800402e:	f1cb 0300 	rsb	r3, fp, #0
 8004032:	9308      	str	r3, [sp, #32]
 8004034:	2300      	movs	r3, #0
 8004036:	930b      	str	r3, [sp, #44]	; 0x2c
 8004038:	e7bf      	b.n	8003fba <_dtoa_r+0x1e2>
 800403a:	2300      	movs	r3, #0
 800403c:	9309      	str	r3, [sp, #36]	; 0x24
 800403e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004040:	2b00      	cmp	r3, #0
 8004042:	dc52      	bgt.n	80040ea <_dtoa_r+0x312>
 8004044:	2301      	movs	r3, #1
 8004046:	9301      	str	r3, [sp, #4]
 8004048:	9304      	str	r3, [sp, #16]
 800404a:	461a      	mov	r2, r3
 800404c:	920a      	str	r2, [sp, #40]	; 0x28
 800404e:	e00b      	b.n	8004068 <_dtoa_r+0x290>
 8004050:	2301      	movs	r3, #1
 8004052:	e7f3      	b.n	800403c <_dtoa_r+0x264>
 8004054:	2300      	movs	r3, #0
 8004056:	9309      	str	r3, [sp, #36]	; 0x24
 8004058:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800405a:	445b      	add	r3, fp
 800405c:	9301      	str	r3, [sp, #4]
 800405e:	3301      	adds	r3, #1
 8004060:	2b01      	cmp	r3, #1
 8004062:	9304      	str	r3, [sp, #16]
 8004064:	bfb8      	it	lt
 8004066:	2301      	movlt	r3, #1
 8004068:	69e0      	ldr	r0, [r4, #28]
 800406a:	2100      	movs	r1, #0
 800406c:	2204      	movs	r2, #4
 800406e:	f102 0614 	add.w	r6, r2, #20
 8004072:	429e      	cmp	r6, r3
 8004074:	d93d      	bls.n	80040f2 <_dtoa_r+0x31a>
 8004076:	6041      	str	r1, [r0, #4]
 8004078:	4620      	mov	r0, r4
 800407a:	f000 fd9f 	bl	8004bbc <_Balloc>
 800407e:	9000      	str	r0, [sp, #0]
 8004080:	2800      	cmp	r0, #0
 8004082:	d139      	bne.n	80040f8 <_dtoa_r+0x320>
 8004084:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <_dtoa_r+0x308>)
 8004086:	4602      	mov	r2, r0
 8004088:	f240 11af 	movw	r1, #431	; 0x1af
 800408c:	e6bd      	b.n	8003e0a <_dtoa_r+0x32>
 800408e:	2301      	movs	r3, #1
 8004090:	e7e1      	b.n	8004056 <_dtoa_r+0x27e>
 8004092:	2501      	movs	r5, #1
 8004094:	2300      	movs	r3, #0
 8004096:	9307      	str	r3, [sp, #28]
 8004098:	9509      	str	r5, [sp, #36]	; 0x24
 800409a:	f04f 33ff 	mov.w	r3, #4294967295
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	9304      	str	r3, [sp, #16]
 80040a2:	2200      	movs	r2, #0
 80040a4:	2312      	movs	r3, #18
 80040a6:	e7d1      	b.n	800404c <_dtoa_r+0x274>
 80040a8:	636f4361 	.word	0x636f4361
 80040ac:	3fd287a7 	.word	0x3fd287a7
 80040b0:	8b60c8b3 	.word	0x8b60c8b3
 80040b4:	3fc68a28 	.word	0x3fc68a28
 80040b8:	509f79fb 	.word	0x509f79fb
 80040bc:	3fd34413 	.word	0x3fd34413
 80040c0:	08005b33 	.word	0x08005b33
 80040c4:	08005b4a 	.word	0x08005b4a
 80040c8:	7ff00000 	.word	0x7ff00000
 80040cc:	08005b2f 	.word	0x08005b2f
 80040d0:	08005b26 	.word	0x08005b26
 80040d4:	08005b03 	.word	0x08005b03
 80040d8:	3ff80000 	.word	0x3ff80000
 80040dc:	08005c38 	.word	0x08005c38
 80040e0:	08005ba2 	.word	0x08005ba2
 80040e4:	2301      	movs	r3, #1
 80040e6:	9309      	str	r3, [sp, #36]	; 0x24
 80040e8:	e7d7      	b.n	800409a <_dtoa_r+0x2c2>
 80040ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040ec:	9301      	str	r3, [sp, #4]
 80040ee:	9304      	str	r3, [sp, #16]
 80040f0:	e7ba      	b.n	8004068 <_dtoa_r+0x290>
 80040f2:	3101      	adds	r1, #1
 80040f4:	0052      	lsls	r2, r2, #1
 80040f6:	e7ba      	b.n	800406e <_dtoa_r+0x296>
 80040f8:	69e3      	ldr	r3, [r4, #28]
 80040fa:	9a00      	ldr	r2, [sp, #0]
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	9b04      	ldr	r3, [sp, #16]
 8004100:	2b0e      	cmp	r3, #14
 8004102:	f200 80a8 	bhi.w	8004256 <_dtoa_r+0x47e>
 8004106:	2d00      	cmp	r5, #0
 8004108:	f000 80a5 	beq.w	8004256 <_dtoa_r+0x47e>
 800410c:	f1bb 0f00 	cmp.w	fp, #0
 8004110:	dd38      	ble.n	8004184 <_dtoa_r+0x3ac>
 8004112:	4bc0      	ldr	r3, [pc, #768]	; (8004414 <_dtoa_r+0x63c>)
 8004114:	f00b 020f 	and.w	r2, fp, #15
 8004118:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800411c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004120:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004124:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004128:	d019      	beq.n	800415e <_dtoa_r+0x386>
 800412a:	4bbb      	ldr	r3, [pc, #748]	; (8004418 <_dtoa_r+0x640>)
 800412c:	ec51 0b18 	vmov	r0, r1, d8
 8004130:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004134:	f7fc fb92 	bl	800085c <__aeabi_ddiv>
 8004138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800413c:	f008 080f 	and.w	r8, r8, #15
 8004140:	2503      	movs	r5, #3
 8004142:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004418 <_dtoa_r+0x640>
 8004146:	f1b8 0f00 	cmp.w	r8, #0
 800414a:	d10a      	bne.n	8004162 <_dtoa_r+0x38a>
 800414c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004150:	4632      	mov	r2, r6
 8004152:	463b      	mov	r3, r7
 8004154:	f7fc fb82 	bl	800085c <__aeabi_ddiv>
 8004158:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800415c:	e02b      	b.n	80041b6 <_dtoa_r+0x3de>
 800415e:	2502      	movs	r5, #2
 8004160:	e7ef      	b.n	8004142 <_dtoa_r+0x36a>
 8004162:	f018 0f01 	tst.w	r8, #1
 8004166:	d008      	beq.n	800417a <_dtoa_r+0x3a2>
 8004168:	4630      	mov	r0, r6
 800416a:	4639      	mov	r1, r7
 800416c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004170:	f7fc fa4a 	bl	8000608 <__aeabi_dmul>
 8004174:	3501      	adds	r5, #1
 8004176:	4606      	mov	r6, r0
 8004178:	460f      	mov	r7, r1
 800417a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800417e:	f109 0908 	add.w	r9, r9, #8
 8004182:	e7e0      	b.n	8004146 <_dtoa_r+0x36e>
 8004184:	f000 809f 	beq.w	80042c6 <_dtoa_r+0x4ee>
 8004188:	f1cb 0600 	rsb	r6, fp, #0
 800418c:	4ba1      	ldr	r3, [pc, #644]	; (8004414 <_dtoa_r+0x63c>)
 800418e:	4fa2      	ldr	r7, [pc, #648]	; (8004418 <_dtoa_r+0x640>)
 8004190:	f006 020f 	and.w	r2, r6, #15
 8004194:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419c:	ec51 0b18 	vmov	r0, r1, d8
 80041a0:	f7fc fa32 	bl	8000608 <__aeabi_dmul>
 80041a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041a8:	1136      	asrs	r6, r6, #4
 80041aa:	2300      	movs	r3, #0
 80041ac:	2502      	movs	r5, #2
 80041ae:	2e00      	cmp	r6, #0
 80041b0:	d17e      	bne.n	80042b0 <_dtoa_r+0x4d8>
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1d0      	bne.n	8004158 <_dtoa_r+0x380>
 80041b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041b8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 8084 	beq.w	80042ca <_dtoa_r+0x4f2>
 80041c2:	4b96      	ldr	r3, [pc, #600]	; (800441c <_dtoa_r+0x644>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	4640      	mov	r0, r8
 80041c8:	4649      	mov	r1, r9
 80041ca:	f7fc fc8f 	bl	8000aec <__aeabi_dcmplt>
 80041ce:	2800      	cmp	r0, #0
 80041d0:	d07b      	beq.n	80042ca <_dtoa_r+0x4f2>
 80041d2:	9b04      	ldr	r3, [sp, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d078      	beq.n	80042ca <_dtoa_r+0x4f2>
 80041d8:	9b01      	ldr	r3, [sp, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	dd39      	ble.n	8004252 <_dtoa_r+0x47a>
 80041de:	4b90      	ldr	r3, [pc, #576]	; (8004420 <_dtoa_r+0x648>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	4640      	mov	r0, r8
 80041e4:	4649      	mov	r1, r9
 80041e6:	f7fc fa0f 	bl	8000608 <__aeabi_dmul>
 80041ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041ee:	9e01      	ldr	r6, [sp, #4]
 80041f0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80041f4:	3501      	adds	r5, #1
 80041f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80041fa:	4628      	mov	r0, r5
 80041fc:	f7fc f99a 	bl	8000534 <__aeabi_i2d>
 8004200:	4642      	mov	r2, r8
 8004202:	464b      	mov	r3, r9
 8004204:	f7fc fa00 	bl	8000608 <__aeabi_dmul>
 8004208:	4b86      	ldr	r3, [pc, #536]	; (8004424 <_dtoa_r+0x64c>)
 800420a:	2200      	movs	r2, #0
 800420c:	f7fc f846 	bl	800029c <__adddf3>
 8004210:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004218:	9303      	str	r3, [sp, #12]
 800421a:	2e00      	cmp	r6, #0
 800421c:	d158      	bne.n	80042d0 <_dtoa_r+0x4f8>
 800421e:	4b82      	ldr	r3, [pc, #520]	; (8004428 <_dtoa_r+0x650>)
 8004220:	2200      	movs	r2, #0
 8004222:	4640      	mov	r0, r8
 8004224:	4649      	mov	r1, r9
 8004226:	f7fc f837 	bl	8000298 <__aeabi_dsub>
 800422a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800422e:	4680      	mov	r8, r0
 8004230:	4689      	mov	r9, r1
 8004232:	f7fc fc79 	bl	8000b28 <__aeabi_dcmpgt>
 8004236:	2800      	cmp	r0, #0
 8004238:	f040 8296 	bne.w	8004768 <_dtoa_r+0x990>
 800423c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004240:	4640      	mov	r0, r8
 8004242:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004246:	4649      	mov	r1, r9
 8004248:	f7fc fc50 	bl	8000aec <__aeabi_dcmplt>
 800424c:	2800      	cmp	r0, #0
 800424e:	f040 8289 	bne.w	8004764 <_dtoa_r+0x98c>
 8004252:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004256:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004258:	2b00      	cmp	r3, #0
 800425a:	f2c0 814e 	blt.w	80044fa <_dtoa_r+0x722>
 800425e:	f1bb 0f0e 	cmp.w	fp, #14
 8004262:	f300 814a 	bgt.w	80044fa <_dtoa_r+0x722>
 8004266:	4b6b      	ldr	r3, [pc, #428]	; (8004414 <_dtoa_r+0x63c>)
 8004268:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800426c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004270:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004272:	2b00      	cmp	r3, #0
 8004274:	f280 80dc 	bge.w	8004430 <_dtoa_r+0x658>
 8004278:	9b04      	ldr	r3, [sp, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	f300 80d8 	bgt.w	8004430 <_dtoa_r+0x658>
 8004280:	f040 826f 	bne.w	8004762 <_dtoa_r+0x98a>
 8004284:	4b68      	ldr	r3, [pc, #416]	; (8004428 <_dtoa_r+0x650>)
 8004286:	2200      	movs	r2, #0
 8004288:	4640      	mov	r0, r8
 800428a:	4649      	mov	r1, r9
 800428c:	f7fc f9bc 	bl	8000608 <__aeabi_dmul>
 8004290:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004294:	f7fc fc3e 	bl	8000b14 <__aeabi_dcmpge>
 8004298:	9e04      	ldr	r6, [sp, #16]
 800429a:	4637      	mov	r7, r6
 800429c:	2800      	cmp	r0, #0
 800429e:	f040 8245 	bne.w	800472c <_dtoa_r+0x954>
 80042a2:	9d00      	ldr	r5, [sp, #0]
 80042a4:	2331      	movs	r3, #49	; 0x31
 80042a6:	f805 3b01 	strb.w	r3, [r5], #1
 80042aa:	f10b 0b01 	add.w	fp, fp, #1
 80042ae:	e241      	b.n	8004734 <_dtoa_r+0x95c>
 80042b0:	07f2      	lsls	r2, r6, #31
 80042b2:	d505      	bpl.n	80042c0 <_dtoa_r+0x4e8>
 80042b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042b8:	f7fc f9a6 	bl	8000608 <__aeabi_dmul>
 80042bc:	3501      	adds	r5, #1
 80042be:	2301      	movs	r3, #1
 80042c0:	1076      	asrs	r6, r6, #1
 80042c2:	3708      	adds	r7, #8
 80042c4:	e773      	b.n	80041ae <_dtoa_r+0x3d6>
 80042c6:	2502      	movs	r5, #2
 80042c8:	e775      	b.n	80041b6 <_dtoa_r+0x3de>
 80042ca:	9e04      	ldr	r6, [sp, #16]
 80042cc:	465f      	mov	r7, fp
 80042ce:	e792      	b.n	80041f6 <_dtoa_r+0x41e>
 80042d0:	9900      	ldr	r1, [sp, #0]
 80042d2:	4b50      	ldr	r3, [pc, #320]	; (8004414 <_dtoa_r+0x63c>)
 80042d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80042d8:	4431      	add	r1, r6
 80042da:	9102      	str	r1, [sp, #8]
 80042dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042de:	eeb0 9a47 	vmov.f32	s18, s14
 80042e2:	eef0 9a67 	vmov.f32	s19, s15
 80042e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80042ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80042ee:	2900      	cmp	r1, #0
 80042f0:	d044      	beq.n	800437c <_dtoa_r+0x5a4>
 80042f2:	494e      	ldr	r1, [pc, #312]	; (800442c <_dtoa_r+0x654>)
 80042f4:	2000      	movs	r0, #0
 80042f6:	f7fc fab1 	bl	800085c <__aeabi_ddiv>
 80042fa:	ec53 2b19 	vmov	r2, r3, d9
 80042fe:	f7fb ffcb 	bl	8000298 <__aeabi_dsub>
 8004302:	9d00      	ldr	r5, [sp, #0]
 8004304:	ec41 0b19 	vmov	d9, r0, r1
 8004308:	4649      	mov	r1, r9
 800430a:	4640      	mov	r0, r8
 800430c:	f7fc fc2c 	bl	8000b68 <__aeabi_d2iz>
 8004310:	4606      	mov	r6, r0
 8004312:	f7fc f90f 	bl	8000534 <__aeabi_i2d>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4640      	mov	r0, r8
 800431c:	4649      	mov	r1, r9
 800431e:	f7fb ffbb 	bl	8000298 <__aeabi_dsub>
 8004322:	3630      	adds	r6, #48	; 0x30
 8004324:	f805 6b01 	strb.w	r6, [r5], #1
 8004328:	ec53 2b19 	vmov	r2, r3, d9
 800432c:	4680      	mov	r8, r0
 800432e:	4689      	mov	r9, r1
 8004330:	f7fc fbdc 	bl	8000aec <__aeabi_dcmplt>
 8004334:	2800      	cmp	r0, #0
 8004336:	d164      	bne.n	8004402 <_dtoa_r+0x62a>
 8004338:	4642      	mov	r2, r8
 800433a:	464b      	mov	r3, r9
 800433c:	4937      	ldr	r1, [pc, #220]	; (800441c <_dtoa_r+0x644>)
 800433e:	2000      	movs	r0, #0
 8004340:	f7fb ffaa 	bl	8000298 <__aeabi_dsub>
 8004344:	ec53 2b19 	vmov	r2, r3, d9
 8004348:	f7fc fbd0 	bl	8000aec <__aeabi_dcmplt>
 800434c:	2800      	cmp	r0, #0
 800434e:	f040 80b6 	bne.w	80044be <_dtoa_r+0x6e6>
 8004352:	9b02      	ldr	r3, [sp, #8]
 8004354:	429d      	cmp	r5, r3
 8004356:	f43f af7c 	beq.w	8004252 <_dtoa_r+0x47a>
 800435a:	4b31      	ldr	r3, [pc, #196]	; (8004420 <_dtoa_r+0x648>)
 800435c:	ec51 0b19 	vmov	r0, r1, d9
 8004360:	2200      	movs	r2, #0
 8004362:	f7fc f951 	bl	8000608 <__aeabi_dmul>
 8004366:	4b2e      	ldr	r3, [pc, #184]	; (8004420 <_dtoa_r+0x648>)
 8004368:	ec41 0b19 	vmov	d9, r0, r1
 800436c:	2200      	movs	r2, #0
 800436e:	4640      	mov	r0, r8
 8004370:	4649      	mov	r1, r9
 8004372:	f7fc f949 	bl	8000608 <__aeabi_dmul>
 8004376:	4680      	mov	r8, r0
 8004378:	4689      	mov	r9, r1
 800437a:	e7c5      	b.n	8004308 <_dtoa_r+0x530>
 800437c:	ec51 0b17 	vmov	r0, r1, d7
 8004380:	f7fc f942 	bl	8000608 <__aeabi_dmul>
 8004384:	9b02      	ldr	r3, [sp, #8]
 8004386:	9d00      	ldr	r5, [sp, #0]
 8004388:	930f      	str	r3, [sp, #60]	; 0x3c
 800438a:	ec41 0b19 	vmov	d9, r0, r1
 800438e:	4649      	mov	r1, r9
 8004390:	4640      	mov	r0, r8
 8004392:	f7fc fbe9 	bl	8000b68 <__aeabi_d2iz>
 8004396:	4606      	mov	r6, r0
 8004398:	f7fc f8cc 	bl	8000534 <__aeabi_i2d>
 800439c:	3630      	adds	r6, #48	; 0x30
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4640      	mov	r0, r8
 80043a4:	4649      	mov	r1, r9
 80043a6:	f7fb ff77 	bl	8000298 <__aeabi_dsub>
 80043aa:	f805 6b01 	strb.w	r6, [r5], #1
 80043ae:	9b02      	ldr	r3, [sp, #8]
 80043b0:	429d      	cmp	r5, r3
 80043b2:	4680      	mov	r8, r0
 80043b4:	4689      	mov	r9, r1
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	d124      	bne.n	8004406 <_dtoa_r+0x62e>
 80043bc:	4b1b      	ldr	r3, [pc, #108]	; (800442c <_dtoa_r+0x654>)
 80043be:	ec51 0b19 	vmov	r0, r1, d9
 80043c2:	f7fb ff6b 	bl	800029c <__adddf3>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4640      	mov	r0, r8
 80043cc:	4649      	mov	r1, r9
 80043ce:	f7fc fbab 	bl	8000b28 <__aeabi_dcmpgt>
 80043d2:	2800      	cmp	r0, #0
 80043d4:	d173      	bne.n	80044be <_dtoa_r+0x6e6>
 80043d6:	ec53 2b19 	vmov	r2, r3, d9
 80043da:	4914      	ldr	r1, [pc, #80]	; (800442c <_dtoa_r+0x654>)
 80043dc:	2000      	movs	r0, #0
 80043de:	f7fb ff5b 	bl	8000298 <__aeabi_dsub>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4640      	mov	r0, r8
 80043e8:	4649      	mov	r1, r9
 80043ea:	f7fc fb7f 	bl	8000aec <__aeabi_dcmplt>
 80043ee:	2800      	cmp	r0, #0
 80043f0:	f43f af2f 	beq.w	8004252 <_dtoa_r+0x47a>
 80043f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80043f6:	1e6b      	subs	r3, r5, #1
 80043f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80043fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80043fe:	2b30      	cmp	r3, #48	; 0x30
 8004400:	d0f8      	beq.n	80043f4 <_dtoa_r+0x61c>
 8004402:	46bb      	mov	fp, r7
 8004404:	e04a      	b.n	800449c <_dtoa_r+0x6c4>
 8004406:	4b06      	ldr	r3, [pc, #24]	; (8004420 <_dtoa_r+0x648>)
 8004408:	f7fc f8fe 	bl	8000608 <__aeabi_dmul>
 800440c:	4680      	mov	r8, r0
 800440e:	4689      	mov	r9, r1
 8004410:	e7bd      	b.n	800438e <_dtoa_r+0x5b6>
 8004412:	bf00      	nop
 8004414:	08005c38 	.word	0x08005c38
 8004418:	08005c10 	.word	0x08005c10
 800441c:	3ff00000 	.word	0x3ff00000
 8004420:	40240000 	.word	0x40240000
 8004424:	401c0000 	.word	0x401c0000
 8004428:	40140000 	.word	0x40140000
 800442c:	3fe00000 	.word	0x3fe00000
 8004430:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004434:	9d00      	ldr	r5, [sp, #0]
 8004436:	4642      	mov	r2, r8
 8004438:	464b      	mov	r3, r9
 800443a:	4630      	mov	r0, r6
 800443c:	4639      	mov	r1, r7
 800443e:	f7fc fa0d 	bl	800085c <__aeabi_ddiv>
 8004442:	f7fc fb91 	bl	8000b68 <__aeabi_d2iz>
 8004446:	9001      	str	r0, [sp, #4]
 8004448:	f7fc f874 	bl	8000534 <__aeabi_i2d>
 800444c:	4642      	mov	r2, r8
 800444e:	464b      	mov	r3, r9
 8004450:	f7fc f8da 	bl	8000608 <__aeabi_dmul>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4630      	mov	r0, r6
 800445a:	4639      	mov	r1, r7
 800445c:	f7fb ff1c 	bl	8000298 <__aeabi_dsub>
 8004460:	9e01      	ldr	r6, [sp, #4]
 8004462:	9f04      	ldr	r7, [sp, #16]
 8004464:	3630      	adds	r6, #48	; 0x30
 8004466:	f805 6b01 	strb.w	r6, [r5], #1
 800446a:	9e00      	ldr	r6, [sp, #0]
 800446c:	1bae      	subs	r6, r5, r6
 800446e:	42b7      	cmp	r7, r6
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	d134      	bne.n	80044e0 <_dtoa_r+0x708>
 8004476:	f7fb ff11 	bl	800029c <__adddf3>
 800447a:	4642      	mov	r2, r8
 800447c:	464b      	mov	r3, r9
 800447e:	4606      	mov	r6, r0
 8004480:	460f      	mov	r7, r1
 8004482:	f7fc fb51 	bl	8000b28 <__aeabi_dcmpgt>
 8004486:	b9c8      	cbnz	r0, 80044bc <_dtoa_r+0x6e4>
 8004488:	4642      	mov	r2, r8
 800448a:	464b      	mov	r3, r9
 800448c:	4630      	mov	r0, r6
 800448e:	4639      	mov	r1, r7
 8004490:	f7fc fb22 	bl	8000ad8 <__aeabi_dcmpeq>
 8004494:	b110      	cbz	r0, 800449c <_dtoa_r+0x6c4>
 8004496:	9b01      	ldr	r3, [sp, #4]
 8004498:	07db      	lsls	r3, r3, #31
 800449a:	d40f      	bmi.n	80044bc <_dtoa_r+0x6e4>
 800449c:	4651      	mov	r1, sl
 800449e:	4620      	mov	r0, r4
 80044a0:	f000 fbcc 	bl	8004c3c <_Bfree>
 80044a4:	2300      	movs	r3, #0
 80044a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80044a8:	702b      	strb	r3, [r5, #0]
 80044aa:	f10b 0301 	add.w	r3, fp, #1
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f43f ace2 	beq.w	8003e7c <_dtoa_r+0xa4>
 80044b8:	601d      	str	r5, [r3, #0]
 80044ba:	e4df      	b.n	8003e7c <_dtoa_r+0xa4>
 80044bc:	465f      	mov	r7, fp
 80044be:	462b      	mov	r3, r5
 80044c0:	461d      	mov	r5, r3
 80044c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80044c6:	2a39      	cmp	r2, #57	; 0x39
 80044c8:	d106      	bne.n	80044d8 <_dtoa_r+0x700>
 80044ca:	9a00      	ldr	r2, [sp, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d1f7      	bne.n	80044c0 <_dtoa_r+0x6e8>
 80044d0:	9900      	ldr	r1, [sp, #0]
 80044d2:	2230      	movs	r2, #48	; 0x30
 80044d4:	3701      	adds	r7, #1
 80044d6:	700a      	strb	r2, [r1, #0]
 80044d8:	781a      	ldrb	r2, [r3, #0]
 80044da:	3201      	adds	r2, #1
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	e790      	b.n	8004402 <_dtoa_r+0x62a>
 80044e0:	4ba3      	ldr	r3, [pc, #652]	; (8004770 <_dtoa_r+0x998>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	f7fc f890 	bl	8000608 <__aeabi_dmul>
 80044e8:	2200      	movs	r2, #0
 80044ea:	2300      	movs	r3, #0
 80044ec:	4606      	mov	r6, r0
 80044ee:	460f      	mov	r7, r1
 80044f0:	f7fc faf2 	bl	8000ad8 <__aeabi_dcmpeq>
 80044f4:	2800      	cmp	r0, #0
 80044f6:	d09e      	beq.n	8004436 <_dtoa_r+0x65e>
 80044f8:	e7d0      	b.n	800449c <_dtoa_r+0x6c4>
 80044fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044fc:	2a00      	cmp	r2, #0
 80044fe:	f000 80ca 	beq.w	8004696 <_dtoa_r+0x8be>
 8004502:	9a07      	ldr	r2, [sp, #28]
 8004504:	2a01      	cmp	r2, #1
 8004506:	f300 80ad 	bgt.w	8004664 <_dtoa_r+0x88c>
 800450a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800450c:	2a00      	cmp	r2, #0
 800450e:	f000 80a5 	beq.w	800465c <_dtoa_r+0x884>
 8004512:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004516:	9e08      	ldr	r6, [sp, #32]
 8004518:	9d05      	ldr	r5, [sp, #20]
 800451a:	9a05      	ldr	r2, [sp, #20]
 800451c:	441a      	add	r2, r3
 800451e:	9205      	str	r2, [sp, #20]
 8004520:	9a06      	ldr	r2, [sp, #24]
 8004522:	2101      	movs	r1, #1
 8004524:	441a      	add	r2, r3
 8004526:	4620      	mov	r0, r4
 8004528:	9206      	str	r2, [sp, #24]
 800452a:	f000 fc3d 	bl	8004da8 <__i2b>
 800452e:	4607      	mov	r7, r0
 8004530:	b165      	cbz	r5, 800454c <_dtoa_r+0x774>
 8004532:	9b06      	ldr	r3, [sp, #24]
 8004534:	2b00      	cmp	r3, #0
 8004536:	dd09      	ble.n	800454c <_dtoa_r+0x774>
 8004538:	42ab      	cmp	r3, r5
 800453a:	9a05      	ldr	r2, [sp, #20]
 800453c:	bfa8      	it	ge
 800453e:	462b      	movge	r3, r5
 8004540:	1ad2      	subs	r2, r2, r3
 8004542:	9205      	str	r2, [sp, #20]
 8004544:	9a06      	ldr	r2, [sp, #24]
 8004546:	1aed      	subs	r5, r5, r3
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	9306      	str	r3, [sp, #24]
 800454c:	9b08      	ldr	r3, [sp, #32]
 800454e:	b1f3      	cbz	r3, 800458e <_dtoa_r+0x7b6>
 8004550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80a3 	beq.w	800469e <_dtoa_r+0x8c6>
 8004558:	2e00      	cmp	r6, #0
 800455a:	dd10      	ble.n	800457e <_dtoa_r+0x7a6>
 800455c:	4639      	mov	r1, r7
 800455e:	4632      	mov	r2, r6
 8004560:	4620      	mov	r0, r4
 8004562:	f000 fce1 	bl	8004f28 <__pow5mult>
 8004566:	4652      	mov	r2, sl
 8004568:	4601      	mov	r1, r0
 800456a:	4607      	mov	r7, r0
 800456c:	4620      	mov	r0, r4
 800456e:	f000 fc31 	bl	8004dd4 <__multiply>
 8004572:	4651      	mov	r1, sl
 8004574:	4680      	mov	r8, r0
 8004576:	4620      	mov	r0, r4
 8004578:	f000 fb60 	bl	8004c3c <_Bfree>
 800457c:	46c2      	mov	sl, r8
 800457e:	9b08      	ldr	r3, [sp, #32]
 8004580:	1b9a      	subs	r2, r3, r6
 8004582:	d004      	beq.n	800458e <_dtoa_r+0x7b6>
 8004584:	4651      	mov	r1, sl
 8004586:	4620      	mov	r0, r4
 8004588:	f000 fcce 	bl	8004f28 <__pow5mult>
 800458c:	4682      	mov	sl, r0
 800458e:	2101      	movs	r1, #1
 8004590:	4620      	mov	r0, r4
 8004592:	f000 fc09 	bl	8004da8 <__i2b>
 8004596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004598:	2b00      	cmp	r3, #0
 800459a:	4606      	mov	r6, r0
 800459c:	f340 8081 	ble.w	80046a2 <_dtoa_r+0x8ca>
 80045a0:	461a      	mov	r2, r3
 80045a2:	4601      	mov	r1, r0
 80045a4:	4620      	mov	r0, r4
 80045a6:	f000 fcbf 	bl	8004f28 <__pow5mult>
 80045aa:	9b07      	ldr	r3, [sp, #28]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	4606      	mov	r6, r0
 80045b0:	dd7a      	ble.n	80046a8 <_dtoa_r+0x8d0>
 80045b2:	f04f 0800 	mov.w	r8, #0
 80045b6:	6933      	ldr	r3, [r6, #16]
 80045b8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80045bc:	6918      	ldr	r0, [r3, #16]
 80045be:	f000 fba5 	bl	8004d0c <__hi0bits>
 80045c2:	f1c0 0020 	rsb	r0, r0, #32
 80045c6:	9b06      	ldr	r3, [sp, #24]
 80045c8:	4418      	add	r0, r3
 80045ca:	f010 001f 	ands.w	r0, r0, #31
 80045ce:	f000 8094 	beq.w	80046fa <_dtoa_r+0x922>
 80045d2:	f1c0 0320 	rsb	r3, r0, #32
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	f340 8085 	ble.w	80046e6 <_dtoa_r+0x90e>
 80045dc:	9b05      	ldr	r3, [sp, #20]
 80045de:	f1c0 001c 	rsb	r0, r0, #28
 80045e2:	4403      	add	r3, r0
 80045e4:	9305      	str	r3, [sp, #20]
 80045e6:	9b06      	ldr	r3, [sp, #24]
 80045e8:	4403      	add	r3, r0
 80045ea:	4405      	add	r5, r0
 80045ec:	9306      	str	r3, [sp, #24]
 80045ee:	9b05      	ldr	r3, [sp, #20]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	dd05      	ble.n	8004600 <_dtoa_r+0x828>
 80045f4:	4651      	mov	r1, sl
 80045f6:	461a      	mov	r2, r3
 80045f8:	4620      	mov	r0, r4
 80045fa:	f000 fcef 	bl	8004fdc <__lshift>
 80045fe:	4682      	mov	sl, r0
 8004600:	9b06      	ldr	r3, [sp, #24]
 8004602:	2b00      	cmp	r3, #0
 8004604:	dd05      	ble.n	8004612 <_dtoa_r+0x83a>
 8004606:	4631      	mov	r1, r6
 8004608:	461a      	mov	r2, r3
 800460a:	4620      	mov	r0, r4
 800460c:	f000 fce6 	bl	8004fdc <__lshift>
 8004610:	4606      	mov	r6, r0
 8004612:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004614:	2b00      	cmp	r3, #0
 8004616:	d072      	beq.n	80046fe <_dtoa_r+0x926>
 8004618:	4631      	mov	r1, r6
 800461a:	4650      	mov	r0, sl
 800461c:	f000 fd4a 	bl	80050b4 <__mcmp>
 8004620:	2800      	cmp	r0, #0
 8004622:	da6c      	bge.n	80046fe <_dtoa_r+0x926>
 8004624:	2300      	movs	r3, #0
 8004626:	4651      	mov	r1, sl
 8004628:	220a      	movs	r2, #10
 800462a:	4620      	mov	r0, r4
 800462c:	f000 fb28 	bl	8004c80 <__multadd>
 8004630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004632:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004636:	4682      	mov	sl, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 81b0 	beq.w	800499e <_dtoa_r+0xbc6>
 800463e:	2300      	movs	r3, #0
 8004640:	4639      	mov	r1, r7
 8004642:	220a      	movs	r2, #10
 8004644:	4620      	mov	r0, r4
 8004646:	f000 fb1b 	bl	8004c80 <__multadd>
 800464a:	9b01      	ldr	r3, [sp, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	4607      	mov	r7, r0
 8004650:	f300 8096 	bgt.w	8004780 <_dtoa_r+0x9a8>
 8004654:	9b07      	ldr	r3, [sp, #28]
 8004656:	2b02      	cmp	r3, #2
 8004658:	dc59      	bgt.n	800470e <_dtoa_r+0x936>
 800465a:	e091      	b.n	8004780 <_dtoa_r+0x9a8>
 800465c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800465e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004662:	e758      	b.n	8004516 <_dtoa_r+0x73e>
 8004664:	9b04      	ldr	r3, [sp, #16]
 8004666:	1e5e      	subs	r6, r3, #1
 8004668:	9b08      	ldr	r3, [sp, #32]
 800466a:	42b3      	cmp	r3, r6
 800466c:	bfbf      	itttt	lt
 800466e:	9b08      	ldrlt	r3, [sp, #32]
 8004670:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004672:	9608      	strlt	r6, [sp, #32]
 8004674:	1af3      	sublt	r3, r6, r3
 8004676:	bfb4      	ite	lt
 8004678:	18d2      	addlt	r2, r2, r3
 800467a:	1b9e      	subge	r6, r3, r6
 800467c:	9b04      	ldr	r3, [sp, #16]
 800467e:	bfbc      	itt	lt
 8004680:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004682:	2600      	movlt	r6, #0
 8004684:	2b00      	cmp	r3, #0
 8004686:	bfb7      	itett	lt
 8004688:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800468c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004690:	1a9d      	sublt	r5, r3, r2
 8004692:	2300      	movlt	r3, #0
 8004694:	e741      	b.n	800451a <_dtoa_r+0x742>
 8004696:	9e08      	ldr	r6, [sp, #32]
 8004698:	9d05      	ldr	r5, [sp, #20]
 800469a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800469c:	e748      	b.n	8004530 <_dtoa_r+0x758>
 800469e:	9a08      	ldr	r2, [sp, #32]
 80046a0:	e770      	b.n	8004584 <_dtoa_r+0x7ac>
 80046a2:	9b07      	ldr	r3, [sp, #28]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	dc19      	bgt.n	80046dc <_dtoa_r+0x904>
 80046a8:	9b02      	ldr	r3, [sp, #8]
 80046aa:	b9bb      	cbnz	r3, 80046dc <_dtoa_r+0x904>
 80046ac:	9b03      	ldr	r3, [sp, #12]
 80046ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046b2:	b99b      	cbnz	r3, 80046dc <_dtoa_r+0x904>
 80046b4:	9b03      	ldr	r3, [sp, #12]
 80046b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046ba:	0d1b      	lsrs	r3, r3, #20
 80046bc:	051b      	lsls	r3, r3, #20
 80046be:	b183      	cbz	r3, 80046e2 <_dtoa_r+0x90a>
 80046c0:	9b05      	ldr	r3, [sp, #20]
 80046c2:	3301      	adds	r3, #1
 80046c4:	9305      	str	r3, [sp, #20]
 80046c6:	9b06      	ldr	r3, [sp, #24]
 80046c8:	3301      	adds	r3, #1
 80046ca:	9306      	str	r3, [sp, #24]
 80046cc:	f04f 0801 	mov.w	r8, #1
 80046d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f47f af6f 	bne.w	80045b6 <_dtoa_r+0x7de>
 80046d8:	2001      	movs	r0, #1
 80046da:	e774      	b.n	80045c6 <_dtoa_r+0x7ee>
 80046dc:	f04f 0800 	mov.w	r8, #0
 80046e0:	e7f6      	b.n	80046d0 <_dtoa_r+0x8f8>
 80046e2:	4698      	mov	r8, r3
 80046e4:	e7f4      	b.n	80046d0 <_dtoa_r+0x8f8>
 80046e6:	d082      	beq.n	80045ee <_dtoa_r+0x816>
 80046e8:	9a05      	ldr	r2, [sp, #20]
 80046ea:	331c      	adds	r3, #28
 80046ec:	441a      	add	r2, r3
 80046ee:	9205      	str	r2, [sp, #20]
 80046f0:	9a06      	ldr	r2, [sp, #24]
 80046f2:	441a      	add	r2, r3
 80046f4:	441d      	add	r5, r3
 80046f6:	9206      	str	r2, [sp, #24]
 80046f8:	e779      	b.n	80045ee <_dtoa_r+0x816>
 80046fa:	4603      	mov	r3, r0
 80046fc:	e7f4      	b.n	80046e8 <_dtoa_r+0x910>
 80046fe:	9b04      	ldr	r3, [sp, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	dc37      	bgt.n	8004774 <_dtoa_r+0x99c>
 8004704:	9b07      	ldr	r3, [sp, #28]
 8004706:	2b02      	cmp	r3, #2
 8004708:	dd34      	ble.n	8004774 <_dtoa_r+0x99c>
 800470a:	9b04      	ldr	r3, [sp, #16]
 800470c:	9301      	str	r3, [sp, #4]
 800470e:	9b01      	ldr	r3, [sp, #4]
 8004710:	b963      	cbnz	r3, 800472c <_dtoa_r+0x954>
 8004712:	4631      	mov	r1, r6
 8004714:	2205      	movs	r2, #5
 8004716:	4620      	mov	r0, r4
 8004718:	f000 fab2 	bl	8004c80 <__multadd>
 800471c:	4601      	mov	r1, r0
 800471e:	4606      	mov	r6, r0
 8004720:	4650      	mov	r0, sl
 8004722:	f000 fcc7 	bl	80050b4 <__mcmp>
 8004726:	2800      	cmp	r0, #0
 8004728:	f73f adbb 	bgt.w	80042a2 <_dtoa_r+0x4ca>
 800472c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800472e:	9d00      	ldr	r5, [sp, #0]
 8004730:	ea6f 0b03 	mvn.w	fp, r3
 8004734:	f04f 0800 	mov.w	r8, #0
 8004738:	4631      	mov	r1, r6
 800473a:	4620      	mov	r0, r4
 800473c:	f000 fa7e 	bl	8004c3c <_Bfree>
 8004740:	2f00      	cmp	r7, #0
 8004742:	f43f aeab 	beq.w	800449c <_dtoa_r+0x6c4>
 8004746:	f1b8 0f00 	cmp.w	r8, #0
 800474a:	d005      	beq.n	8004758 <_dtoa_r+0x980>
 800474c:	45b8      	cmp	r8, r7
 800474e:	d003      	beq.n	8004758 <_dtoa_r+0x980>
 8004750:	4641      	mov	r1, r8
 8004752:	4620      	mov	r0, r4
 8004754:	f000 fa72 	bl	8004c3c <_Bfree>
 8004758:	4639      	mov	r1, r7
 800475a:	4620      	mov	r0, r4
 800475c:	f000 fa6e 	bl	8004c3c <_Bfree>
 8004760:	e69c      	b.n	800449c <_dtoa_r+0x6c4>
 8004762:	2600      	movs	r6, #0
 8004764:	4637      	mov	r7, r6
 8004766:	e7e1      	b.n	800472c <_dtoa_r+0x954>
 8004768:	46bb      	mov	fp, r7
 800476a:	4637      	mov	r7, r6
 800476c:	e599      	b.n	80042a2 <_dtoa_r+0x4ca>
 800476e:	bf00      	nop
 8004770:	40240000 	.word	0x40240000
 8004774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 80c8 	beq.w	800490c <_dtoa_r+0xb34>
 800477c:	9b04      	ldr	r3, [sp, #16]
 800477e:	9301      	str	r3, [sp, #4]
 8004780:	2d00      	cmp	r5, #0
 8004782:	dd05      	ble.n	8004790 <_dtoa_r+0x9b8>
 8004784:	4639      	mov	r1, r7
 8004786:	462a      	mov	r2, r5
 8004788:	4620      	mov	r0, r4
 800478a:	f000 fc27 	bl	8004fdc <__lshift>
 800478e:	4607      	mov	r7, r0
 8004790:	f1b8 0f00 	cmp.w	r8, #0
 8004794:	d05b      	beq.n	800484e <_dtoa_r+0xa76>
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4620      	mov	r0, r4
 800479a:	f000 fa0f 	bl	8004bbc <_Balloc>
 800479e:	4605      	mov	r5, r0
 80047a0:	b928      	cbnz	r0, 80047ae <_dtoa_r+0x9d6>
 80047a2:	4b83      	ldr	r3, [pc, #524]	; (80049b0 <_dtoa_r+0xbd8>)
 80047a4:	4602      	mov	r2, r0
 80047a6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80047aa:	f7ff bb2e 	b.w	8003e0a <_dtoa_r+0x32>
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	3202      	adds	r2, #2
 80047b2:	0092      	lsls	r2, r2, #2
 80047b4:	f107 010c 	add.w	r1, r7, #12
 80047b8:	300c      	adds	r0, #12
 80047ba:	f001 f813 	bl	80057e4 <memcpy>
 80047be:	2201      	movs	r2, #1
 80047c0:	4629      	mov	r1, r5
 80047c2:	4620      	mov	r0, r4
 80047c4:	f000 fc0a 	bl	8004fdc <__lshift>
 80047c8:	9b00      	ldr	r3, [sp, #0]
 80047ca:	3301      	adds	r3, #1
 80047cc:	9304      	str	r3, [sp, #16]
 80047ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80047d2:	4413      	add	r3, r2
 80047d4:	9308      	str	r3, [sp, #32]
 80047d6:	9b02      	ldr	r3, [sp, #8]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	46b8      	mov	r8, r7
 80047de:	9306      	str	r3, [sp, #24]
 80047e0:	4607      	mov	r7, r0
 80047e2:	9b04      	ldr	r3, [sp, #16]
 80047e4:	4631      	mov	r1, r6
 80047e6:	3b01      	subs	r3, #1
 80047e8:	4650      	mov	r0, sl
 80047ea:	9301      	str	r3, [sp, #4]
 80047ec:	f7ff fa6b 	bl	8003cc6 <quorem>
 80047f0:	4641      	mov	r1, r8
 80047f2:	9002      	str	r0, [sp, #8]
 80047f4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80047f8:	4650      	mov	r0, sl
 80047fa:	f000 fc5b 	bl	80050b4 <__mcmp>
 80047fe:	463a      	mov	r2, r7
 8004800:	9005      	str	r0, [sp, #20]
 8004802:	4631      	mov	r1, r6
 8004804:	4620      	mov	r0, r4
 8004806:	f000 fc71 	bl	80050ec <__mdiff>
 800480a:	68c2      	ldr	r2, [r0, #12]
 800480c:	4605      	mov	r5, r0
 800480e:	bb02      	cbnz	r2, 8004852 <_dtoa_r+0xa7a>
 8004810:	4601      	mov	r1, r0
 8004812:	4650      	mov	r0, sl
 8004814:	f000 fc4e 	bl	80050b4 <__mcmp>
 8004818:	4602      	mov	r2, r0
 800481a:	4629      	mov	r1, r5
 800481c:	4620      	mov	r0, r4
 800481e:	9209      	str	r2, [sp, #36]	; 0x24
 8004820:	f000 fa0c 	bl	8004c3c <_Bfree>
 8004824:	9b07      	ldr	r3, [sp, #28]
 8004826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004828:	9d04      	ldr	r5, [sp, #16]
 800482a:	ea43 0102 	orr.w	r1, r3, r2
 800482e:	9b06      	ldr	r3, [sp, #24]
 8004830:	4319      	orrs	r1, r3
 8004832:	d110      	bne.n	8004856 <_dtoa_r+0xa7e>
 8004834:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004838:	d029      	beq.n	800488e <_dtoa_r+0xab6>
 800483a:	9b05      	ldr	r3, [sp, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	dd02      	ble.n	8004846 <_dtoa_r+0xa6e>
 8004840:	9b02      	ldr	r3, [sp, #8]
 8004842:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004846:	9b01      	ldr	r3, [sp, #4]
 8004848:	f883 9000 	strb.w	r9, [r3]
 800484c:	e774      	b.n	8004738 <_dtoa_r+0x960>
 800484e:	4638      	mov	r0, r7
 8004850:	e7ba      	b.n	80047c8 <_dtoa_r+0x9f0>
 8004852:	2201      	movs	r2, #1
 8004854:	e7e1      	b.n	800481a <_dtoa_r+0xa42>
 8004856:	9b05      	ldr	r3, [sp, #20]
 8004858:	2b00      	cmp	r3, #0
 800485a:	db04      	blt.n	8004866 <_dtoa_r+0xa8e>
 800485c:	9907      	ldr	r1, [sp, #28]
 800485e:	430b      	orrs	r3, r1
 8004860:	9906      	ldr	r1, [sp, #24]
 8004862:	430b      	orrs	r3, r1
 8004864:	d120      	bne.n	80048a8 <_dtoa_r+0xad0>
 8004866:	2a00      	cmp	r2, #0
 8004868:	dded      	ble.n	8004846 <_dtoa_r+0xa6e>
 800486a:	4651      	mov	r1, sl
 800486c:	2201      	movs	r2, #1
 800486e:	4620      	mov	r0, r4
 8004870:	f000 fbb4 	bl	8004fdc <__lshift>
 8004874:	4631      	mov	r1, r6
 8004876:	4682      	mov	sl, r0
 8004878:	f000 fc1c 	bl	80050b4 <__mcmp>
 800487c:	2800      	cmp	r0, #0
 800487e:	dc03      	bgt.n	8004888 <_dtoa_r+0xab0>
 8004880:	d1e1      	bne.n	8004846 <_dtoa_r+0xa6e>
 8004882:	f019 0f01 	tst.w	r9, #1
 8004886:	d0de      	beq.n	8004846 <_dtoa_r+0xa6e>
 8004888:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800488c:	d1d8      	bne.n	8004840 <_dtoa_r+0xa68>
 800488e:	9a01      	ldr	r2, [sp, #4]
 8004890:	2339      	movs	r3, #57	; 0x39
 8004892:	7013      	strb	r3, [r2, #0]
 8004894:	462b      	mov	r3, r5
 8004896:	461d      	mov	r5, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800489e:	2a39      	cmp	r2, #57	; 0x39
 80048a0:	d06c      	beq.n	800497c <_dtoa_r+0xba4>
 80048a2:	3201      	adds	r2, #1
 80048a4:	701a      	strb	r2, [r3, #0]
 80048a6:	e747      	b.n	8004738 <_dtoa_r+0x960>
 80048a8:	2a00      	cmp	r2, #0
 80048aa:	dd07      	ble.n	80048bc <_dtoa_r+0xae4>
 80048ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80048b0:	d0ed      	beq.n	800488e <_dtoa_r+0xab6>
 80048b2:	9a01      	ldr	r2, [sp, #4]
 80048b4:	f109 0301 	add.w	r3, r9, #1
 80048b8:	7013      	strb	r3, [r2, #0]
 80048ba:	e73d      	b.n	8004738 <_dtoa_r+0x960>
 80048bc:	9b04      	ldr	r3, [sp, #16]
 80048be:	9a08      	ldr	r2, [sp, #32]
 80048c0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d043      	beq.n	8004950 <_dtoa_r+0xb78>
 80048c8:	4651      	mov	r1, sl
 80048ca:	2300      	movs	r3, #0
 80048cc:	220a      	movs	r2, #10
 80048ce:	4620      	mov	r0, r4
 80048d0:	f000 f9d6 	bl	8004c80 <__multadd>
 80048d4:	45b8      	cmp	r8, r7
 80048d6:	4682      	mov	sl, r0
 80048d8:	f04f 0300 	mov.w	r3, #0
 80048dc:	f04f 020a 	mov.w	r2, #10
 80048e0:	4641      	mov	r1, r8
 80048e2:	4620      	mov	r0, r4
 80048e4:	d107      	bne.n	80048f6 <_dtoa_r+0xb1e>
 80048e6:	f000 f9cb 	bl	8004c80 <__multadd>
 80048ea:	4680      	mov	r8, r0
 80048ec:	4607      	mov	r7, r0
 80048ee:	9b04      	ldr	r3, [sp, #16]
 80048f0:	3301      	adds	r3, #1
 80048f2:	9304      	str	r3, [sp, #16]
 80048f4:	e775      	b.n	80047e2 <_dtoa_r+0xa0a>
 80048f6:	f000 f9c3 	bl	8004c80 <__multadd>
 80048fa:	4639      	mov	r1, r7
 80048fc:	4680      	mov	r8, r0
 80048fe:	2300      	movs	r3, #0
 8004900:	220a      	movs	r2, #10
 8004902:	4620      	mov	r0, r4
 8004904:	f000 f9bc 	bl	8004c80 <__multadd>
 8004908:	4607      	mov	r7, r0
 800490a:	e7f0      	b.n	80048ee <_dtoa_r+0xb16>
 800490c:	9b04      	ldr	r3, [sp, #16]
 800490e:	9301      	str	r3, [sp, #4]
 8004910:	9d00      	ldr	r5, [sp, #0]
 8004912:	4631      	mov	r1, r6
 8004914:	4650      	mov	r0, sl
 8004916:	f7ff f9d6 	bl	8003cc6 <quorem>
 800491a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800491e:	9b00      	ldr	r3, [sp, #0]
 8004920:	f805 9b01 	strb.w	r9, [r5], #1
 8004924:	1aea      	subs	r2, r5, r3
 8004926:	9b01      	ldr	r3, [sp, #4]
 8004928:	4293      	cmp	r3, r2
 800492a:	dd07      	ble.n	800493c <_dtoa_r+0xb64>
 800492c:	4651      	mov	r1, sl
 800492e:	2300      	movs	r3, #0
 8004930:	220a      	movs	r2, #10
 8004932:	4620      	mov	r0, r4
 8004934:	f000 f9a4 	bl	8004c80 <__multadd>
 8004938:	4682      	mov	sl, r0
 800493a:	e7ea      	b.n	8004912 <_dtoa_r+0xb3a>
 800493c:	9b01      	ldr	r3, [sp, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	bfc8      	it	gt
 8004942:	461d      	movgt	r5, r3
 8004944:	9b00      	ldr	r3, [sp, #0]
 8004946:	bfd8      	it	le
 8004948:	2501      	movle	r5, #1
 800494a:	441d      	add	r5, r3
 800494c:	f04f 0800 	mov.w	r8, #0
 8004950:	4651      	mov	r1, sl
 8004952:	2201      	movs	r2, #1
 8004954:	4620      	mov	r0, r4
 8004956:	f000 fb41 	bl	8004fdc <__lshift>
 800495a:	4631      	mov	r1, r6
 800495c:	4682      	mov	sl, r0
 800495e:	f000 fba9 	bl	80050b4 <__mcmp>
 8004962:	2800      	cmp	r0, #0
 8004964:	dc96      	bgt.n	8004894 <_dtoa_r+0xabc>
 8004966:	d102      	bne.n	800496e <_dtoa_r+0xb96>
 8004968:	f019 0f01 	tst.w	r9, #1
 800496c:	d192      	bne.n	8004894 <_dtoa_r+0xabc>
 800496e:	462b      	mov	r3, r5
 8004970:	461d      	mov	r5, r3
 8004972:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004976:	2a30      	cmp	r2, #48	; 0x30
 8004978:	d0fa      	beq.n	8004970 <_dtoa_r+0xb98>
 800497a:	e6dd      	b.n	8004738 <_dtoa_r+0x960>
 800497c:	9a00      	ldr	r2, [sp, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d189      	bne.n	8004896 <_dtoa_r+0xabe>
 8004982:	f10b 0b01 	add.w	fp, fp, #1
 8004986:	2331      	movs	r3, #49	; 0x31
 8004988:	e796      	b.n	80048b8 <_dtoa_r+0xae0>
 800498a:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <_dtoa_r+0xbdc>)
 800498c:	f7ff ba99 	b.w	8003ec2 <_dtoa_r+0xea>
 8004990:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004992:	2b00      	cmp	r3, #0
 8004994:	f47f aa6d 	bne.w	8003e72 <_dtoa_r+0x9a>
 8004998:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <_dtoa_r+0xbe0>)
 800499a:	f7ff ba92 	b.w	8003ec2 <_dtoa_r+0xea>
 800499e:	9b01      	ldr	r3, [sp, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	dcb5      	bgt.n	8004910 <_dtoa_r+0xb38>
 80049a4:	9b07      	ldr	r3, [sp, #28]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	f73f aeb1 	bgt.w	800470e <_dtoa_r+0x936>
 80049ac:	e7b0      	b.n	8004910 <_dtoa_r+0xb38>
 80049ae:	bf00      	nop
 80049b0:	08005ba2 	.word	0x08005ba2
 80049b4:	08005b02 	.word	0x08005b02
 80049b8:	08005b26 	.word	0x08005b26

080049bc <_free_r>:
 80049bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049be:	2900      	cmp	r1, #0
 80049c0:	d044      	beq.n	8004a4c <_free_r+0x90>
 80049c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049c6:	9001      	str	r0, [sp, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f1a1 0404 	sub.w	r4, r1, #4
 80049ce:	bfb8      	it	lt
 80049d0:	18e4      	addlt	r4, r4, r3
 80049d2:	f000 f8e7 	bl	8004ba4 <__malloc_lock>
 80049d6:	4a1e      	ldr	r2, [pc, #120]	; (8004a50 <_free_r+0x94>)
 80049d8:	9801      	ldr	r0, [sp, #4]
 80049da:	6813      	ldr	r3, [r2, #0]
 80049dc:	b933      	cbnz	r3, 80049ec <_free_r+0x30>
 80049de:	6063      	str	r3, [r4, #4]
 80049e0:	6014      	str	r4, [r2, #0]
 80049e2:	b003      	add	sp, #12
 80049e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049e8:	f000 b8e2 	b.w	8004bb0 <__malloc_unlock>
 80049ec:	42a3      	cmp	r3, r4
 80049ee:	d908      	bls.n	8004a02 <_free_r+0x46>
 80049f0:	6825      	ldr	r5, [r4, #0]
 80049f2:	1961      	adds	r1, r4, r5
 80049f4:	428b      	cmp	r3, r1
 80049f6:	bf01      	itttt	eq
 80049f8:	6819      	ldreq	r1, [r3, #0]
 80049fa:	685b      	ldreq	r3, [r3, #4]
 80049fc:	1949      	addeq	r1, r1, r5
 80049fe:	6021      	streq	r1, [r4, #0]
 8004a00:	e7ed      	b.n	80049de <_free_r+0x22>
 8004a02:	461a      	mov	r2, r3
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	b10b      	cbz	r3, 8004a0c <_free_r+0x50>
 8004a08:	42a3      	cmp	r3, r4
 8004a0a:	d9fa      	bls.n	8004a02 <_free_r+0x46>
 8004a0c:	6811      	ldr	r1, [r2, #0]
 8004a0e:	1855      	adds	r5, r2, r1
 8004a10:	42a5      	cmp	r5, r4
 8004a12:	d10b      	bne.n	8004a2c <_free_r+0x70>
 8004a14:	6824      	ldr	r4, [r4, #0]
 8004a16:	4421      	add	r1, r4
 8004a18:	1854      	adds	r4, r2, r1
 8004a1a:	42a3      	cmp	r3, r4
 8004a1c:	6011      	str	r1, [r2, #0]
 8004a1e:	d1e0      	bne.n	80049e2 <_free_r+0x26>
 8004a20:	681c      	ldr	r4, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	6053      	str	r3, [r2, #4]
 8004a26:	440c      	add	r4, r1
 8004a28:	6014      	str	r4, [r2, #0]
 8004a2a:	e7da      	b.n	80049e2 <_free_r+0x26>
 8004a2c:	d902      	bls.n	8004a34 <_free_r+0x78>
 8004a2e:	230c      	movs	r3, #12
 8004a30:	6003      	str	r3, [r0, #0]
 8004a32:	e7d6      	b.n	80049e2 <_free_r+0x26>
 8004a34:	6825      	ldr	r5, [r4, #0]
 8004a36:	1961      	adds	r1, r4, r5
 8004a38:	428b      	cmp	r3, r1
 8004a3a:	bf04      	itt	eq
 8004a3c:	6819      	ldreq	r1, [r3, #0]
 8004a3e:	685b      	ldreq	r3, [r3, #4]
 8004a40:	6063      	str	r3, [r4, #4]
 8004a42:	bf04      	itt	eq
 8004a44:	1949      	addeq	r1, r1, r5
 8004a46:	6021      	streq	r1, [r4, #0]
 8004a48:	6054      	str	r4, [r2, #4]
 8004a4a:	e7ca      	b.n	80049e2 <_free_r+0x26>
 8004a4c:	b003      	add	sp, #12
 8004a4e:	bd30      	pop	{r4, r5, pc}
 8004a50:	20000458 	.word	0x20000458

08004a54 <malloc>:
 8004a54:	4b02      	ldr	r3, [pc, #8]	; (8004a60 <malloc+0xc>)
 8004a56:	4601      	mov	r1, r0
 8004a58:	6818      	ldr	r0, [r3, #0]
 8004a5a:	f000 b823 	b.w	8004aa4 <_malloc_r>
 8004a5e:	bf00      	nop
 8004a60:	2000006c 	.word	0x2000006c

08004a64 <sbrk_aligned>:
 8004a64:	b570      	push	{r4, r5, r6, lr}
 8004a66:	4e0e      	ldr	r6, [pc, #56]	; (8004aa0 <sbrk_aligned+0x3c>)
 8004a68:	460c      	mov	r4, r1
 8004a6a:	6831      	ldr	r1, [r6, #0]
 8004a6c:	4605      	mov	r5, r0
 8004a6e:	b911      	cbnz	r1, 8004a76 <sbrk_aligned+0x12>
 8004a70:	f000 fea8 	bl	80057c4 <_sbrk_r>
 8004a74:	6030      	str	r0, [r6, #0]
 8004a76:	4621      	mov	r1, r4
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f000 fea3 	bl	80057c4 <_sbrk_r>
 8004a7e:	1c43      	adds	r3, r0, #1
 8004a80:	d00a      	beq.n	8004a98 <sbrk_aligned+0x34>
 8004a82:	1cc4      	adds	r4, r0, #3
 8004a84:	f024 0403 	bic.w	r4, r4, #3
 8004a88:	42a0      	cmp	r0, r4
 8004a8a:	d007      	beq.n	8004a9c <sbrk_aligned+0x38>
 8004a8c:	1a21      	subs	r1, r4, r0
 8004a8e:	4628      	mov	r0, r5
 8004a90:	f000 fe98 	bl	80057c4 <_sbrk_r>
 8004a94:	3001      	adds	r0, #1
 8004a96:	d101      	bne.n	8004a9c <sbrk_aligned+0x38>
 8004a98:	f04f 34ff 	mov.w	r4, #4294967295
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	bd70      	pop	{r4, r5, r6, pc}
 8004aa0:	2000045c 	.word	0x2000045c

08004aa4 <_malloc_r>:
 8004aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aa8:	1ccd      	adds	r5, r1, #3
 8004aaa:	f025 0503 	bic.w	r5, r5, #3
 8004aae:	3508      	adds	r5, #8
 8004ab0:	2d0c      	cmp	r5, #12
 8004ab2:	bf38      	it	cc
 8004ab4:	250c      	movcc	r5, #12
 8004ab6:	2d00      	cmp	r5, #0
 8004ab8:	4607      	mov	r7, r0
 8004aba:	db01      	blt.n	8004ac0 <_malloc_r+0x1c>
 8004abc:	42a9      	cmp	r1, r5
 8004abe:	d905      	bls.n	8004acc <_malloc_r+0x28>
 8004ac0:	230c      	movs	r3, #12
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	2600      	movs	r6, #0
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004acc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004ba0 <_malloc_r+0xfc>
 8004ad0:	f000 f868 	bl	8004ba4 <__malloc_lock>
 8004ad4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ad8:	461c      	mov	r4, r3
 8004ada:	bb5c      	cbnz	r4, 8004b34 <_malloc_r+0x90>
 8004adc:	4629      	mov	r1, r5
 8004ade:	4638      	mov	r0, r7
 8004ae0:	f7ff ffc0 	bl	8004a64 <sbrk_aligned>
 8004ae4:	1c43      	adds	r3, r0, #1
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	d155      	bne.n	8004b96 <_malloc_r+0xf2>
 8004aea:	f8d8 4000 	ldr.w	r4, [r8]
 8004aee:	4626      	mov	r6, r4
 8004af0:	2e00      	cmp	r6, #0
 8004af2:	d145      	bne.n	8004b80 <_malloc_r+0xdc>
 8004af4:	2c00      	cmp	r4, #0
 8004af6:	d048      	beq.n	8004b8a <_malloc_r+0xe6>
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	4631      	mov	r1, r6
 8004afc:	4638      	mov	r0, r7
 8004afe:	eb04 0903 	add.w	r9, r4, r3
 8004b02:	f000 fe5f 	bl	80057c4 <_sbrk_r>
 8004b06:	4581      	cmp	r9, r0
 8004b08:	d13f      	bne.n	8004b8a <_malloc_r+0xe6>
 8004b0a:	6821      	ldr	r1, [r4, #0]
 8004b0c:	1a6d      	subs	r5, r5, r1
 8004b0e:	4629      	mov	r1, r5
 8004b10:	4638      	mov	r0, r7
 8004b12:	f7ff ffa7 	bl	8004a64 <sbrk_aligned>
 8004b16:	3001      	adds	r0, #1
 8004b18:	d037      	beq.n	8004b8a <_malloc_r+0xe6>
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	442b      	add	r3, r5
 8004b1e:	6023      	str	r3, [r4, #0]
 8004b20:	f8d8 3000 	ldr.w	r3, [r8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d038      	beq.n	8004b9a <_malloc_r+0xf6>
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	42a2      	cmp	r2, r4
 8004b2c:	d12b      	bne.n	8004b86 <_malloc_r+0xe2>
 8004b2e:	2200      	movs	r2, #0
 8004b30:	605a      	str	r2, [r3, #4]
 8004b32:	e00f      	b.n	8004b54 <_malloc_r+0xb0>
 8004b34:	6822      	ldr	r2, [r4, #0]
 8004b36:	1b52      	subs	r2, r2, r5
 8004b38:	d41f      	bmi.n	8004b7a <_malloc_r+0xd6>
 8004b3a:	2a0b      	cmp	r2, #11
 8004b3c:	d917      	bls.n	8004b6e <_malloc_r+0xca>
 8004b3e:	1961      	adds	r1, r4, r5
 8004b40:	42a3      	cmp	r3, r4
 8004b42:	6025      	str	r5, [r4, #0]
 8004b44:	bf18      	it	ne
 8004b46:	6059      	strne	r1, [r3, #4]
 8004b48:	6863      	ldr	r3, [r4, #4]
 8004b4a:	bf08      	it	eq
 8004b4c:	f8c8 1000 	streq.w	r1, [r8]
 8004b50:	5162      	str	r2, [r4, r5]
 8004b52:	604b      	str	r3, [r1, #4]
 8004b54:	4638      	mov	r0, r7
 8004b56:	f104 060b 	add.w	r6, r4, #11
 8004b5a:	f000 f829 	bl	8004bb0 <__malloc_unlock>
 8004b5e:	f026 0607 	bic.w	r6, r6, #7
 8004b62:	1d23      	adds	r3, r4, #4
 8004b64:	1af2      	subs	r2, r6, r3
 8004b66:	d0ae      	beq.n	8004ac6 <_malloc_r+0x22>
 8004b68:	1b9b      	subs	r3, r3, r6
 8004b6a:	50a3      	str	r3, [r4, r2]
 8004b6c:	e7ab      	b.n	8004ac6 <_malloc_r+0x22>
 8004b6e:	42a3      	cmp	r3, r4
 8004b70:	6862      	ldr	r2, [r4, #4]
 8004b72:	d1dd      	bne.n	8004b30 <_malloc_r+0x8c>
 8004b74:	f8c8 2000 	str.w	r2, [r8]
 8004b78:	e7ec      	b.n	8004b54 <_malloc_r+0xb0>
 8004b7a:	4623      	mov	r3, r4
 8004b7c:	6864      	ldr	r4, [r4, #4]
 8004b7e:	e7ac      	b.n	8004ada <_malloc_r+0x36>
 8004b80:	4634      	mov	r4, r6
 8004b82:	6876      	ldr	r6, [r6, #4]
 8004b84:	e7b4      	b.n	8004af0 <_malloc_r+0x4c>
 8004b86:	4613      	mov	r3, r2
 8004b88:	e7cc      	b.n	8004b24 <_malloc_r+0x80>
 8004b8a:	230c      	movs	r3, #12
 8004b8c:	603b      	str	r3, [r7, #0]
 8004b8e:	4638      	mov	r0, r7
 8004b90:	f000 f80e 	bl	8004bb0 <__malloc_unlock>
 8004b94:	e797      	b.n	8004ac6 <_malloc_r+0x22>
 8004b96:	6025      	str	r5, [r4, #0]
 8004b98:	e7dc      	b.n	8004b54 <_malloc_r+0xb0>
 8004b9a:	605b      	str	r3, [r3, #4]
 8004b9c:	deff      	udf	#255	; 0xff
 8004b9e:	bf00      	nop
 8004ba0:	20000458 	.word	0x20000458

08004ba4 <__malloc_lock>:
 8004ba4:	4801      	ldr	r0, [pc, #4]	; (8004bac <__malloc_lock+0x8>)
 8004ba6:	f7ff b88c 	b.w	8003cc2 <__retarget_lock_acquire_recursive>
 8004baa:	bf00      	nop
 8004bac:	20000454 	.word	0x20000454

08004bb0 <__malloc_unlock>:
 8004bb0:	4801      	ldr	r0, [pc, #4]	; (8004bb8 <__malloc_unlock+0x8>)
 8004bb2:	f7ff b887 	b.w	8003cc4 <__retarget_lock_release_recursive>
 8004bb6:	bf00      	nop
 8004bb8:	20000454 	.word	0x20000454

08004bbc <_Balloc>:
 8004bbc:	b570      	push	{r4, r5, r6, lr}
 8004bbe:	69c6      	ldr	r6, [r0, #28]
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	460d      	mov	r5, r1
 8004bc4:	b976      	cbnz	r6, 8004be4 <_Balloc+0x28>
 8004bc6:	2010      	movs	r0, #16
 8004bc8:	f7ff ff44 	bl	8004a54 <malloc>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	61e0      	str	r0, [r4, #28]
 8004bd0:	b920      	cbnz	r0, 8004bdc <_Balloc+0x20>
 8004bd2:	4b18      	ldr	r3, [pc, #96]	; (8004c34 <_Balloc+0x78>)
 8004bd4:	4818      	ldr	r0, [pc, #96]	; (8004c38 <_Balloc+0x7c>)
 8004bd6:	216b      	movs	r1, #107	; 0x6b
 8004bd8:	f000 fe12 	bl	8005800 <__assert_func>
 8004bdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004be0:	6006      	str	r6, [r0, #0]
 8004be2:	60c6      	str	r6, [r0, #12]
 8004be4:	69e6      	ldr	r6, [r4, #28]
 8004be6:	68f3      	ldr	r3, [r6, #12]
 8004be8:	b183      	cbz	r3, 8004c0c <_Balloc+0x50>
 8004bea:	69e3      	ldr	r3, [r4, #28]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004bf2:	b9b8      	cbnz	r0, 8004c24 <_Balloc+0x68>
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	fa01 f605 	lsl.w	r6, r1, r5
 8004bfa:	1d72      	adds	r2, r6, #5
 8004bfc:	0092      	lsls	r2, r2, #2
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f000 fe1c 	bl	800583c <_calloc_r>
 8004c04:	b160      	cbz	r0, 8004c20 <_Balloc+0x64>
 8004c06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004c0a:	e00e      	b.n	8004c2a <_Balloc+0x6e>
 8004c0c:	2221      	movs	r2, #33	; 0x21
 8004c0e:	2104      	movs	r1, #4
 8004c10:	4620      	mov	r0, r4
 8004c12:	f000 fe13 	bl	800583c <_calloc_r>
 8004c16:	69e3      	ldr	r3, [r4, #28]
 8004c18:	60f0      	str	r0, [r6, #12]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e4      	bne.n	8004bea <_Balloc+0x2e>
 8004c20:	2000      	movs	r0, #0
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
 8004c24:	6802      	ldr	r2, [r0, #0]
 8004c26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004c30:	e7f7      	b.n	8004c22 <_Balloc+0x66>
 8004c32:	bf00      	nop
 8004c34:	08005b33 	.word	0x08005b33
 8004c38:	08005bb3 	.word	0x08005bb3

08004c3c <_Bfree>:
 8004c3c:	b570      	push	{r4, r5, r6, lr}
 8004c3e:	69c6      	ldr	r6, [r0, #28]
 8004c40:	4605      	mov	r5, r0
 8004c42:	460c      	mov	r4, r1
 8004c44:	b976      	cbnz	r6, 8004c64 <_Bfree+0x28>
 8004c46:	2010      	movs	r0, #16
 8004c48:	f7ff ff04 	bl	8004a54 <malloc>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	61e8      	str	r0, [r5, #28]
 8004c50:	b920      	cbnz	r0, 8004c5c <_Bfree+0x20>
 8004c52:	4b09      	ldr	r3, [pc, #36]	; (8004c78 <_Bfree+0x3c>)
 8004c54:	4809      	ldr	r0, [pc, #36]	; (8004c7c <_Bfree+0x40>)
 8004c56:	218f      	movs	r1, #143	; 0x8f
 8004c58:	f000 fdd2 	bl	8005800 <__assert_func>
 8004c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004c60:	6006      	str	r6, [r0, #0]
 8004c62:	60c6      	str	r6, [r0, #12]
 8004c64:	b13c      	cbz	r4, 8004c76 <_Bfree+0x3a>
 8004c66:	69eb      	ldr	r3, [r5, #28]
 8004c68:	6862      	ldr	r2, [r4, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c70:	6021      	str	r1, [r4, #0]
 8004c72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004c76:	bd70      	pop	{r4, r5, r6, pc}
 8004c78:	08005b33 	.word	0x08005b33
 8004c7c:	08005bb3 	.word	0x08005bb3

08004c80 <__multadd>:
 8004c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c84:	690d      	ldr	r5, [r1, #16]
 8004c86:	4607      	mov	r7, r0
 8004c88:	460c      	mov	r4, r1
 8004c8a:	461e      	mov	r6, r3
 8004c8c:	f101 0c14 	add.w	ip, r1, #20
 8004c90:	2000      	movs	r0, #0
 8004c92:	f8dc 3000 	ldr.w	r3, [ip]
 8004c96:	b299      	uxth	r1, r3
 8004c98:	fb02 6101 	mla	r1, r2, r1, r6
 8004c9c:	0c1e      	lsrs	r6, r3, #16
 8004c9e:	0c0b      	lsrs	r3, r1, #16
 8004ca0:	fb02 3306 	mla	r3, r2, r6, r3
 8004ca4:	b289      	uxth	r1, r1
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004cac:	4285      	cmp	r5, r0
 8004cae:	f84c 1b04 	str.w	r1, [ip], #4
 8004cb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004cb6:	dcec      	bgt.n	8004c92 <__multadd+0x12>
 8004cb8:	b30e      	cbz	r6, 8004cfe <__multadd+0x7e>
 8004cba:	68a3      	ldr	r3, [r4, #8]
 8004cbc:	42ab      	cmp	r3, r5
 8004cbe:	dc19      	bgt.n	8004cf4 <__multadd+0x74>
 8004cc0:	6861      	ldr	r1, [r4, #4]
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	3101      	adds	r1, #1
 8004cc6:	f7ff ff79 	bl	8004bbc <_Balloc>
 8004cca:	4680      	mov	r8, r0
 8004ccc:	b928      	cbnz	r0, 8004cda <__multadd+0x5a>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <__multadd+0x84>)
 8004cd2:	480d      	ldr	r0, [pc, #52]	; (8004d08 <__multadd+0x88>)
 8004cd4:	21ba      	movs	r1, #186	; 0xba
 8004cd6:	f000 fd93 	bl	8005800 <__assert_func>
 8004cda:	6922      	ldr	r2, [r4, #16]
 8004cdc:	3202      	adds	r2, #2
 8004cde:	f104 010c 	add.w	r1, r4, #12
 8004ce2:	0092      	lsls	r2, r2, #2
 8004ce4:	300c      	adds	r0, #12
 8004ce6:	f000 fd7d 	bl	80057e4 <memcpy>
 8004cea:	4621      	mov	r1, r4
 8004cec:	4638      	mov	r0, r7
 8004cee:	f7ff ffa5 	bl	8004c3c <_Bfree>
 8004cf2:	4644      	mov	r4, r8
 8004cf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004cf8:	3501      	adds	r5, #1
 8004cfa:	615e      	str	r6, [r3, #20]
 8004cfc:	6125      	str	r5, [r4, #16]
 8004cfe:	4620      	mov	r0, r4
 8004d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d04:	08005ba2 	.word	0x08005ba2
 8004d08:	08005bb3 	.word	0x08005bb3

08004d0c <__hi0bits>:
 8004d0c:	0c03      	lsrs	r3, r0, #16
 8004d0e:	041b      	lsls	r3, r3, #16
 8004d10:	b9d3      	cbnz	r3, 8004d48 <__hi0bits+0x3c>
 8004d12:	0400      	lsls	r0, r0, #16
 8004d14:	2310      	movs	r3, #16
 8004d16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004d1a:	bf04      	itt	eq
 8004d1c:	0200      	lsleq	r0, r0, #8
 8004d1e:	3308      	addeq	r3, #8
 8004d20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004d24:	bf04      	itt	eq
 8004d26:	0100      	lsleq	r0, r0, #4
 8004d28:	3304      	addeq	r3, #4
 8004d2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004d2e:	bf04      	itt	eq
 8004d30:	0080      	lsleq	r0, r0, #2
 8004d32:	3302      	addeq	r3, #2
 8004d34:	2800      	cmp	r0, #0
 8004d36:	db05      	blt.n	8004d44 <__hi0bits+0x38>
 8004d38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004d3c:	f103 0301 	add.w	r3, r3, #1
 8004d40:	bf08      	it	eq
 8004d42:	2320      	moveq	r3, #32
 8004d44:	4618      	mov	r0, r3
 8004d46:	4770      	bx	lr
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e7e4      	b.n	8004d16 <__hi0bits+0xa>

08004d4c <__lo0bits>:
 8004d4c:	6803      	ldr	r3, [r0, #0]
 8004d4e:	f013 0207 	ands.w	r2, r3, #7
 8004d52:	d00c      	beq.n	8004d6e <__lo0bits+0x22>
 8004d54:	07d9      	lsls	r1, r3, #31
 8004d56:	d422      	bmi.n	8004d9e <__lo0bits+0x52>
 8004d58:	079a      	lsls	r2, r3, #30
 8004d5a:	bf49      	itett	mi
 8004d5c:	085b      	lsrmi	r3, r3, #1
 8004d5e:	089b      	lsrpl	r3, r3, #2
 8004d60:	6003      	strmi	r3, [r0, #0]
 8004d62:	2201      	movmi	r2, #1
 8004d64:	bf5c      	itt	pl
 8004d66:	6003      	strpl	r3, [r0, #0]
 8004d68:	2202      	movpl	r2, #2
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	4770      	bx	lr
 8004d6e:	b299      	uxth	r1, r3
 8004d70:	b909      	cbnz	r1, 8004d76 <__lo0bits+0x2a>
 8004d72:	0c1b      	lsrs	r3, r3, #16
 8004d74:	2210      	movs	r2, #16
 8004d76:	b2d9      	uxtb	r1, r3
 8004d78:	b909      	cbnz	r1, 8004d7e <__lo0bits+0x32>
 8004d7a:	3208      	adds	r2, #8
 8004d7c:	0a1b      	lsrs	r3, r3, #8
 8004d7e:	0719      	lsls	r1, r3, #28
 8004d80:	bf04      	itt	eq
 8004d82:	091b      	lsreq	r3, r3, #4
 8004d84:	3204      	addeq	r2, #4
 8004d86:	0799      	lsls	r1, r3, #30
 8004d88:	bf04      	itt	eq
 8004d8a:	089b      	lsreq	r3, r3, #2
 8004d8c:	3202      	addeq	r2, #2
 8004d8e:	07d9      	lsls	r1, r3, #31
 8004d90:	d403      	bmi.n	8004d9a <__lo0bits+0x4e>
 8004d92:	085b      	lsrs	r3, r3, #1
 8004d94:	f102 0201 	add.w	r2, r2, #1
 8004d98:	d003      	beq.n	8004da2 <__lo0bits+0x56>
 8004d9a:	6003      	str	r3, [r0, #0]
 8004d9c:	e7e5      	b.n	8004d6a <__lo0bits+0x1e>
 8004d9e:	2200      	movs	r2, #0
 8004da0:	e7e3      	b.n	8004d6a <__lo0bits+0x1e>
 8004da2:	2220      	movs	r2, #32
 8004da4:	e7e1      	b.n	8004d6a <__lo0bits+0x1e>
	...

08004da8 <__i2b>:
 8004da8:	b510      	push	{r4, lr}
 8004daa:	460c      	mov	r4, r1
 8004dac:	2101      	movs	r1, #1
 8004dae:	f7ff ff05 	bl	8004bbc <_Balloc>
 8004db2:	4602      	mov	r2, r0
 8004db4:	b928      	cbnz	r0, 8004dc2 <__i2b+0x1a>
 8004db6:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <__i2b+0x24>)
 8004db8:	4805      	ldr	r0, [pc, #20]	; (8004dd0 <__i2b+0x28>)
 8004dba:	f240 1145 	movw	r1, #325	; 0x145
 8004dbe:	f000 fd1f 	bl	8005800 <__assert_func>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	6144      	str	r4, [r0, #20]
 8004dc6:	6103      	str	r3, [r0, #16]
 8004dc8:	bd10      	pop	{r4, pc}
 8004dca:	bf00      	nop
 8004dcc:	08005ba2 	.word	0x08005ba2
 8004dd0:	08005bb3 	.word	0x08005bb3

08004dd4 <__multiply>:
 8004dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd8:	4691      	mov	r9, r2
 8004dda:	690a      	ldr	r2, [r1, #16]
 8004ddc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	bfb8      	it	lt
 8004de4:	460b      	movlt	r3, r1
 8004de6:	460c      	mov	r4, r1
 8004de8:	bfbc      	itt	lt
 8004dea:	464c      	movlt	r4, r9
 8004dec:	4699      	movlt	r9, r3
 8004dee:	6927      	ldr	r7, [r4, #16]
 8004df0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004df4:	68a3      	ldr	r3, [r4, #8]
 8004df6:	6861      	ldr	r1, [r4, #4]
 8004df8:	eb07 060a 	add.w	r6, r7, sl
 8004dfc:	42b3      	cmp	r3, r6
 8004dfe:	b085      	sub	sp, #20
 8004e00:	bfb8      	it	lt
 8004e02:	3101      	addlt	r1, #1
 8004e04:	f7ff feda 	bl	8004bbc <_Balloc>
 8004e08:	b930      	cbnz	r0, 8004e18 <__multiply+0x44>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	4b44      	ldr	r3, [pc, #272]	; (8004f20 <__multiply+0x14c>)
 8004e0e:	4845      	ldr	r0, [pc, #276]	; (8004f24 <__multiply+0x150>)
 8004e10:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004e14:	f000 fcf4 	bl	8005800 <__assert_func>
 8004e18:	f100 0514 	add.w	r5, r0, #20
 8004e1c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004e20:	462b      	mov	r3, r5
 8004e22:	2200      	movs	r2, #0
 8004e24:	4543      	cmp	r3, r8
 8004e26:	d321      	bcc.n	8004e6c <__multiply+0x98>
 8004e28:	f104 0314 	add.w	r3, r4, #20
 8004e2c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004e30:	f109 0314 	add.w	r3, r9, #20
 8004e34:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004e38:	9202      	str	r2, [sp, #8]
 8004e3a:	1b3a      	subs	r2, r7, r4
 8004e3c:	3a15      	subs	r2, #21
 8004e3e:	f022 0203 	bic.w	r2, r2, #3
 8004e42:	3204      	adds	r2, #4
 8004e44:	f104 0115 	add.w	r1, r4, #21
 8004e48:	428f      	cmp	r7, r1
 8004e4a:	bf38      	it	cc
 8004e4c:	2204      	movcc	r2, #4
 8004e4e:	9201      	str	r2, [sp, #4]
 8004e50:	9a02      	ldr	r2, [sp, #8]
 8004e52:	9303      	str	r3, [sp, #12]
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d80c      	bhi.n	8004e72 <__multiply+0x9e>
 8004e58:	2e00      	cmp	r6, #0
 8004e5a:	dd03      	ble.n	8004e64 <__multiply+0x90>
 8004e5c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d05b      	beq.n	8004f1c <__multiply+0x148>
 8004e64:	6106      	str	r6, [r0, #16]
 8004e66:	b005      	add	sp, #20
 8004e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e6c:	f843 2b04 	str.w	r2, [r3], #4
 8004e70:	e7d8      	b.n	8004e24 <__multiply+0x50>
 8004e72:	f8b3 a000 	ldrh.w	sl, [r3]
 8004e76:	f1ba 0f00 	cmp.w	sl, #0
 8004e7a:	d024      	beq.n	8004ec6 <__multiply+0xf2>
 8004e7c:	f104 0e14 	add.w	lr, r4, #20
 8004e80:	46a9      	mov	r9, r5
 8004e82:	f04f 0c00 	mov.w	ip, #0
 8004e86:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004e8a:	f8d9 1000 	ldr.w	r1, [r9]
 8004e8e:	fa1f fb82 	uxth.w	fp, r2
 8004e92:	b289      	uxth	r1, r1
 8004e94:	fb0a 110b 	mla	r1, sl, fp, r1
 8004e98:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004e9c:	f8d9 2000 	ldr.w	r2, [r9]
 8004ea0:	4461      	add	r1, ip
 8004ea2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004ea6:	fb0a c20b 	mla	r2, sl, fp, ip
 8004eaa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004eae:	b289      	uxth	r1, r1
 8004eb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004eb4:	4577      	cmp	r7, lr
 8004eb6:	f849 1b04 	str.w	r1, [r9], #4
 8004eba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004ebe:	d8e2      	bhi.n	8004e86 <__multiply+0xb2>
 8004ec0:	9a01      	ldr	r2, [sp, #4]
 8004ec2:	f845 c002 	str.w	ip, [r5, r2]
 8004ec6:	9a03      	ldr	r2, [sp, #12]
 8004ec8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004ecc:	3304      	adds	r3, #4
 8004ece:	f1b9 0f00 	cmp.w	r9, #0
 8004ed2:	d021      	beq.n	8004f18 <__multiply+0x144>
 8004ed4:	6829      	ldr	r1, [r5, #0]
 8004ed6:	f104 0c14 	add.w	ip, r4, #20
 8004eda:	46ae      	mov	lr, r5
 8004edc:	f04f 0a00 	mov.w	sl, #0
 8004ee0:	f8bc b000 	ldrh.w	fp, [ip]
 8004ee4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004ee8:	fb09 220b 	mla	r2, r9, fp, r2
 8004eec:	4452      	add	r2, sl
 8004eee:	b289      	uxth	r1, r1
 8004ef0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004ef4:	f84e 1b04 	str.w	r1, [lr], #4
 8004ef8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004efc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004f00:	f8be 1000 	ldrh.w	r1, [lr]
 8004f04:	fb09 110a 	mla	r1, r9, sl, r1
 8004f08:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004f0c:	4567      	cmp	r7, ip
 8004f0e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004f12:	d8e5      	bhi.n	8004ee0 <__multiply+0x10c>
 8004f14:	9a01      	ldr	r2, [sp, #4]
 8004f16:	50a9      	str	r1, [r5, r2]
 8004f18:	3504      	adds	r5, #4
 8004f1a:	e799      	b.n	8004e50 <__multiply+0x7c>
 8004f1c:	3e01      	subs	r6, #1
 8004f1e:	e79b      	b.n	8004e58 <__multiply+0x84>
 8004f20:	08005ba2 	.word	0x08005ba2
 8004f24:	08005bb3 	.word	0x08005bb3

08004f28 <__pow5mult>:
 8004f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f2c:	4615      	mov	r5, r2
 8004f2e:	f012 0203 	ands.w	r2, r2, #3
 8004f32:	4606      	mov	r6, r0
 8004f34:	460f      	mov	r7, r1
 8004f36:	d007      	beq.n	8004f48 <__pow5mult+0x20>
 8004f38:	4c25      	ldr	r4, [pc, #148]	; (8004fd0 <__pow5mult+0xa8>)
 8004f3a:	3a01      	subs	r2, #1
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004f42:	f7ff fe9d 	bl	8004c80 <__multadd>
 8004f46:	4607      	mov	r7, r0
 8004f48:	10ad      	asrs	r5, r5, #2
 8004f4a:	d03d      	beq.n	8004fc8 <__pow5mult+0xa0>
 8004f4c:	69f4      	ldr	r4, [r6, #28]
 8004f4e:	b97c      	cbnz	r4, 8004f70 <__pow5mult+0x48>
 8004f50:	2010      	movs	r0, #16
 8004f52:	f7ff fd7f 	bl	8004a54 <malloc>
 8004f56:	4602      	mov	r2, r0
 8004f58:	61f0      	str	r0, [r6, #28]
 8004f5a:	b928      	cbnz	r0, 8004f68 <__pow5mult+0x40>
 8004f5c:	4b1d      	ldr	r3, [pc, #116]	; (8004fd4 <__pow5mult+0xac>)
 8004f5e:	481e      	ldr	r0, [pc, #120]	; (8004fd8 <__pow5mult+0xb0>)
 8004f60:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004f64:	f000 fc4c 	bl	8005800 <__assert_func>
 8004f68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004f6c:	6004      	str	r4, [r0, #0]
 8004f6e:	60c4      	str	r4, [r0, #12]
 8004f70:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004f74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004f78:	b94c      	cbnz	r4, 8004f8e <__pow5mult+0x66>
 8004f7a:	f240 2171 	movw	r1, #625	; 0x271
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f7ff ff12 	bl	8004da8 <__i2b>
 8004f84:	2300      	movs	r3, #0
 8004f86:	f8c8 0008 	str.w	r0, [r8, #8]
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	6003      	str	r3, [r0, #0]
 8004f8e:	f04f 0900 	mov.w	r9, #0
 8004f92:	07eb      	lsls	r3, r5, #31
 8004f94:	d50a      	bpl.n	8004fac <__pow5mult+0x84>
 8004f96:	4639      	mov	r1, r7
 8004f98:	4622      	mov	r2, r4
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f7ff ff1a 	bl	8004dd4 <__multiply>
 8004fa0:	4639      	mov	r1, r7
 8004fa2:	4680      	mov	r8, r0
 8004fa4:	4630      	mov	r0, r6
 8004fa6:	f7ff fe49 	bl	8004c3c <_Bfree>
 8004faa:	4647      	mov	r7, r8
 8004fac:	106d      	asrs	r5, r5, #1
 8004fae:	d00b      	beq.n	8004fc8 <__pow5mult+0xa0>
 8004fb0:	6820      	ldr	r0, [r4, #0]
 8004fb2:	b938      	cbnz	r0, 8004fc4 <__pow5mult+0x9c>
 8004fb4:	4622      	mov	r2, r4
 8004fb6:	4621      	mov	r1, r4
 8004fb8:	4630      	mov	r0, r6
 8004fba:	f7ff ff0b 	bl	8004dd4 <__multiply>
 8004fbe:	6020      	str	r0, [r4, #0]
 8004fc0:	f8c0 9000 	str.w	r9, [r0]
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	e7e4      	b.n	8004f92 <__pow5mult+0x6a>
 8004fc8:	4638      	mov	r0, r7
 8004fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fce:	bf00      	nop
 8004fd0:	08005d00 	.word	0x08005d00
 8004fd4:	08005b33 	.word	0x08005b33
 8004fd8:	08005bb3 	.word	0x08005bb3

08004fdc <__lshift>:
 8004fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	6849      	ldr	r1, [r1, #4]
 8004fe4:	6923      	ldr	r3, [r4, #16]
 8004fe6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004fea:	68a3      	ldr	r3, [r4, #8]
 8004fec:	4607      	mov	r7, r0
 8004fee:	4691      	mov	r9, r2
 8004ff0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ff4:	f108 0601 	add.w	r6, r8, #1
 8004ff8:	42b3      	cmp	r3, r6
 8004ffa:	db0b      	blt.n	8005014 <__lshift+0x38>
 8004ffc:	4638      	mov	r0, r7
 8004ffe:	f7ff fddd 	bl	8004bbc <_Balloc>
 8005002:	4605      	mov	r5, r0
 8005004:	b948      	cbnz	r0, 800501a <__lshift+0x3e>
 8005006:	4602      	mov	r2, r0
 8005008:	4b28      	ldr	r3, [pc, #160]	; (80050ac <__lshift+0xd0>)
 800500a:	4829      	ldr	r0, [pc, #164]	; (80050b0 <__lshift+0xd4>)
 800500c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005010:	f000 fbf6 	bl	8005800 <__assert_func>
 8005014:	3101      	adds	r1, #1
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	e7ee      	b.n	8004ff8 <__lshift+0x1c>
 800501a:	2300      	movs	r3, #0
 800501c:	f100 0114 	add.w	r1, r0, #20
 8005020:	f100 0210 	add.w	r2, r0, #16
 8005024:	4618      	mov	r0, r3
 8005026:	4553      	cmp	r3, sl
 8005028:	db33      	blt.n	8005092 <__lshift+0xb6>
 800502a:	6920      	ldr	r0, [r4, #16]
 800502c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005030:	f104 0314 	add.w	r3, r4, #20
 8005034:	f019 091f 	ands.w	r9, r9, #31
 8005038:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800503c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005040:	d02b      	beq.n	800509a <__lshift+0xbe>
 8005042:	f1c9 0e20 	rsb	lr, r9, #32
 8005046:	468a      	mov	sl, r1
 8005048:	2200      	movs	r2, #0
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	fa00 f009 	lsl.w	r0, r0, r9
 8005050:	4310      	orrs	r0, r2
 8005052:	f84a 0b04 	str.w	r0, [sl], #4
 8005056:	f853 2b04 	ldr.w	r2, [r3], #4
 800505a:	459c      	cmp	ip, r3
 800505c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005060:	d8f3      	bhi.n	800504a <__lshift+0x6e>
 8005062:	ebac 0304 	sub.w	r3, ip, r4
 8005066:	3b15      	subs	r3, #21
 8005068:	f023 0303 	bic.w	r3, r3, #3
 800506c:	3304      	adds	r3, #4
 800506e:	f104 0015 	add.w	r0, r4, #21
 8005072:	4584      	cmp	ip, r0
 8005074:	bf38      	it	cc
 8005076:	2304      	movcc	r3, #4
 8005078:	50ca      	str	r2, [r1, r3]
 800507a:	b10a      	cbz	r2, 8005080 <__lshift+0xa4>
 800507c:	f108 0602 	add.w	r6, r8, #2
 8005080:	3e01      	subs	r6, #1
 8005082:	4638      	mov	r0, r7
 8005084:	612e      	str	r6, [r5, #16]
 8005086:	4621      	mov	r1, r4
 8005088:	f7ff fdd8 	bl	8004c3c <_Bfree>
 800508c:	4628      	mov	r0, r5
 800508e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005092:	f842 0f04 	str.w	r0, [r2, #4]!
 8005096:	3301      	adds	r3, #1
 8005098:	e7c5      	b.n	8005026 <__lshift+0x4a>
 800509a:	3904      	subs	r1, #4
 800509c:	f853 2b04 	ldr.w	r2, [r3], #4
 80050a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80050a4:	459c      	cmp	ip, r3
 80050a6:	d8f9      	bhi.n	800509c <__lshift+0xc0>
 80050a8:	e7ea      	b.n	8005080 <__lshift+0xa4>
 80050aa:	bf00      	nop
 80050ac:	08005ba2 	.word	0x08005ba2
 80050b0:	08005bb3 	.word	0x08005bb3

080050b4 <__mcmp>:
 80050b4:	b530      	push	{r4, r5, lr}
 80050b6:	6902      	ldr	r2, [r0, #16]
 80050b8:	690c      	ldr	r4, [r1, #16]
 80050ba:	1b12      	subs	r2, r2, r4
 80050bc:	d10e      	bne.n	80050dc <__mcmp+0x28>
 80050be:	f100 0314 	add.w	r3, r0, #20
 80050c2:	3114      	adds	r1, #20
 80050c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80050c8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80050cc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80050d0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80050d4:	42a5      	cmp	r5, r4
 80050d6:	d003      	beq.n	80050e0 <__mcmp+0x2c>
 80050d8:	d305      	bcc.n	80050e6 <__mcmp+0x32>
 80050da:	2201      	movs	r2, #1
 80050dc:	4610      	mov	r0, r2
 80050de:	bd30      	pop	{r4, r5, pc}
 80050e0:	4283      	cmp	r3, r0
 80050e2:	d3f3      	bcc.n	80050cc <__mcmp+0x18>
 80050e4:	e7fa      	b.n	80050dc <__mcmp+0x28>
 80050e6:	f04f 32ff 	mov.w	r2, #4294967295
 80050ea:	e7f7      	b.n	80050dc <__mcmp+0x28>

080050ec <__mdiff>:
 80050ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f0:	460c      	mov	r4, r1
 80050f2:	4606      	mov	r6, r0
 80050f4:	4611      	mov	r1, r2
 80050f6:	4620      	mov	r0, r4
 80050f8:	4690      	mov	r8, r2
 80050fa:	f7ff ffdb 	bl	80050b4 <__mcmp>
 80050fe:	1e05      	subs	r5, r0, #0
 8005100:	d110      	bne.n	8005124 <__mdiff+0x38>
 8005102:	4629      	mov	r1, r5
 8005104:	4630      	mov	r0, r6
 8005106:	f7ff fd59 	bl	8004bbc <_Balloc>
 800510a:	b930      	cbnz	r0, 800511a <__mdiff+0x2e>
 800510c:	4b3a      	ldr	r3, [pc, #232]	; (80051f8 <__mdiff+0x10c>)
 800510e:	4602      	mov	r2, r0
 8005110:	f240 2137 	movw	r1, #567	; 0x237
 8005114:	4839      	ldr	r0, [pc, #228]	; (80051fc <__mdiff+0x110>)
 8005116:	f000 fb73 	bl	8005800 <__assert_func>
 800511a:	2301      	movs	r3, #1
 800511c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005120:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005124:	bfa4      	itt	ge
 8005126:	4643      	movge	r3, r8
 8005128:	46a0      	movge	r8, r4
 800512a:	4630      	mov	r0, r6
 800512c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005130:	bfa6      	itte	ge
 8005132:	461c      	movge	r4, r3
 8005134:	2500      	movge	r5, #0
 8005136:	2501      	movlt	r5, #1
 8005138:	f7ff fd40 	bl	8004bbc <_Balloc>
 800513c:	b920      	cbnz	r0, 8005148 <__mdiff+0x5c>
 800513e:	4b2e      	ldr	r3, [pc, #184]	; (80051f8 <__mdiff+0x10c>)
 8005140:	4602      	mov	r2, r0
 8005142:	f240 2145 	movw	r1, #581	; 0x245
 8005146:	e7e5      	b.n	8005114 <__mdiff+0x28>
 8005148:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800514c:	6926      	ldr	r6, [r4, #16]
 800514e:	60c5      	str	r5, [r0, #12]
 8005150:	f104 0914 	add.w	r9, r4, #20
 8005154:	f108 0514 	add.w	r5, r8, #20
 8005158:	f100 0e14 	add.w	lr, r0, #20
 800515c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005160:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005164:	f108 0210 	add.w	r2, r8, #16
 8005168:	46f2      	mov	sl, lr
 800516a:	2100      	movs	r1, #0
 800516c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005170:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005174:	fa11 f88b 	uxtah	r8, r1, fp
 8005178:	b299      	uxth	r1, r3
 800517a:	0c1b      	lsrs	r3, r3, #16
 800517c:	eba8 0801 	sub.w	r8, r8, r1
 8005180:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005184:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005188:	fa1f f888 	uxth.w	r8, r8
 800518c:	1419      	asrs	r1, r3, #16
 800518e:	454e      	cmp	r6, r9
 8005190:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005194:	f84a 3b04 	str.w	r3, [sl], #4
 8005198:	d8e8      	bhi.n	800516c <__mdiff+0x80>
 800519a:	1b33      	subs	r3, r6, r4
 800519c:	3b15      	subs	r3, #21
 800519e:	f023 0303 	bic.w	r3, r3, #3
 80051a2:	3304      	adds	r3, #4
 80051a4:	3415      	adds	r4, #21
 80051a6:	42a6      	cmp	r6, r4
 80051a8:	bf38      	it	cc
 80051aa:	2304      	movcc	r3, #4
 80051ac:	441d      	add	r5, r3
 80051ae:	4473      	add	r3, lr
 80051b0:	469e      	mov	lr, r3
 80051b2:	462e      	mov	r6, r5
 80051b4:	4566      	cmp	r6, ip
 80051b6:	d30e      	bcc.n	80051d6 <__mdiff+0xea>
 80051b8:	f10c 0203 	add.w	r2, ip, #3
 80051bc:	1b52      	subs	r2, r2, r5
 80051be:	f022 0203 	bic.w	r2, r2, #3
 80051c2:	3d03      	subs	r5, #3
 80051c4:	45ac      	cmp	ip, r5
 80051c6:	bf38      	it	cc
 80051c8:	2200      	movcc	r2, #0
 80051ca:	4413      	add	r3, r2
 80051cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80051d0:	b17a      	cbz	r2, 80051f2 <__mdiff+0x106>
 80051d2:	6107      	str	r7, [r0, #16]
 80051d4:	e7a4      	b.n	8005120 <__mdiff+0x34>
 80051d6:	f856 8b04 	ldr.w	r8, [r6], #4
 80051da:	fa11 f288 	uxtah	r2, r1, r8
 80051de:	1414      	asrs	r4, r2, #16
 80051e0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80051e4:	b292      	uxth	r2, r2
 80051e6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80051ea:	f84e 2b04 	str.w	r2, [lr], #4
 80051ee:	1421      	asrs	r1, r4, #16
 80051f0:	e7e0      	b.n	80051b4 <__mdiff+0xc8>
 80051f2:	3f01      	subs	r7, #1
 80051f4:	e7ea      	b.n	80051cc <__mdiff+0xe0>
 80051f6:	bf00      	nop
 80051f8:	08005ba2 	.word	0x08005ba2
 80051fc:	08005bb3 	.word	0x08005bb3

08005200 <__d2b>:
 8005200:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005204:	460f      	mov	r7, r1
 8005206:	2101      	movs	r1, #1
 8005208:	ec59 8b10 	vmov	r8, r9, d0
 800520c:	4616      	mov	r6, r2
 800520e:	f7ff fcd5 	bl	8004bbc <_Balloc>
 8005212:	4604      	mov	r4, r0
 8005214:	b930      	cbnz	r0, 8005224 <__d2b+0x24>
 8005216:	4602      	mov	r2, r0
 8005218:	4b24      	ldr	r3, [pc, #144]	; (80052ac <__d2b+0xac>)
 800521a:	4825      	ldr	r0, [pc, #148]	; (80052b0 <__d2b+0xb0>)
 800521c:	f240 310f 	movw	r1, #783	; 0x30f
 8005220:	f000 faee 	bl	8005800 <__assert_func>
 8005224:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005228:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800522c:	bb2d      	cbnz	r5, 800527a <__d2b+0x7a>
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	f1b8 0300 	subs.w	r3, r8, #0
 8005234:	d026      	beq.n	8005284 <__d2b+0x84>
 8005236:	4668      	mov	r0, sp
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	f7ff fd87 	bl	8004d4c <__lo0bits>
 800523e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005242:	b1e8      	cbz	r0, 8005280 <__d2b+0x80>
 8005244:	f1c0 0320 	rsb	r3, r0, #32
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	430b      	orrs	r3, r1
 800524e:	40c2      	lsrs	r2, r0
 8005250:	6163      	str	r3, [r4, #20]
 8005252:	9201      	str	r2, [sp, #4]
 8005254:	9b01      	ldr	r3, [sp, #4]
 8005256:	61a3      	str	r3, [r4, #24]
 8005258:	2b00      	cmp	r3, #0
 800525a:	bf14      	ite	ne
 800525c:	2202      	movne	r2, #2
 800525e:	2201      	moveq	r2, #1
 8005260:	6122      	str	r2, [r4, #16]
 8005262:	b1bd      	cbz	r5, 8005294 <__d2b+0x94>
 8005264:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005268:	4405      	add	r5, r0
 800526a:	603d      	str	r5, [r7, #0]
 800526c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005270:	6030      	str	r0, [r6, #0]
 8005272:	4620      	mov	r0, r4
 8005274:	b003      	add	sp, #12
 8005276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800527a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800527e:	e7d6      	b.n	800522e <__d2b+0x2e>
 8005280:	6161      	str	r1, [r4, #20]
 8005282:	e7e7      	b.n	8005254 <__d2b+0x54>
 8005284:	a801      	add	r0, sp, #4
 8005286:	f7ff fd61 	bl	8004d4c <__lo0bits>
 800528a:	9b01      	ldr	r3, [sp, #4]
 800528c:	6163      	str	r3, [r4, #20]
 800528e:	3020      	adds	r0, #32
 8005290:	2201      	movs	r2, #1
 8005292:	e7e5      	b.n	8005260 <__d2b+0x60>
 8005294:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005298:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800529c:	6038      	str	r0, [r7, #0]
 800529e:	6918      	ldr	r0, [r3, #16]
 80052a0:	f7ff fd34 	bl	8004d0c <__hi0bits>
 80052a4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80052a8:	e7e2      	b.n	8005270 <__d2b+0x70>
 80052aa:	bf00      	nop
 80052ac:	08005ba2 	.word	0x08005ba2
 80052b0:	08005bb3 	.word	0x08005bb3

080052b4 <__sfputc_r>:
 80052b4:	6893      	ldr	r3, [r2, #8]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	b410      	push	{r4}
 80052bc:	6093      	str	r3, [r2, #8]
 80052be:	da08      	bge.n	80052d2 <__sfputc_r+0x1e>
 80052c0:	6994      	ldr	r4, [r2, #24]
 80052c2:	42a3      	cmp	r3, r4
 80052c4:	db01      	blt.n	80052ca <__sfputc_r+0x16>
 80052c6:	290a      	cmp	r1, #10
 80052c8:	d103      	bne.n	80052d2 <__sfputc_r+0x1e>
 80052ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052ce:	f000 b9e3 	b.w	8005698 <__swbuf_r>
 80052d2:	6813      	ldr	r3, [r2, #0]
 80052d4:	1c58      	adds	r0, r3, #1
 80052d6:	6010      	str	r0, [r2, #0]
 80052d8:	7019      	strb	r1, [r3, #0]
 80052da:	4608      	mov	r0, r1
 80052dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <__sfputs_r>:
 80052e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e4:	4606      	mov	r6, r0
 80052e6:	460f      	mov	r7, r1
 80052e8:	4614      	mov	r4, r2
 80052ea:	18d5      	adds	r5, r2, r3
 80052ec:	42ac      	cmp	r4, r5
 80052ee:	d101      	bne.n	80052f4 <__sfputs_r+0x12>
 80052f0:	2000      	movs	r0, #0
 80052f2:	e007      	b.n	8005304 <__sfputs_r+0x22>
 80052f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f8:	463a      	mov	r2, r7
 80052fa:	4630      	mov	r0, r6
 80052fc:	f7ff ffda 	bl	80052b4 <__sfputc_r>
 8005300:	1c43      	adds	r3, r0, #1
 8005302:	d1f3      	bne.n	80052ec <__sfputs_r+0xa>
 8005304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005308 <_vfiprintf_r>:
 8005308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800530c:	460d      	mov	r5, r1
 800530e:	b09d      	sub	sp, #116	; 0x74
 8005310:	4614      	mov	r4, r2
 8005312:	4698      	mov	r8, r3
 8005314:	4606      	mov	r6, r0
 8005316:	b118      	cbz	r0, 8005320 <_vfiprintf_r+0x18>
 8005318:	6a03      	ldr	r3, [r0, #32]
 800531a:	b90b      	cbnz	r3, 8005320 <_vfiprintf_r+0x18>
 800531c:	f7fe fbc8 	bl	8003ab0 <__sinit>
 8005320:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005322:	07d9      	lsls	r1, r3, #31
 8005324:	d405      	bmi.n	8005332 <_vfiprintf_r+0x2a>
 8005326:	89ab      	ldrh	r3, [r5, #12]
 8005328:	059a      	lsls	r2, r3, #22
 800532a:	d402      	bmi.n	8005332 <_vfiprintf_r+0x2a>
 800532c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800532e:	f7fe fcc8 	bl	8003cc2 <__retarget_lock_acquire_recursive>
 8005332:	89ab      	ldrh	r3, [r5, #12]
 8005334:	071b      	lsls	r3, r3, #28
 8005336:	d501      	bpl.n	800533c <_vfiprintf_r+0x34>
 8005338:	692b      	ldr	r3, [r5, #16]
 800533a:	b99b      	cbnz	r3, 8005364 <_vfiprintf_r+0x5c>
 800533c:	4629      	mov	r1, r5
 800533e:	4630      	mov	r0, r6
 8005340:	f000 f9e8 	bl	8005714 <__swsetup_r>
 8005344:	b170      	cbz	r0, 8005364 <_vfiprintf_r+0x5c>
 8005346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005348:	07dc      	lsls	r4, r3, #31
 800534a:	d504      	bpl.n	8005356 <_vfiprintf_r+0x4e>
 800534c:	f04f 30ff 	mov.w	r0, #4294967295
 8005350:	b01d      	add	sp, #116	; 0x74
 8005352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005356:	89ab      	ldrh	r3, [r5, #12]
 8005358:	0598      	lsls	r0, r3, #22
 800535a:	d4f7      	bmi.n	800534c <_vfiprintf_r+0x44>
 800535c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800535e:	f7fe fcb1 	bl	8003cc4 <__retarget_lock_release_recursive>
 8005362:	e7f3      	b.n	800534c <_vfiprintf_r+0x44>
 8005364:	2300      	movs	r3, #0
 8005366:	9309      	str	r3, [sp, #36]	; 0x24
 8005368:	2320      	movs	r3, #32
 800536a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800536e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005372:	2330      	movs	r3, #48	; 0x30
 8005374:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005528 <_vfiprintf_r+0x220>
 8005378:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800537c:	f04f 0901 	mov.w	r9, #1
 8005380:	4623      	mov	r3, r4
 8005382:	469a      	mov	sl, r3
 8005384:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005388:	b10a      	cbz	r2, 800538e <_vfiprintf_r+0x86>
 800538a:	2a25      	cmp	r2, #37	; 0x25
 800538c:	d1f9      	bne.n	8005382 <_vfiprintf_r+0x7a>
 800538e:	ebba 0b04 	subs.w	fp, sl, r4
 8005392:	d00b      	beq.n	80053ac <_vfiprintf_r+0xa4>
 8005394:	465b      	mov	r3, fp
 8005396:	4622      	mov	r2, r4
 8005398:	4629      	mov	r1, r5
 800539a:	4630      	mov	r0, r6
 800539c:	f7ff ffa1 	bl	80052e2 <__sfputs_r>
 80053a0:	3001      	adds	r0, #1
 80053a2:	f000 80a9 	beq.w	80054f8 <_vfiprintf_r+0x1f0>
 80053a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053a8:	445a      	add	r2, fp
 80053aa:	9209      	str	r2, [sp, #36]	; 0x24
 80053ac:	f89a 3000 	ldrb.w	r3, [sl]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f000 80a1 	beq.w	80054f8 <_vfiprintf_r+0x1f0>
 80053b6:	2300      	movs	r3, #0
 80053b8:	f04f 32ff 	mov.w	r2, #4294967295
 80053bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053c0:	f10a 0a01 	add.w	sl, sl, #1
 80053c4:	9304      	str	r3, [sp, #16]
 80053c6:	9307      	str	r3, [sp, #28]
 80053c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053cc:	931a      	str	r3, [sp, #104]	; 0x68
 80053ce:	4654      	mov	r4, sl
 80053d0:	2205      	movs	r2, #5
 80053d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053d6:	4854      	ldr	r0, [pc, #336]	; (8005528 <_vfiprintf_r+0x220>)
 80053d8:	f7fa ff02 	bl	80001e0 <memchr>
 80053dc:	9a04      	ldr	r2, [sp, #16]
 80053de:	b9d8      	cbnz	r0, 8005418 <_vfiprintf_r+0x110>
 80053e0:	06d1      	lsls	r1, r2, #27
 80053e2:	bf44      	itt	mi
 80053e4:	2320      	movmi	r3, #32
 80053e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053ea:	0713      	lsls	r3, r2, #28
 80053ec:	bf44      	itt	mi
 80053ee:	232b      	movmi	r3, #43	; 0x2b
 80053f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053f4:	f89a 3000 	ldrb.w	r3, [sl]
 80053f8:	2b2a      	cmp	r3, #42	; 0x2a
 80053fa:	d015      	beq.n	8005428 <_vfiprintf_r+0x120>
 80053fc:	9a07      	ldr	r2, [sp, #28]
 80053fe:	4654      	mov	r4, sl
 8005400:	2000      	movs	r0, #0
 8005402:	f04f 0c0a 	mov.w	ip, #10
 8005406:	4621      	mov	r1, r4
 8005408:	f811 3b01 	ldrb.w	r3, [r1], #1
 800540c:	3b30      	subs	r3, #48	; 0x30
 800540e:	2b09      	cmp	r3, #9
 8005410:	d94d      	bls.n	80054ae <_vfiprintf_r+0x1a6>
 8005412:	b1b0      	cbz	r0, 8005442 <_vfiprintf_r+0x13a>
 8005414:	9207      	str	r2, [sp, #28]
 8005416:	e014      	b.n	8005442 <_vfiprintf_r+0x13a>
 8005418:	eba0 0308 	sub.w	r3, r0, r8
 800541c:	fa09 f303 	lsl.w	r3, r9, r3
 8005420:	4313      	orrs	r3, r2
 8005422:	9304      	str	r3, [sp, #16]
 8005424:	46a2      	mov	sl, r4
 8005426:	e7d2      	b.n	80053ce <_vfiprintf_r+0xc6>
 8005428:	9b03      	ldr	r3, [sp, #12]
 800542a:	1d19      	adds	r1, r3, #4
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	9103      	str	r1, [sp, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	bfbb      	ittet	lt
 8005434:	425b      	neglt	r3, r3
 8005436:	f042 0202 	orrlt.w	r2, r2, #2
 800543a:	9307      	strge	r3, [sp, #28]
 800543c:	9307      	strlt	r3, [sp, #28]
 800543e:	bfb8      	it	lt
 8005440:	9204      	strlt	r2, [sp, #16]
 8005442:	7823      	ldrb	r3, [r4, #0]
 8005444:	2b2e      	cmp	r3, #46	; 0x2e
 8005446:	d10c      	bne.n	8005462 <_vfiprintf_r+0x15a>
 8005448:	7863      	ldrb	r3, [r4, #1]
 800544a:	2b2a      	cmp	r3, #42	; 0x2a
 800544c:	d134      	bne.n	80054b8 <_vfiprintf_r+0x1b0>
 800544e:	9b03      	ldr	r3, [sp, #12]
 8005450:	1d1a      	adds	r2, r3, #4
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	9203      	str	r2, [sp, #12]
 8005456:	2b00      	cmp	r3, #0
 8005458:	bfb8      	it	lt
 800545a:	f04f 33ff 	movlt.w	r3, #4294967295
 800545e:	3402      	adds	r4, #2
 8005460:	9305      	str	r3, [sp, #20]
 8005462:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005538 <_vfiprintf_r+0x230>
 8005466:	7821      	ldrb	r1, [r4, #0]
 8005468:	2203      	movs	r2, #3
 800546a:	4650      	mov	r0, sl
 800546c:	f7fa feb8 	bl	80001e0 <memchr>
 8005470:	b138      	cbz	r0, 8005482 <_vfiprintf_r+0x17a>
 8005472:	9b04      	ldr	r3, [sp, #16]
 8005474:	eba0 000a 	sub.w	r0, r0, sl
 8005478:	2240      	movs	r2, #64	; 0x40
 800547a:	4082      	lsls	r2, r0
 800547c:	4313      	orrs	r3, r2
 800547e:	3401      	adds	r4, #1
 8005480:	9304      	str	r3, [sp, #16]
 8005482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005486:	4829      	ldr	r0, [pc, #164]	; (800552c <_vfiprintf_r+0x224>)
 8005488:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800548c:	2206      	movs	r2, #6
 800548e:	f7fa fea7 	bl	80001e0 <memchr>
 8005492:	2800      	cmp	r0, #0
 8005494:	d03f      	beq.n	8005516 <_vfiprintf_r+0x20e>
 8005496:	4b26      	ldr	r3, [pc, #152]	; (8005530 <_vfiprintf_r+0x228>)
 8005498:	bb1b      	cbnz	r3, 80054e2 <_vfiprintf_r+0x1da>
 800549a:	9b03      	ldr	r3, [sp, #12]
 800549c:	3307      	adds	r3, #7
 800549e:	f023 0307 	bic.w	r3, r3, #7
 80054a2:	3308      	adds	r3, #8
 80054a4:	9303      	str	r3, [sp, #12]
 80054a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a8:	443b      	add	r3, r7
 80054aa:	9309      	str	r3, [sp, #36]	; 0x24
 80054ac:	e768      	b.n	8005380 <_vfiprintf_r+0x78>
 80054ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80054b2:	460c      	mov	r4, r1
 80054b4:	2001      	movs	r0, #1
 80054b6:	e7a6      	b.n	8005406 <_vfiprintf_r+0xfe>
 80054b8:	2300      	movs	r3, #0
 80054ba:	3401      	adds	r4, #1
 80054bc:	9305      	str	r3, [sp, #20]
 80054be:	4619      	mov	r1, r3
 80054c0:	f04f 0c0a 	mov.w	ip, #10
 80054c4:	4620      	mov	r0, r4
 80054c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054ca:	3a30      	subs	r2, #48	; 0x30
 80054cc:	2a09      	cmp	r2, #9
 80054ce:	d903      	bls.n	80054d8 <_vfiprintf_r+0x1d0>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0c6      	beq.n	8005462 <_vfiprintf_r+0x15a>
 80054d4:	9105      	str	r1, [sp, #20]
 80054d6:	e7c4      	b.n	8005462 <_vfiprintf_r+0x15a>
 80054d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80054dc:	4604      	mov	r4, r0
 80054de:	2301      	movs	r3, #1
 80054e0:	e7f0      	b.n	80054c4 <_vfiprintf_r+0x1bc>
 80054e2:	ab03      	add	r3, sp, #12
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	462a      	mov	r2, r5
 80054e8:	4b12      	ldr	r3, [pc, #72]	; (8005534 <_vfiprintf_r+0x22c>)
 80054ea:	a904      	add	r1, sp, #16
 80054ec:	4630      	mov	r0, r6
 80054ee:	f7fd fe8d 	bl	800320c <_printf_float>
 80054f2:	4607      	mov	r7, r0
 80054f4:	1c78      	adds	r0, r7, #1
 80054f6:	d1d6      	bne.n	80054a6 <_vfiprintf_r+0x19e>
 80054f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054fa:	07d9      	lsls	r1, r3, #31
 80054fc:	d405      	bmi.n	800550a <_vfiprintf_r+0x202>
 80054fe:	89ab      	ldrh	r3, [r5, #12]
 8005500:	059a      	lsls	r2, r3, #22
 8005502:	d402      	bmi.n	800550a <_vfiprintf_r+0x202>
 8005504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005506:	f7fe fbdd 	bl	8003cc4 <__retarget_lock_release_recursive>
 800550a:	89ab      	ldrh	r3, [r5, #12]
 800550c:	065b      	lsls	r3, r3, #25
 800550e:	f53f af1d 	bmi.w	800534c <_vfiprintf_r+0x44>
 8005512:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005514:	e71c      	b.n	8005350 <_vfiprintf_r+0x48>
 8005516:	ab03      	add	r3, sp, #12
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	462a      	mov	r2, r5
 800551c:	4b05      	ldr	r3, [pc, #20]	; (8005534 <_vfiprintf_r+0x22c>)
 800551e:	a904      	add	r1, sp, #16
 8005520:	4630      	mov	r0, r6
 8005522:	f7fe f917 	bl	8003754 <_printf_i>
 8005526:	e7e4      	b.n	80054f2 <_vfiprintf_r+0x1ea>
 8005528:	08005d0c 	.word	0x08005d0c
 800552c:	08005d16 	.word	0x08005d16
 8005530:	0800320d 	.word	0x0800320d
 8005534:	080052e3 	.word	0x080052e3
 8005538:	08005d12 	.word	0x08005d12

0800553c <__sflush_r>:
 800553c:	898a      	ldrh	r2, [r1, #12]
 800553e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005542:	4605      	mov	r5, r0
 8005544:	0710      	lsls	r0, r2, #28
 8005546:	460c      	mov	r4, r1
 8005548:	d458      	bmi.n	80055fc <__sflush_r+0xc0>
 800554a:	684b      	ldr	r3, [r1, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	dc05      	bgt.n	800555c <__sflush_r+0x20>
 8005550:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	dc02      	bgt.n	800555c <__sflush_r+0x20>
 8005556:	2000      	movs	r0, #0
 8005558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800555c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800555e:	2e00      	cmp	r6, #0
 8005560:	d0f9      	beq.n	8005556 <__sflush_r+0x1a>
 8005562:	2300      	movs	r3, #0
 8005564:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005568:	682f      	ldr	r7, [r5, #0]
 800556a:	6a21      	ldr	r1, [r4, #32]
 800556c:	602b      	str	r3, [r5, #0]
 800556e:	d032      	beq.n	80055d6 <__sflush_r+0x9a>
 8005570:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005572:	89a3      	ldrh	r3, [r4, #12]
 8005574:	075a      	lsls	r2, r3, #29
 8005576:	d505      	bpl.n	8005584 <__sflush_r+0x48>
 8005578:	6863      	ldr	r3, [r4, #4]
 800557a:	1ac0      	subs	r0, r0, r3
 800557c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800557e:	b10b      	cbz	r3, 8005584 <__sflush_r+0x48>
 8005580:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005582:	1ac0      	subs	r0, r0, r3
 8005584:	2300      	movs	r3, #0
 8005586:	4602      	mov	r2, r0
 8005588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800558a:	6a21      	ldr	r1, [r4, #32]
 800558c:	4628      	mov	r0, r5
 800558e:	47b0      	blx	r6
 8005590:	1c43      	adds	r3, r0, #1
 8005592:	89a3      	ldrh	r3, [r4, #12]
 8005594:	d106      	bne.n	80055a4 <__sflush_r+0x68>
 8005596:	6829      	ldr	r1, [r5, #0]
 8005598:	291d      	cmp	r1, #29
 800559a:	d82b      	bhi.n	80055f4 <__sflush_r+0xb8>
 800559c:	4a29      	ldr	r2, [pc, #164]	; (8005644 <__sflush_r+0x108>)
 800559e:	410a      	asrs	r2, r1
 80055a0:	07d6      	lsls	r6, r2, #31
 80055a2:	d427      	bmi.n	80055f4 <__sflush_r+0xb8>
 80055a4:	2200      	movs	r2, #0
 80055a6:	6062      	str	r2, [r4, #4]
 80055a8:	04d9      	lsls	r1, r3, #19
 80055aa:	6922      	ldr	r2, [r4, #16]
 80055ac:	6022      	str	r2, [r4, #0]
 80055ae:	d504      	bpl.n	80055ba <__sflush_r+0x7e>
 80055b0:	1c42      	adds	r2, r0, #1
 80055b2:	d101      	bne.n	80055b8 <__sflush_r+0x7c>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	b903      	cbnz	r3, 80055ba <__sflush_r+0x7e>
 80055b8:	6560      	str	r0, [r4, #84]	; 0x54
 80055ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055bc:	602f      	str	r7, [r5, #0]
 80055be:	2900      	cmp	r1, #0
 80055c0:	d0c9      	beq.n	8005556 <__sflush_r+0x1a>
 80055c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055c6:	4299      	cmp	r1, r3
 80055c8:	d002      	beq.n	80055d0 <__sflush_r+0x94>
 80055ca:	4628      	mov	r0, r5
 80055cc:	f7ff f9f6 	bl	80049bc <_free_r>
 80055d0:	2000      	movs	r0, #0
 80055d2:	6360      	str	r0, [r4, #52]	; 0x34
 80055d4:	e7c0      	b.n	8005558 <__sflush_r+0x1c>
 80055d6:	2301      	movs	r3, #1
 80055d8:	4628      	mov	r0, r5
 80055da:	47b0      	blx	r6
 80055dc:	1c41      	adds	r1, r0, #1
 80055de:	d1c8      	bne.n	8005572 <__sflush_r+0x36>
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d0c5      	beq.n	8005572 <__sflush_r+0x36>
 80055e6:	2b1d      	cmp	r3, #29
 80055e8:	d001      	beq.n	80055ee <__sflush_r+0xb2>
 80055ea:	2b16      	cmp	r3, #22
 80055ec:	d101      	bne.n	80055f2 <__sflush_r+0xb6>
 80055ee:	602f      	str	r7, [r5, #0]
 80055f0:	e7b1      	b.n	8005556 <__sflush_r+0x1a>
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055f8:	81a3      	strh	r3, [r4, #12]
 80055fa:	e7ad      	b.n	8005558 <__sflush_r+0x1c>
 80055fc:	690f      	ldr	r7, [r1, #16]
 80055fe:	2f00      	cmp	r7, #0
 8005600:	d0a9      	beq.n	8005556 <__sflush_r+0x1a>
 8005602:	0793      	lsls	r3, r2, #30
 8005604:	680e      	ldr	r6, [r1, #0]
 8005606:	bf08      	it	eq
 8005608:	694b      	ldreq	r3, [r1, #20]
 800560a:	600f      	str	r7, [r1, #0]
 800560c:	bf18      	it	ne
 800560e:	2300      	movne	r3, #0
 8005610:	eba6 0807 	sub.w	r8, r6, r7
 8005614:	608b      	str	r3, [r1, #8]
 8005616:	f1b8 0f00 	cmp.w	r8, #0
 800561a:	dd9c      	ble.n	8005556 <__sflush_r+0x1a>
 800561c:	6a21      	ldr	r1, [r4, #32]
 800561e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005620:	4643      	mov	r3, r8
 8005622:	463a      	mov	r2, r7
 8005624:	4628      	mov	r0, r5
 8005626:	47b0      	blx	r6
 8005628:	2800      	cmp	r0, #0
 800562a:	dc06      	bgt.n	800563a <__sflush_r+0xfe>
 800562c:	89a3      	ldrh	r3, [r4, #12]
 800562e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005632:	81a3      	strh	r3, [r4, #12]
 8005634:	f04f 30ff 	mov.w	r0, #4294967295
 8005638:	e78e      	b.n	8005558 <__sflush_r+0x1c>
 800563a:	4407      	add	r7, r0
 800563c:	eba8 0800 	sub.w	r8, r8, r0
 8005640:	e7e9      	b.n	8005616 <__sflush_r+0xda>
 8005642:	bf00      	nop
 8005644:	dfbffffe 	.word	0xdfbffffe

08005648 <_fflush_r>:
 8005648:	b538      	push	{r3, r4, r5, lr}
 800564a:	690b      	ldr	r3, [r1, #16]
 800564c:	4605      	mov	r5, r0
 800564e:	460c      	mov	r4, r1
 8005650:	b913      	cbnz	r3, 8005658 <_fflush_r+0x10>
 8005652:	2500      	movs	r5, #0
 8005654:	4628      	mov	r0, r5
 8005656:	bd38      	pop	{r3, r4, r5, pc}
 8005658:	b118      	cbz	r0, 8005662 <_fflush_r+0x1a>
 800565a:	6a03      	ldr	r3, [r0, #32]
 800565c:	b90b      	cbnz	r3, 8005662 <_fflush_r+0x1a>
 800565e:	f7fe fa27 	bl	8003ab0 <__sinit>
 8005662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0f3      	beq.n	8005652 <_fflush_r+0xa>
 800566a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800566c:	07d0      	lsls	r0, r2, #31
 800566e:	d404      	bmi.n	800567a <_fflush_r+0x32>
 8005670:	0599      	lsls	r1, r3, #22
 8005672:	d402      	bmi.n	800567a <_fflush_r+0x32>
 8005674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005676:	f7fe fb24 	bl	8003cc2 <__retarget_lock_acquire_recursive>
 800567a:	4628      	mov	r0, r5
 800567c:	4621      	mov	r1, r4
 800567e:	f7ff ff5d 	bl	800553c <__sflush_r>
 8005682:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005684:	07da      	lsls	r2, r3, #31
 8005686:	4605      	mov	r5, r0
 8005688:	d4e4      	bmi.n	8005654 <_fflush_r+0xc>
 800568a:	89a3      	ldrh	r3, [r4, #12]
 800568c:	059b      	lsls	r3, r3, #22
 800568e:	d4e1      	bmi.n	8005654 <_fflush_r+0xc>
 8005690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005692:	f7fe fb17 	bl	8003cc4 <__retarget_lock_release_recursive>
 8005696:	e7dd      	b.n	8005654 <_fflush_r+0xc>

08005698 <__swbuf_r>:
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	460e      	mov	r6, r1
 800569c:	4614      	mov	r4, r2
 800569e:	4605      	mov	r5, r0
 80056a0:	b118      	cbz	r0, 80056aa <__swbuf_r+0x12>
 80056a2:	6a03      	ldr	r3, [r0, #32]
 80056a4:	b90b      	cbnz	r3, 80056aa <__swbuf_r+0x12>
 80056a6:	f7fe fa03 	bl	8003ab0 <__sinit>
 80056aa:	69a3      	ldr	r3, [r4, #24]
 80056ac:	60a3      	str	r3, [r4, #8]
 80056ae:	89a3      	ldrh	r3, [r4, #12]
 80056b0:	071a      	lsls	r2, r3, #28
 80056b2:	d525      	bpl.n	8005700 <__swbuf_r+0x68>
 80056b4:	6923      	ldr	r3, [r4, #16]
 80056b6:	b31b      	cbz	r3, 8005700 <__swbuf_r+0x68>
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	6922      	ldr	r2, [r4, #16]
 80056bc:	1a98      	subs	r0, r3, r2
 80056be:	6963      	ldr	r3, [r4, #20]
 80056c0:	b2f6      	uxtb	r6, r6
 80056c2:	4283      	cmp	r3, r0
 80056c4:	4637      	mov	r7, r6
 80056c6:	dc04      	bgt.n	80056d2 <__swbuf_r+0x3a>
 80056c8:	4621      	mov	r1, r4
 80056ca:	4628      	mov	r0, r5
 80056cc:	f7ff ffbc 	bl	8005648 <_fflush_r>
 80056d0:	b9e0      	cbnz	r0, 800570c <__swbuf_r+0x74>
 80056d2:	68a3      	ldr	r3, [r4, #8]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	60a3      	str	r3, [r4, #8]
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	6022      	str	r2, [r4, #0]
 80056de:	701e      	strb	r6, [r3, #0]
 80056e0:	6962      	ldr	r2, [r4, #20]
 80056e2:	1c43      	adds	r3, r0, #1
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d004      	beq.n	80056f2 <__swbuf_r+0x5a>
 80056e8:	89a3      	ldrh	r3, [r4, #12]
 80056ea:	07db      	lsls	r3, r3, #31
 80056ec:	d506      	bpl.n	80056fc <__swbuf_r+0x64>
 80056ee:	2e0a      	cmp	r6, #10
 80056f0:	d104      	bne.n	80056fc <__swbuf_r+0x64>
 80056f2:	4621      	mov	r1, r4
 80056f4:	4628      	mov	r0, r5
 80056f6:	f7ff ffa7 	bl	8005648 <_fflush_r>
 80056fa:	b938      	cbnz	r0, 800570c <__swbuf_r+0x74>
 80056fc:	4638      	mov	r0, r7
 80056fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005700:	4621      	mov	r1, r4
 8005702:	4628      	mov	r0, r5
 8005704:	f000 f806 	bl	8005714 <__swsetup_r>
 8005708:	2800      	cmp	r0, #0
 800570a:	d0d5      	beq.n	80056b8 <__swbuf_r+0x20>
 800570c:	f04f 37ff 	mov.w	r7, #4294967295
 8005710:	e7f4      	b.n	80056fc <__swbuf_r+0x64>
	...

08005714 <__swsetup_r>:
 8005714:	b538      	push	{r3, r4, r5, lr}
 8005716:	4b2a      	ldr	r3, [pc, #168]	; (80057c0 <__swsetup_r+0xac>)
 8005718:	4605      	mov	r5, r0
 800571a:	6818      	ldr	r0, [r3, #0]
 800571c:	460c      	mov	r4, r1
 800571e:	b118      	cbz	r0, 8005728 <__swsetup_r+0x14>
 8005720:	6a03      	ldr	r3, [r0, #32]
 8005722:	b90b      	cbnz	r3, 8005728 <__swsetup_r+0x14>
 8005724:	f7fe f9c4 	bl	8003ab0 <__sinit>
 8005728:	89a3      	ldrh	r3, [r4, #12]
 800572a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800572e:	0718      	lsls	r0, r3, #28
 8005730:	d422      	bmi.n	8005778 <__swsetup_r+0x64>
 8005732:	06d9      	lsls	r1, r3, #27
 8005734:	d407      	bmi.n	8005746 <__swsetup_r+0x32>
 8005736:	2309      	movs	r3, #9
 8005738:	602b      	str	r3, [r5, #0]
 800573a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800573e:	81a3      	strh	r3, [r4, #12]
 8005740:	f04f 30ff 	mov.w	r0, #4294967295
 8005744:	e034      	b.n	80057b0 <__swsetup_r+0x9c>
 8005746:	0758      	lsls	r0, r3, #29
 8005748:	d512      	bpl.n	8005770 <__swsetup_r+0x5c>
 800574a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800574c:	b141      	cbz	r1, 8005760 <__swsetup_r+0x4c>
 800574e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005752:	4299      	cmp	r1, r3
 8005754:	d002      	beq.n	800575c <__swsetup_r+0x48>
 8005756:	4628      	mov	r0, r5
 8005758:	f7ff f930 	bl	80049bc <_free_r>
 800575c:	2300      	movs	r3, #0
 800575e:	6363      	str	r3, [r4, #52]	; 0x34
 8005760:	89a3      	ldrh	r3, [r4, #12]
 8005762:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005766:	81a3      	strh	r3, [r4, #12]
 8005768:	2300      	movs	r3, #0
 800576a:	6063      	str	r3, [r4, #4]
 800576c:	6923      	ldr	r3, [r4, #16]
 800576e:	6023      	str	r3, [r4, #0]
 8005770:	89a3      	ldrh	r3, [r4, #12]
 8005772:	f043 0308 	orr.w	r3, r3, #8
 8005776:	81a3      	strh	r3, [r4, #12]
 8005778:	6923      	ldr	r3, [r4, #16]
 800577a:	b94b      	cbnz	r3, 8005790 <__swsetup_r+0x7c>
 800577c:	89a3      	ldrh	r3, [r4, #12]
 800577e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005782:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005786:	d003      	beq.n	8005790 <__swsetup_r+0x7c>
 8005788:	4621      	mov	r1, r4
 800578a:	4628      	mov	r0, r5
 800578c:	f000 f8c4 	bl	8005918 <__smakebuf_r>
 8005790:	89a0      	ldrh	r0, [r4, #12]
 8005792:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005796:	f010 0301 	ands.w	r3, r0, #1
 800579a:	d00a      	beq.n	80057b2 <__swsetup_r+0x9e>
 800579c:	2300      	movs	r3, #0
 800579e:	60a3      	str	r3, [r4, #8]
 80057a0:	6963      	ldr	r3, [r4, #20]
 80057a2:	425b      	negs	r3, r3
 80057a4:	61a3      	str	r3, [r4, #24]
 80057a6:	6923      	ldr	r3, [r4, #16]
 80057a8:	b943      	cbnz	r3, 80057bc <__swsetup_r+0xa8>
 80057aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057ae:	d1c4      	bne.n	800573a <__swsetup_r+0x26>
 80057b0:	bd38      	pop	{r3, r4, r5, pc}
 80057b2:	0781      	lsls	r1, r0, #30
 80057b4:	bf58      	it	pl
 80057b6:	6963      	ldrpl	r3, [r4, #20]
 80057b8:	60a3      	str	r3, [r4, #8]
 80057ba:	e7f4      	b.n	80057a6 <__swsetup_r+0x92>
 80057bc:	2000      	movs	r0, #0
 80057be:	e7f7      	b.n	80057b0 <__swsetup_r+0x9c>
 80057c0:	2000006c 	.word	0x2000006c

080057c4 <_sbrk_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	4d06      	ldr	r5, [pc, #24]	; (80057e0 <_sbrk_r+0x1c>)
 80057c8:	2300      	movs	r3, #0
 80057ca:	4604      	mov	r4, r0
 80057cc:	4608      	mov	r0, r1
 80057ce:	602b      	str	r3, [r5, #0]
 80057d0:	f7fb fe9a 	bl	8001508 <_sbrk>
 80057d4:	1c43      	adds	r3, r0, #1
 80057d6:	d102      	bne.n	80057de <_sbrk_r+0x1a>
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	b103      	cbz	r3, 80057de <_sbrk_r+0x1a>
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	bd38      	pop	{r3, r4, r5, pc}
 80057e0:	20000450 	.word	0x20000450

080057e4 <memcpy>:
 80057e4:	440a      	add	r2, r1
 80057e6:	4291      	cmp	r1, r2
 80057e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80057ec:	d100      	bne.n	80057f0 <memcpy+0xc>
 80057ee:	4770      	bx	lr
 80057f0:	b510      	push	{r4, lr}
 80057f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057fa:	4291      	cmp	r1, r2
 80057fc:	d1f9      	bne.n	80057f2 <memcpy+0xe>
 80057fe:	bd10      	pop	{r4, pc}

08005800 <__assert_func>:
 8005800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005802:	4614      	mov	r4, r2
 8005804:	461a      	mov	r2, r3
 8005806:	4b09      	ldr	r3, [pc, #36]	; (800582c <__assert_func+0x2c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4605      	mov	r5, r0
 800580c:	68d8      	ldr	r0, [r3, #12]
 800580e:	b14c      	cbz	r4, 8005824 <__assert_func+0x24>
 8005810:	4b07      	ldr	r3, [pc, #28]	; (8005830 <__assert_func+0x30>)
 8005812:	9100      	str	r1, [sp, #0]
 8005814:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005818:	4906      	ldr	r1, [pc, #24]	; (8005834 <__assert_func+0x34>)
 800581a:	462b      	mov	r3, r5
 800581c:	f000 f844 	bl	80058a8 <fiprintf>
 8005820:	f000 f8d8 	bl	80059d4 <abort>
 8005824:	4b04      	ldr	r3, [pc, #16]	; (8005838 <__assert_func+0x38>)
 8005826:	461c      	mov	r4, r3
 8005828:	e7f3      	b.n	8005812 <__assert_func+0x12>
 800582a:	bf00      	nop
 800582c:	2000006c 	.word	0x2000006c
 8005830:	08005d27 	.word	0x08005d27
 8005834:	08005d34 	.word	0x08005d34
 8005838:	08005d62 	.word	0x08005d62

0800583c <_calloc_r>:
 800583c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800583e:	fba1 2402 	umull	r2, r4, r1, r2
 8005842:	b94c      	cbnz	r4, 8005858 <_calloc_r+0x1c>
 8005844:	4611      	mov	r1, r2
 8005846:	9201      	str	r2, [sp, #4]
 8005848:	f7ff f92c 	bl	8004aa4 <_malloc_r>
 800584c:	9a01      	ldr	r2, [sp, #4]
 800584e:	4605      	mov	r5, r0
 8005850:	b930      	cbnz	r0, 8005860 <_calloc_r+0x24>
 8005852:	4628      	mov	r0, r5
 8005854:	b003      	add	sp, #12
 8005856:	bd30      	pop	{r4, r5, pc}
 8005858:	220c      	movs	r2, #12
 800585a:	6002      	str	r2, [r0, #0]
 800585c:	2500      	movs	r5, #0
 800585e:	e7f8      	b.n	8005852 <_calloc_r+0x16>
 8005860:	4621      	mov	r1, r4
 8005862:	f7fe f9b0 	bl	8003bc6 <memset>
 8005866:	e7f4      	b.n	8005852 <_calloc_r+0x16>

08005868 <__ascii_mbtowc>:
 8005868:	b082      	sub	sp, #8
 800586a:	b901      	cbnz	r1, 800586e <__ascii_mbtowc+0x6>
 800586c:	a901      	add	r1, sp, #4
 800586e:	b142      	cbz	r2, 8005882 <__ascii_mbtowc+0x1a>
 8005870:	b14b      	cbz	r3, 8005886 <__ascii_mbtowc+0x1e>
 8005872:	7813      	ldrb	r3, [r2, #0]
 8005874:	600b      	str	r3, [r1, #0]
 8005876:	7812      	ldrb	r2, [r2, #0]
 8005878:	1e10      	subs	r0, r2, #0
 800587a:	bf18      	it	ne
 800587c:	2001      	movne	r0, #1
 800587e:	b002      	add	sp, #8
 8005880:	4770      	bx	lr
 8005882:	4610      	mov	r0, r2
 8005884:	e7fb      	b.n	800587e <__ascii_mbtowc+0x16>
 8005886:	f06f 0001 	mvn.w	r0, #1
 800588a:	e7f8      	b.n	800587e <__ascii_mbtowc+0x16>

0800588c <__ascii_wctomb>:
 800588c:	b149      	cbz	r1, 80058a2 <__ascii_wctomb+0x16>
 800588e:	2aff      	cmp	r2, #255	; 0xff
 8005890:	bf85      	ittet	hi
 8005892:	238a      	movhi	r3, #138	; 0x8a
 8005894:	6003      	strhi	r3, [r0, #0]
 8005896:	700a      	strbls	r2, [r1, #0]
 8005898:	f04f 30ff 	movhi.w	r0, #4294967295
 800589c:	bf98      	it	ls
 800589e:	2001      	movls	r0, #1
 80058a0:	4770      	bx	lr
 80058a2:	4608      	mov	r0, r1
 80058a4:	4770      	bx	lr
	...

080058a8 <fiprintf>:
 80058a8:	b40e      	push	{r1, r2, r3}
 80058aa:	b503      	push	{r0, r1, lr}
 80058ac:	4601      	mov	r1, r0
 80058ae:	ab03      	add	r3, sp, #12
 80058b0:	4805      	ldr	r0, [pc, #20]	; (80058c8 <fiprintf+0x20>)
 80058b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80058b6:	6800      	ldr	r0, [r0, #0]
 80058b8:	9301      	str	r3, [sp, #4]
 80058ba:	f7ff fd25 	bl	8005308 <_vfiprintf_r>
 80058be:	b002      	add	sp, #8
 80058c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80058c4:	b003      	add	sp, #12
 80058c6:	4770      	bx	lr
 80058c8:	2000006c 	.word	0x2000006c

080058cc <__swhatbuf_r>:
 80058cc:	b570      	push	{r4, r5, r6, lr}
 80058ce:	460c      	mov	r4, r1
 80058d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d4:	2900      	cmp	r1, #0
 80058d6:	b096      	sub	sp, #88	; 0x58
 80058d8:	4615      	mov	r5, r2
 80058da:	461e      	mov	r6, r3
 80058dc:	da0d      	bge.n	80058fa <__swhatbuf_r+0x2e>
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80058e4:	f04f 0100 	mov.w	r1, #0
 80058e8:	bf0c      	ite	eq
 80058ea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80058ee:	2340      	movne	r3, #64	; 0x40
 80058f0:	2000      	movs	r0, #0
 80058f2:	6031      	str	r1, [r6, #0]
 80058f4:	602b      	str	r3, [r5, #0]
 80058f6:	b016      	add	sp, #88	; 0x58
 80058f8:	bd70      	pop	{r4, r5, r6, pc}
 80058fa:	466a      	mov	r2, sp
 80058fc:	f000 f848 	bl	8005990 <_fstat_r>
 8005900:	2800      	cmp	r0, #0
 8005902:	dbec      	blt.n	80058de <__swhatbuf_r+0x12>
 8005904:	9901      	ldr	r1, [sp, #4]
 8005906:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800590a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800590e:	4259      	negs	r1, r3
 8005910:	4159      	adcs	r1, r3
 8005912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005916:	e7eb      	b.n	80058f0 <__swhatbuf_r+0x24>

08005918 <__smakebuf_r>:
 8005918:	898b      	ldrh	r3, [r1, #12]
 800591a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800591c:	079d      	lsls	r5, r3, #30
 800591e:	4606      	mov	r6, r0
 8005920:	460c      	mov	r4, r1
 8005922:	d507      	bpl.n	8005934 <__smakebuf_r+0x1c>
 8005924:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005928:	6023      	str	r3, [r4, #0]
 800592a:	6123      	str	r3, [r4, #16]
 800592c:	2301      	movs	r3, #1
 800592e:	6163      	str	r3, [r4, #20]
 8005930:	b002      	add	sp, #8
 8005932:	bd70      	pop	{r4, r5, r6, pc}
 8005934:	ab01      	add	r3, sp, #4
 8005936:	466a      	mov	r2, sp
 8005938:	f7ff ffc8 	bl	80058cc <__swhatbuf_r>
 800593c:	9900      	ldr	r1, [sp, #0]
 800593e:	4605      	mov	r5, r0
 8005940:	4630      	mov	r0, r6
 8005942:	f7ff f8af 	bl	8004aa4 <_malloc_r>
 8005946:	b948      	cbnz	r0, 800595c <__smakebuf_r+0x44>
 8005948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800594c:	059a      	lsls	r2, r3, #22
 800594e:	d4ef      	bmi.n	8005930 <__smakebuf_r+0x18>
 8005950:	f023 0303 	bic.w	r3, r3, #3
 8005954:	f043 0302 	orr.w	r3, r3, #2
 8005958:	81a3      	strh	r3, [r4, #12]
 800595a:	e7e3      	b.n	8005924 <__smakebuf_r+0xc>
 800595c:	89a3      	ldrh	r3, [r4, #12]
 800595e:	6020      	str	r0, [r4, #0]
 8005960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005964:	81a3      	strh	r3, [r4, #12]
 8005966:	9b00      	ldr	r3, [sp, #0]
 8005968:	6163      	str	r3, [r4, #20]
 800596a:	9b01      	ldr	r3, [sp, #4]
 800596c:	6120      	str	r0, [r4, #16]
 800596e:	b15b      	cbz	r3, 8005988 <__smakebuf_r+0x70>
 8005970:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005974:	4630      	mov	r0, r6
 8005976:	f000 f81d 	bl	80059b4 <_isatty_r>
 800597a:	b128      	cbz	r0, 8005988 <__smakebuf_r+0x70>
 800597c:	89a3      	ldrh	r3, [r4, #12]
 800597e:	f023 0303 	bic.w	r3, r3, #3
 8005982:	f043 0301 	orr.w	r3, r3, #1
 8005986:	81a3      	strh	r3, [r4, #12]
 8005988:	89a3      	ldrh	r3, [r4, #12]
 800598a:	431d      	orrs	r5, r3
 800598c:	81a5      	strh	r5, [r4, #12]
 800598e:	e7cf      	b.n	8005930 <__smakebuf_r+0x18>

08005990 <_fstat_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4d07      	ldr	r5, [pc, #28]	; (80059b0 <_fstat_r+0x20>)
 8005994:	2300      	movs	r3, #0
 8005996:	4604      	mov	r4, r0
 8005998:	4608      	mov	r0, r1
 800599a:	4611      	mov	r1, r2
 800599c:	602b      	str	r3, [r5, #0]
 800599e:	f7fd fa12 	bl	8002dc6 <_fstat>
 80059a2:	1c43      	adds	r3, r0, #1
 80059a4:	d102      	bne.n	80059ac <_fstat_r+0x1c>
 80059a6:	682b      	ldr	r3, [r5, #0]
 80059a8:	b103      	cbz	r3, 80059ac <_fstat_r+0x1c>
 80059aa:	6023      	str	r3, [r4, #0]
 80059ac:	bd38      	pop	{r3, r4, r5, pc}
 80059ae:	bf00      	nop
 80059b0:	20000450 	.word	0x20000450

080059b4 <_isatty_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	4d06      	ldr	r5, [pc, #24]	; (80059d0 <_isatty_r+0x1c>)
 80059b8:	2300      	movs	r3, #0
 80059ba:	4604      	mov	r4, r0
 80059bc:	4608      	mov	r0, r1
 80059be:	602b      	str	r3, [r5, #0]
 80059c0:	f7fd fb68 	bl	8003094 <_isatty>
 80059c4:	1c43      	adds	r3, r0, #1
 80059c6:	d102      	bne.n	80059ce <_isatty_r+0x1a>
 80059c8:	682b      	ldr	r3, [r5, #0]
 80059ca:	b103      	cbz	r3, 80059ce <_isatty_r+0x1a>
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	bd38      	pop	{r3, r4, r5, pc}
 80059d0:	20000450 	.word	0x20000450

080059d4 <abort>:
 80059d4:	b508      	push	{r3, lr}
 80059d6:	2006      	movs	r0, #6
 80059d8:	f000 f82c 	bl	8005a34 <raise>
 80059dc:	2001      	movs	r0, #1
 80059de:	f000 f84d 	bl	8005a7c <_exit>

080059e2 <_raise_r>:
 80059e2:	291f      	cmp	r1, #31
 80059e4:	b538      	push	{r3, r4, r5, lr}
 80059e6:	4604      	mov	r4, r0
 80059e8:	460d      	mov	r5, r1
 80059ea:	d904      	bls.n	80059f6 <_raise_r+0x14>
 80059ec:	2316      	movs	r3, #22
 80059ee:	6003      	str	r3, [r0, #0]
 80059f0:	f04f 30ff 	mov.w	r0, #4294967295
 80059f4:	bd38      	pop	{r3, r4, r5, pc}
 80059f6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80059f8:	b112      	cbz	r2, 8005a00 <_raise_r+0x1e>
 80059fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80059fe:	b94b      	cbnz	r3, 8005a14 <_raise_r+0x32>
 8005a00:	4620      	mov	r0, r4
 8005a02:	f000 f831 	bl	8005a68 <_getpid_r>
 8005a06:	462a      	mov	r2, r5
 8005a08:	4601      	mov	r1, r0
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a10:	f000 b818 	b.w	8005a44 <_kill_r>
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d00a      	beq.n	8005a2e <_raise_r+0x4c>
 8005a18:	1c59      	adds	r1, r3, #1
 8005a1a:	d103      	bne.n	8005a24 <_raise_r+0x42>
 8005a1c:	2316      	movs	r3, #22
 8005a1e:	6003      	str	r3, [r0, #0]
 8005a20:	2001      	movs	r0, #1
 8005a22:	e7e7      	b.n	80059f4 <_raise_r+0x12>
 8005a24:	2400      	movs	r4, #0
 8005a26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	4798      	blx	r3
 8005a2e:	2000      	movs	r0, #0
 8005a30:	e7e0      	b.n	80059f4 <_raise_r+0x12>
	...

08005a34 <raise>:
 8005a34:	4b02      	ldr	r3, [pc, #8]	; (8005a40 <raise+0xc>)
 8005a36:	4601      	mov	r1, r0
 8005a38:	6818      	ldr	r0, [r3, #0]
 8005a3a:	f7ff bfd2 	b.w	80059e2 <_raise_r>
 8005a3e:	bf00      	nop
 8005a40:	2000006c 	.word	0x2000006c

08005a44 <_kill_r>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	4d07      	ldr	r5, [pc, #28]	; (8005a64 <_kill_r+0x20>)
 8005a48:	2300      	movs	r3, #0
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	4608      	mov	r0, r1
 8005a4e:	4611      	mov	r1, r2
 8005a50:	602b      	str	r3, [r5, #0]
 8005a52:	f000 f80b 	bl	8005a6c <_kill>
 8005a56:	1c43      	adds	r3, r0, #1
 8005a58:	d102      	bne.n	8005a60 <_kill_r+0x1c>
 8005a5a:	682b      	ldr	r3, [r5, #0]
 8005a5c:	b103      	cbz	r3, 8005a60 <_kill_r+0x1c>
 8005a5e:	6023      	str	r3, [r4, #0]
 8005a60:	bd38      	pop	{r3, r4, r5, pc}
 8005a62:	bf00      	nop
 8005a64:	20000450 	.word	0x20000450

08005a68 <_getpid_r>:
 8005a68:	f7fd b98a 	b.w	8002d80 <_getpid>

08005a6c <_kill>:
 8005a6c:	4b02      	ldr	r3, [pc, #8]	; (8005a78 <_kill+0xc>)
 8005a6e:	2258      	movs	r2, #88	; 0x58
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	f04f 30ff 	mov.w	r0, #4294967295
 8005a76:	4770      	bx	lr
 8005a78:	20000450 	.word	0x20000450

08005a7c <_exit>:
 8005a7c:	e7fe      	b.n	8005a7c <_exit>
	...

08005a80 <_init>:
 8005a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a82:	bf00      	nop
 8005a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a86:	bc08      	pop	{r3}
 8005a88:	469e      	mov	lr, r3
 8005a8a:	4770      	bx	lr

08005a8c <_fini>:
 8005a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a8e:	bf00      	nop
 8005a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a92:	bc08      	pop	{r3}
 8005a94:	469e      	mov	lr, r3
 8005a96:	4770      	bx	lr
