
lab4_nieoceniane.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003ff8  08003ff8  00013ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004064  08004064  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004064  08004064  00014064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800406c  0800406c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800406c  0800406c  0001406c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004070  08004070  00014070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000070  080040e4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  080040e4  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005ec6  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000160e  00000000  00000000  00025fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005b0  00000000  00000000  000275b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000042a  00000000  00000000  00027b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000161d2  00000000  00000000  00027f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000786c  00000000  00000000  0003e164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d80b  00000000  00000000  000459d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020dc  00000000  00000000  000d31dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000d52b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003fe0 	.word	0x08003fe0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003fe0 	.word	0x08003fe0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fbd9 	bl	8000d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f833 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f939 	bl	8000810 <MX_GPIO_Init>
  MX_DMA_Init();
 800059e:	f000 f917 	bl	80007d0 <MX_DMA_Init>
  MX_ADC1_Init();
 80005a2:	f000 f897 	bl	80006d4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  initialise_monitor_handles();
 80005a6:	f002 fd2b 	bl	8003000 <initialise_monitor_handles>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  HAL_TIM_Base_Start(&htim2);
  HAL_ADC_Start_DMA(&hadc1, &dane, 12);
 80005aa:	220c      	movs	r2, #12
 80005ac:	4910      	ldr	r1, [pc, #64]	; (80005f0 <main+0x64>)
 80005ae:	4811      	ldr	r0, [pc, #68]	; (80005f4 <main+0x68>)
 80005b0:	f000 fca4 	bl	8000efc <HAL_ADC_Start_DMA>
//	  printf("%d\t %d\n", dane[0], dane[1]);
//	  HAL_Delay(500);

	  //2
//	  HAL_ADC_Start_DMA(&hadc1, &dane, 12);
	  for(int i=0;i<16;i++){
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	e00a      	b.n	80005d0 <main+0x44>
		  printf("%x\t", dane[i]);
 80005ba:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <main+0x64>)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005c2:	4619      	mov	r1, r3
 80005c4:	480c      	ldr	r0, [pc, #48]	; (80005f8 <main+0x6c>)
 80005c6:	f002 fe59 	bl	800327c <iprintf>
	  for(int i=0;i<16;i++){
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	3301      	adds	r3, #1
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2b0f      	cmp	r3, #15
 80005d4:	ddf1      	ble.n	80005ba <main+0x2e>
	  }
	  printf("\n");
 80005d6:	200a      	movs	r0, #10
 80005d8:	f002 fe62 	bl	80032a0 <putchar>
	  HAL_GPIO_TogglePin(blue_GPIO_Port, blue_Pin);
 80005dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e0:	4806      	ldr	r0, [pc, #24]	; (80005fc <main+0x70>)
 80005e2:	f001 fe68 	bl	80022b6 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 80005e6:	20fa      	movs	r0, #250	; 0xfa
 80005e8:	f000 fc20 	bl	8000e2c <HAL_Delay>
  {
 80005ec:	e7e2      	b.n	80005b4 <main+0x28>
 80005ee:	bf00      	nop
 80005f0:	20000134 	.word	0x20000134
 80005f4:	2000008c 	.word	0x2000008c
 80005f8:	08003ff8 	.word	0x08003ff8
 80005fc:	40020c00 	.word	0x40020c00

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f002 fe91 	bl	8003336 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b28      	ldr	r3, [pc, #160]	; (80006cc <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a27      	ldr	r2, [pc, #156]	; (80006cc <SystemClock_Config+0xcc>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b25      	ldr	r3, [pc, #148]	; (80006cc <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <SystemClock_Config+0xd0>)
 800064a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000670:	2308      	movs	r3, #8
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000674:	23c0      	movs	r3, #192	; 0xc0
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000678:	2304      	movs	r3, #4
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fe31 	bl	80022ec <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000690:	f000 fa0e 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2103      	movs	r1, #3
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 f892 	bl	80027dc <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006be:	f000 f9f7 	bl	8000ab0 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	; 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006da:	463b      	mov	r3, r7
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006e6:	4b36      	ldr	r3, [pc, #216]	; (80007c0 <MX_ADC1_Init+0xec>)
 80006e8:	4a36      	ldr	r2, [pc, #216]	; (80007c4 <MX_ADC1_Init+0xf0>)
 80006ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006ec:	4b34      	ldr	r3, [pc, #208]	; (80007c0 <MX_ADC1_Init+0xec>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006f2:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <MX_ADC1_Init+0xec>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80006f8:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <MX_ADC1_Init+0xec>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006fe:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <MX_ADC1_Init+0xec>)
 8000700:	2201      	movs	r2, #1
 8000702:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000704:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <MX_ADC1_Init+0xec>)
 8000706:	2200      	movs	r2, #0
 8000708:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070c:	4b2c      	ldr	r3, [pc, #176]	; (80007c0 <MX_ADC1_Init+0xec>)
 800070e:	2200      	movs	r2, #0
 8000710:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000712:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <MX_ADC1_Init+0xec>)
 8000714:	4a2c      	ldr	r2, [pc, #176]	; (80007c8 <MX_ADC1_Init+0xf4>)
 8000716:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000718:	4b29      	ldr	r3, [pc, #164]	; (80007c0 <MX_ADC1_Init+0xec>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800071e:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <MX_ADC1_Init+0xec>)
 8000720:	2204      	movs	r2, #4
 8000722:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000724:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <MX_ADC1_Init+0xec>)
 8000726:	2201      	movs	r2, #1
 8000728:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800072c:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <MX_ADC1_Init+0xec>)
 800072e:	2201      	movs	r2, #1
 8000730:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000732:	4823      	ldr	r0, [pc, #140]	; (80007c0 <MX_ADC1_Init+0xec>)
 8000734:	f000 fb9e 	bl	8000e74 <HAL_ADC_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 f9b7 	bl	8000ab0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <MX_ADC1_Init+0xf8>)
 8000744:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800074a:	2307      	movs	r3, #7
 800074c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	4619      	mov	r1, r3
 8000752:	481b      	ldr	r0, [pc, #108]	; (80007c0 <MX_ADC1_Init+0xec>)
 8000754:	f000 fce0 	bl	8001118 <HAL_ADC_ConfigChannel>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800075e:	f000 f9a7 	bl	8000ab0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000766:	2302      	movs	r3, #2
 8000768:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076a:	463b      	mov	r3, r7
 800076c:	4619      	mov	r1, r3
 800076e:	4814      	ldr	r0, [pc, #80]	; (80007c0 <MX_ADC1_Init+0xec>)
 8000770:	f000 fcd2 	bl	8001118 <HAL_ADC_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800077a:	f000 f999 	bl	8000ab0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800077e:	2311      	movs	r3, #17
 8000780:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000782:	2303      	movs	r3, #3
 8000784:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	4619      	mov	r1, r3
 800078a:	480d      	ldr	r0, [pc, #52]	; (80007c0 <MX_ADC1_Init+0xec>)
 800078c:	f000 fcc4 	bl	8001118 <HAL_ADC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000796:	f000 f98b 	bl	8000ab0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800079a:	2301      	movs	r3, #1
 800079c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800079e:	2304      	movs	r3, #4
 80007a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a2:	463b      	mov	r3, r7
 80007a4:	4619      	mov	r1, r3
 80007a6:	4806      	ldr	r0, [pc, #24]	; (80007c0 <MX_ADC1_Init+0xec>)
 80007a8:	f000 fcb6 	bl	8001118 <HAL_ADC_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80007b2:	f000 f97d 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000008c 	.word	0x2000008c
 80007c4:	40012000 	.word	0x40012000
 80007c8:	0f000001 	.word	0x0f000001
 80007cc:	10000012 	.word	0x10000012

080007d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_DMA_Init+0x3c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a0b      	ldr	r2, [pc, #44]	; (800080c <MX_DMA_Init+0x3c>)
 80007e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_DMA_Init+0x3c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2038      	movs	r0, #56	; 0x38
 80007f8:	f001 f819 	bl	800182e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007fc:	2038      	movs	r0, #56	; 0x38
 80007fe:	f001 f832 	bl	8001866 <HAL_NVIC_EnableIRQ>

}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
 800082a:	4b9b      	ldr	r3, [pc, #620]	; (8000a98 <MX_GPIO_Init+0x288>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a9a      	ldr	r2, [pc, #616]	; (8000a98 <MX_GPIO_Init+0x288>)
 8000830:	f043 0310 	orr.w	r3, r3, #16
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b98      	ldr	r3, [pc, #608]	; (8000a98 <MX_GPIO_Init+0x288>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0310 	and.w	r3, r3, #16
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	4b94      	ldr	r3, [pc, #592]	; (8000a98 <MX_GPIO_Init+0x288>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a93      	ldr	r2, [pc, #588]	; (8000a98 <MX_GPIO_Init+0x288>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b91      	ldr	r3, [pc, #580]	; (8000a98 <MX_GPIO_Init+0x288>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b8d      	ldr	r3, [pc, #564]	; (8000a98 <MX_GPIO_Init+0x288>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a8c      	ldr	r2, [pc, #560]	; (8000a98 <MX_GPIO_Init+0x288>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b8a      	ldr	r3, [pc, #552]	; (8000a98 <MX_GPIO_Init+0x288>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b86      	ldr	r3, [pc, #536]	; (8000a98 <MX_GPIO_Init+0x288>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a85      	ldr	r2, [pc, #532]	; (8000a98 <MX_GPIO_Init+0x288>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b83      	ldr	r3, [pc, #524]	; (8000a98 <MX_GPIO_Init+0x288>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b7f      	ldr	r3, [pc, #508]	; (8000a98 <MX_GPIO_Init+0x288>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a7e      	ldr	r2, [pc, #504]	; (8000a98 <MX_GPIO_Init+0x288>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b7c      	ldr	r3, [pc, #496]	; (8000a98 <MX_GPIO_Init+0x288>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b78      	ldr	r3, [pc, #480]	; (8000a98 <MX_GPIO_Init+0x288>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a77      	ldr	r2, [pc, #476]	; (8000a98 <MX_GPIO_Init+0x288>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b75      	ldr	r3, [pc, #468]	; (8000a98 <MX_GPIO_Init+0x288>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2108      	movs	r1, #8
 80008d2:	4872      	ldr	r0, [pc, #456]	; (8000a9c <MX_GPIO_Init+0x28c>)
 80008d4:	f001 fcd6 	bl	8002284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2101      	movs	r1, #1
 80008dc:	4870      	ldr	r0, [pc, #448]	; (8000aa0 <MX_GPIO_Init+0x290>)
 80008de:	f001 fcd1 	bl	8002284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|blue_Pin
 80008e2:	2200      	movs	r2, #0
 80008e4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008e8:	486e      	ldr	r0, [pc, #440]	; (8000aa4 <MX_GPIO_Init+0x294>)
 80008ea:	f001 fccb 	bl	8002284 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008ee:	2304      	movs	r3, #4
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4866      	ldr	r0, [pc, #408]	; (8000a9c <MX_GPIO_Init+0x28c>)
 8000902:	f001 fb3b 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000906:	2308      	movs	r3, #8
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	485f      	ldr	r0, [pc, #380]	; (8000a9c <MX_GPIO_Init+0x28c>)
 800091e:	f001 fb2d 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000922:	2332      	movs	r3, #50	; 0x32
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000926:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800092a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4859      	ldr	r0, [pc, #356]	; (8000a9c <MX_GPIO_Init+0x28c>)
 8000938:	f001 fb20 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800093c:	2301      	movs	r3, #1
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 031c 	add.w	r3, r7, #28
 8000950:	4619      	mov	r1, r3
 8000952:	4853      	ldr	r0, [pc, #332]	; (8000aa0 <MX_GPIO_Init+0x290>)
 8000954:	f001 fb12 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000958:	2308      	movs	r3, #8
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000968:	2305      	movs	r3, #5
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	484b      	ldr	r0, [pc, #300]	; (8000aa0 <MX_GPIO_Init+0x290>)
 8000974:	f001 fb02 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000978:	2310      	movs	r3, #16
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097c:	2302      	movs	r3, #2
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000988:	2306      	movs	r3, #6
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4845      	ldr	r0, [pc, #276]	; (8000aa8 <MX_GPIO_Init+0x298>)
 8000994:	f001 faf2 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000998:	23e0      	movs	r3, #224	; 0xe0
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009a8:	2305      	movs	r3, #5
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	483d      	ldr	r0, [pc, #244]	; (8000aa8 <MX_GPIO_Init+0x298>)
 80009b4:	f001 fae2 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80009b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ca:	2305      	movs	r3, #5
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4835      	ldr	r0, [pc, #212]	; (8000aac <MX_GPIO_Init+0x29c>)
 80009d6:	f001 fad1 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin blue_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|blue_Pin
 80009da:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009de:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	482c      	ldr	r0, [pc, #176]	; (8000aa4 <MX_GPIO_Init+0x294>)
 80009f4:	f001 fac2 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009f8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a0a:	2306      	movs	r3, #6
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	4822      	ldr	r0, [pc, #136]	; (8000aa0 <MX_GPIO_Init+0x290>)
 8000a16:	f001 fab1 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	481e      	ldr	r0, [pc, #120]	; (8000aa8 <MX_GPIO_Init+0x298>)
 8000a30:	f001 faa4 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a34:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a46:	230a      	movs	r3, #10
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4815      	ldr	r0, [pc, #84]	; (8000aa8 <MX_GPIO_Init+0x298>)
 8000a52:	f001 fa93 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a56:	2320      	movs	r3, #32
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	480e      	ldr	r0, [pc, #56]	; (8000aa4 <MX_GPIO_Init+0x294>)
 8000a6a:	f001 fa87 	bl	8001f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a6e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a74:	2312      	movs	r3, #18
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a80:	2304      	movs	r3, #4
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4808      	ldr	r0, [pc, #32]	; (8000aac <MX_GPIO_Init+0x29c>)
 8000a8c:	f001 fa76 	bl	8001f7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a90:	bf00      	nop
 8000a92:	3730      	adds	r7, #48	; 0x30
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40020c00 	.word	0x40020c00
 8000aa8:	40020000 	.word	0x40020000
 8000aac:	40020400 	.word	0x40020400

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <HAL_MspInit+0x4c>)
 8000acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aec:	6413      	str	r3, [r2, #64]	; 0x40
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x4c>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000afa:	2007      	movs	r0, #7
 8000afc:	f000 fe8c 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a2f      	ldr	r2, [pc, #188]	; (8000be8 <HAL_ADC_MspInit+0xdc>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d157      	bne.n	8000bde <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	613b      	str	r3, [r7, #16]
 8000b32:	4b2e      	ldr	r3, [pc, #184]	; (8000bec <HAL_ADC_MspInit+0xe0>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a2d      	ldr	r2, [pc, #180]	; (8000bec <HAL_ADC_MspInit+0xe0>)
 8000b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b2b      	ldr	r3, [pc, #172]	; (8000bec <HAL_ADC_MspInit+0xe0>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	4b27      	ldr	r3, [pc, #156]	; (8000bec <HAL_ADC_MspInit+0xe0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a26      	ldr	r2, [pc, #152]	; (8000bec <HAL_ADC_MspInit+0xe0>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b24      	ldr	r3, [pc, #144]	; (8000bec <HAL_ADC_MspInit+0xe0>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b66:	2303      	movs	r3, #3
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	481d      	ldr	r0, [pc, #116]	; (8000bf0 <HAL_ADC_MspInit+0xe4>)
 8000b7a:	f001 f9ff 	bl	8001f7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000b80:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <HAL_ADC_MspInit+0xec>)
 8000b82:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b96:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b9c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ba4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ba6:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000ba8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bb4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bbc:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bc2:	480c      	ldr	r0, [pc, #48]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000bc4:	f000 fe6a 	bl	800189c <HAL_DMA_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000bce:	f7ff ff6f 	bl	8000ab0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000bd6:	639a      	str	r2, [r3, #56]	; 0x38
 8000bd8:	4a06      	ldr	r2, [pc, #24]	; (8000bf4 <HAL_ADC_MspInit+0xe8>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	; 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40012000 	.word	0x40012000
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	200000d4 	.word	0x200000d4
 8000bf8:	40026410 	.word	0x40026410

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c48:	f000 f8d0 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <DMA2_Stream0_IRQHandler+0x10>)
 8000c56:	f000 ff27 	bl	8001aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000d4 	.word	0x200000d4

08000c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <_sbrk+0x5c>)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <_sbrk+0x60>)
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <_sbrk+0x64>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <_sbrk+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d207      	bcs.n	8000ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c94:	f002 fb9e 	bl	80033d4 <__errno>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	e009      	b.n	8000cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <_sbrk+0x64>)
 8000cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20020000 	.word	0x20020000
 8000cc4:	00000400 	.word	0x00000400
 8000cc8:	20000154 	.word	0x20000154
 8000ccc:	20000358 	.word	0x20000358

08000cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <SystemInit+0x20>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <SystemInit+0x20>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cfa:	490e      	ldr	r1, [pc, #56]	; (8000d34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cfc:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d00:	e002      	b.n	8000d08 <LoopCopyDataInit>

08000d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d06:	3304      	adds	r3, #4

08000d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d0c:	d3f9      	bcc.n	8000d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d10:	4c0b      	ldr	r4, [pc, #44]	; (8000d40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d14:	e001      	b.n	8000d1a <LoopFillZerobss>

08000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d18:	3204      	adds	r2, #4

08000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d1e:	f7ff ffd7 	bl	8000cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d22:	f002 fb5d 	bl	80033e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d26:	f7ff fc31 	bl	800058c <main>
  bx  lr    
 8000d2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d34:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d38:	08004074 	.word	0x08004074
  ldr r2, =_sbss
 8000d3c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d40:	20000354 	.word	0x20000354

08000d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d44:	e7fe      	b.n	8000d44 <ADC_IRQHandler>
	...

08000d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <HAL_Init+0x40>)
 8000d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d58:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <HAL_Init+0x40>)
 8000d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_Init+0x40>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <HAL_Init+0x40>)
 8000d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 fd51 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f000 f808 	bl	8000d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f7ff fe9e 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023c00 	.word	0x40023c00

08000d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_InitTick+0x54>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0x58>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fd69 	bl	8001882 <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00e      	b.n	8000dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d80a      	bhi.n	8000dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f000 fd31 	bl	800182e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dcc:	4a06      	ldr	r2, [pc, #24]	; (8000de8 <HAL_InitTick+0x5c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x20>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x24>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_IncTick+0x24>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000158 	.word	0x20000158

08000e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <HAL_GetTick+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000158 	.word	0x20000158

08000e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e34:	f7ff ffee 	bl	8000e14 <HAL_GetTick>
 8000e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e44:	d005      	beq.n	8000e52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e46:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <HAL_Delay+0x44>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	4413      	add	r3, r2
 8000e50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e52:	bf00      	nop
 8000e54:	f7ff ffde 	bl	8000e14 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d8f7      	bhi.n	8000e54 <HAL_Delay+0x28>
  {
  }
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008

08000e74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e033      	b.n	8000ef2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d109      	bne.n	8000ea6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff fe3a 	bl	8000b0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f003 0310 	and.w	r3, r3, #16
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d118      	bne.n	8000ee4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000eba:	f023 0302 	bic.w	r3, r3, #2
 8000ebe:	f043 0202 	orr.w	r2, r3, #2
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f000 fa58 	bl	800137c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f023 0303 	bic.w	r3, r3, #3
 8000eda:	f043 0201 	orr.w	r2, r3, #1
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ee2:	e001      	b.n	8000ee8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d101      	bne.n	8000f1a <HAL_ADC_Start_DMA+0x1e>
 8000f16:	2302      	movs	r3, #2
 8000f18:	e0ce      	b.n	80010b8 <HAL_ADC_Start_DMA+0x1bc>
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d018      	beq.n	8000f62 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0201 	orr.w	r2, r2, #1
 8000f3e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f40:	4b5f      	ldr	r3, [pc, #380]	; (80010c0 <HAL_ADC_Start_DMA+0x1c4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a5f      	ldr	r2, [pc, #380]	; (80010c4 <HAL_ADC_Start_DMA+0x1c8>)
 8000f46:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4a:	0c9a      	lsrs	r2, r3, #18
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000f54:	e002      	b.n	8000f5c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1f9      	bne.n	8000f56 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f70:	d107      	bne.n	8000f82 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f80:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	f040 8086 	bne.w	800109e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f9a:	f023 0301 	bic.w	r3, r3, #1
 8000f9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d007      	beq.n	8000fc4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fbc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fd0:	d106      	bne.n	8000fe0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f023 0206 	bic.w	r2, r3, #6
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	645a      	str	r2, [r3, #68]	; 0x44
 8000fde:	e002      	b.n	8000fe6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fee:	4b36      	ldr	r3, [pc, #216]	; (80010c8 <HAL_ADC_Start_DMA+0x1cc>)
 8000ff0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff6:	4a35      	ldr	r2, [pc, #212]	; (80010cc <HAL_ADC_Start_DMA+0x1d0>)
 8000ff8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ffe:	4a34      	ldr	r2, [pc, #208]	; (80010d0 <HAL_ADC_Start_DMA+0x1d4>)
 8001000:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001006:	4a33      	ldr	r2, [pc, #204]	; (80010d4 <HAL_ADC_Start_DMA+0x1d8>)
 8001008:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001012:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	685a      	ldr	r2, [r3, #4]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001022:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001032:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	334c      	adds	r3, #76	; 0x4c
 800103e:	4619      	mov	r1, r3
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f000 fcd8 	bl	80019f8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 031f 	and.w	r3, r3, #31
 8001050:	2b00      	cmp	r3, #0
 8001052:	d10f      	bne.n	8001074 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d129      	bne.n	80010b6 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	e020      	b.n	80010b6 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <HAL_ADC_Start_DMA+0x1dc>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d11b      	bne.n	80010b6 <HAL_ADC_Start_DMA+0x1ba>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d114      	bne.n	80010b6 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	e00b      	b.n	80010b6 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f043 0210 	orr.w	r2, r3, #16
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f043 0201 	orr.w	r2, r3, #1
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000000 	.word	0x20000000
 80010c4:	431bde83 	.word	0x431bde83
 80010c8:	40012300 	.word	0x40012300
 80010cc:	08001575 	.word	0x08001575
 80010d0:	0800162f 	.word	0x0800162f
 80010d4:	0800164b 	.word	0x0800164b
 80010d8:	40012000 	.word	0x40012000

080010dc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800112c:	2b01      	cmp	r3, #1
 800112e:	d101      	bne.n	8001134 <HAL_ADC_ConfigChannel+0x1c>
 8001130:	2302      	movs	r3, #2
 8001132:	e113      	b.n	800135c <HAL_ADC_ConfigChannel+0x244>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b09      	cmp	r3, #9
 8001142:	d925      	bls.n	8001190 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68d9      	ldr	r1, [r3, #12]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	b29b      	uxth	r3, r3
 8001150:	461a      	mov	r2, r3
 8001152:	4613      	mov	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4413      	add	r3, r2
 8001158:	3b1e      	subs	r3, #30
 800115a:	2207      	movs	r2, #7
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43da      	mvns	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	400a      	ands	r2, r1
 8001168:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68d9      	ldr	r1, [r3, #12]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	b29b      	uxth	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	4603      	mov	r3, r0
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4403      	add	r3, r0
 8001182:	3b1e      	subs	r3, #30
 8001184:	409a      	lsls	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	430a      	orrs	r2, r1
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	e022      	b.n	80011d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6919      	ldr	r1, [r3, #16]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	2207      	movs	r2, #7
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	400a      	ands	r2, r1
 80011b2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6919      	ldr	r1, [r3, #16]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	4603      	mov	r3, r0
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4403      	add	r3, r0
 80011cc:	409a      	lsls	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d824      	bhi.n	8001228 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	3b05      	subs	r3, #5
 80011f0:	221f      	movs	r2, #31
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	400a      	ands	r2, r1
 80011fe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	b29b      	uxth	r3, r3
 800120c:	4618      	mov	r0, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	3b05      	subs	r3, #5
 800121a:	fa00 f203 	lsl.w	r2, r0, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	635a      	str	r2, [r3, #52]	; 0x34
 8001226:	e04c      	b.n	80012c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b0c      	cmp	r3, #12
 800122e:	d824      	bhi.n	800127a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	3b23      	subs	r3, #35	; 0x23
 8001242:	221f      	movs	r2, #31
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43da      	mvns	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	400a      	ands	r2, r1
 8001250:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	b29b      	uxth	r3, r3
 800125e:	4618      	mov	r0, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	3b23      	subs	r3, #35	; 0x23
 800126c:	fa00 f203 	lsl.w	r2, r0, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	430a      	orrs	r2, r1
 8001276:	631a      	str	r2, [r3, #48]	; 0x30
 8001278:	e023      	b.n	80012c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	3b41      	subs	r3, #65	; 0x41
 800128c:	221f      	movs	r2, #31
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	400a      	ands	r2, r1
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	3b41      	subs	r3, #65	; 0x41
 80012b6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	430a      	orrs	r2, r1
 80012c0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012c2:	4b29      	ldr	r3, [pc, #164]	; (8001368 <HAL_ADC_ConfigChannel+0x250>)
 80012c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a28      	ldr	r2, [pc, #160]	; (800136c <HAL_ADC_ConfigChannel+0x254>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d10f      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0x1d8>
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b12      	cmp	r3, #18
 80012d6:	d10b      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a1d      	ldr	r2, [pc, #116]	; (800136c <HAL_ADC_ConfigChannel+0x254>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d12b      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x23a>
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <HAL_ADC_ConfigChannel+0x258>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d003      	beq.n	800130c <HAL_ADC_ConfigChannel+0x1f4>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b11      	cmp	r3, #17
 800130a:	d122      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a11      	ldr	r2, [pc, #68]	; (8001370 <HAL_ADC_ConfigChannel+0x258>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d111      	bne.n	8001352 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <HAL_ADC_ConfigChannel+0x25c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a11      	ldr	r2, [pc, #68]	; (8001378 <HAL_ADC_ConfigChannel+0x260>)
 8001334:	fba2 2303 	umull	r2, r3, r2, r3
 8001338:	0c9a      	lsrs	r2, r3, #18
 800133a:	4613      	mov	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001344:	e002      	b.n	800134c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	3b01      	subs	r3, #1
 800134a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f9      	bne.n	8001346 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	40012300 	.word	0x40012300
 800136c:	40012000 	.word	0x40012000
 8001370:	10000012 	.word	0x10000012
 8001374:	20000000 	.word	0x20000000
 8001378:	431bde83 	.word	0x431bde83

0800137c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001384:	4b79      	ldr	r3, [pc, #484]	; (800156c <ADC_Init+0x1f0>)
 8001386:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	431a      	orrs	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6859      	ldr	r1, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	021a      	lsls	r2, r3, #8
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6859      	ldr	r1, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6899      	ldr	r1, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140e:	4a58      	ldr	r2, [pc, #352]	; (8001570 <ADC_Init+0x1f4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d022      	beq.n	800145a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001422:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6899      	ldr	r1, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001444:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6899      	ldr	r1, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	e00f      	b.n	800147a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001468:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001478:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0202 	bic.w	r2, r2, #2
 8001488:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6899      	ldr	r1, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7e1b      	ldrb	r3, [r3, #24]
 8001494:	005a      	lsls	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d01b      	beq.n	80014e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6859      	ldr	r1, [r3, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	3b01      	subs	r3, #1
 80014d4:	035a      	lsls	r2, r3, #13
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	e007      	b.n	80014f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	3b01      	subs	r3, #1
 800150c:	051a      	lsls	r2, r3, #20
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001524:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6899      	ldr	r1, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001532:	025a      	lsls	r2, r3, #9
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800154a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6899      	ldr	r1, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	029a      	lsls	r2, r3, #10
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	609a      	str	r2, [r3, #8]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	40012300 	.word	0x40012300
 8001570:	0f000001 	.word	0x0f000001

08001574 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001580:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800158a:	2b00      	cmp	r3, #0
 800158c:	d13c      	bne.n	8001608 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d12b      	bne.n	8001600 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d127      	bne.n	8001600 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d006      	beq.n	80015cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d119      	bne.n	8001600 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0220 	bic.w	r2, r2, #32
 80015da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d105      	bne.n	8001600 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f043 0201 	orr.w	r2, r3, #1
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f7ff fd6b 	bl	80010dc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001606:	e00e      	b.n	8001626 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f7ff fd75 	bl	8001104 <HAL_ADC_ErrorCallback>
}
 800161a:	e004      	b.n	8001626 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	4798      	blx	r3
}
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b084      	sub	sp, #16
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f7ff fd57 	bl	80010f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001656:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2240      	movs	r2, #64	; 0x40
 800165c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f043 0204 	orr.w	r2, r3, #4
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f7ff fd4a 	bl	8001104 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016aa:	4a04      	ldr	r2, [pc, #16]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	60d3      	str	r3, [r2, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db0b      	blt.n	8001706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	4907      	ldr	r1, [pc, #28]	; (8001714 <__NVIC_EnableIRQ+0x38>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2001      	movs	r0, #1
 80016fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000e100 	.word	0xe000e100

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	; (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e4:	d301      	bcc.n	80017ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00f      	b.n	800180a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <SysTick_Config+0x40>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f2:	210f      	movs	r1, #15
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f7ff ff8e 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <SysTick_Config+0x40>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001802:	4b04      	ldr	r3, [pc, #16]	; (8001814 <SysTick_Config+0x40>)
 8001804:	2207      	movs	r2, #7
 8001806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	e000e010 	.word	0xe000e010

08001818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff29 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001840:	f7ff ff3e 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 8001844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff ff8e 	bl	800176c <NVIC_EncodePriority>
 8001850:	4602      	mov	r2, r0
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff5d 	bl	8001718 <__NVIC_SetPriority>
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff31 	bl	80016dc <__NVIC_EnableIRQ>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffa2 	bl	80017d4 <SysTick_Config>
 8001890:	4603      	mov	r3, r0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018a8:	f7ff fab4 	bl	8000e14 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e099      	b.n	80019ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2202      	movs	r2, #2
 80018bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d8:	e00f      	b.n	80018fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018da:	f7ff fa9b 	bl	8000e14 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	d908      	bls.n	80018fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2220      	movs	r2, #32
 80018ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2203      	movs	r2, #3
 80018f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e078      	b.n	80019ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e8      	bne.n	80018da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <HAL_DMA_Init+0x158>)
 8001914:	4013      	ands	r3, r2
 8001916:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001926:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001932:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	4313      	orrs	r3, r2
 800194a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	2b04      	cmp	r3, #4
 8001952:	d107      	bne.n	8001964 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	4313      	orrs	r3, r2
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4313      	orrs	r3, r2
 8001962:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f023 0307 	bic.w	r3, r3, #7
 800197a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	4313      	orrs	r3, r2
 8001984:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	2b04      	cmp	r3, #4
 800198c:	d117      	bne.n	80019be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4313      	orrs	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00e      	beq.n	80019be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 fa6f 	bl	8001e84 <DMA_CheckFifoParam>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2240      	movs	r2, #64	; 0x40
 80019b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019ba:	2301      	movs	r3, #1
 80019bc:	e016      	b.n	80019ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 fa26 	bl	8001e18 <DMA_CalcBaseAndBitshift>
 80019cc:	4603      	mov	r3, r0
 80019ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	223f      	movs	r2, #63	; 0x3f
 80019d6:	409a      	lsls	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	f010803f 	.word	0xf010803f

080019f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_DMA_Start_IT+0x26>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e040      	b.n	8001aa0 <HAL_DMA_Start_IT+0xa8>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d12f      	bne.n	8001a92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2202      	movs	r2, #2
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 f9b8 	bl	8001dbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a50:	223f      	movs	r2, #63	; 0x3f
 8001a52:	409a      	lsls	r2, r3
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0216 	orr.w	r2, r2, #22
 8001a66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d007      	beq.n	8001a80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0208 	orr.w	r2, r2, #8
 8001a7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0201 	orr.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	e005      	b.n	8001a9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ab4:	4b8e      	ldr	r3, [pc, #568]	; (8001cf0 <HAL_DMA_IRQHandler+0x248>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a8e      	ldr	r2, [pc, #568]	; (8001cf4 <HAL_DMA_IRQHandler+0x24c>)
 8001aba:	fba2 2303 	umull	r2, r3, r2, r3
 8001abe:	0a9b      	lsrs	r3, r3, #10
 8001ac0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad2:	2208      	movs	r2, #8
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d01a      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d013      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0204 	bic.w	r2, r2, #4
 8001afa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b00:	2208      	movs	r2, #8
 8001b02:	409a      	lsls	r2, r3
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0c:	f043 0201 	orr.w	r2, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b18:	2201      	movs	r2, #1
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d012      	beq.n	8001b4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00b      	beq.n	8001b4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b36:	2201      	movs	r2, #1
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b42:	f043 0202 	orr.w	r2, r3, #2
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4e:	2204      	movs	r2, #4
 8001b50:	409a      	lsls	r2, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d012      	beq.n	8001b80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00b      	beq.n	8001b80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b78:	f043 0204 	orr.w	r2, r3, #4
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b84:	2210      	movs	r2, #16
 8001b86:	409a      	lsls	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d043      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d03c      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba2:	2210      	movs	r2, #16
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d018      	beq.n	8001bea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d108      	bne.n	8001bd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d024      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	4798      	blx	r3
 8001bd6:	e01f      	b.n	8001c18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01b      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	4798      	blx	r3
 8001be8:	e016      	b.n	8001c18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d107      	bne.n	8001c08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0208 	bic.w	r2, r2, #8
 8001c06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	409a      	lsls	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 808f 	beq.w	8001d48 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 8087 	beq.w	8001d48 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3e:	2220      	movs	r2, #32
 8001c40:	409a      	lsls	r2, r3
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b05      	cmp	r3, #5
 8001c50:	d136      	bne.n	8001cc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0216 	bic.w	r2, r2, #22
 8001c60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695a      	ldr	r2, [r3, #20]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d103      	bne.n	8001c82 <HAL_DMA_IRQHandler+0x1da>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d007      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0208 	bic.w	r2, r2, #8
 8001c90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c96:	223f      	movs	r2, #63	; 0x3f
 8001c98:	409a      	lsls	r2, r3
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d07e      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	4798      	blx	r3
        }
        return;
 8001cbe:	e079      	b.n	8001db4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d01d      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10d      	bne.n	8001cf8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d031      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	4798      	blx	r3
 8001cec:	e02c      	b.n	8001d48 <HAL_DMA_IRQHandler+0x2a0>
 8001cee:	bf00      	nop
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d023      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	4798      	blx	r3
 8001d08:	e01e      	b.n	8001d48 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10f      	bne.n	8001d38 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0210 	bic.w	r2, r2, #16
 8001d26:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d032      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d022      	beq.n	8001da2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2205      	movs	r2, #5
 8001d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	3301      	adds	r3, #1
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d307      	bcc.n	8001d90 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f2      	bne.n	8001d74 <HAL_DMA_IRQHandler+0x2cc>
 8001d8e:	e000      	b.n	8001d92 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d90:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	4798      	blx	r3
 8001db2:	e000      	b.n	8001db6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001db4:	bf00      	nop
    }
  }
}
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b40      	cmp	r3, #64	; 0x40
 8001de8:	d108      	bne.n	8001dfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001dfa:	e007      	b.n	8001e0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	60da      	str	r2, [r3, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	3b10      	subs	r3, #16
 8001e28:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <DMA_CalcBaseAndBitshift+0x64>)
 8001e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e32:	4a13      	ldr	r2, [pc, #76]	; (8001e80 <DMA_CalcBaseAndBitshift+0x68>)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4413      	add	r3, r2
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d909      	bls.n	8001e5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e4e:	f023 0303 	bic.w	r3, r3, #3
 8001e52:	1d1a      	adds	r2, r3, #4
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	659a      	str	r2, [r3, #88]	; 0x58
 8001e58:	e007      	b.n	8001e6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e62:	f023 0303 	bic.w	r3, r3, #3
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	aaaaaaab 	.word	0xaaaaaaab
 8001e80:	0800400c 	.word	0x0800400c

08001e84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d11f      	bne.n	8001ede <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d856      	bhi.n	8001f52 <DMA_CheckFifoParam+0xce>
 8001ea4:	a201      	add	r2, pc, #4	; (adr r2, 8001eac <DMA_CheckFifoParam+0x28>)
 8001ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eaa:	bf00      	nop
 8001eac:	08001ebd 	.word	0x08001ebd
 8001eb0:	08001ecf 	.word	0x08001ecf
 8001eb4:	08001ebd 	.word	0x08001ebd
 8001eb8:	08001f53 	.word	0x08001f53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d046      	beq.n	8001f56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ecc:	e043      	b.n	8001f56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ed6:	d140      	bne.n	8001f5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001edc:	e03d      	b.n	8001f5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ee6:	d121      	bne.n	8001f2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d837      	bhi.n	8001f5e <DMA_CheckFifoParam+0xda>
 8001eee:	a201      	add	r2, pc, #4	; (adr r2, 8001ef4 <DMA_CheckFifoParam+0x70>)
 8001ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef4:	08001f05 	.word	0x08001f05
 8001ef8:	08001f0b 	.word	0x08001f0b
 8001efc:	08001f05 	.word	0x08001f05
 8001f00:	08001f1d 	.word	0x08001f1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
      break;
 8001f08:	e030      	b.n	8001f6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d025      	beq.n	8001f62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f1a:	e022      	b.n	8001f62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f24:	d11f      	bne.n	8001f66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f2a:	e01c      	b.n	8001f66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d903      	bls.n	8001f3a <DMA_CheckFifoParam+0xb6>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d003      	beq.n	8001f40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f38:	e018      	b.n	8001f6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f3e:	e015      	b.n	8001f6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00e      	beq.n	8001f6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f50:	e00b      	b.n	8001f6a <DMA_CheckFifoParam+0xe6>
      break;
 8001f52:	bf00      	nop
 8001f54:	e00a      	b.n	8001f6c <DMA_CheckFifoParam+0xe8>
      break;
 8001f56:	bf00      	nop
 8001f58:	e008      	b.n	8001f6c <DMA_CheckFifoParam+0xe8>
      break;
 8001f5a:	bf00      	nop
 8001f5c:	e006      	b.n	8001f6c <DMA_CheckFifoParam+0xe8>
      break;
 8001f5e:	bf00      	nop
 8001f60:	e004      	b.n	8001f6c <DMA_CheckFifoParam+0xe8>
      break;
 8001f62:	bf00      	nop
 8001f64:	e002      	b.n	8001f6c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f66:	bf00      	nop
 8001f68:	e000      	b.n	8001f6c <DMA_CheckFifoParam+0xe8>
      break;
 8001f6a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop

08001f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	e159      	b.n	800224c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	f040 8148 	bne.w	8002246 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d005      	beq.n	8001fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d130      	bne.n	8002030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	2203      	movs	r2, #3
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002004:	2201      	movs	r2, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 0201 	and.w	r2, r3, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	2b03      	cmp	r3, #3
 800203a:	d017      	beq.n	800206c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	2203      	movs	r2, #3
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d123      	bne.n	80020c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	08da      	lsrs	r2, r3, #3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3208      	adds	r2, #8
 8002080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	220f      	movs	r2, #15
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	69b9      	ldr	r1, [r7, #24]
 80020bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0203 	and.w	r2, r3, #3
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80a2 	beq.w	8002246 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	4b57      	ldr	r3, [pc, #348]	; (8002264 <HAL_GPIO_Init+0x2e8>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	4a56      	ldr	r2, [pc, #344]	; (8002264 <HAL_GPIO_Init+0x2e8>)
 800210c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002110:	6453      	str	r3, [r2, #68]	; 0x44
 8002112:	4b54      	ldr	r3, [pc, #336]	; (8002264 <HAL_GPIO_Init+0x2e8>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800211e:	4a52      	ldr	r2, [pc, #328]	; (8002268 <HAL_GPIO_Init+0x2ec>)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	3302      	adds	r3, #2
 8002126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	220f      	movs	r2, #15
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a49      	ldr	r2, [pc, #292]	; (800226c <HAL_GPIO_Init+0x2f0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d019      	beq.n	800217e <HAL_GPIO_Init+0x202>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a48      	ldr	r2, [pc, #288]	; (8002270 <HAL_GPIO_Init+0x2f4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d013      	beq.n	800217a <HAL_GPIO_Init+0x1fe>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a47      	ldr	r2, [pc, #284]	; (8002274 <HAL_GPIO_Init+0x2f8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00d      	beq.n	8002176 <HAL_GPIO_Init+0x1fa>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a46      	ldr	r2, [pc, #280]	; (8002278 <HAL_GPIO_Init+0x2fc>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d007      	beq.n	8002172 <HAL_GPIO_Init+0x1f6>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a45      	ldr	r2, [pc, #276]	; (800227c <HAL_GPIO_Init+0x300>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d101      	bne.n	800216e <HAL_GPIO_Init+0x1f2>
 800216a:	2304      	movs	r3, #4
 800216c:	e008      	b.n	8002180 <HAL_GPIO_Init+0x204>
 800216e:	2307      	movs	r3, #7
 8002170:	e006      	b.n	8002180 <HAL_GPIO_Init+0x204>
 8002172:	2303      	movs	r3, #3
 8002174:	e004      	b.n	8002180 <HAL_GPIO_Init+0x204>
 8002176:	2302      	movs	r3, #2
 8002178:	e002      	b.n	8002180 <HAL_GPIO_Init+0x204>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <HAL_GPIO_Init+0x204>
 800217e:	2300      	movs	r3, #0
 8002180:	69fa      	ldr	r2, [r7, #28]
 8002182:	f002 0203 	and.w	r2, r2, #3
 8002186:	0092      	lsls	r2, r2, #2
 8002188:	4093      	lsls	r3, r2
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002190:	4935      	ldr	r1, [pc, #212]	; (8002268 <HAL_GPIO_Init+0x2ec>)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	3302      	adds	r3, #2
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800219e:	4b38      	ldr	r3, [pc, #224]	; (8002280 <HAL_GPIO_Init+0x304>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021c2:	4a2f      	ldr	r2, [pc, #188]	; (8002280 <HAL_GPIO_Init+0x304>)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021c8:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <HAL_GPIO_Init+0x304>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d003      	beq.n	80021ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021ec:	4a24      	ldr	r2, [pc, #144]	; (8002280 <HAL_GPIO_Init+0x304>)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021f2:	4b23      	ldr	r3, [pc, #140]	; (8002280 <HAL_GPIO_Init+0x304>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002216:	4a1a      	ldr	r2, [pc, #104]	; (8002280 <HAL_GPIO_Init+0x304>)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800221c:	4b18      	ldr	r3, [pc, #96]	; (8002280 <HAL_GPIO_Init+0x304>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002240:	4a0f      	ldr	r2, [pc, #60]	; (8002280 <HAL_GPIO_Init+0x304>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3301      	adds	r3, #1
 800224a:	61fb      	str	r3, [r7, #28]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b0f      	cmp	r3, #15
 8002250:	f67f aea2 	bls.w	8001f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	3724      	adds	r7, #36	; 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
 8002268:	40013800 	.word	0x40013800
 800226c:	40020000 	.word	0x40020000
 8002270:	40020400 	.word	0x40020400
 8002274:	40020800 	.word	0x40020800
 8002278:	40020c00 	.word	0x40020c00
 800227c:	40021000 	.word	0x40021000
 8002280:	40013c00 	.word	0x40013c00

08002284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	807b      	strh	r3, [r7, #2]
 8002290:	4613      	mov	r3, r2
 8002292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002294:	787b      	ldrb	r3, [r7, #1]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800229a:	887a      	ldrh	r2, [r7, #2]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022a0:	e003      	b.n	80022aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022a2:	887b      	ldrh	r3, [r7, #2]
 80022a4:	041a      	lsls	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	619a      	str	r2, [r3, #24]
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b085      	sub	sp, #20
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022c8:	887a      	ldrh	r2, [r7, #2]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4013      	ands	r3, r2
 80022ce:	041a      	lsls	r2, r3, #16
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	43d9      	mvns	r1, r3
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	400b      	ands	r3, r1
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	619a      	str	r2, [r3, #24]
}
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e267      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d075      	beq.n	80023f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800230a:	4b88      	ldr	r3, [pc, #544]	; (800252c <HAL_RCC_OscConfig+0x240>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b04      	cmp	r3, #4
 8002314:	d00c      	beq.n	8002330 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002316:	4b85      	ldr	r3, [pc, #532]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231e:	2b08      	cmp	r3, #8
 8002320:	d112      	bne.n	8002348 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002322:	4b82      	ldr	r3, [pc, #520]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800232e:	d10b      	bne.n	8002348 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	4b7e      	ldr	r3, [pc, #504]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d05b      	beq.n	80023f4 <HAL_RCC_OscConfig+0x108>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d157      	bne.n	80023f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e242      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002350:	d106      	bne.n	8002360 <HAL_RCC_OscConfig+0x74>
 8002352:	4b76      	ldr	r3, [pc, #472]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a75      	ldr	r2, [pc, #468]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e01d      	b.n	800239c <HAL_RCC_OscConfig+0xb0>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x98>
 800236a:	4b70      	ldr	r3, [pc, #448]	; (800252c <HAL_RCC_OscConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a6f      	ldr	r2, [pc, #444]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4b6d      	ldr	r3, [pc, #436]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a6c      	ldr	r2, [pc, #432]	; (800252c <HAL_RCC_OscConfig+0x240>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e00b      	b.n	800239c <HAL_RCC_OscConfig+0xb0>
 8002384:	4b69      	ldr	r3, [pc, #420]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a68      	ldr	r2, [pc, #416]	; (800252c <HAL_RCC_OscConfig+0x240>)
 800238a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	4b66      	ldr	r3, [pc, #408]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a65      	ldr	r2, [pc, #404]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d013      	beq.n	80023cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7fe fd36 	bl	8000e14 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ac:	f7fe fd32 	bl	8000e14 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	; 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e207      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	4b5b      	ldr	r3, [pc, #364]	; (800252c <HAL_RCC_OscConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0xc0>
 80023ca:	e014      	b.n	80023f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7fe fd22 	bl	8000e14 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d4:	f7fe fd1e 	bl	8000e14 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	; 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1f3      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e6:	4b51      	ldr	r3, [pc, #324]	; (800252c <HAL_RCC_OscConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0xe8>
 80023f2:	e000      	b.n	80023f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d063      	beq.n	80024ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002402:	4b4a      	ldr	r3, [pc, #296]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00b      	beq.n	8002426 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240e:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002416:	2b08      	cmp	r3, #8
 8002418:	d11c      	bne.n	8002454 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241a:	4b44      	ldr	r3, [pc, #272]	; (800252c <HAL_RCC_OscConfig+0x240>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d116      	bne.n	8002454 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	4b41      	ldr	r3, [pc, #260]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_RCC_OscConfig+0x152>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d001      	beq.n	800243e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e1c7      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243e:	4b3b      	ldr	r3, [pc, #236]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4937      	ldr	r1, [pc, #220]	; (800252c <HAL_RCC_OscConfig+0x240>)
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002452:	e03a      	b.n	80024ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d020      	beq.n	800249e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245c:	4b34      	ldr	r3, [pc, #208]	; (8002530 <HAL_RCC_OscConfig+0x244>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7fe fcd7 	bl	8000e14 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800246a:	f7fe fcd3 	bl	8000e14 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e1a8      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247c:	4b2b      	ldr	r3, [pc, #172]	; (800252c <HAL_RCC_OscConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002488:	4b28      	ldr	r3, [pc, #160]	; (800252c <HAL_RCC_OscConfig+0x240>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4925      	ldr	r1, [pc, #148]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]
 800249c:	e015      	b.n	80024ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249e:	4b24      	ldr	r3, [pc, #144]	; (8002530 <HAL_RCC_OscConfig+0x244>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe fcb6 	bl	8000e14 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ac:	f7fe fcb2 	bl	8000e14 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e187      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024be:	4b1b      	ldr	r3, [pc, #108]	; (800252c <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d036      	beq.n	8002544 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d016      	beq.n	800250c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <HAL_RCC_OscConfig+0x248>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e4:	f7fe fc96 	bl	8000e14 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ec:	f7fe fc92 	bl	8000e14 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e167      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_OscConfig+0x240>)
 8002500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x200>
 800250a:	e01b      	b.n	8002544 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_RCC_OscConfig+0x248>)
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7fe fc7f 	bl	8000e14 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002518:	e00e      	b.n	8002538 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800251a:	f7fe fc7b 	bl	8000e14 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d907      	bls.n	8002538 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e150      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
 800252c:	40023800 	.word	0x40023800
 8002530:	42470000 	.word	0x42470000
 8002534:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002538:	4b88      	ldr	r3, [pc, #544]	; (800275c <HAL_RCC_OscConfig+0x470>)
 800253a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1ea      	bne.n	800251a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8097 	beq.w	8002680 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002556:	4b81      	ldr	r3, [pc, #516]	; (800275c <HAL_RCC_OscConfig+0x470>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10f      	bne.n	8002582 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	4b7d      	ldr	r3, [pc, #500]	; (800275c <HAL_RCC_OscConfig+0x470>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4a7c      	ldr	r2, [pc, #496]	; (800275c <HAL_RCC_OscConfig+0x470>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002570:	6413      	str	r3, [r2, #64]	; 0x40
 8002572:	4b7a      	ldr	r3, [pc, #488]	; (800275c <HAL_RCC_OscConfig+0x470>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257e:	2301      	movs	r3, #1
 8002580:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002582:	4b77      	ldr	r3, [pc, #476]	; (8002760 <HAL_RCC_OscConfig+0x474>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d118      	bne.n	80025c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258e:	4b74      	ldr	r3, [pc, #464]	; (8002760 <HAL_RCC_OscConfig+0x474>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a73      	ldr	r2, [pc, #460]	; (8002760 <HAL_RCC_OscConfig+0x474>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259a:	f7fe fc3b 	bl	8000e14 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a2:	f7fe fc37 	bl	8000e14 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e10c      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	4b6a      	ldr	r3, [pc, #424]	; (8002760 <HAL_RCC_OscConfig+0x474>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d106      	bne.n	80025d6 <HAL_RCC_OscConfig+0x2ea>
 80025c8:	4b64      	ldr	r3, [pc, #400]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025cc:	4a63      	ldr	r2, [pc, #396]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6713      	str	r3, [r2, #112]	; 0x70
 80025d4:	e01c      	b.n	8002610 <HAL_RCC_OscConfig+0x324>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b05      	cmp	r3, #5
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x30c>
 80025de:	4b5f      	ldr	r3, [pc, #380]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	4a5e      	ldr	r2, [pc, #376]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ea:	4b5c      	ldr	r3, [pc, #368]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ee:	4a5b      	ldr	r2, [pc, #364]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6713      	str	r3, [r2, #112]	; 0x70
 80025f6:	e00b      	b.n	8002610 <HAL_RCC_OscConfig+0x324>
 80025f8:	4b58      	ldr	r3, [pc, #352]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	4a57      	ldr	r2, [pc, #348]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80025fe:	f023 0301 	bic.w	r3, r3, #1
 8002602:	6713      	str	r3, [r2, #112]	; 0x70
 8002604:	4b55      	ldr	r3, [pc, #340]	; (800275c <HAL_RCC_OscConfig+0x470>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	4a54      	ldr	r2, [pc, #336]	; (800275c <HAL_RCC_OscConfig+0x470>)
 800260a:	f023 0304 	bic.w	r3, r3, #4
 800260e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d015      	beq.n	8002644 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7fe fbfc 	bl	8000e14 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261e:	e00a      	b.n	8002636 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002620:	f7fe fbf8 	bl	8000e14 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	; 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e0cb      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002636:	4b49      	ldr	r3, [pc, #292]	; (800275c <HAL_RCC_OscConfig+0x470>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0ee      	beq.n	8002620 <HAL_RCC_OscConfig+0x334>
 8002642:	e014      	b.n	800266e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002644:	f7fe fbe6 	bl	8000e14 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264a:	e00a      	b.n	8002662 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264c:	f7fe fbe2 	bl	8000e14 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f241 3288 	movw	r2, #5000	; 0x1388
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e0b5      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002662:	4b3e      	ldr	r3, [pc, #248]	; (800275c <HAL_RCC_OscConfig+0x470>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1ee      	bne.n	800264c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800266e:	7dfb      	ldrb	r3, [r7, #23]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d105      	bne.n	8002680 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002674:	4b39      	ldr	r3, [pc, #228]	; (800275c <HAL_RCC_OscConfig+0x470>)
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002678:	4a38      	ldr	r2, [pc, #224]	; (800275c <HAL_RCC_OscConfig+0x470>)
 800267a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800267e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 80a1 	beq.w	80027cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800268a:	4b34      	ldr	r3, [pc, #208]	; (800275c <HAL_RCC_OscConfig+0x470>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b08      	cmp	r3, #8
 8002694:	d05c      	beq.n	8002750 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d141      	bne.n	8002722 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	4b31      	ldr	r3, [pc, #196]	; (8002764 <HAL_RCC_OscConfig+0x478>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe fbb6 	bl	8000e14 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ac:	f7fe fbb2 	bl	8000e14 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e087      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026be:	4b27      	ldr	r3, [pc, #156]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	019b      	lsls	r3, r3, #6
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	3b01      	subs	r3, #1
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	061b      	lsls	r3, r3, #24
 80026ee:	491b      	ldr	r1, [pc, #108]	; (800275c <HAL_RCC_OscConfig+0x470>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <HAL_RCC_OscConfig+0x478>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7fe fb8b 	bl	8000e14 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002702:	f7fe fb87 	bl	8000e14 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e05c      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_RCC_OscConfig+0x470>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x416>
 8002720:	e054      	b.n	80027cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b10      	ldr	r3, [pc, #64]	; (8002764 <HAL_RCC_OscConfig+0x478>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe fb74 	bl	8000e14 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002730:	f7fe fb70 	bl	8000e14 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e045      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_RCC_OscConfig+0x470>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x444>
 800274e:	e03d      	b.n	80027cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d107      	bne.n	8002768 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e038      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
 800275c:	40023800 	.word	0x40023800
 8002760:	40007000 	.word	0x40007000
 8002764:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_RCC_OscConfig+0x4ec>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d028      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d121      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d11a      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002798:	4013      	ands	r3, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800279e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d111      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	085b      	lsrs	r3, r3, #1
 80027b0:	3b01      	subs	r3, #1
 80027b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d107      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800

080027dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0cc      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f0:	4b68      	ldr	r3, [pc, #416]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d90c      	bls.n	8002818 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b65      	ldr	r3, [pc, #404]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b63      	ldr	r3, [pc, #396]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0b8      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d020      	beq.n	8002866 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002830:	4b59      	ldr	r3, [pc, #356]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a58      	ldr	r2, [pc, #352]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800283a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002848:	4b53      	ldr	r3, [pc, #332]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4a52      	ldr	r2, [pc, #328]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002852:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002854:	4b50      	ldr	r3, [pc, #320]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	494d      	ldr	r1, [pc, #308]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d044      	beq.n	80028fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b47      	ldr	r3, [pc, #284]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d119      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e07f      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d003      	beq.n	800289a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002896:	2b03      	cmp	r3, #3
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289a:	4b3f      	ldr	r3, [pc, #252]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e06f      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028aa:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e067      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ba:	4b37      	ldr	r3, [pc, #220]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f023 0203 	bic.w	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4934      	ldr	r1, [pc, #208]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028cc:	f7fe faa2 	bl	8000e14 <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d4:	f7fe fa9e 	bl	8000e14 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e04f      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 020c 	and.w	r2, r3, #12
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d1eb      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028fc:	4b25      	ldr	r3, [pc, #148]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d20c      	bcs.n	8002924 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b22      	ldr	r3, [pc, #136]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b20      	ldr	r3, [pc, #128]	; (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e032      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002930:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4916      	ldr	r1, [pc, #88]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800294e:	4b12      	ldr	r3, [pc, #72]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	490e      	ldr	r1, [pc, #56]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002962:	f000 f821 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8002966:	4602      	mov	r2, r0
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	490a      	ldr	r1, [pc, #40]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	5ccb      	ldrb	r3, [r1, r3]
 8002976:	fa22 f303 	lsr.w	r3, r2, r3
 800297a:	4a09      	ldr	r2, [pc, #36]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fa02 	bl	8000d8c <HAL_InitTick>

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023c00 	.word	0x40023c00
 8002998:	40023800 	.word	0x40023800
 800299c:	08003ffc 	.word	0x08003ffc
 80029a0:	20000000 	.word	0x20000000
 80029a4:	20000004 	.word	0x20000004

080029a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029ac:	b094      	sub	sp, #80	; 0x50
 80029ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	647b      	str	r3, [r7, #68]	; 0x44
 80029b4:	2300      	movs	r3, #0
 80029b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029b8:	2300      	movs	r3, #0
 80029ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029c0:	4b79      	ldr	r3, [pc, #484]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d00d      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x40>
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	f200 80e1 	bhi.w	8002b94 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x34>
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029da:	e0db      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029dc:	4b73      	ldr	r3, [pc, #460]	; (8002bac <HAL_RCC_GetSysClockFreq+0x204>)
 80029de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029e0:	e0db      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029e2:	4b73      	ldr	r3, [pc, #460]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x208>)
 80029e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029e6:	e0d8      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029e8:	4b6f      	ldr	r3, [pc, #444]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029f2:	4b6d      	ldr	r3, [pc, #436]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d063      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fe:	4b6a      	ldr	r3, [pc, #424]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	099b      	lsrs	r3, r3, #6
 8002a04:	2200      	movs	r2, #0
 8002a06:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a10:	633b      	str	r3, [r7, #48]	; 0x30
 8002a12:	2300      	movs	r3, #0
 8002a14:	637b      	str	r3, [r7, #52]	; 0x34
 8002a16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a1a:	4622      	mov	r2, r4
 8002a1c:	462b      	mov	r3, r5
 8002a1e:	f04f 0000 	mov.w	r0, #0
 8002a22:	f04f 0100 	mov.w	r1, #0
 8002a26:	0159      	lsls	r1, r3, #5
 8002a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a2c:	0150      	lsls	r0, r2, #5
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4621      	mov	r1, r4
 8002a34:	1a51      	subs	r1, r2, r1
 8002a36:	6139      	str	r1, [r7, #16]
 8002a38:	4629      	mov	r1, r5
 8002a3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a4c:	4659      	mov	r1, fp
 8002a4e:	018b      	lsls	r3, r1, #6
 8002a50:	4651      	mov	r1, sl
 8002a52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a56:	4651      	mov	r1, sl
 8002a58:	018a      	lsls	r2, r1, #6
 8002a5a:	4651      	mov	r1, sl
 8002a5c:	ebb2 0801 	subs.w	r8, r2, r1
 8002a60:	4659      	mov	r1, fp
 8002a62:	eb63 0901 	sbc.w	r9, r3, r1
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a7a:	4690      	mov	r8, r2
 8002a7c:	4699      	mov	r9, r3
 8002a7e:	4623      	mov	r3, r4
 8002a80:	eb18 0303 	adds.w	r3, r8, r3
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	462b      	mov	r3, r5
 8002a88:	eb49 0303 	adc.w	r3, r9, r3
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	024b      	lsls	r3, r1, #9
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002aa4:	4621      	mov	r1, r4
 8002aa6:	024a      	lsls	r2, r1, #9
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aae:	2200      	movs	r2, #0
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ab4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ab8:	f7fd fbea 	bl	8000290 <__aeabi_uldivmod>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac4:	e058      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ac6:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	099b      	lsrs	r3, r3, #6
 8002acc:	2200      	movs	r2, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
 8002adc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ae0:	4642      	mov	r2, r8
 8002ae2:	464b      	mov	r3, r9
 8002ae4:	f04f 0000 	mov.w	r0, #0
 8002ae8:	f04f 0100 	mov.w	r1, #0
 8002aec:	0159      	lsls	r1, r3, #5
 8002aee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002af2:	0150      	lsls	r0, r2, #5
 8002af4:	4602      	mov	r2, r0
 8002af6:	460b      	mov	r3, r1
 8002af8:	4641      	mov	r1, r8
 8002afa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002afe:	4649      	mov	r1, r9
 8002b00:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b18:	ebb2 040a 	subs.w	r4, r2, sl
 8002b1c:	eb63 050b 	sbc.w	r5, r3, fp
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	00eb      	lsls	r3, r5, #3
 8002b2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b2e:	00e2      	lsls	r2, r4, #3
 8002b30:	4614      	mov	r4, r2
 8002b32:	461d      	mov	r5, r3
 8002b34:	4643      	mov	r3, r8
 8002b36:	18e3      	adds	r3, r4, r3
 8002b38:	603b      	str	r3, [r7, #0]
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	eb45 0303 	adc.w	r3, r5, r3
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	f04f 0300 	mov.w	r3, #0
 8002b4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b4e:	4629      	mov	r1, r5
 8002b50:	028b      	lsls	r3, r1, #10
 8002b52:	4621      	mov	r1, r4
 8002b54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b58:	4621      	mov	r1, r4
 8002b5a:	028a      	lsls	r2, r1, #10
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b62:	2200      	movs	r2, #0
 8002b64:	61bb      	str	r3, [r7, #24]
 8002b66:	61fa      	str	r2, [r7, #28]
 8002b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b6c:	f7fd fb90 	bl	8000290 <__aeabi_uldivmod>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4613      	mov	r3, r2
 8002b76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	0c1b      	lsrs	r3, r3, #16
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	3301      	adds	r3, #1
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b92:	e002      	b.n	8002b9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_RCC_GetSysClockFreq+0x204>)
 8002b96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3750      	adds	r7, #80	; 0x50
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	00f42400 	.word	0x00f42400
 8002bb0:	007a1200 	.word	0x007a1200

08002bb4 <findslot>:
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <findslot+0x2c>)
 8002bb6:	b510      	push	{r4, lr}
 8002bb8:	4604      	mov	r4, r0
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	b118      	cbz	r0, 8002bc6 <findslot+0x12>
 8002bbe:	6a03      	ldr	r3, [r0, #32]
 8002bc0:	b90b      	cbnz	r3, 8002bc6 <findslot+0x12>
 8002bc2:	f000 fb25 	bl	8003210 <__sinit>
 8002bc6:	2c13      	cmp	r4, #19
 8002bc8:	d807      	bhi.n	8002bda <findslot+0x26>
 8002bca:	4806      	ldr	r0, [pc, #24]	; (8002be4 <findslot+0x30>)
 8002bcc:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002bd0:	3201      	adds	r2, #1
 8002bd2:	d002      	beq.n	8002bda <findslot+0x26>
 8002bd4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002bd8:	bd10      	pop	{r4, pc}
 8002bda:	2000      	movs	r0, #0
 8002bdc:	e7fc      	b.n	8002bd8 <findslot+0x24>
 8002bde:	bf00      	nop
 8002be0:	2000006c 	.word	0x2000006c
 8002be4:	20000168 	.word	0x20000168

08002be8 <error>:
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bea:	4604      	mov	r4, r0
 8002bec:	f000 fbf2 	bl	80033d4 <__errno>
 8002bf0:	2613      	movs	r6, #19
 8002bf2:	4605      	mov	r5, r0
 8002bf4:	2700      	movs	r7, #0
 8002bf6:	4630      	mov	r0, r6
 8002bf8:	4639      	mov	r1, r7
 8002bfa:	beab      	bkpt	0x00ab
 8002bfc:	4606      	mov	r6, r0
 8002bfe:	602e      	str	r6, [r5, #0]
 8002c00:	4620      	mov	r0, r4
 8002c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c04 <checkerror>:
 8002c04:	1c43      	adds	r3, r0, #1
 8002c06:	d101      	bne.n	8002c0c <checkerror+0x8>
 8002c08:	f7ff bfee 	b.w	8002be8 <error>
 8002c0c:	4770      	bx	lr

08002c0e <_swiread>:
 8002c0e:	b530      	push	{r4, r5, lr}
 8002c10:	b085      	sub	sp, #20
 8002c12:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002c16:	9203      	str	r2, [sp, #12]
 8002c18:	2406      	movs	r4, #6
 8002c1a:	ad01      	add	r5, sp, #4
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	4629      	mov	r1, r5
 8002c20:	beab      	bkpt	0x00ab
 8002c22:	4604      	mov	r4, r0
 8002c24:	4620      	mov	r0, r4
 8002c26:	f7ff ffed 	bl	8002c04 <checkerror>
 8002c2a:	b005      	add	sp, #20
 8002c2c:	bd30      	pop	{r4, r5, pc}

08002c2e <_read>:
 8002c2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c30:	4615      	mov	r5, r2
 8002c32:	9101      	str	r1, [sp, #4]
 8002c34:	f7ff ffbe 	bl	8002bb4 <findslot>
 8002c38:	9901      	ldr	r1, [sp, #4]
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	b938      	cbnz	r0, 8002c4e <_read+0x20>
 8002c3e:	f000 fbc9 	bl	80033d4 <__errno>
 8002c42:	2309      	movs	r3, #9
 8002c44:	6003      	str	r3, [r0, #0]
 8002c46:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4a:	b003      	add	sp, #12
 8002c4c:	bd30      	pop	{r4, r5, pc}
 8002c4e:	6800      	ldr	r0, [r0, #0]
 8002c50:	462a      	mov	r2, r5
 8002c52:	f7ff ffdc 	bl	8002c0e <_swiread>
 8002c56:	1c43      	adds	r3, r0, #1
 8002c58:	d0f7      	beq.n	8002c4a <_read+0x1c>
 8002c5a:	6863      	ldr	r3, [r4, #4]
 8002c5c:	1a2a      	subs	r2, r5, r0
 8002c5e:	4413      	add	r3, r2
 8002c60:	6063      	str	r3, [r4, #4]
 8002c62:	4610      	mov	r0, r2
 8002c64:	e7f1      	b.n	8002c4a <_read+0x1c>

08002c66 <_swilseek>:
 8002c66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c68:	460c      	mov	r4, r1
 8002c6a:	4616      	mov	r6, r2
 8002c6c:	f7ff ffa2 	bl	8002bb4 <findslot>
 8002c70:	4605      	mov	r5, r0
 8002c72:	b940      	cbnz	r0, 8002c86 <_swilseek+0x20>
 8002c74:	f000 fbae 	bl	80033d4 <__errno>
 8002c78:	2309      	movs	r3, #9
 8002c7a:	6003      	str	r3, [r0, #0]
 8002c7c:	f04f 34ff 	mov.w	r4, #4294967295
 8002c80:	4620      	mov	r0, r4
 8002c82:	b003      	add	sp, #12
 8002c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c86:	2e02      	cmp	r6, #2
 8002c88:	d903      	bls.n	8002c92 <_swilseek+0x2c>
 8002c8a:	f000 fba3 	bl	80033d4 <__errno>
 8002c8e:	2316      	movs	r3, #22
 8002c90:	e7f3      	b.n	8002c7a <_swilseek+0x14>
 8002c92:	2e01      	cmp	r6, #1
 8002c94:	d112      	bne.n	8002cbc <_swilseek+0x56>
 8002c96:	6843      	ldr	r3, [r0, #4]
 8002c98:	18e4      	adds	r4, r4, r3
 8002c9a:	d4f6      	bmi.n	8002c8a <_swilseek+0x24>
 8002c9c:	682b      	ldr	r3, [r5, #0]
 8002c9e:	260a      	movs	r6, #10
 8002ca0:	e9cd 3400 	strd	r3, r4, [sp]
 8002ca4:	466f      	mov	r7, sp
 8002ca6:	4630      	mov	r0, r6
 8002ca8:	4639      	mov	r1, r7
 8002caa:	beab      	bkpt	0x00ab
 8002cac:	4606      	mov	r6, r0
 8002cae:	4630      	mov	r0, r6
 8002cb0:	f7ff ffa8 	bl	8002c04 <checkerror>
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	dbe1      	blt.n	8002c7c <_swilseek+0x16>
 8002cb8:	606c      	str	r4, [r5, #4]
 8002cba:	e7e1      	b.n	8002c80 <_swilseek+0x1a>
 8002cbc:	2e02      	cmp	r6, #2
 8002cbe:	6803      	ldr	r3, [r0, #0]
 8002cc0:	d1ec      	bne.n	8002c9c <_swilseek+0x36>
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	260c      	movs	r6, #12
 8002cc6:	466f      	mov	r7, sp
 8002cc8:	4630      	mov	r0, r6
 8002cca:	4639      	mov	r1, r7
 8002ccc:	beab      	bkpt	0x00ab
 8002cce:	4606      	mov	r6, r0
 8002cd0:	4630      	mov	r0, r6
 8002cd2:	f7ff ff97 	bl	8002c04 <checkerror>
 8002cd6:	1c43      	adds	r3, r0, #1
 8002cd8:	d0d0      	beq.n	8002c7c <_swilseek+0x16>
 8002cda:	4404      	add	r4, r0
 8002cdc:	e7de      	b.n	8002c9c <_swilseek+0x36>

08002cde <_lseek>:
 8002cde:	f7ff bfc2 	b.w	8002c66 <_swilseek>

08002ce2 <_swiwrite>:
 8002ce2:	b530      	push	{r4, r5, lr}
 8002ce4:	b085      	sub	sp, #20
 8002ce6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002cea:	9203      	str	r2, [sp, #12]
 8002cec:	2405      	movs	r4, #5
 8002cee:	ad01      	add	r5, sp, #4
 8002cf0:	4620      	mov	r0, r4
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	beab      	bkpt	0x00ab
 8002cf6:	4604      	mov	r4, r0
 8002cf8:	4620      	mov	r0, r4
 8002cfa:	f7ff ff83 	bl	8002c04 <checkerror>
 8002cfe:	b005      	add	sp, #20
 8002d00:	bd30      	pop	{r4, r5, pc}

08002d02 <_write>:
 8002d02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d04:	4615      	mov	r5, r2
 8002d06:	9101      	str	r1, [sp, #4]
 8002d08:	f7ff ff54 	bl	8002bb4 <findslot>
 8002d0c:	9901      	ldr	r1, [sp, #4]
 8002d0e:	4604      	mov	r4, r0
 8002d10:	b930      	cbnz	r0, 8002d20 <_write+0x1e>
 8002d12:	f000 fb5f 	bl	80033d4 <__errno>
 8002d16:	2309      	movs	r3, #9
 8002d18:	6003      	str	r3, [r0, #0]
 8002d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1e:	e012      	b.n	8002d46 <_write+0x44>
 8002d20:	6800      	ldr	r0, [r0, #0]
 8002d22:	462a      	mov	r2, r5
 8002d24:	f7ff ffdd 	bl	8002ce2 <_swiwrite>
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	dbf6      	blt.n	8002d1a <_write+0x18>
 8002d2c:	6862      	ldr	r2, [r4, #4]
 8002d2e:	1a2b      	subs	r3, r5, r0
 8002d30:	441a      	add	r2, r3
 8002d32:	42a8      	cmp	r0, r5
 8002d34:	6062      	str	r2, [r4, #4]
 8002d36:	d105      	bne.n	8002d44 <_write+0x42>
 8002d38:	2000      	movs	r0, #0
 8002d3a:	b003      	add	sp, #12
 8002d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d40:	f7ff bf52 	b.w	8002be8 <error>
 8002d44:	4618      	mov	r0, r3
 8002d46:	b003      	add	sp, #12
 8002d48:	bd30      	pop	{r4, r5, pc}

08002d4a <_swiclose>:
 8002d4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d4c:	2402      	movs	r4, #2
 8002d4e:	9001      	str	r0, [sp, #4]
 8002d50:	ad01      	add	r5, sp, #4
 8002d52:	4620      	mov	r0, r4
 8002d54:	4629      	mov	r1, r5
 8002d56:	beab      	bkpt	0x00ab
 8002d58:	4604      	mov	r4, r0
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7ff ff52 	bl	8002c04 <checkerror>
 8002d60:	b003      	add	sp, #12
 8002d62:	bd30      	pop	{r4, r5, pc}

08002d64 <_close>:
 8002d64:	b538      	push	{r3, r4, r5, lr}
 8002d66:	4605      	mov	r5, r0
 8002d68:	f7ff ff24 	bl	8002bb4 <findslot>
 8002d6c:	4604      	mov	r4, r0
 8002d6e:	b930      	cbnz	r0, 8002d7e <_close+0x1a>
 8002d70:	f000 fb30 	bl	80033d4 <__errno>
 8002d74:	2309      	movs	r3, #9
 8002d76:	6003      	str	r3, [r0, #0]
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	bd38      	pop	{r3, r4, r5, pc}
 8002d7e:	3d01      	subs	r5, #1
 8002d80:	2d01      	cmp	r5, #1
 8002d82:	d809      	bhi.n	8002d98 <_close+0x34>
 8002d84:	4b09      	ldr	r3, [pc, #36]	; (8002dac <_close+0x48>)
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d104      	bne.n	8002d98 <_close+0x34>
 8002d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d92:	6003      	str	r3, [r0, #0]
 8002d94:	2000      	movs	r0, #0
 8002d96:	e7f1      	b.n	8002d7c <_close+0x18>
 8002d98:	6820      	ldr	r0, [r4, #0]
 8002d9a:	f7ff ffd6 	bl	8002d4a <_swiclose>
 8002d9e:	2800      	cmp	r0, #0
 8002da0:	d1ec      	bne.n	8002d7c <_close+0x18>
 8002da2:	f04f 33ff 	mov.w	r3, #4294967295
 8002da6:	6023      	str	r3, [r4, #0]
 8002da8:	e7e8      	b.n	8002d7c <_close+0x18>
 8002daa:	bf00      	nop
 8002dac:	20000168 	.word	0x20000168

08002db0 <_swistat>:
 8002db0:	b570      	push	{r4, r5, r6, lr}
 8002db2:	460c      	mov	r4, r1
 8002db4:	f7ff fefe 	bl	8002bb4 <findslot>
 8002db8:	4605      	mov	r5, r0
 8002dba:	b930      	cbnz	r0, 8002dca <_swistat+0x1a>
 8002dbc:	f000 fb0a 	bl	80033d4 <__errno>
 8002dc0:	2309      	movs	r3, #9
 8002dc2:	6003      	str	r3, [r0, #0]
 8002dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc8:	bd70      	pop	{r4, r5, r6, pc}
 8002dca:	6863      	ldr	r3, [r4, #4]
 8002dcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002dd0:	6063      	str	r3, [r4, #4]
 8002dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dd6:	64a3      	str	r3, [r4, #72]	; 0x48
 8002dd8:	260c      	movs	r6, #12
 8002dda:	4630      	mov	r0, r6
 8002ddc:	4629      	mov	r1, r5
 8002dde:	beab      	bkpt	0x00ab
 8002de0:	4605      	mov	r5, r0
 8002de2:	4628      	mov	r0, r5
 8002de4:	f7ff ff0e 	bl	8002c04 <checkerror>
 8002de8:	1c43      	adds	r3, r0, #1
 8002dea:	bf1c      	itt	ne
 8002dec:	6120      	strne	r0, [r4, #16]
 8002dee:	2000      	movne	r0, #0
 8002df0:	e7ea      	b.n	8002dc8 <_swistat+0x18>

08002df2 <_fstat>:
 8002df2:	460b      	mov	r3, r1
 8002df4:	b510      	push	{r4, lr}
 8002df6:	2100      	movs	r1, #0
 8002df8:	4604      	mov	r4, r0
 8002dfa:	2258      	movs	r2, #88	; 0x58
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 fa9a 	bl	8003336 <memset>
 8002e02:	4601      	mov	r1, r0
 8002e04:	4620      	mov	r0, r4
 8002e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e0a:	f7ff bfd1 	b.w	8002db0 <_swistat>

08002e0e <_stat>:
 8002e0e:	b538      	push	{r3, r4, r5, lr}
 8002e10:	460d      	mov	r5, r1
 8002e12:	4604      	mov	r4, r0
 8002e14:	2258      	movs	r2, #88	; 0x58
 8002e16:	2100      	movs	r1, #0
 8002e18:	4628      	mov	r0, r5
 8002e1a:	f000 fa8c 	bl	8003336 <memset>
 8002e1e:	4620      	mov	r0, r4
 8002e20:	2100      	movs	r1, #0
 8002e22:	f000 f811 	bl	8002e48 <_swiopen>
 8002e26:	1c43      	adds	r3, r0, #1
 8002e28:	4604      	mov	r4, r0
 8002e2a:	d00b      	beq.n	8002e44 <_stat+0x36>
 8002e2c:	686b      	ldr	r3, [r5, #4]
 8002e2e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002e32:	606b      	str	r3, [r5, #4]
 8002e34:	4629      	mov	r1, r5
 8002e36:	f7ff ffbb 	bl	8002db0 <_swistat>
 8002e3a:	4605      	mov	r5, r0
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f7ff ff91 	bl	8002d64 <_close>
 8002e42:	462c      	mov	r4, r5
 8002e44:	4620      	mov	r0, r4
 8002e46:	bd38      	pop	{r3, r4, r5, pc}

08002e48 <_swiopen>:
 8002e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e4c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002ef8 <_swiopen+0xb0>
 8002e50:	b097      	sub	sp, #92	; 0x5c
 8002e52:	4607      	mov	r7, r0
 8002e54:	460e      	mov	r6, r1
 8002e56:	2500      	movs	r5, #0
 8002e58:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8002e5c:	1c61      	adds	r1, r4, #1
 8002e5e:	d037      	beq.n	8002ed0 <_swiopen+0x88>
 8002e60:	3501      	adds	r5, #1
 8002e62:	2d14      	cmp	r5, #20
 8002e64:	d1f8      	bne.n	8002e58 <_swiopen+0x10>
 8002e66:	f000 fab5 	bl	80033d4 <__errno>
 8002e6a:	2318      	movs	r3, #24
 8002e6c:	6003      	str	r3, [r0, #0]
 8002e6e:	f04f 34ff 	mov.w	r4, #4294967295
 8002e72:	e03d      	b.n	8002ef0 <_swiopen+0xa8>
 8002e74:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002e78:	f240 6301 	movw	r3, #1537	; 0x601
 8002e7c:	07b2      	lsls	r2, r6, #30
 8002e7e:	bf48      	it	mi
 8002e80:	f044 0402 	orrmi.w	r4, r4, #2
 8002e84:	421e      	tst	r6, r3
 8002e86:	bf18      	it	ne
 8002e88:	f044 0404 	orrne.w	r4, r4, #4
 8002e8c:	0733      	lsls	r3, r6, #28
 8002e8e:	bf48      	it	mi
 8002e90:	f024 0404 	bicmi.w	r4, r4, #4
 8002e94:	4638      	mov	r0, r7
 8002e96:	bf48      	it	mi
 8002e98:	f044 0408 	orrmi.w	r4, r4, #8
 8002e9c:	9700      	str	r7, [sp, #0]
 8002e9e:	f7fd f99f 	bl	80001e0 <strlen>
 8002ea2:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002ea6:	2401      	movs	r4, #1
 8002ea8:	4620      	mov	r0, r4
 8002eaa:	4649      	mov	r1, r9
 8002eac:	beab      	bkpt	0x00ab
 8002eae:	4604      	mov	r4, r0
 8002eb0:	2c00      	cmp	r4, #0
 8002eb2:	db08      	blt.n	8002ec6 <_swiopen+0x7e>
 8002eb4:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002eb8:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f8c8 3004 	str.w	r3, [r8, #4]
 8002ec2:	462c      	mov	r4, r5
 8002ec4:	e014      	b.n	8002ef0 <_swiopen+0xa8>
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	f7ff fe8e 	bl	8002be8 <error>
 8002ecc:	4604      	mov	r4, r0
 8002ece:	e00f      	b.n	8002ef0 <_swiopen+0xa8>
 8002ed0:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002ed4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002ed8:	46e9      	mov	r9, sp
 8002eda:	d1cb      	bne.n	8002e74 <_swiopen+0x2c>
 8002edc:	4649      	mov	r1, r9
 8002ede:	4638      	mov	r0, r7
 8002ee0:	f7ff ff95 	bl	8002e0e <_stat>
 8002ee4:	3001      	adds	r0, #1
 8002ee6:	d0c5      	beq.n	8002e74 <_swiopen+0x2c>
 8002ee8:	f000 fa74 	bl	80033d4 <__errno>
 8002eec:	2311      	movs	r3, #17
 8002eee:	6003      	str	r3, [r0, #0]
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	b017      	add	sp, #92	; 0x5c
 8002ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ef8:	20000168 	.word	0x20000168

08002efc <_get_semihosting_exts>:
 8002efc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002f00:	4606      	mov	r6, r0
 8002f02:	460f      	mov	r7, r1
 8002f04:	482a      	ldr	r0, [pc, #168]	; (8002fb0 <_get_semihosting_exts+0xb4>)
 8002f06:	2100      	movs	r1, #0
 8002f08:	4615      	mov	r5, r2
 8002f0a:	f7ff ff9d 	bl	8002e48 <_swiopen>
 8002f0e:	462a      	mov	r2, r5
 8002f10:	4604      	mov	r4, r0
 8002f12:	2100      	movs	r1, #0
 8002f14:	4630      	mov	r0, r6
 8002f16:	f000 fa0e 	bl	8003336 <memset>
 8002f1a:	1c63      	adds	r3, r4, #1
 8002f1c:	d016      	beq.n	8002f4c <_get_semihosting_exts+0x50>
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f7ff fe48 	bl	8002bb4 <findslot>
 8002f24:	f04f 080c 	mov.w	r8, #12
 8002f28:	4681      	mov	r9, r0
 8002f2a:	4640      	mov	r0, r8
 8002f2c:	4649      	mov	r1, r9
 8002f2e:	beab      	bkpt	0x00ab
 8002f30:	4680      	mov	r8, r0
 8002f32:	4640      	mov	r0, r8
 8002f34:	f7ff fe66 	bl	8002c04 <checkerror>
 8002f38:	2803      	cmp	r0, #3
 8002f3a:	dd02      	ble.n	8002f42 <_get_semihosting_exts+0x46>
 8002f3c:	1ec3      	subs	r3, r0, #3
 8002f3e:	42ab      	cmp	r3, r5
 8002f40:	dc08      	bgt.n	8002f54 <_get_semihosting_exts+0x58>
 8002f42:	4620      	mov	r0, r4
 8002f44:	f7ff ff0e 	bl	8002d64 <_close>
 8002f48:	f04f 34ff 	mov.w	r4, #4294967295
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	b003      	add	sp, #12
 8002f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f54:	2204      	movs	r2, #4
 8002f56:	eb0d 0102 	add.w	r1, sp, r2
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f7ff fe67 	bl	8002c2e <_read>
 8002f60:	2803      	cmp	r0, #3
 8002f62:	ddee      	ble.n	8002f42 <_get_semihosting_exts+0x46>
 8002f64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f68:	2b53      	cmp	r3, #83	; 0x53
 8002f6a:	d1ea      	bne.n	8002f42 <_get_semihosting_exts+0x46>
 8002f6c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002f70:	2b48      	cmp	r3, #72	; 0x48
 8002f72:	d1e6      	bne.n	8002f42 <_get_semihosting_exts+0x46>
 8002f74:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002f78:	2b46      	cmp	r3, #70	; 0x46
 8002f7a:	d1e2      	bne.n	8002f42 <_get_semihosting_exts+0x46>
 8002f7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002f80:	2b42      	cmp	r3, #66	; 0x42
 8002f82:	d1de      	bne.n	8002f42 <_get_semihosting_exts+0x46>
 8002f84:	2201      	movs	r2, #1
 8002f86:	4639      	mov	r1, r7
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f7ff fe6c 	bl	8002c66 <_swilseek>
 8002f8e:	2800      	cmp	r0, #0
 8002f90:	dbd7      	blt.n	8002f42 <_get_semihosting_exts+0x46>
 8002f92:	462a      	mov	r2, r5
 8002f94:	4631      	mov	r1, r6
 8002f96:	4620      	mov	r0, r4
 8002f98:	f7ff fe49 	bl	8002c2e <_read>
 8002f9c:	4605      	mov	r5, r0
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f7ff fee0 	bl	8002d64 <_close>
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	f7ff fe2d 	bl	8002c04 <checkerror>
 8002faa:	4604      	mov	r4, r0
 8002fac:	e7ce      	b.n	8002f4c <_get_semihosting_exts+0x50>
 8002fae:	bf00      	nop
 8002fb0:	08004014 	.word	0x08004014

08002fb4 <initialise_semihosting_exts>:
 8002fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fb6:	4d0a      	ldr	r5, [pc, #40]	; (8002fe0 <initialise_semihosting_exts+0x2c>)
 8002fb8:	4c0a      	ldr	r4, [pc, #40]	; (8002fe4 <initialise_semihosting_exts+0x30>)
 8002fba:	2100      	movs	r1, #0
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	a801      	add	r0, sp, #4
 8002fc0:	6029      	str	r1, [r5, #0]
 8002fc2:	6022      	str	r2, [r4, #0]
 8002fc4:	f7ff ff9a 	bl	8002efc <_get_semihosting_exts>
 8002fc8:	2800      	cmp	r0, #0
 8002fca:	dd07      	ble.n	8002fdc <initialise_semihosting_exts+0x28>
 8002fcc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002fd0:	f003 0201 	and.w	r2, r3, #1
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	602a      	str	r2, [r5, #0]
 8002fda:	6023      	str	r3, [r4, #0]
 8002fdc:	b003      	add	sp, #12
 8002fde:	bd30      	pop	{r4, r5, pc}
 8002fe0:	2000000c 	.word	0x2000000c
 8002fe4:	20000010 	.word	0x20000010

08002fe8 <_has_ext_stdout_stderr>:
 8002fe8:	b510      	push	{r4, lr}
 8002fea:	4c04      	ldr	r4, [pc, #16]	; (8002ffc <_has_ext_stdout_stderr+0x14>)
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	da01      	bge.n	8002ff6 <_has_ext_stdout_stderr+0xe>
 8002ff2:	f7ff ffdf 	bl	8002fb4 <initialise_semihosting_exts>
 8002ff6:	6820      	ldr	r0, [r4, #0]
 8002ff8:	bd10      	pop	{r4, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000010 	.word	0x20000010

08003000 <initialise_monitor_handles>:
 8003000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003004:	b085      	sub	sp, #20
 8003006:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80030b8 <initialise_monitor_handles+0xb8>
 800300a:	f8cd 9004 	str.w	r9, [sp, #4]
 800300e:	2303      	movs	r3, #3
 8003010:	2400      	movs	r4, #0
 8003012:	9303      	str	r3, [sp, #12]
 8003014:	af01      	add	r7, sp, #4
 8003016:	9402      	str	r4, [sp, #8]
 8003018:	2501      	movs	r5, #1
 800301a:	4628      	mov	r0, r5
 800301c:	4639      	mov	r1, r7
 800301e:	beab      	bkpt	0x00ab
 8003020:	4605      	mov	r5, r0
 8003022:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80030bc <initialise_monitor_handles+0xbc>
 8003026:	4623      	mov	r3, r4
 8003028:	4c20      	ldr	r4, [pc, #128]	; (80030ac <initialise_monitor_handles+0xac>)
 800302a:	f8c8 5000 	str.w	r5, [r8]
 800302e:	f04f 32ff 	mov.w	r2, #4294967295
 8003032:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8003036:	3301      	adds	r3, #1
 8003038:	2b14      	cmp	r3, #20
 800303a:	d1fa      	bne.n	8003032 <initialise_monitor_handles+0x32>
 800303c:	f7ff ffd4 	bl	8002fe8 <_has_ext_stdout_stderr>
 8003040:	4d1b      	ldr	r5, [pc, #108]	; (80030b0 <initialise_monitor_handles+0xb0>)
 8003042:	b1d0      	cbz	r0, 800307a <initialise_monitor_handles+0x7a>
 8003044:	f04f 0a03 	mov.w	sl, #3
 8003048:	2304      	movs	r3, #4
 800304a:	f8cd 9004 	str.w	r9, [sp, #4]
 800304e:	2601      	movs	r6, #1
 8003050:	f8cd a00c 	str.w	sl, [sp, #12]
 8003054:	9302      	str	r3, [sp, #8]
 8003056:	4630      	mov	r0, r6
 8003058:	4639      	mov	r1, r7
 800305a:	beab      	bkpt	0x00ab
 800305c:	4683      	mov	fp, r0
 800305e:	4b15      	ldr	r3, [pc, #84]	; (80030b4 <initialise_monitor_handles+0xb4>)
 8003060:	f8cd 9004 	str.w	r9, [sp, #4]
 8003064:	f8c3 b000 	str.w	fp, [r3]
 8003068:	2308      	movs	r3, #8
 800306a:	f8cd a00c 	str.w	sl, [sp, #12]
 800306e:	9302      	str	r3, [sp, #8]
 8003070:	4630      	mov	r0, r6
 8003072:	4639      	mov	r1, r7
 8003074:	beab      	bkpt	0x00ab
 8003076:	4606      	mov	r6, r0
 8003078:	602e      	str	r6, [r5, #0]
 800307a:	682b      	ldr	r3, [r5, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	bf02      	ittt	eq
 8003080:	4b0c      	ldreq	r3, [pc, #48]	; (80030b4 <initialise_monitor_handles+0xb4>)
 8003082:	681b      	ldreq	r3, [r3, #0]
 8003084:	602b      	streq	r3, [r5, #0]
 8003086:	2600      	movs	r6, #0
 8003088:	f8d8 3000 	ldr.w	r3, [r8]
 800308c:	6023      	str	r3, [r4, #0]
 800308e:	6066      	str	r6, [r4, #4]
 8003090:	f7ff ffaa 	bl	8002fe8 <_has_ext_stdout_stderr>
 8003094:	b130      	cbz	r0, 80030a4 <initialise_monitor_handles+0xa4>
 8003096:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <initialise_monitor_handles+0xb4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800309e:	682b      	ldr	r3, [r5, #0]
 80030a0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80030a4:	b005      	add	sp, #20
 80030a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030aa:	bf00      	nop
 80030ac:	20000168 	.word	0x20000168
 80030b0:	2000015c 	.word	0x2000015c
 80030b4:	20000164 	.word	0x20000164
 80030b8:	0800402a 	.word	0x0800402a
 80030bc:	20000160 	.word	0x20000160

080030c0 <_isatty>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	f7ff fd77 	bl	8002bb4 <findslot>
 80030c6:	2509      	movs	r5, #9
 80030c8:	4604      	mov	r4, r0
 80030ca:	b920      	cbnz	r0, 80030d6 <_isatty+0x16>
 80030cc:	f000 f982 	bl	80033d4 <__errno>
 80030d0:	6005      	str	r5, [r0, #0]
 80030d2:	4620      	mov	r0, r4
 80030d4:	bd70      	pop	{r4, r5, r6, pc}
 80030d6:	4628      	mov	r0, r5
 80030d8:	4621      	mov	r1, r4
 80030da:	beab      	bkpt	0x00ab
 80030dc:	4604      	mov	r4, r0
 80030de:	2c01      	cmp	r4, #1
 80030e0:	d0f7      	beq.n	80030d2 <_isatty+0x12>
 80030e2:	f000 f977 	bl	80033d4 <__errno>
 80030e6:	2400      	movs	r4, #0
 80030e8:	4605      	mov	r5, r0
 80030ea:	2613      	movs	r6, #19
 80030ec:	4630      	mov	r0, r6
 80030ee:	4621      	mov	r1, r4
 80030f0:	beab      	bkpt	0x00ab
 80030f2:	4606      	mov	r6, r0
 80030f4:	602e      	str	r6, [r5, #0]
 80030f6:	e7ec      	b.n	80030d2 <_isatty+0x12>

080030f8 <std>:
 80030f8:	2300      	movs	r3, #0
 80030fa:	b510      	push	{r4, lr}
 80030fc:	4604      	mov	r4, r0
 80030fe:	e9c0 3300 	strd	r3, r3, [r0]
 8003102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003106:	6083      	str	r3, [r0, #8]
 8003108:	8181      	strh	r1, [r0, #12]
 800310a:	6643      	str	r3, [r0, #100]	; 0x64
 800310c:	81c2      	strh	r2, [r0, #14]
 800310e:	6183      	str	r3, [r0, #24]
 8003110:	4619      	mov	r1, r3
 8003112:	2208      	movs	r2, #8
 8003114:	305c      	adds	r0, #92	; 0x5c
 8003116:	f000 f90e 	bl	8003336 <memset>
 800311a:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <std+0x58>)
 800311c:	6263      	str	r3, [r4, #36]	; 0x24
 800311e:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <std+0x5c>)
 8003120:	62a3      	str	r3, [r4, #40]	; 0x28
 8003122:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <std+0x60>)
 8003124:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <std+0x64>)
 8003128:	6323      	str	r3, [r4, #48]	; 0x30
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <std+0x68>)
 800312c:	6224      	str	r4, [r4, #32]
 800312e:	429c      	cmp	r4, r3
 8003130:	d006      	beq.n	8003140 <std+0x48>
 8003132:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003136:	4294      	cmp	r4, r2
 8003138:	d002      	beq.n	8003140 <std+0x48>
 800313a:	33d0      	adds	r3, #208	; 0xd0
 800313c:	429c      	cmp	r4, r3
 800313e:	d105      	bne.n	800314c <std+0x54>
 8003140:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003148:	f000 b96e 	b.w	8003428 <__retarget_lock_init_recursive>
 800314c:	bd10      	pop	{r4, pc}
 800314e:	bf00      	nop
 8003150:	080032b1 	.word	0x080032b1
 8003154:	080032d3 	.word	0x080032d3
 8003158:	0800330b 	.word	0x0800330b
 800315c:	0800332f 	.word	0x0800332f
 8003160:	20000208 	.word	0x20000208

08003164 <stdio_exit_handler>:
 8003164:	4a02      	ldr	r2, [pc, #8]	; (8003170 <stdio_exit_handler+0xc>)
 8003166:	4903      	ldr	r1, [pc, #12]	; (8003174 <stdio_exit_handler+0x10>)
 8003168:	4803      	ldr	r0, [pc, #12]	; (8003178 <stdio_exit_handler+0x14>)
 800316a:	f000 b869 	b.w	8003240 <_fwalk_sglue>
 800316e:	bf00      	nop
 8003170:	20000014 	.word	0x20000014
 8003174:	08003cd5 	.word	0x08003cd5
 8003178:	20000020 	.word	0x20000020

0800317c <cleanup_stdio>:
 800317c:	6841      	ldr	r1, [r0, #4]
 800317e:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <cleanup_stdio+0x34>)
 8003180:	4299      	cmp	r1, r3
 8003182:	b510      	push	{r4, lr}
 8003184:	4604      	mov	r4, r0
 8003186:	d001      	beq.n	800318c <cleanup_stdio+0x10>
 8003188:	f000 fda4 	bl	8003cd4 <_fflush_r>
 800318c:	68a1      	ldr	r1, [r4, #8]
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <cleanup_stdio+0x38>)
 8003190:	4299      	cmp	r1, r3
 8003192:	d002      	beq.n	800319a <cleanup_stdio+0x1e>
 8003194:	4620      	mov	r0, r4
 8003196:	f000 fd9d 	bl	8003cd4 <_fflush_r>
 800319a:	68e1      	ldr	r1, [r4, #12]
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <cleanup_stdio+0x3c>)
 800319e:	4299      	cmp	r1, r3
 80031a0:	d004      	beq.n	80031ac <cleanup_stdio+0x30>
 80031a2:	4620      	mov	r0, r4
 80031a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031a8:	f000 bd94 	b.w	8003cd4 <_fflush_r>
 80031ac:	bd10      	pop	{r4, pc}
 80031ae:	bf00      	nop
 80031b0:	20000208 	.word	0x20000208
 80031b4:	20000270 	.word	0x20000270
 80031b8:	200002d8 	.word	0x200002d8

080031bc <global_stdio_init.part.0>:
 80031bc:	b510      	push	{r4, lr}
 80031be:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <global_stdio_init.part.0+0x30>)
 80031c0:	4c0b      	ldr	r4, [pc, #44]	; (80031f0 <global_stdio_init.part.0+0x34>)
 80031c2:	4a0c      	ldr	r2, [pc, #48]	; (80031f4 <global_stdio_init.part.0+0x38>)
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	4620      	mov	r0, r4
 80031c8:	2200      	movs	r2, #0
 80031ca:	2104      	movs	r1, #4
 80031cc:	f7ff ff94 	bl	80030f8 <std>
 80031d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80031d4:	2201      	movs	r2, #1
 80031d6:	2109      	movs	r1, #9
 80031d8:	f7ff ff8e 	bl	80030f8 <std>
 80031dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80031e0:	2202      	movs	r2, #2
 80031e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031e6:	2112      	movs	r1, #18
 80031e8:	f7ff bf86 	b.w	80030f8 <std>
 80031ec:	20000340 	.word	0x20000340
 80031f0:	20000208 	.word	0x20000208
 80031f4:	08003165 	.word	0x08003165

080031f8 <__sfp_lock_acquire>:
 80031f8:	4801      	ldr	r0, [pc, #4]	; (8003200 <__sfp_lock_acquire+0x8>)
 80031fa:	f000 b916 	b.w	800342a <__retarget_lock_acquire_recursive>
 80031fe:	bf00      	nop
 8003200:	20000349 	.word	0x20000349

08003204 <__sfp_lock_release>:
 8003204:	4801      	ldr	r0, [pc, #4]	; (800320c <__sfp_lock_release+0x8>)
 8003206:	f000 b911 	b.w	800342c <__retarget_lock_release_recursive>
 800320a:	bf00      	nop
 800320c:	20000349 	.word	0x20000349

08003210 <__sinit>:
 8003210:	b510      	push	{r4, lr}
 8003212:	4604      	mov	r4, r0
 8003214:	f7ff fff0 	bl	80031f8 <__sfp_lock_acquire>
 8003218:	6a23      	ldr	r3, [r4, #32]
 800321a:	b11b      	cbz	r3, 8003224 <__sinit+0x14>
 800321c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003220:	f7ff bff0 	b.w	8003204 <__sfp_lock_release>
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <__sinit+0x28>)
 8003226:	6223      	str	r3, [r4, #32]
 8003228:	4b04      	ldr	r3, [pc, #16]	; (800323c <__sinit+0x2c>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f5      	bne.n	800321c <__sinit+0xc>
 8003230:	f7ff ffc4 	bl	80031bc <global_stdio_init.part.0>
 8003234:	e7f2      	b.n	800321c <__sinit+0xc>
 8003236:	bf00      	nop
 8003238:	0800317d 	.word	0x0800317d
 800323c:	20000340 	.word	0x20000340

08003240 <_fwalk_sglue>:
 8003240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003244:	4607      	mov	r7, r0
 8003246:	4688      	mov	r8, r1
 8003248:	4614      	mov	r4, r2
 800324a:	2600      	movs	r6, #0
 800324c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003250:	f1b9 0901 	subs.w	r9, r9, #1
 8003254:	d505      	bpl.n	8003262 <_fwalk_sglue+0x22>
 8003256:	6824      	ldr	r4, [r4, #0]
 8003258:	2c00      	cmp	r4, #0
 800325a:	d1f7      	bne.n	800324c <_fwalk_sglue+0xc>
 800325c:	4630      	mov	r0, r6
 800325e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003262:	89ab      	ldrh	r3, [r5, #12]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d907      	bls.n	8003278 <_fwalk_sglue+0x38>
 8003268:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800326c:	3301      	adds	r3, #1
 800326e:	d003      	beq.n	8003278 <_fwalk_sglue+0x38>
 8003270:	4629      	mov	r1, r5
 8003272:	4638      	mov	r0, r7
 8003274:	47c0      	blx	r8
 8003276:	4306      	orrs	r6, r0
 8003278:	3568      	adds	r5, #104	; 0x68
 800327a:	e7e9      	b.n	8003250 <_fwalk_sglue+0x10>

0800327c <iprintf>:
 800327c:	b40f      	push	{r0, r1, r2, r3}
 800327e:	b507      	push	{r0, r1, r2, lr}
 8003280:	4906      	ldr	r1, [pc, #24]	; (800329c <iprintf+0x20>)
 8003282:	ab04      	add	r3, sp, #16
 8003284:	6808      	ldr	r0, [r1, #0]
 8003286:	f853 2b04 	ldr.w	r2, [r3], #4
 800328a:	6881      	ldr	r1, [r0, #8]
 800328c:	9301      	str	r3, [sp, #4]
 800328e:	f000 f9f1 	bl	8003674 <_vfiprintf_r>
 8003292:	b003      	add	sp, #12
 8003294:	f85d eb04 	ldr.w	lr, [sp], #4
 8003298:	b004      	add	sp, #16
 800329a:	4770      	bx	lr
 800329c:	2000006c 	.word	0x2000006c

080032a0 <putchar>:
 80032a0:	4b02      	ldr	r3, [pc, #8]	; (80032ac <putchar+0xc>)
 80032a2:	4601      	mov	r1, r0
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	6882      	ldr	r2, [r0, #8]
 80032a8:	f000 bd3c 	b.w	8003d24 <_putc_r>
 80032ac:	2000006c 	.word	0x2000006c

080032b0 <__sread>:
 80032b0:	b510      	push	{r4, lr}
 80032b2:	460c      	mov	r4, r1
 80032b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032b8:	f000 f868 	bl	800338c <_read_r>
 80032bc:	2800      	cmp	r0, #0
 80032be:	bfab      	itete	ge
 80032c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80032c2:	89a3      	ldrhlt	r3, [r4, #12]
 80032c4:	181b      	addge	r3, r3, r0
 80032c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80032ca:	bfac      	ite	ge
 80032cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80032ce:	81a3      	strhlt	r3, [r4, #12]
 80032d0:	bd10      	pop	{r4, pc}

080032d2 <__swrite>:
 80032d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032d6:	461f      	mov	r7, r3
 80032d8:	898b      	ldrh	r3, [r1, #12]
 80032da:	05db      	lsls	r3, r3, #23
 80032dc:	4605      	mov	r5, r0
 80032de:	460c      	mov	r4, r1
 80032e0:	4616      	mov	r6, r2
 80032e2:	d505      	bpl.n	80032f0 <__swrite+0x1e>
 80032e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032e8:	2302      	movs	r3, #2
 80032ea:	2200      	movs	r2, #0
 80032ec:	f000 f83c 	bl	8003368 <_lseek_r>
 80032f0:	89a3      	ldrh	r3, [r4, #12]
 80032f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032fa:	81a3      	strh	r3, [r4, #12]
 80032fc:	4632      	mov	r2, r6
 80032fe:	463b      	mov	r3, r7
 8003300:	4628      	mov	r0, r5
 8003302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003306:	f000 b853 	b.w	80033b0 <_write_r>

0800330a <__sseek>:
 800330a:	b510      	push	{r4, lr}
 800330c:	460c      	mov	r4, r1
 800330e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003312:	f000 f829 	bl	8003368 <_lseek_r>
 8003316:	1c43      	adds	r3, r0, #1
 8003318:	89a3      	ldrh	r3, [r4, #12]
 800331a:	bf15      	itete	ne
 800331c:	6560      	strne	r0, [r4, #84]	; 0x54
 800331e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003326:	81a3      	strheq	r3, [r4, #12]
 8003328:	bf18      	it	ne
 800332a:	81a3      	strhne	r3, [r4, #12]
 800332c:	bd10      	pop	{r4, pc}

0800332e <__sclose>:
 800332e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003332:	f000 b809 	b.w	8003348 <_close_r>

08003336 <memset>:
 8003336:	4402      	add	r2, r0
 8003338:	4603      	mov	r3, r0
 800333a:	4293      	cmp	r3, r2
 800333c:	d100      	bne.n	8003340 <memset+0xa>
 800333e:	4770      	bx	lr
 8003340:	f803 1b01 	strb.w	r1, [r3], #1
 8003344:	e7f9      	b.n	800333a <memset+0x4>
	...

08003348 <_close_r>:
 8003348:	b538      	push	{r3, r4, r5, lr}
 800334a:	4d06      	ldr	r5, [pc, #24]	; (8003364 <_close_r+0x1c>)
 800334c:	2300      	movs	r3, #0
 800334e:	4604      	mov	r4, r0
 8003350:	4608      	mov	r0, r1
 8003352:	602b      	str	r3, [r5, #0]
 8003354:	f7ff fd06 	bl	8002d64 <_close>
 8003358:	1c43      	adds	r3, r0, #1
 800335a:	d102      	bne.n	8003362 <_close_r+0x1a>
 800335c:	682b      	ldr	r3, [r5, #0]
 800335e:	b103      	cbz	r3, 8003362 <_close_r+0x1a>
 8003360:	6023      	str	r3, [r4, #0]
 8003362:	bd38      	pop	{r3, r4, r5, pc}
 8003364:	20000344 	.word	0x20000344

08003368 <_lseek_r>:
 8003368:	b538      	push	{r3, r4, r5, lr}
 800336a:	4d07      	ldr	r5, [pc, #28]	; (8003388 <_lseek_r+0x20>)
 800336c:	4604      	mov	r4, r0
 800336e:	4608      	mov	r0, r1
 8003370:	4611      	mov	r1, r2
 8003372:	2200      	movs	r2, #0
 8003374:	602a      	str	r2, [r5, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	f7ff fcb1 	bl	8002cde <_lseek>
 800337c:	1c43      	adds	r3, r0, #1
 800337e:	d102      	bne.n	8003386 <_lseek_r+0x1e>
 8003380:	682b      	ldr	r3, [r5, #0]
 8003382:	b103      	cbz	r3, 8003386 <_lseek_r+0x1e>
 8003384:	6023      	str	r3, [r4, #0]
 8003386:	bd38      	pop	{r3, r4, r5, pc}
 8003388:	20000344 	.word	0x20000344

0800338c <_read_r>:
 800338c:	b538      	push	{r3, r4, r5, lr}
 800338e:	4d07      	ldr	r5, [pc, #28]	; (80033ac <_read_r+0x20>)
 8003390:	4604      	mov	r4, r0
 8003392:	4608      	mov	r0, r1
 8003394:	4611      	mov	r1, r2
 8003396:	2200      	movs	r2, #0
 8003398:	602a      	str	r2, [r5, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	f7ff fc47 	bl	8002c2e <_read>
 80033a0:	1c43      	adds	r3, r0, #1
 80033a2:	d102      	bne.n	80033aa <_read_r+0x1e>
 80033a4:	682b      	ldr	r3, [r5, #0]
 80033a6:	b103      	cbz	r3, 80033aa <_read_r+0x1e>
 80033a8:	6023      	str	r3, [r4, #0]
 80033aa:	bd38      	pop	{r3, r4, r5, pc}
 80033ac:	20000344 	.word	0x20000344

080033b0 <_write_r>:
 80033b0:	b538      	push	{r3, r4, r5, lr}
 80033b2:	4d07      	ldr	r5, [pc, #28]	; (80033d0 <_write_r+0x20>)
 80033b4:	4604      	mov	r4, r0
 80033b6:	4608      	mov	r0, r1
 80033b8:	4611      	mov	r1, r2
 80033ba:	2200      	movs	r2, #0
 80033bc:	602a      	str	r2, [r5, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	f7ff fc9f 	bl	8002d02 <_write>
 80033c4:	1c43      	adds	r3, r0, #1
 80033c6:	d102      	bne.n	80033ce <_write_r+0x1e>
 80033c8:	682b      	ldr	r3, [r5, #0]
 80033ca:	b103      	cbz	r3, 80033ce <_write_r+0x1e>
 80033cc:	6023      	str	r3, [r4, #0]
 80033ce:	bd38      	pop	{r3, r4, r5, pc}
 80033d0:	20000344 	.word	0x20000344

080033d4 <__errno>:
 80033d4:	4b01      	ldr	r3, [pc, #4]	; (80033dc <__errno+0x8>)
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	2000006c 	.word	0x2000006c

080033e0 <__libc_init_array>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	4d0d      	ldr	r5, [pc, #52]	; (8003418 <__libc_init_array+0x38>)
 80033e4:	4c0d      	ldr	r4, [pc, #52]	; (800341c <__libc_init_array+0x3c>)
 80033e6:	1b64      	subs	r4, r4, r5
 80033e8:	10a4      	asrs	r4, r4, #2
 80033ea:	2600      	movs	r6, #0
 80033ec:	42a6      	cmp	r6, r4
 80033ee:	d109      	bne.n	8003404 <__libc_init_array+0x24>
 80033f0:	4d0b      	ldr	r5, [pc, #44]	; (8003420 <__libc_init_array+0x40>)
 80033f2:	4c0c      	ldr	r4, [pc, #48]	; (8003424 <__libc_init_array+0x44>)
 80033f4:	f000 fdf4 	bl	8003fe0 <_init>
 80033f8:	1b64      	subs	r4, r4, r5
 80033fa:	10a4      	asrs	r4, r4, #2
 80033fc:	2600      	movs	r6, #0
 80033fe:	42a6      	cmp	r6, r4
 8003400:	d105      	bne.n	800340e <__libc_init_array+0x2e>
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	f855 3b04 	ldr.w	r3, [r5], #4
 8003408:	4798      	blx	r3
 800340a:	3601      	adds	r6, #1
 800340c:	e7ee      	b.n	80033ec <__libc_init_array+0xc>
 800340e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003412:	4798      	blx	r3
 8003414:	3601      	adds	r6, #1
 8003416:	e7f2      	b.n	80033fe <__libc_init_array+0x1e>
 8003418:	0800406c 	.word	0x0800406c
 800341c:	0800406c 	.word	0x0800406c
 8003420:	0800406c 	.word	0x0800406c
 8003424:	08004070 	.word	0x08004070

08003428 <__retarget_lock_init_recursive>:
 8003428:	4770      	bx	lr

0800342a <__retarget_lock_acquire_recursive>:
 800342a:	4770      	bx	lr

0800342c <__retarget_lock_release_recursive>:
 800342c:	4770      	bx	lr
	...

08003430 <_free_r>:
 8003430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003432:	2900      	cmp	r1, #0
 8003434:	d044      	beq.n	80034c0 <_free_r+0x90>
 8003436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800343a:	9001      	str	r0, [sp, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f1a1 0404 	sub.w	r4, r1, #4
 8003442:	bfb8      	it	lt
 8003444:	18e4      	addlt	r4, r4, r3
 8003446:	f000 f8df 	bl	8003608 <__malloc_lock>
 800344a:	4a1e      	ldr	r2, [pc, #120]	; (80034c4 <_free_r+0x94>)
 800344c:	9801      	ldr	r0, [sp, #4]
 800344e:	6813      	ldr	r3, [r2, #0]
 8003450:	b933      	cbnz	r3, 8003460 <_free_r+0x30>
 8003452:	6063      	str	r3, [r4, #4]
 8003454:	6014      	str	r4, [r2, #0]
 8003456:	b003      	add	sp, #12
 8003458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800345c:	f000 b8da 	b.w	8003614 <__malloc_unlock>
 8003460:	42a3      	cmp	r3, r4
 8003462:	d908      	bls.n	8003476 <_free_r+0x46>
 8003464:	6825      	ldr	r5, [r4, #0]
 8003466:	1961      	adds	r1, r4, r5
 8003468:	428b      	cmp	r3, r1
 800346a:	bf01      	itttt	eq
 800346c:	6819      	ldreq	r1, [r3, #0]
 800346e:	685b      	ldreq	r3, [r3, #4]
 8003470:	1949      	addeq	r1, r1, r5
 8003472:	6021      	streq	r1, [r4, #0]
 8003474:	e7ed      	b.n	8003452 <_free_r+0x22>
 8003476:	461a      	mov	r2, r3
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	b10b      	cbz	r3, 8003480 <_free_r+0x50>
 800347c:	42a3      	cmp	r3, r4
 800347e:	d9fa      	bls.n	8003476 <_free_r+0x46>
 8003480:	6811      	ldr	r1, [r2, #0]
 8003482:	1855      	adds	r5, r2, r1
 8003484:	42a5      	cmp	r5, r4
 8003486:	d10b      	bne.n	80034a0 <_free_r+0x70>
 8003488:	6824      	ldr	r4, [r4, #0]
 800348a:	4421      	add	r1, r4
 800348c:	1854      	adds	r4, r2, r1
 800348e:	42a3      	cmp	r3, r4
 8003490:	6011      	str	r1, [r2, #0]
 8003492:	d1e0      	bne.n	8003456 <_free_r+0x26>
 8003494:	681c      	ldr	r4, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	6053      	str	r3, [r2, #4]
 800349a:	440c      	add	r4, r1
 800349c:	6014      	str	r4, [r2, #0]
 800349e:	e7da      	b.n	8003456 <_free_r+0x26>
 80034a0:	d902      	bls.n	80034a8 <_free_r+0x78>
 80034a2:	230c      	movs	r3, #12
 80034a4:	6003      	str	r3, [r0, #0]
 80034a6:	e7d6      	b.n	8003456 <_free_r+0x26>
 80034a8:	6825      	ldr	r5, [r4, #0]
 80034aa:	1961      	adds	r1, r4, r5
 80034ac:	428b      	cmp	r3, r1
 80034ae:	bf04      	itt	eq
 80034b0:	6819      	ldreq	r1, [r3, #0]
 80034b2:	685b      	ldreq	r3, [r3, #4]
 80034b4:	6063      	str	r3, [r4, #4]
 80034b6:	bf04      	itt	eq
 80034b8:	1949      	addeq	r1, r1, r5
 80034ba:	6021      	streq	r1, [r4, #0]
 80034bc:	6054      	str	r4, [r2, #4]
 80034be:	e7ca      	b.n	8003456 <_free_r+0x26>
 80034c0:	b003      	add	sp, #12
 80034c2:	bd30      	pop	{r4, r5, pc}
 80034c4:	2000034c 	.word	0x2000034c

080034c8 <sbrk_aligned>:
 80034c8:	b570      	push	{r4, r5, r6, lr}
 80034ca:	4e0e      	ldr	r6, [pc, #56]	; (8003504 <sbrk_aligned+0x3c>)
 80034cc:	460c      	mov	r4, r1
 80034ce:	6831      	ldr	r1, [r6, #0]
 80034d0:	4605      	mov	r5, r0
 80034d2:	b911      	cbnz	r1, 80034da <sbrk_aligned+0x12>
 80034d4:	f000 fcf0 	bl	8003eb8 <_sbrk_r>
 80034d8:	6030      	str	r0, [r6, #0]
 80034da:	4621      	mov	r1, r4
 80034dc:	4628      	mov	r0, r5
 80034de:	f000 fceb 	bl	8003eb8 <_sbrk_r>
 80034e2:	1c43      	adds	r3, r0, #1
 80034e4:	d00a      	beq.n	80034fc <sbrk_aligned+0x34>
 80034e6:	1cc4      	adds	r4, r0, #3
 80034e8:	f024 0403 	bic.w	r4, r4, #3
 80034ec:	42a0      	cmp	r0, r4
 80034ee:	d007      	beq.n	8003500 <sbrk_aligned+0x38>
 80034f0:	1a21      	subs	r1, r4, r0
 80034f2:	4628      	mov	r0, r5
 80034f4:	f000 fce0 	bl	8003eb8 <_sbrk_r>
 80034f8:	3001      	adds	r0, #1
 80034fa:	d101      	bne.n	8003500 <sbrk_aligned+0x38>
 80034fc:	f04f 34ff 	mov.w	r4, #4294967295
 8003500:	4620      	mov	r0, r4
 8003502:	bd70      	pop	{r4, r5, r6, pc}
 8003504:	20000350 	.word	0x20000350

08003508 <_malloc_r>:
 8003508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800350c:	1ccd      	adds	r5, r1, #3
 800350e:	f025 0503 	bic.w	r5, r5, #3
 8003512:	3508      	adds	r5, #8
 8003514:	2d0c      	cmp	r5, #12
 8003516:	bf38      	it	cc
 8003518:	250c      	movcc	r5, #12
 800351a:	2d00      	cmp	r5, #0
 800351c:	4607      	mov	r7, r0
 800351e:	db01      	blt.n	8003524 <_malloc_r+0x1c>
 8003520:	42a9      	cmp	r1, r5
 8003522:	d905      	bls.n	8003530 <_malloc_r+0x28>
 8003524:	230c      	movs	r3, #12
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	2600      	movs	r6, #0
 800352a:	4630      	mov	r0, r6
 800352c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003530:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003604 <_malloc_r+0xfc>
 8003534:	f000 f868 	bl	8003608 <__malloc_lock>
 8003538:	f8d8 3000 	ldr.w	r3, [r8]
 800353c:	461c      	mov	r4, r3
 800353e:	bb5c      	cbnz	r4, 8003598 <_malloc_r+0x90>
 8003540:	4629      	mov	r1, r5
 8003542:	4638      	mov	r0, r7
 8003544:	f7ff ffc0 	bl	80034c8 <sbrk_aligned>
 8003548:	1c43      	adds	r3, r0, #1
 800354a:	4604      	mov	r4, r0
 800354c:	d155      	bne.n	80035fa <_malloc_r+0xf2>
 800354e:	f8d8 4000 	ldr.w	r4, [r8]
 8003552:	4626      	mov	r6, r4
 8003554:	2e00      	cmp	r6, #0
 8003556:	d145      	bne.n	80035e4 <_malloc_r+0xdc>
 8003558:	2c00      	cmp	r4, #0
 800355a:	d048      	beq.n	80035ee <_malloc_r+0xe6>
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	4631      	mov	r1, r6
 8003560:	4638      	mov	r0, r7
 8003562:	eb04 0903 	add.w	r9, r4, r3
 8003566:	f000 fca7 	bl	8003eb8 <_sbrk_r>
 800356a:	4581      	cmp	r9, r0
 800356c:	d13f      	bne.n	80035ee <_malloc_r+0xe6>
 800356e:	6821      	ldr	r1, [r4, #0]
 8003570:	1a6d      	subs	r5, r5, r1
 8003572:	4629      	mov	r1, r5
 8003574:	4638      	mov	r0, r7
 8003576:	f7ff ffa7 	bl	80034c8 <sbrk_aligned>
 800357a:	3001      	adds	r0, #1
 800357c:	d037      	beq.n	80035ee <_malloc_r+0xe6>
 800357e:	6823      	ldr	r3, [r4, #0]
 8003580:	442b      	add	r3, r5
 8003582:	6023      	str	r3, [r4, #0]
 8003584:	f8d8 3000 	ldr.w	r3, [r8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d038      	beq.n	80035fe <_malloc_r+0xf6>
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	42a2      	cmp	r2, r4
 8003590:	d12b      	bne.n	80035ea <_malloc_r+0xe2>
 8003592:	2200      	movs	r2, #0
 8003594:	605a      	str	r2, [r3, #4]
 8003596:	e00f      	b.n	80035b8 <_malloc_r+0xb0>
 8003598:	6822      	ldr	r2, [r4, #0]
 800359a:	1b52      	subs	r2, r2, r5
 800359c:	d41f      	bmi.n	80035de <_malloc_r+0xd6>
 800359e:	2a0b      	cmp	r2, #11
 80035a0:	d917      	bls.n	80035d2 <_malloc_r+0xca>
 80035a2:	1961      	adds	r1, r4, r5
 80035a4:	42a3      	cmp	r3, r4
 80035a6:	6025      	str	r5, [r4, #0]
 80035a8:	bf18      	it	ne
 80035aa:	6059      	strne	r1, [r3, #4]
 80035ac:	6863      	ldr	r3, [r4, #4]
 80035ae:	bf08      	it	eq
 80035b0:	f8c8 1000 	streq.w	r1, [r8]
 80035b4:	5162      	str	r2, [r4, r5]
 80035b6:	604b      	str	r3, [r1, #4]
 80035b8:	4638      	mov	r0, r7
 80035ba:	f104 060b 	add.w	r6, r4, #11
 80035be:	f000 f829 	bl	8003614 <__malloc_unlock>
 80035c2:	f026 0607 	bic.w	r6, r6, #7
 80035c6:	1d23      	adds	r3, r4, #4
 80035c8:	1af2      	subs	r2, r6, r3
 80035ca:	d0ae      	beq.n	800352a <_malloc_r+0x22>
 80035cc:	1b9b      	subs	r3, r3, r6
 80035ce:	50a3      	str	r3, [r4, r2]
 80035d0:	e7ab      	b.n	800352a <_malloc_r+0x22>
 80035d2:	42a3      	cmp	r3, r4
 80035d4:	6862      	ldr	r2, [r4, #4]
 80035d6:	d1dd      	bne.n	8003594 <_malloc_r+0x8c>
 80035d8:	f8c8 2000 	str.w	r2, [r8]
 80035dc:	e7ec      	b.n	80035b8 <_malloc_r+0xb0>
 80035de:	4623      	mov	r3, r4
 80035e0:	6864      	ldr	r4, [r4, #4]
 80035e2:	e7ac      	b.n	800353e <_malloc_r+0x36>
 80035e4:	4634      	mov	r4, r6
 80035e6:	6876      	ldr	r6, [r6, #4]
 80035e8:	e7b4      	b.n	8003554 <_malloc_r+0x4c>
 80035ea:	4613      	mov	r3, r2
 80035ec:	e7cc      	b.n	8003588 <_malloc_r+0x80>
 80035ee:	230c      	movs	r3, #12
 80035f0:	603b      	str	r3, [r7, #0]
 80035f2:	4638      	mov	r0, r7
 80035f4:	f000 f80e 	bl	8003614 <__malloc_unlock>
 80035f8:	e797      	b.n	800352a <_malloc_r+0x22>
 80035fa:	6025      	str	r5, [r4, #0]
 80035fc:	e7dc      	b.n	80035b8 <_malloc_r+0xb0>
 80035fe:	605b      	str	r3, [r3, #4]
 8003600:	deff      	udf	#255	; 0xff
 8003602:	bf00      	nop
 8003604:	2000034c 	.word	0x2000034c

08003608 <__malloc_lock>:
 8003608:	4801      	ldr	r0, [pc, #4]	; (8003610 <__malloc_lock+0x8>)
 800360a:	f7ff bf0e 	b.w	800342a <__retarget_lock_acquire_recursive>
 800360e:	bf00      	nop
 8003610:	20000348 	.word	0x20000348

08003614 <__malloc_unlock>:
 8003614:	4801      	ldr	r0, [pc, #4]	; (800361c <__malloc_unlock+0x8>)
 8003616:	f7ff bf09 	b.w	800342c <__retarget_lock_release_recursive>
 800361a:	bf00      	nop
 800361c:	20000348 	.word	0x20000348

08003620 <__sfputc_r>:
 8003620:	6893      	ldr	r3, [r2, #8]
 8003622:	3b01      	subs	r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	b410      	push	{r4}
 8003628:	6093      	str	r3, [r2, #8]
 800362a:	da08      	bge.n	800363e <__sfputc_r+0x1e>
 800362c:	6994      	ldr	r4, [r2, #24]
 800362e:	42a3      	cmp	r3, r4
 8003630:	db01      	blt.n	8003636 <__sfputc_r+0x16>
 8003632:	290a      	cmp	r1, #10
 8003634:	d103      	bne.n	800363e <__sfputc_r+0x1e>
 8003636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800363a:	f000 bba7 	b.w	8003d8c <__swbuf_r>
 800363e:	6813      	ldr	r3, [r2, #0]
 8003640:	1c58      	adds	r0, r3, #1
 8003642:	6010      	str	r0, [r2, #0]
 8003644:	7019      	strb	r1, [r3, #0]
 8003646:	4608      	mov	r0, r1
 8003648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800364c:	4770      	bx	lr

0800364e <__sfputs_r>:
 800364e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003650:	4606      	mov	r6, r0
 8003652:	460f      	mov	r7, r1
 8003654:	4614      	mov	r4, r2
 8003656:	18d5      	adds	r5, r2, r3
 8003658:	42ac      	cmp	r4, r5
 800365a:	d101      	bne.n	8003660 <__sfputs_r+0x12>
 800365c:	2000      	movs	r0, #0
 800365e:	e007      	b.n	8003670 <__sfputs_r+0x22>
 8003660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003664:	463a      	mov	r2, r7
 8003666:	4630      	mov	r0, r6
 8003668:	f7ff ffda 	bl	8003620 <__sfputc_r>
 800366c:	1c43      	adds	r3, r0, #1
 800366e:	d1f3      	bne.n	8003658 <__sfputs_r+0xa>
 8003670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003674 <_vfiprintf_r>:
 8003674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003678:	460d      	mov	r5, r1
 800367a:	b09d      	sub	sp, #116	; 0x74
 800367c:	4614      	mov	r4, r2
 800367e:	4698      	mov	r8, r3
 8003680:	4606      	mov	r6, r0
 8003682:	b118      	cbz	r0, 800368c <_vfiprintf_r+0x18>
 8003684:	6a03      	ldr	r3, [r0, #32]
 8003686:	b90b      	cbnz	r3, 800368c <_vfiprintf_r+0x18>
 8003688:	f7ff fdc2 	bl	8003210 <__sinit>
 800368c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800368e:	07d9      	lsls	r1, r3, #31
 8003690:	d405      	bmi.n	800369e <_vfiprintf_r+0x2a>
 8003692:	89ab      	ldrh	r3, [r5, #12]
 8003694:	059a      	lsls	r2, r3, #22
 8003696:	d402      	bmi.n	800369e <_vfiprintf_r+0x2a>
 8003698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800369a:	f7ff fec6 	bl	800342a <__retarget_lock_acquire_recursive>
 800369e:	89ab      	ldrh	r3, [r5, #12]
 80036a0:	071b      	lsls	r3, r3, #28
 80036a2:	d501      	bpl.n	80036a8 <_vfiprintf_r+0x34>
 80036a4:	692b      	ldr	r3, [r5, #16]
 80036a6:	b99b      	cbnz	r3, 80036d0 <_vfiprintf_r+0x5c>
 80036a8:	4629      	mov	r1, r5
 80036aa:	4630      	mov	r0, r6
 80036ac:	f000 fbac 	bl	8003e08 <__swsetup_r>
 80036b0:	b170      	cbz	r0, 80036d0 <_vfiprintf_r+0x5c>
 80036b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036b4:	07dc      	lsls	r4, r3, #31
 80036b6:	d504      	bpl.n	80036c2 <_vfiprintf_r+0x4e>
 80036b8:	f04f 30ff 	mov.w	r0, #4294967295
 80036bc:	b01d      	add	sp, #116	; 0x74
 80036be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036c2:	89ab      	ldrh	r3, [r5, #12]
 80036c4:	0598      	lsls	r0, r3, #22
 80036c6:	d4f7      	bmi.n	80036b8 <_vfiprintf_r+0x44>
 80036c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036ca:	f7ff feaf 	bl	800342c <__retarget_lock_release_recursive>
 80036ce:	e7f3      	b.n	80036b8 <_vfiprintf_r+0x44>
 80036d0:	2300      	movs	r3, #0
 80036d2:	9309      	str	r3, [sp, #36]	; 0x24
 80036d4:	2320      	movs	r3, #32
 80036d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036da:	f8cd 800c 	str.w	r8, [sp, #12]
 80036de:	2330      	movs	r3, #48	; 0x30
 80036e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003894 <_vfiprintf_r+0x220>
 80036e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036e8:	f04f 0901 	mov.w	r9, #1
 80036ec:	4623      	mov	r3, r4
 80036ee:	469a      	mov	sl, r3
 80036f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036f4:	b10a      	cbz	r2, 80036fa <_vfiprintf_r+0x86>
 80036f6:	2a25      	cmp	r2, #37	; 0x25
 80036f8:	d1f9      	bne.n	80036ee <_vfiprintf_r+0x7a>
 80036fa:	ebba 0b04 	subs.w	fp, sl, r4
 80036fe:	d00b      	beq.n	8003718 <_vfiprintf_r+0xa4>
 8003700:	465b      	mov	r3, fp
 8003702:	4622      	mov	r2, r4
 8003704:	4629      	mov	r1, r5
 8003706:	4630      	mov	r0, r6
 8003708:	f7ff ffa1 	bl	800364e <__sfputs_r>
 800370c:	3001      	adds	r0, #1
 800370e:	f000 80a9 	beq.w	8003864 <_vfiprintf_r+0x1f0>
 8003712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003714:	445a      	add	r2, fp
 8003716:	9209      	str	r2, [sp, #36]	; 0x24
 8003718:	f89a 3000 	ldrb.w	r3, [sl]
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80a1 	beq.w	8003864 <_vfiprintf_r+0x1f0>
 8003722:	2300      	movs	r3, #0
 8003724:	f04f 32ff 	mov.w	r2, #4294967295
 8003728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800372c:	f10a 0a01 	add.w	sl, sl, #1
 8003730:	9304      	str	r3, [sp, #16]
 8003732:	9307      	str	r3, [sp, #28]
 8003734:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003738:	931a      	str	r3, [sp, #104]	; 0x68
 800373a:	4654      	mov	r4, sl
 800373c:	2205      	movs	r2, #5
 800373e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003742:	4854      	ldr	r0, [pc, #336]	; (8003894 <_vfiprintf_r+0x220>)
 8003744:	f7fc fd54 	bl	80001f0 <memchr>
 8003748:	9a04      	ldr	r2, [sp, #16]
 800374a:	b9d8      	cbnz	r0, 8003784 <_vfiprintf_r+0x110>
 800374c:	06d1      	lsls	r1, r2, #27
 800374e:	bf44      	itt	mi
 8003750:	2320      	movmi	r3, #32
 8003752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003756:	0713      	lsls	r3, r2, #28
 8003758:	bf44      	itt	mi
 800375a:	232b      	movmi	r3, #43	; 0x2b
 800375c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003760:	f89a 3000 	ldrb.w	r3, [sl]
 8003764:	2b2a      	cmp	r3, #42	; 0x2a
 8003766:	d015      	beq.n	8003794 <_vfiprintf_r+0x120>
 8003768:	9a07      	ldr	r2, [sp, #28]
 800376a:	4654      	mov	r4, sl
 800376c:	2000      	movs	r0, #0
 800376e:	f04f 0c0a 	mov.w	ip, #10
 8003772:	4621      	mov	r1, r4
 8003774:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003778:	3b30      	subs	r3, #48	; 0x30
 800377a:	2b09      	cmp	r3, #9
 800377c:	d94d      	bls.n	800381a <_vfiprintf_r+0x1a6>
 800377e:	b1b0      	cbz	r0, 80037ae <_vfiprintf_r+0x13a>
 8003780:	9207      	str	r2, [sp, #28]
 8003782:	e014      	b.n	80037ae <_vfiprintf_r+0x13a>
 8003784:	eba0 0308 	sub.w	r3, r0, r8
 8003788:	fa09 f303 	lsl.w	r3, r9, r3
 800378c:	4313      	orrs	r3, r2
 800378e:	9304      	str	r3, [sp, #16]
 8003790:	46a2      	mov	sl, r4
 8003792:	e7d2      	b.n	800373a <_vfiprintf_r+0xc6>
 8003794:	9b03      	ldr	r3, [sp, #12]
 8003796:	1d19      	adds	r1, r3, #4
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	9103      	str	r1, [sp, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	bfbb      	ittet	lt
 80037a0:	425b      	neglt	r3, r3
 80037a2:	f042 0202 	orrlt.w	r2, r2, #2
 80037a6:	9307      	strge	r3, [sp, #28]
 80037a8:	9307      	strlt	r3, [sp, #28]
 80037aa:	bfb8      	it	lt
 80037ac:	9204      	strlt	r2, [sp, #16]
 80037ae:	7823      	ldrb	r3, [r4, #0]
 80037b0:	2b2e      	cmp	r3, #46	; 0x2e
 80037b2:	d10c      	bne.n	80037ce <_vfiprintf_r+0x15a>
 80037b4:	7863      	ldrb	r3, [r4, #1]
 80037b6:	2b2a      	cmp	r3, #42	; 0x2a
 80037b8:	d134      	bne.n	8003824 <_vfiprintf_r+0x1b0>
 80037ba:	9b03      	ldr	r3, [sp, #12]
 80037bc:	1d1a      	adds	r2, r3, #4
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	9203      	str	r2, [sp, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	bfb8      	it	lt
 80037c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80037ca:	3402      	adds	r4, #2
 80037cc:	9305      	str	r3, [sp, #20]
 80037ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80038a4 <_vfiprintf_r+0x230>
 80037d2:	7821      	ldrb	r1, [r4, #0]
 80037d4:	2203      	movs	r2, #3
 80037d6:	4650      	mov	r0, sl
 80037d8:	f7fc fd0a 	bl	80001f0 <memchr>
 80037dc:	b138      	cbz	r0, 80037ee <_vfiprintf_r+0x17a>
 80037de:	9b04      	ldr	r3, [sp, #16]
 80037e0:	eba0 000a 	sub.w	r0, r0, sl
 80037e4:	2240      	movs	r2, #64	; 0x40
 80037e6:	4082      	lsls	r2, r0
 80037e8:	4313      	orrs	r3, r2
 80037ea:	3401      	adds	r4, #1
 80037ec:	9304      	str	r3, [sp, #16]
 80037ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037f2:	4829      	ldr	r0, [pc, #164]	; (8003898 <_vfiprintf_r+0x224>)
 80037f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037f8:	2206      	movs	r2, #6
 80037fa:	f7fc fcf9 	bl	80001f0 <memchr>
 80037fe:	2800      	cmp	r0, #0
 8003800:	d03f      	beq.n	8003882 <_vfiprintf_r+0x20e>
 8003802:	4b26      	ldr	r3, [pc, #152]	; (800389c <_vfiprintf_r+0x228>)
 8003804:	bb1b      	cbnz	r3, 800384e <_vfiprintf_r+0x1da>
 8003806:	9b03      	ldr	r3, [sp, #12]
 8003808:	3307      	adds	r3, #7
 800380a:	f023 0307 	bic.w	r3, r3, #7
 800380e:	3308      	adds	r3, #8
 8003810:	9303      	str	r3, [sp, #12]
 8003812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003814:	443b      	add	r3, r7
 8003816:	9309      	str	r3, [sp, #36]	; 0x24
 8003818:	e768      	b.n	80036ec <_vfiprintf_r+0x78>
 800381a:	fb0c 3202 	mla	r2, ip, r2, r3
 800381e:	460c      	mov	r4, r1
 8003820:	2001      	movs	r0, #1
 8003822:	e7a6      	b.n	8003772 <_vfiprintf_r+0xfe>
 8003824:	2300      	movs	r3, #0
 8003826:	3401      	adds	r4, #1
 8003828:	9305      	str	r3, [sp, #20]
 800382a:	4619      	mov	r1, r3
 800382c:	f04f 0c0a 	mov.w	ip, #10
 8003830:	4620      	mov	r0, r4
 8003832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003836:	3a30      	subs	r2, #48	; 0x30
 8003838:	2a09      	cmp	r2, #9
 800383a:	d903      	bls.n	8003844 <_vfiprintf_r+0x1d0>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0c6      	beq.n	80037ce <_vfiprintf_r+0x15a>
 8003840:	9105      	str	r1, [sp, #20]
 8003842:	e7c4      	b.n	80037ce <_vfiprintf_r+0x15a>
 8003844:	fb0c 2101 	mla	r1, ip, r1, r2
 8003848:	4604      	mov	r4, r0
 800384a:	2301      	movs	r3, #1
 800384c:	e7f0      	b.n	8003830 <_vfiprintf_r+0x1bc>
 800384e:	ab03      	add	r3, sp, #12
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	462a      	mov	r2, r5
 8003854:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <_vfiprintf_r+0x22c>)
 8003856:	a904      	add	r1, sp, #16
 8003858:	4630      	mov	r0, r6
 800385a:	f3af 8000 	nop.w
 800385e:	4607      	mov	r7, r0
 8003860:	1c78      	adds	r0, r7, #1
 8003862:	d1d6      	bne.n	8003812 <_vfiprintf_r+0x19e>
 8003864:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003866:	07d9      	lsls	r1, r3, #31
 8003868:	d405      	bmi.n	8003876 <_vfiprintf_r+0x202>
 800386a:	89ab      	ldrh	r3, [r5, #12]
 800386c:	059a      	lsls	r2, r3, #22
 800386e:	d402      	bmi.n	8003876 <_vfiprintf_r+0x202>
 8003870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003872:	f7ff fddb 	bl	800342c <__retarget_lock_release_recursive>
 8003876:	89ab      	ldrh	r3, [r5, #12]
 8003878:	065b      	lsls	r3, r3, #25
 800387a:	f53f af1d 	bmi.w	80036b8 <_vfiprintf_r+0x44>
 800387e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003880:	e71c      	b.n	80036bc <_vfiprintf_r+0x48>
 8003882:	ab03      	add	r3, sp, #12
 8003884:	9300      	str	r3, [sp, #0]
 8003886:	462a      	mov	r2, r5
 8003888:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <_vfiprintf_r+0x22c>)
 800388a:	a904      	add	r1, sp, #16
 800388c:	4630      	mov	r0, r6
 800388e:	f000 f879 	bl	8003984 <_printf_i>
 8003892:	e7e4      	b.n	800385e <_vfiprintf_r+0x1ea>
 8003894:	0800402e 	.word	0x0800402e
 8003898:	08004038 	.word	0x08004038
 800389c:	00000000 	.word	0x00000000
 80038a0:	0800364f 	.word	0x0800364f
 80038a4:	08004034 	.word	0x08004034

080038a8 <_printf_common>:
 80038a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038ac:	4616      	mov	r6, r2
 80038ae:	4699      	mov	r9, r3
 80038b0:	688a      	ldr	r2, [r1, #8]
 80038b2:	690b      	ldr	r3, [r1, #16]
 80038b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038b8:	4293      	cmp	r3, r2
 80038ba:	bfb8      	it	lt
 80038bc:	4613      	movlt	r3, r2
 80038be:	6033      	str	r3, [r6, #0]
 80038c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038c4:	4607      	mov	r7, r0
 80038c6:	460c      	mov	r4, r1
 80038c8:	b10a      	cbz	r2, 80038ce <_printf_common+0x26>
 80038ca:	3301      	adds	r3, #1
 80038cc:	6033      	str	r3, [r6, #0]
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	0699      	lsls	r1, r3, #26
 80038d2:	bf42      	ittt	mi
 80038d4:	6833      	ldrmi	r3, [r6, #0]
 80038d6:	3302      	addmi	r3, #2
 80038d8:	6033      	strmi	r3, [r6, #0]
 80038da:	6825      	ldr	r5, [r4, #0]
 80038dc:	f015 0506 	ands.w	r5, r5, #6
 80038e0:	d106      	bne.n	80038f0 <_printf_common+0x48>
 80038e2:	f104 0a19 	add.w	sl, r4, #25
 80038e6:	68e3      	ldr	r3, [r4, #12]
 80038e8:	6832      	ldr	r2, [r6, #0]
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	42ab      	cmp	r3, r5
 80038ee:	dc26      	bgt.n	800393e <_printf_common+0x96>
 80038f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038f4:	1e13      	subs	r3, r2, #0
 80038f6:	6822      	ldr	r2, [r4, #0]
 80038f8:	bf18      	it	ne
 80038fa:	2301      	movne	r3, #1
 80038fc:	0692      	lsls	r2, r2, #26
 80038fe:	d42b      	bmi.n	8003958 <_printf_common+0xb0>
 8003900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003904:	4649      	mov	r1, r9
 8003906:	4638      	mov	r0, r7
 8003908:	47c0      	blx	r8
 800390a:	3001      	adds	r0, #1
 800390c:	d01e      	beq.n	800394c <_printf_common+0xa4>
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	6922      	ldr	r2, [r4, #16]
 8003912:	f003 0306 	and.w	r3, r3, #6
 8003916:	2b04      	cmp	r3, #4
 8003918:	bf02      	ittt	eq
 800391a:	68e5      	ldreq	r5, [r4, #12]
 800391c:	6833      	ldreq	r3, [r6, #0]
 800391e:	1aed      	subeq	r5, r5, r3
 8003920:	68a3      	ldr	r3, [r4, #8]
 8003922:	bf0c      	ite	eq
 8003924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003928:	2500      	movne	r5, #0
 800392a:	4293      	cmp	r3, r2
 800392c:	bfc4      	itt	gt
 800392e:	1a9b      	subgt	r3, r3, r2
 8003930:	18ed      	addgt	r5, r5, r3
 8003932:	2600      	movs	r6, #0
 8003934:	341a      	adds	r4, #26
 8003936:	42b5      	cmp	r5, r6
 8003938:	d11a      	bne.n	8003970 <_printf_common+0xc8>
 800393a:	2000      	movs	r0, #0
 800393c:	e008      	b.n	8003950 <_printf_common+0xa8>
 800393e:	2301      	movs	r3, #1
 8003940:	4652      	mov	r2, sl
 8003942:	4649      	mov	r1, r9
 8003944:	4638      	mov	r0, r7
 8003946:	47c0      	blx	r8
 8003948:	3001      	adds	r0, #1
 800394a:	d103      	bne.n	8003954 <_printf_common+0xac>
 800394c:	f04f 30ff 	mov.w	r0, #4294967295
 8003950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003954:	3501      	adds	r5, #1
 8003956:	e7c6      	b.n	80038e6 <_printf_common+0x3e>
 8003958:	18e1      	adds	r1, r4, r3
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	2030      	movs	r0, #48	; 0x30
 800395e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003962:	4422      	add	r2, r4
 8003964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800396c:	3302      	adds	r3, #2
 800396e:	e7c7      	b.n	8003900 <_printf_common+0x58>
 8003970:	2301      	movs	r3, #1
 8003972:	4622      	mov	r2, r4
 8003974:	4649      	mov	r1, r9
 8003976:	4638      	mov	r0, r7
 8003978:	47c0      	blx	r8
 800397a:	3001      	adds	r0, #1
 800397c:	d0e6      	beq.n	800394c <_printf_common+0xa4>
 800397e:	3601      	adds	r6, #1
 8003980:	e7d9      	b.n	8003936 <_printf_common+0x8e>
	...

08003984 <_printf_i>:
 8003984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003988:	7e0f      	ldrb	r7, [r1, #24]
 800398a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800398c:	2f78      	cmp	r7, #120	; 0x78
 800398e:	4691      	mov	r9, r2
 8003990:	4680      	mov	r8, r0
 8003992:	460c      	mov	r4, r1
 8003994:	469a      	mov	sl, r3
 8003996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800399a:	d807      	bhi.n	80039ac <_printf_i+0x28>
 800399c:	2f62      	cmp	r7, #98	; 0x62
 800399e:	d80a      	bhi.n	80039b6 <_printf_i+0x32>
 80039a0:	2f00      	cmp	r7, #0
 80039a2:	f000 80d4 	beq.w	8003b4e <_printf_i+0x1ca>
 80039a6:	2f58      	cmp	r7, #88	; 0x58
 80039a8:	f000 80c0 	beq.w	8003b2c <_printf_i+0x1a8>
 80039ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039b4:	e03a      	b.n	8003a2c <_printf_i+0xa8>
 80039b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039ba:	2b15      	cmp	r3, #21
 80039bc:	d8f6      	bhi.n	80039ac <_printf_i+0x28>
 80039be:	a101      	add	r1, pc, #4	; (adr r1, 80039c4 <_printf_i+0x40>)
 80039c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039c4:	08003a1d 	.word	0x08003a1d
 80039c8:	08003a31 	.word	0x08003a31
 80039cc:	080039ad 	.word	0x080039ad
 80039d0:	080039ad 	.word	0x080039ad
 80039d4:	080039ad 	.word	0x080039ad
 80039d8:	080039ad 	.word	0x080039ad
 80039dc:	08003a31 	.word	0x08003a31
 80039e0:	080039ad 	.word	0x080039ad
 80039e4:	080039ad 	.word	0x080039ad
 80039e8:	080039ad 	.word	0x080039ad
 80039ec:	080039ad 	.word	0x080039ad
 80039f0:	08003b35 	.word	0x08003b35
 80039f4:	08003a5d 	.word	0x08003a5d
 80039f8:	08003aef 	.word	0x08003aef
 80039fc:	080039ad 	.word	0x080039ad
 8003a00:	080039ad 	.word	0x080039ad
 8003a04:	08003b57 	.word	0x08003b57
 8003a08:	080039ad 	.word	0x080039ad
 8003a0c:	08003a5d 	.word	0x08003a5d
 8003a10:	080039ad 	.word	0x080039ad
 8003a14:	080039ad 	.word	0x080039ad
 8003a18:	08003af7 	.word	0x08003af7
 8003a1c:	682b      	ldr	r3, [r5, #0]
 8003a1e:	1d1a      	adds	r2, r3, #4
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	602a      	str	r2, [r5, #0]
 8003a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e09f      	b.n	8003b70 <_printf_i+0x1ec>
 8003a30:	6820      	ldr	r0, [r4, #0]
 8003a32:	682b      	ldr	r3, [r5, #0]
 8003a34:	0607      	lsls	r7, r0, #24
 8003a36:	f103 0104 	add.w	r1, r3, #4
 8003a3a:	6029      	str	r1, [r5, #0]
 8003a3c:	d501      	bpl.n	8003a42 <_printf_i+0xbe>
 8003a3e:	681e      	ldr	r6, [r3, #0]
 8003a40:	e003      	b.n	8003a4a <_printf_i+0xc6>
 8003a42:	0646      	lsls	r6, r0, #25
 8003a44:	d5fb      	bpl.n	8003a3e <_printf_i+0xba>
 8003a46:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003a4a:	2e00      	cmp	r6, #0
 8003a4c:	da03      	bge.n	8003a56 <_printf_i+0xd2>
 8003a4e:	232d      	movs	r3, #45	; 0x2d
 8003a50:	4276      	negs	r6, r6
 8003a52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a56:	485a      	ldr	r0, [pc, #360]	; (8003bc0 <_printf_i+0x23c>)
 8003a58:	230a      	movs	r3, #10
 8003a5a:	e012      	b.n	8003a82 <_printf_i+0xfe>
 8003a5c:	682b      	ldr	r3, [r5, #0]
 8003a5e:	6820      	ldr	r0, [r4, #0]
 8003a60:	1d19      	adds	r1, r3, #4
 8003a62:	6029      	str	r1, [r5, #0]
 8003a64:	0605      	lsls	r5, r0, #24
 8003a66:	d501      	bpl.n	8003a6c <_printf_i+0xe8>
 8003a68:	681e      	ldr	r6, [r3, #0]
 8003a6a:	e002      	b.n	8003a72 <_printf_i+0xee>
 8003a6c:	0641      	lsls	r1, r0, #25
 8003a6e:	d5fb      	bpl.n	8003a68 <_printf_i+0xe4>
 8003a70:	881e      	ldrh	r6, [r3, #0]
 8003a72:	4853      	ldr	r0, [pc, #332]	; (8003bc0 <_printf_i+0x23c>)
 8003a74:	2f6f      	cmp	r7, #111	; 0x6f
 8003a76:	bf0c      	ite	eq
 8003a78:	2308      	moveq	r3, #8
 8003a7a:	230a      	movne	r3, #10
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a82:	6865      	ldr	r5, [r4, #4]
 8003a84:	60a5      	str	r5, [r4, #8]
 8003a86:	2d00      	cmp	r5, #0
 8003a88:	bfa2      	ittt	ge
 8003a8a:	6821      	ldrge	r1, [r4, #0]
 8003a8c:	f021 0104 	bicge.w	r1, r1, #4
 8003a90:	6021      	strge	r1, [r4, #0]
 8003a92:	b90e      	cbnz	r6, 8003a98 <_printf_i+0x114>
 8003a94:	2d00      	cmp	r5, #0
 8003a96:	d04b      	beq.n	8003b30 <_printf_i+0x1ac>
 8003a98:	4615      	mov	r5, r2
 8003a9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a9e:	fb03 6711 	mls	r7, r3, r1, r6
 8003aa2:	5dc7      	ldrb	r7, [r0, r7]
 8003aa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003aa8:	4637      	mov	r7, r6
 8003aaa:	42bb      	cmp	r3, r7
 8003aac:	460e      	mov	r6, r1
 8003aae:	d9f4      	bls.n	8003a9a <_printf_i+0x116>
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d10b      	bne.n	8003acc <_printf_i+0x148>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	07de      	lsls	r6, r3, #31
 8003ab8:	d508      	bpl.n	8003acc <_printf_i+0x148>
 8003aba:	6923      	ldr	r3, [r4, #16]
 8003abc:	6861      	ldr	r1, [r4, #4]
 8003abe:	4299      	cmp	r1, r3
 8003ac0:	bfde      	ittt	le
 8003ac2:	2330      	movle	r3, #48	; 0x30
 8003ac4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ac8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003acc:	1b52      	subs	r2, r2, r5
 8003ace:	6122      	str	r2, [r4, #16]
 8003ad0:	f8cd a000 	str.w	sl, [sp]
 8003ad4:	464b      	mov	r3, r9
 8003ad6:	aa03      	add	r2, sp, #12
 8003ad8:	4621      	mov	r1, r4
 8003ada:	4640      	mov	r0, r8
 8003adc:	f7ff fee4 	bl	80038a8 <_printf_common>
 8003ae0:	3001      	adds	r0, #1
 8003ae2:	d14a      	bne.n	8003b7a <_printf_i+0x1f6>
 8003ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae8:	b004      	add	sp, #16
 8003aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	f043 0320 	orr.w	r3, r3, #32
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	4833      	ldr	r0, [pc, #204]	; (8003bc4 <_printf_i+0x240>)
 8003af8:	2778      	movs	r7, #120	; 0x78
 8003afa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003afe:	6823      	ldr	r3, [r4, #0]
 8003b00:	6829      	ldr	r1, [r5, #0]
 8003b02:	061f      	lsls	r7, r3, #24
 8003b04:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b08:	d402      	bmi.n	8003b10 <_printf_i+0x18c>
 8003b0a:	065f      	lsls	r7, r3, #25
 8003b0c:	bf48      	it	mi
 8003b0e:	b2b6      	uxthmi	r6, r6
 8003b10:	07df      	lsls	r7, r3, #31
 8003b12:	bf48      	it	mi
 8003b14:	f043 0320 	orrmi.w	r3, r3, #32
 8003b18:	6029      	str	r1, [r5, #0]
 8003b1a:	bf48      	it	mi
 8003b1c:	6023      	strmi	r3, [r4, #0]
 8003b1e:	b91e      	cbnz	r6, 8003b28 <_printf_i+0x1a4>
 8003b20:	6823      	ldr	r3, [r4, #0]
 8003b22:	f023 0320 	bic.w	r3, r3, #32
 8003b26:	6023      	str	r3, [r4, #0]
 8003b28:	2310      	movs	r3, #16
 8003b2a:	e7a7      	b.n	8003a7c <_printf_i+0xf8>
 8003b2c:	4824      	ldr	r0, [pc, #144]	; (8003bc0 <_printf_i+0x23c>)
 8003b2e:	e7e4      	b.n	8003afa <_printf_i+0x176>
 8003b30:	4615      	mov	r5, r2
 8003b32:	e7bd      	b.n	8003ab0 <_printf_i+0x12c>
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	6826      	ldr	r6, [r4, #0]
 8003b38:	6961      	ldr	r1, [r4, #20]
 8003b3a:	1d18      	adds	r0, r3, #4
 8003b3c:	6028      	str	r0, [r5, #0]
 8003b3e:	0635      	lsls	r5, r6, #24
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	d501      	bpl.n	8003b48 <_printf_i+0x1c4>
 8003b44:	6019      	str	r1, [r3, #0]
 8003b46:	e002      	b.n	8003b4e <_printf_i+0x1ca>
 8003b48:	0670      	lsls	r0, r6, #25
 8003b4a:	d5fb      	bpl.n	8003b44 <_printf_i+0x1c0>
 8003b4c:	8019      	strh	r1, [r3, #0]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	6123      	str	r3, [r4, #16]
 8003b52:	4615      	mov	r5, r2
 8003b54:	e7bc      	b.n	8003ad0 <_printf_i+0x14c>
 8003b56:	682b      	ldr	r3, [r5, #0]
 8003b58:	1d1a      	adds	r2, r3, #4
 8003b5a:	602a      	str	r2, [r5, #0]
 8003b5c:	681d      	ldr	r5, [r3, #0]
 8003b5e:	6862      	ldr	r2, [r4, #4]
 8003b60:	2100      	movs	r1, #0
 8003b62:	4628      	mov	r0, r5
 8003b64:	f7fc fb44 	bl	80001f0 <memchr>
 8003b68:	b108      	cbz	r0, 8003b6e <_printf_i+0x1ea>
 8003b6a:	1b40      	subs	r0, r0, r5
 8003b6c:	6060      	str	r0, [r4, #4]
 8003b6e:	6863      	ldr	r3, [r4, #4]
 8003b70:	6123      	str	r3, [r4, #16]
 8003b72:	2300      	movs	r3, #0
 8003b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b78:	e7aa      	b.n	8003ad0 <_printf_i+0x14c>
 8003b7a:	6923      	ldr	r3, [r4, #16]
 8003b7c:	462a      	mov	r2, r5
 8003b7e:	4649      	mov	r1, r9
 8003b80:	4640      	mov	r0, r8
 8003b82:	47d0      	blx	sl
 8003b84:	3001      	adds	r0, #1
 8003b86:	d0ad      	beq.n	8003ae4 <_printf_i+0x160>
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	079b      	lsls	r3, r3, #30
 8003b8c:	d413      	bmi.n	8003bb6 <_printf_i+0x232>
 8003b8e:	68e0      	ldr	r0, [r4, #12]
 8003b90:	9b03      	ldr	r3, [sp, #12]
 8003b92:	4298      	cmp	r0, r3
 8003b94:	bfb8      	it	lt
 8003b96:	4618      	movlt	r0, r3
 8003b98:	e7a6      	b.n	8003ae8 <_printf_i+0x164>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	4632      	mov	r2, r6
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	4640      	mov	r0, r8
 8003ba2:	47d0      	blx	sl
 8003ba4:	3001      	adds	r0, #1
 8003ba6:	d09d      	beq.n	8003ae4 <_printf_i+0x160>
 8003ba8:	3501      	adds	r5, #1
 8003baa:	68e3      	ldr	r3, [r4, #12]
 8003bac:	9903      	ldr	r1, [sp, #12]
 8003bae:	1a5b      	subs	r3, r3, r1
 8003bb0:	42ab      	cmp	r3, r5
 8003bb2:	dcf2      	bgt.n	8003b9a <_printf_i+0x216>
 8003bb4:	e7eb      	b.n	8003b8e <_printf_i+0x20a>
 8003bb6:	2500      	movs	r5, #0
 8003bb8:	f104 0619 	add.w	r6, r4, #25
 8003bbc:	e7f5      	b.n	8003baa <_printf_i+0x226>
 8003bbe:	bf00      	nop
 8003bc0:	0800403f 	.word	0x0800403f
 8003bc4:	08004050 	.word	0x08004050

08003bc8 <__sflush_r>:
 8003bc8:	898a      	ldrh	r2, [r1, #12]
 8003bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bce:	4605      	mov	r5, r0
 8003bd0:	0710      	lsls	r0, r2, #28
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	d458      	bmi.n	8003c88 <__sflush_r+0xc0>
 8003bd6:	684b      	ldr	r3, [r1, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	dc05      	bgt.n	8003be8 <__sflush_r+0x20>
 8003bdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	dc02      	bgt.n	8003be8 <__sflush_r+0x20>
 8003be2:	2000      	movs	r0, #0
 8003be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003be8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003bea:	2e00      	cmp	r6, #0
 8003bec:	d0f9      	beq.n	8003be2 <__sflush_r+0x1a>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003bf4:	682f      	ldr	r7, [r5, #0]
 8003bf6:	6a21      	ldr	r1, [r4, #32]
 8003bf8:	602b      	str	r3, [r5, #0]
 8003bfa:	d032      	beq.n	8003c62 <__sflush_r+0x9a>
 8003bfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003bfe:	89a3      	ldrh	r3, [r4, #12]
 8003c00:	075a      	lsls	r2, r3, #29
 8003c02:	d505      	bpl.n	8003c10 <__sflush_r+0x48>
 8003c04:	6863      	ldr	r3, [r4, #4]
 8003c06:	1ac0      	subs	r0, r0, r3
 8003c08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c0a:	b10b      	cbz	r3, 8003c10 <__sflush_r+0x48>
 8003c0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c0e:	1ac0      	subs	r0, r0, r3
 8003c10:	2300      	movs	r3, #0
 8003c12:	4602      	mov	r2, r0
 8003c14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c16:	6a21      	ldr	r1, [r4, #32]
 8003c18:	4628      	mov	r0, r5
 8003c1a:	47b0      	blx	r6
 8003c1c:	1c43      	adds	r3, r0, #1
 8003c1e:	89a3      	ldrh	r3, [r4, #12]
 8003c20:	d106      	bne.n	8003c30 <__sflush_r+0x68>
 8003c22:	6829      	ldr	r1, [r5, #0]
 8003c24:	291d      	cmp	r1, #29
 8003c26:	d82b      	bhi.n	8003c80 <__sflush_r+0xb8>
 8003c28:	4a29      	ldr	r2, [pc, #164]	; (8003cd0 <__sflush_r+0x108>)
 8003c2a:	410a      	asrs	r2, r1
 8003c2c:	07d6      	lsls	r6, r2, #31
 8003c2e:	d427      	bmi.n	8003c80 <__sflush_r+0xb8>
 8003c30:	2200      	movs	r2, #0
 8003c32:	6062      	str	r2, [r4, #4]
 8003c34:	04d9      	lsls	r1, r3, #19
 8003c36:	6922      	ldr	r2, [r4, #16]
 8003c38:	6022      	str	r2, [r4, #0]
 8003c3a:	d504      	bpl.n	8003c46 <__sflush_r+0x7e>
 8003c3c:	1c42      	adds	r2, r0, #1
 8003c3e:	d101      	bne.n	8003c44 <__sflush_r+0x7c>
 8003c40:	682b      	ldr	r3, [r5, #0]
 8003c42:	b903      	cbnz	r3, 8003c46 <__sflush_r+0x7e>
 8003c44:	6560      	str	r0, [r4, #84]	; 0x54
 8003c46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c48:	602f      	str	r7, [r5, #0]
 8003c4a:	2900      	cmp	r1, #0
 8003c4c:	d0c9      	beq.n	8003be2 <__sflush_r+0x1a>
 8003c4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c52:	4299      	cmp	r1, r3
 8003c54:	d002      	beq.n	8003c5c <__sflush_r+0x94>
 8003c56:	4628      	mov	r0, r5
 8003c58:	f7ff fbea 	bl	8003430 <_free_r>
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	6360      	str	r0, [r4, #52]	; 0x34
 8003c60:	e7c0      	b.n	8003be4 <__sflush_r+0x1c>
 8003c62:	2301      	movs	r3, #1
 8003c64:	4628      	mov	r0, r5
 8003c66:	47b0      	blx	r6
 8003c68:	1c41      	adds	r1, r0, #1
 8003c6a:	d1c8      	bne.n	8003bfe <__sflush_r+0x36>
 8003c6c:	682b      	ldr	r3, [r5, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0c5      	beq.n	8003bfe <__sflush_r+0x36>
 8003c72:	2b1d      	cmp	r3, #29
 8003c74:	d001      	beq.n	8003c7a <__sflush_r+0xb2>
 8003c76:	2b16      	cmp	r3, #22
 8003c78:	d101      	bne.n	8003c7e <__sflush_r+0xb6>
 8003c7a:	602f      	str	r7, [r5, #0]
 8003c7c:	e7b1      	b.n	8003be2 <__sflush_r+0x1a>
 8003c7e:	89a3      	ldrh	r3, [r4, #12]
 8003c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c84:	81a3      	strh	r3, [r4, #12]
 8003c86:	e7ad      	b.n	8003be4 <__sflush_r+0x1c>
 8003c88:	690f      	ldr	r7, [r1, #16]
 8003c8a:	2f00      	cmp	r7, #0
 8003c8c:	d0a9      	beq.n	8003be2 <__sflush_r+0x1a>
 8003c8e:	0793      	lsls	r3, r2, #30
 8003c90:	680e      	ldr	r6, [r1, #0]
 8003c92:	bf08      	it	eq
 8003c94:	694b      	ldreq	r3, [r1, #20]
 8003c96:	600f      	str	r7, [r1, #0]
 8003c98:	bf18      	it	ne
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	eba6 0807 	sub.w	r8, r6, r7
 8003ca0:	608b      	str	r3, [r1, #8]
 8003ca2:	f1b8 0f00 	cmp.w	r8, #0
 8003ca6:	dd9c      	ble.n	8003be2 <__sflush_r+0x1a>
 8003ca8:	6a21      	ldr	r1, [r4, #32]
 8003caa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003cac:	4643      	mov	r3, r8
 8003cae:	463a      	mov	r2, r7
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	47b0      	blx	r6
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	dc06      	bgt.n	8003cc6 <__sflush_r+0xfe>
 8003cb8:	89a3      	ldrh	r3, [r4, #12]
 8003cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cbe:	81a3      	strh	r3, [r4, #12]
 8003cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc4:	e78e      	b.n	8003be4 <__sflush_r+0x1c>
 8003cc6:	4407      	add	r7, r0
 8003cc8:	eba8 0800 	sub.w	r8, r8, r0
 8003ccc:	e7e9      	b.n	8003ca2 <__sflush_r+0xda>
 8003cce:	bf00      	nop
 8003cd0:	dfbffffe 	.word	0xdfbffffe

08003cd4 <_fflush_r>:
 8003cd4:	b538      	push	{r3, r4, r5, lr}
 8003cd6:	690b      	ldr	r3, [r1, #16]
 8003cd8:	4605      	mov	r5, r0
 8003cda:	460c      	mov	r4, r1
 8003cdc:	b913      	cbnz	r3, 8003ce4 <_fflush_r+0x10>
 8003cde:	2500      	movs	r5, #0
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	bd38      	pop	{r3, r4, r5, pc}
 8003ce4:	b118      	cbz	r0, 8003cee <_fflush_r+0x1a>
 8003ce6:	6a03      	ldr	r3, [r0, #32]
 8003ce8:	b90b      	cbnz	r3, 8003cee <_fflush_r+0x1a>
 8003cea:	f7ff fa91 	bl	8003210 <__sinit>
 8003cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f3      	beq.n	8003cde <_fflush_r+0xa>
 8003cf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cf8:	07d0      	lsls	r0, r2, #31
 8003cfa:	d404      	bmi.n	8003d06 <_fflush_r+0x32>
 8003cfc:	0599      	lsls	r1, r3, #22
 8003cfe:	d402      	bmi.n	8003d06 <_fflush_r+0x32>
 8003d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d02:	f7ff fb92 	bl	800342a <__retarget_lock_acquire_recursive>
 8003d06:	4628      	mov	r0, r5
 8003d08:	4621      	mov	r1, r4
 8003d0a:	f7ff ff5d 	bl	8003bc8 <__sflush_r>
 8003d0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d10:	07da      	lsls	r2, r3, #31
 8003d12:	4605      	mov	r5, r0
 8003d14:	d4e4      	bmi.n	8003ce0 <_fflush_r+0xc>
 8003d16:	89a3      	ldrh	r3, [r4, #12]
 8003d18:	059b      	lsls	r3, r3, #22
 8003d1a:	d4e1      	bmi.n	8003ce0 <_fflush_r+0xc>
 8003d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d1e:	f7ff fb85 	bl	800342c <__retarget_lock_release_recursive>
 8003d22:	e7dd      	b.n	8003ce0 <_fflush_r+0xc>

08003d24 <_putc_r>:
 8003d24:	b570      	push	{r4, r5, r6, lr}
 8003d26:	460d      	mov	r5, r1
 8003d28:	4614      	mov	r4, r2
 8003d2a:	4606      	mov	r6, r0
 8003d2c:	b118      	cbz	r0, 8003d36 <_putc_r+0x12>
 8003d2e:	6a03      	ldr	r3, [r0, #32]
 8003d30:	b90b      	cbnz	r3, 8003d36 <_putc_r+0x12>
 8003d32:	f7ff fa6d 	bl	8003210 <__sinit>
 8003d36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d38:	07d8      	lsls	r0, r3, #31
 8003d3a:	d405      	bmi.n	8003d48 <_putc_r+0x24>
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	0599      	lsls	r1, r3, #22
 8003d40:	d402      	bmi.n	8003d48 <_putc_r+0x24>
 8003d42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d44:	f7ff fb71 	bl	800342a <__retarget_lock_acquire_recursive>
 8003d48:	68a3      	ldr	r3, [r4, #8]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	60a3      	str	r3, [r4, #8]
 8003d50:	da05      	bge.n	8003d5e <_putc_r+0x3a>
 8003d52:	69a2      	ldr	r2, [r4, #24]
 8003d54:	4293      	cmp	r3, r2
 8003d56:	db12      	blt.n	8003d7e <_putc_r+0x5a>
 8003d58:	b2eb      	uxtb	r3, r5
 8003d5a:	2b0a      	cmp	r3, #10
 8003d5c:	d00f      	beq.n	8003d7e <_putc_r+0x5a>
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	6022      	str	r2, [r4, #0]
 8003d64:	701d      	strb	r5, [r3, #0]
 8003d66:	b2ed      	uxtb	r5, r5
 8003d68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d6a:	07da      	lsls	r2, r3, #31
 8003d6c:	d405      	bmi.n	8003d7a <_putc_r+0x56>
 8003d6e:	89a3      	ldrh	r3, [r4, #12]
 8003d70:	059b      	lsls	r3, r3, #22
 8003d72:	d402      	bmi.n	8003d7a <_putc_r+0x56>
 8003d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d76:	f7ff fb59 	bl	800342c <__retarget_lock_release_recursive>
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	bd70      	pop	{r4, r5, r6, pc}
 8003d7e:	4629      	mov	r1, r5
 8003d80:	4622      	mov	r2, r4
 8003d82:	4630      	mov	r0, r6
 8003d84:	f000 f802 	bl	8003d8c <__swbuf_r>
 8003d88:	4605      	mov	r5, r0
 8003d8a:	e7ed      	b.n	8003d68 <_putc_r+0x44>

08003d8c <__swbuf_r>:
 8003d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8e:	460e      	mov	r6, r1
 8003d90:	4614      	mov	r4, r2
 8003d92:	4605      	mov	r5, r0
 8003d94:	b118      	cbz	r0, 8003d9e <__swbuf_r+0x12>
 8003d96:	6a03      	ldr	r3, [r0, #32]
 8003d98:	b90b      	cbnz	r3, 8003d9e <__swbuf_r+0x12>
 8003d9a:	f7ff fa39 	bl	8003210 <__sinit>
 8003d9e:	69a3      	ldr	r3, [r4, #24]
 8003da0:	60a3      	str	r3, [r4, #8]
 8003da2:	89a3      	ldrh	r3, [r4, #12]
 8003da4:	071a      	lsls	r2, r3, #28
 8003da6:	d525      	bpl.n	8003df4 <__swbuf_r+0x68>
 8003da8:	6923      	ldr	r3, [r4, #16]
 8003daa:	b31b      	cbz	r3, 8003df4 <__swbuf_r+0x68>
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	6922      	ldr	r2, [r4, #16]
 8003db0:	1a98      	subs	r0, r3, r2
 8003db2:	6963      	ldr	r3, [r4, #20]
 8003db4:	b2f6      	uxtb	r6, r6
 8003db6:	4283      	cmp	r3, r0
 8003db8:	4637      	mov	r7, r6
 8003dba:	dc04      	bgt.n	8003dc6 <__swbuf_r+0x3a>
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	f7ff ff88 	bl	8003cd4 <_fflush_r>
 8003dc4:	b9e0      	cbnz	r0, 8003e00 <__swbuf_r+0x74>
 8003dc6:	68a3      	ldr	r3, [r4, #8]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	60a3      	str	r3, [r4, #8]
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	6022      	str	r2, [r4, #0]
 8003dd2:	701e      	strb	r6, [r3, #0]
 8003dd4:	6962      	ldr	r2, [r4, #20]
 8003dd6:	1c43      	adds	r3, r0, #1
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d004      	beq.n	8003de6 <__swbuf_r+0x5a>
 8003ddc:	89a3      	ldrh	r3, [r4, #12]
 8003dde:	07db      	lsls	r3, r3, #31
 8003de0:	d506      	bpl.n	8003df0 <__swbuf_r+0x64>
 8003de2:	2e0a      	cmp	r6, #10
 8003de4:	d104      	bne.n	8003df0 <__swbuf_r+0x64>
 8003de6:	4621      	mov	r1, r4
 8003de8:	4628      	mov	r0, r5
 8003dea:	f7ff ff73 	bl	8003cd4 <_fflush_r>
 8003dee:	b938      	cbnz	r0, 8003e00 <__swbuf_r+0x74>
 8003df0:	4638      	mov	r0, r7
 8003df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003df4:	4621      	mov	r1, r4
 8003df6:	4628      	mov	r0, r5
 8003df8:	f000 f806 	bl	8003e08 <__swsetup_r>
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	d0d5      	beq.n	8003dac <__swbuf_r+0x20>
 8003e00:	f04f 37ff 	mov.w	r7, #4294967295
 8003e04:	e7f4      	b.n	8003df0 <__swbuf_r+0x64>
	...

08003e08 <__swsetup_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	4b2a      	ldr	r3, [pc, #168]	; (8003eb4 <__swsetup_r+0xac>)
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	460c      	mov	r4, r1
 8003e12:	b118      	cbz	r0, 8003e1c <__swsetup_r+0x14>
 8003e14:	6a03      	ldr	r3, [r0, #32]
 8003e16:	b90b      	cbnz	r3, 8003e1c <__swsetup_r+0x14>
 8003e18:	f7ff f9fa 	bl	8003210 <__sinit>
 8003e1c:	89a3      	ldrh	r3, [r4, #12]
 8003e1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e22:	0718      	lsls	r0, r3, #28
 8003e24:	d422      	bmi.n	8003e6c <__swsetup_r+0x64>
 8003e26:	06d9      	lsls	r1, r3, #27
 8003e28:	d407      	bmi.n	8003e3a <__swsetup_r+0x32>
 8003e2a:	2309      	movs	r3, #9
 8003e2c:	602b      	str	r3, [r5, #0]
 8003e2e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e32:	81a3      	strh	r3, [r4, #12]
 8003e34:	f04f 30ff 	mov.w	r0, #4294967295
 8003e38:	e034      	b.n	8003ea4 <__swsetup_r+0x9c>
 8003e3a:	0758      	lsls	r0, r3, #29
 8003e3c:	d512      	bpl.n	8003e64 <__swsetup_r+0x5c>
 8003e3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e40:	b141      	cbz	r1, 8003e54 <__swsetup_r+0x4c>
 8003e42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e46:	4299      	cmp	r1, r3
 8003e48:	d002      	beq.n	8003e50 <__swsetup_r+0x48>
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	f7ff faf0 	bl	8003430 <_free_r>
 8003e50:	2300      	movs	r3, #0
 8003e52:	6363      	str	r3, [r4, #52]	; 0x34
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e5a:	81a3      	strh	r3, [r4, #12]
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	6063      	str	r3, [r4, #4]
 8003e60:	6923      	ldr	r3, [r4, #16]
 8003e62:	6023      	str	r3, [r4, #0]
 8003e64:	89a3      	ldrh	r3, [r4, #12]
 8003e66:	f043 0308 	orr.w	r3, r3, #8
 8003e6a:	81a3      	strh	r3, [r4, #12]
 8003e6c:	6923      	ldr	r3, [r4, #16]
 8003e6e:	b94b      	cbnz	r3, 8003e84 <__swsetup_r+0x7c>
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e7a:	d003      	beq.n	8003e84 <__swsetup_r+0x7c>
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	4628      	mov	r0, r5
 8003e80:	f000 f850 	bl	8003f24 <__smakebuf_r>
 8003e84:	89a0      	ldrh	r0, [r4, #12]
 8003e86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e8a:	f010 0301 	ands.w	r3, r0, #1
 8003e8e:	d00a      	beq.n	8003ea6 <__swsetup_r+0x9e>
 8003e90:	2300      	movs	r3, #0
 8003e92:	60a3      	str	r3, [r4, #8]
 8003e94:	6963      	ldr	r3, [r4, #20]
 8003e96:	425b      	negs	r3, r3
 8003e98:	61a3      	str	r3, [r4, #24]
 8003e9a:	6923      	ldr	r3, [r4, #16]
 8003e9c:	b943      	cbnz	r3, 8003eb0 <__swsetup_r+0xa8>
 8003e9e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ea2:	d1c4      	bne.n	8003e2e <__swsetup_r+0x26>
 8003ea4:	bd38      	pop	{r3, r4, r5, pc}
 8003ea6:	0781      	lsls	r1, r0, #30
 8003ea8:	bf58      	it	pl
 8003eaa:	6963      	ldrpl	r3, [r4, #20]
 8003eac:	60a3      	str	r3, [r4, #8]
 8003eae:	e7f4      	b.n	8003e9a <__swsetup_r+0x92>
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	e7f7      	b.n	8003ea4 <__swsetup_r+0x9c>
 8003eb4:	2000006c 	.word	0x2000006c

08003eb8 <_sbrk_r>:
 8003eb8:	b538      	push	{r3, r4, r5, lr}
 8003eba:	4d06      	ldr	r5, [pc, #24]	; (8003ed4 <_sbrk_r+0x1c>)
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	4608      	mov	r0, r1
 8003ec2:	602b      	str	r3, [r5, #0]
 8003ec4:	f7fc fece 	bl	8000c64 <_sbrk>
 8003ec8:	1c43      	adds	r3, r0, #1
 8003eca:	d102      	bne.n	8003ed2 <_sbrk_r+0x1a>
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	b103      	cbz	r3, 8003ed2 <_sbrk_r+0x1a>
 8003ed0:	6023      	str	r3, [r4, #0]
 8003ed2:	bd38      	pop	{r3, r4, r5, pc}
 8003ed4:	20000344 	.word	0x20000344

08003ed8 <__swhatbuf_r>:
 8003ed8:	b570      	push	{r4, r5, r6, lr}
 8003eda:	460c      	mov	r4, r1
 8003edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee0:	2900      	cmp	r1, #0
 8003ee2:	b096      	sub	sp, #88	; 0x58
 8003ee4:	4615      	mov	r5, r2
 8003ee6:	461e      	mov	r6, r3
 8003ee8:	da0d      	bge.n	8003f06 <__swhatbuf_r+0x2e>
 8003eea:	89a3      	ldrh	r3, [r4, #12]
 8003eec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003ef0:	f04f 0100 	mov.w	r1, #0
 8003ef4:	bf0c      	ite	eq
 8003ef6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003efa:	2340      	movne	r3, #64	; 0x40
 8003efc:	2000      	movs	r0, #0
 8003efe:	6031      	str	r1, [r6, #0]
 8003f00:	602b      	str	r3, [r5, #0]
 8003f02:	b016      	add	sp, #88	; 0x58
 8003f04:	bd70      	pop	{r4, r5, r6, pc}
 8003f06:	466a      	mov	r2, sp
 8003f08:	f000 f848 	bl	8003f9c <_fstat_r>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	dbec      	blt.n	8003eea <__swhatbuf_r+0x12>
 8003f10:	9901      	ldr	r1, [sp, #4]
 8003f12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003f16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003f1a:	4259      	negs	r1, r3
 8003f1c:	4159      	adcs	r1, r3
 8003f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f22:	e7eb      	b.n	8003efc <__swhatbuf_r+0x24>

08003f24 <__smakebuf_r>:
 8003f24:	898b      	ldrh	r3, [r1, #12]
 8003f26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f28:	079d      	lsls	r5, r3, #30
 8003f2a:	4606      	mov	r6, r0
 8003f2c:	460c      	mov	r4, r1
 8003f2e:	d507      	bpl.n	8003f40 <__smakebuf_r+0x1c>
 8003f30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f34:	6023      	str	r3, [r4, #0]
 8003f36:	6123      	str	r3, [r4, #16]
 8003f38:	2301      	movs	r3, #1
 8003f3a:	6163      	str	r3, [r4, #20]
 8003f3c:	b002      	add	sp, #8
 8003f3e:	bd70      	pop	{r4, r5, r6, pc}
 8003f40:	ab01      	add	r3, sp, #4
 8003f42:	466a      	mov	r2, sp
 8003f44:	f7ff ffc8 	bl	8003ed8 <__swhatbuf_r>
 8003f48:	9900      	ldr	r1, [sp, #0]
 8003f4a:	4605      	mov	r5, r0
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f7ff fadb 	bl	8003508 <_malloc_r>
 8003f52:	b948      	cbnz	r0, 8003f68 <__smakebuf_r+0x44>
 8003f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f58:	059a      	lsls	r2, r3, #22
 8003f5a:	d4ef      	bmi.n	8003f3c <__smakebuf_r+0x18>
 8003f5c:	f023 0303 	bic.w	r3, r3, #3
 8003f60:	f043 0302 	orr.w	r3, r3, #2
 8003f64:	81a3      	strh	r3, [r4, #12]
 8003f66:	e7e3      	b.n	8003f30 <__smakebuf_r+0xc>
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	6020      	str	r0, [r4, #0]
 8003f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f70:	81a3      	strh	r3, [r4, #12]
 8003f72:	9b00      	ldr	r3, [sp, #0]
 8003f74:	6163      	str	r3, [r4, #20]
 8003f76:	9b01      	ldr	r3, [sp, #4]
 8003f78:	6120      	str	r0, [r4, #16]
 8003f7a:	b15b      	cbz	r3, 8003f94 <__smakebuf_r+0x70>
 8003f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f80:	4630      	mov	r0, r6
 8003f82:	f000 f81d 	bl	8003fc0 <_isatty_r>
 8003f86:	b128      	cbz	r0, 8003f94 <__smakebuf_r+0x70>
 8003f88:	89a3      	ldrh	r3, [r4, #12]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	81a3      	strh	r3, [r4, #12]
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	431d      	orrs	r5, r3
 8003f98:	81a5      	strh	r5, [r4, #12]
 8003f9a:	e7cf      	b.n	8003f3c <__smakebuf_r+0x18>

08003f9c <_fstat_r>:
 8003f9c:	b538      	push	{r3, r4, r5, lr}
 8003f9e:	4d07      	ldr	r5, [pc, #28]	; (8003fbc <_fstat_r+0x20>)
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	4604      	mov	r4, r0
 8003fa4:	4608      	mov	r0, r1
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	602b      	str	r3, [r5, #0]
 8003faa:	f7fe ff22 	bl	8002df2 <_fstat>
 8003fae:	1c43      	adds	r3, r0, #1
 8003fb0:	d102      	bne.n	8003fb8 <_fstat_r+0x1c>
 8003fb2:	682b      	ldr	r3, [r5, #0]
 8003fb4:	b103      	cbz	r3, 8003fb8 <_fstat_r+0x1c>
 8003fb6:	6023      	str	r3, [r4, #0]
 8003fb8:	bd38      	pop	{r3, r4, r5, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000344 	.word	0x20000344

08003fc0 <_isatty_r>:
 8003fc0:	b538      	push	{r3, r4, r5, lr}
 8003fc2:	4d06      	ldr	r5, [pc, #24]	; (8003fdc <_isatty_r+0x1c>)
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	4608      	mov	r0, r1
 8003fca:	602b      	str	r3, [r5, #0]
 8003fcc:	f7ff f878 	bl	80030c0 <_isatty>
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	d102      	bne.n	8003fda <_isatty_r+0x1a>
 8003fd4:	682b      	ldr	r3, [r5, #0]
 8003fd6:	b103      	cbz	r3, 8003fda <_isatty_r+0x1a>
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	bd38      	pop	{r3, r4, r5, pc}
 8003fdc:	20000344 	.word	0x20000344

08003fe0 <_init>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	bf00      	nop
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr

08003fec <_fini>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	bf00      	nop
 8003ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff2:	bc08      	pop	{r3}
 8003ff4:	469e      	mov	lr, r3
 8003ff6:	4770      	bx	lr
