
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cf4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08007e98  08007e98  00017e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082ac  080082ac  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080082ac  080082ac  000182ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082b4  080082b4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082b4  080082b4  000182b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082b8  080082b8  000182b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080082bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f0  200001e4  080084a0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  080084a0  000204d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008c0a  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001818  00000000  00000000  00028e61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000940  00000000  00000000  0002a680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000071b  00000000  00000000  0002afc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015bfe  00000000  00000000  0002b6db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b9bb  00000000  00000000  000412d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008622b  00000000  00000000  0004cc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003bd4  00000000  00000000  000d2ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d6a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007e7c 	.word	0x08007e7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08007e7c 	.word	0x08007e7c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <lcd_sendHalf>:
#include "stm32f4xx.h"
#include "lcd.h"
#include "main.h"

void lcd_sendHalf(uint8_t data)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
	LCD_E_HIGH;
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	4819      	ldr	r0, [pc, #100]	; (8000f28 <lcd_sendHalf+0x74>)
 8000ec4:	f001 fc34 	bl	8002730 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (data & 0x01));
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	2180      	movs	r1, #128	; 0x80
 8000ed4:	4815      	ldr	r0, [pc, #84]	; (8000f2c <lcd_sendHalf+0x78>)
 8000ed6:	f001 fc2b 	bl	8002730 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (data & 0x02));
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ee8:	4810      	ldr	r0, [pc, #64]	; (8000f2c <lcd_sendHalf+0x78>)
 8000eea:	f001 fc21 	bl	8002730 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (data & 0x04));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 0304 	and.w	r3, r3, #4
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efc:	480b      	ldr	r0, [pc, #44]	; (8000f2c <lcd_sendHalf+0x78>)
 8000efe:	f001 fc17 	bl	8002730 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (data & 0x08));
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f10:	4806      	ldr	r0, [pc, #24]	; (8000f2c <lcd_sendHalf+0x78>)
 8000f12:	f001 fc0d 	bl	8002730 <HAL_GPIO_WritePin>
	LCD_E_LOW;
 8000f16:	2200      	movs	r2, #0
 8000f18:	2102      	movs	r1, #2
 8000f1a:	4803      	ldr	r0, [pc, #12]	; (8000f28 <lcd_sendHalf+0x74>)
 8000f1c:	f001 fc08 	bl	8002730 <HAL_GPIO_WritePin>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	40021000 	.word	0x40021000

08000f30 <lcd_write_byte>:
void lcd_write_byte(uint8_t data)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	lcd_sendHalf(data >> 4);
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	091b      	lsrs	r3, r3, #4
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ffb7 	bl	8000eb4 <lcd_sendHalf>
	lcd_sendHalf(data);
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ffb3 	bl	8000eb4 <lcd_sendHalf>
	HAL_Delay(1);
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f001 f960 	bl	8002214 <HAL_Delay>
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <lcd_write_cmd>:
void lcd_write_cmd(uint8_t cmd)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	LCD_RS_LOW;
 8000f66:	2200      	movs	r2, #0
 8000f68:	2101      	movs	r1, #1
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <lcd_write_cmd+0x24>)
 8000f6c:	f001 fbe0 	bl	8002730 <HAL_GPIO_WritePin>
	lcd_write_byte(cmd);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ffdc 	bl	8000f30 <lcd_write_byte>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40020400 	.word	0x40020400

08000f84 <lcd_char>:
void lcd_char(char data)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	LCD_RS_HIGH;
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2101      	movs	r1, #1
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <lcd_char+0x24>)
 8000f94:	f001 fbcc 	bl	8002730 <HAL_GPIO_WritePin>
	lcd_write_byte(data);
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ffc8 	bl	8000f30 <lcd_write_byte>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40020400 	.word	0x40020400

08000fac <lcd_gpio_init>:

void lcd_gpio_init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
	// Włączamy taktowanie portów:
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b34      	ldr	r3, [pc, #208]	; (8001088 <lcd_gpio_init+0xdc>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a33      	ldr	r2, [pc, #204]	; (8001088 <lcd_gpio_init+0xdc>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b31      	ldr	r3, [pc, #196]	; (8001088 <lcd_gpio_init+0xdc>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <lcd_gpio_init+0xdc>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a2c      	ldr	r2, [pc, #176]	; (8001088 <lcd_gpio_init+0xdc>)
 8000fd8:	f043 0310 	orr.w	r3, r3, #16
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b2a      	ldr	r3, [pc, #168]	; (8001088 <lcd_gpio_init+0xdc>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0310 	and.w	r3, r3, #16
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

	// Ustawiamy piny jako wyjścia
	 GPIO_InitTypeDef gpio;

	 gpio.Pin = LCD_E_Pin;
 8000fea:	2302      	movs	r3, #2
 8000fec:	60fb      	str	r3, [r7, #12]
//	 gpio.Pin = LCD_RS_Pin;

	 gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	613b      	str	r3, [r7, #16]
	 gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61bb      	str	r3, [r7, #24]
	 HAL_GPIO_Init(GPIOB, &gpio);
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4823      	ldr	r0, [pc, #140]	; (800108c <lcd_gpio_init+0xe0>)
 8000ffe:	f001 fa13 	bl	8002428 <HAL_GPIO_Init>

	 gpio.Pin = LCD_RS_Pin;
 8001002:	2301      	movs	r3, #1
 8001004:	60fb      	str	r3, [r7, #12]
	 gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	613b      	str	r3, [r7, #16]
	 gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800100a:	2302      	movs	r3, #2
 800100c:	61bb      	str	r3, [r7, #24]
	 HAL_GPIO_Init(GPIOB, &gpio);
 800100e:	f107 030c 	add.w	r3, r7, #12
 8001012:	4619      	mov	r1, r3
 8001014:	481d      	ldr	r0, [pc, #116]	; (800108c <lcd_gpio_init+0xe0>)
 8001016:	f001 fa07 	bl	8002428 <HAL_GPIO_Init>

	 gpio.Pin = LCD_D4_Pin;
 800101a:	2380      	movs	r3, #128	; 0x80
 800101c:	60fb      	str	r3, [r7, #12]
//	 gpio.Pin = LCD_D5_Pin;
//	 gpio.Pin = LCD_D6_Pin;
//	 gpio.Pin = LCD_D7_Pin;

	 gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	613b      	str	r3, [r7, #16]
	 gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8001022:	2302      	movs	r3, #2
 8001024:	61bb      	str	r3, [r7, #24]
	 HAL_GPIO_Init(GPIOE, &gpio);
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	4619      	mov	r1, r3
 800102c:	4818      	ldr	r0, [pc, #96]	; (8001090 <lcd_gpio_init+0xe4>)
 800102e:	f001 f9fb 	bl	8002428 <HAL_GPIO_Init>

	 gpio.Pin = LCD_D5_Pin;
 8001032:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001036:	60fb      	str	r3, [r7, #12]
	 gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	613b      	str	r3, [r7, #16]
	 gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800103c:	2302      	movs	r3, #2
 800103e:	61bb      	str	r3, [r7, #24]
	 HAL_GPIO_Init(GPIOE, &gpio);
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	4619      	mov	r1, r3
 8001046:	4812      	ldr	r0, [pc, #72]	; (8001090 <lcd_gpio_init+0xe4>)
 8001048:	f001 f9ee 	bl	8002428 <HAL_GPIO_Init>

	 gpio.Pin = LCD_D6_Pin;
 800104c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001050:	60fb      	str	r3, [r7, #12]
	 gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	613b      	str	r3, [r7, #16]
	 gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8001056:	2302      	movs	r3, #2
 8001058:	61bb      	str	r3, [r7, #24]
	 HAL_GPIO_Init(GPIOE, &gpio);
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	4619      	mov	r1, r3
 8001060:	480b      	ldr	r0, [pc, #44]	; (8001090 <lcd_gpio_init+0xe4>)
 8001062:	f001 f9e1 	bl	8002428 <HAL_GPIO_Init>

	 gpio.Pin = LCD_D7_Pin;
 8001066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106a:	60fb      	str	r3, [r7, #12]
	 gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	613b      	str	r3, [r7, #16]
	 gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8001070:	2302      	movs	r3, #2
 8001072:	61bb      	str	r3, [r7, #24]
	 HAL_GPIO_Init(GPIOE, &gpio);
 8001074:	f107 030c 	add.w	r3, r7, #12
 8001078:	4619      	mov	r1, r3
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <lcd_gpio_init+0xe4>)
 800107c:	f001 f9d4 	bl	8002428 <HAL_GPIO_Init>

}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40023800 	.word	0x40023800
 800108c:	40020400 	.word	0x40020400
 8001090:	40021000 	.word	0x40021000

08001094 <LCD_Init>:
void LCD_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	lcd_gpio_init();
 8001098:	f7ff ff88 	bl	8000fac <lcd_gpio_init>

	HAL_Delay(20);
 800109c:	2014      	movs	r0, #20
 800109e:	f001 f8b9 	bl	8002214 <HAL_Delay>

	LCD_E_LOW;
 80010a2:	2200      	movs	r2, #0
 80010a4:	2102      	movs	r1, #2
 80010a6:	481a      	ldr	r0, [pc, #104]	; (8001110 <LCD_Init+0x7c>)
 80010a8:	f001 fb42 	bl	8002730 <HAL_GPIO_WritePin>
	LCD_RS_LOW;
 80010ac:	2200      	movs	r2, #0
 80010ae:	2101      	movs	r1, #1
 80010b0:	4817      	ldr	r0, [pc, #92]	; (8001110 <LCD_Init+0x7c>)
 80010b2:	f001 fb3d 	bl	8002730 <HAL_GPIO_WritePin>

	lcd_sendHalf(0x03);
 80010b6:	2003      	movs	r0, #3
 80010b8:	f7ff fefc 	bl	8000eb4 <lcd_sendHalf>
	HAL_Delay(5);
 80010bc:	2005      	movs	r0, #5
 80010be:	f001 f8a9 	bl	8002214 <HAL_Delay>
	HAL_Delay(1);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f001 f8a6 	bl	8002214 <HAL_Delay>
	lcd_sendHalf(0x03);
 80010c8:	2003      	movs	r0, #3
 80010ca:	f7ff fef3 	bl	8000eb4 <lcd_sendHalf>
	HAL_Delay(1);
 80010ce:	2001      	movs	r0, #1
 80010d0:	f001 f8a0 	bl	8002214 <HAL_Delay>
	lcd_sendHalf(0x03);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f7ff feed 	bl	8000eb4 <lcd_sendHalf>
	HAL_Delay(1);
 80010da:	2001      	movs	r0, #1
 80010dc:	f001 f89a 	bl	8002214 <HAL_Delay>
	lcd_sendHalf(0x02);
 80010e0:	2002      	movs	r0, #2
 80010e2:	f7ff fee7 	bl	8000eb4 <lcd_sendHalf>
	HAL_Delay(1);
 80010e6:	2001      	movs	r0, #1
 80010e8:	f001 f894 	bl	8002214 <HAL_Delay>

	// Już jesteśmy w trybie 4-bitowym. Tutaj dokonujemy ustawień wyświetlacza:
	lcd_write_cmd( LCD_FUNC | LCD_4_BIT | LCDC_TWO_LINE | LCDC_FONT_5x7);
 80010ec:	2028      	movs	r0, #40	; 0x28
 80010ee:	f7ff ff35 	bl	8000f5c <lcd_write_cmd>
	lcd_write_cmd( LCD_ONOFF | LCD_DISP_ON );
 80010f2:	200c      	movs	r0, #12
 80010f4:	f7ff ff32 	bl	8000f5c <lcd_write_cmd>
	lcd_write_cmd( LCD_CLEAR );
 80010f8:	2001      	movs	r0, #1
 80010fa:	f7ff ff2f 	bl	8000f5c <lcd_write_cmd>
	HAL_Delay(5);
 80010fe:	2005      	movs	r0, #5
 8001100:	f001 f888 	bl	8002214 <HAL_Delay>
	lcd_write_cmd( LCDC_ENTRY_MODE | LCD_EM_SHIFT_CURSOR | LCD_EM_RIGHT );
 8001104:	2006      	movs	r0, #6
 8001106:	f7ff ff29 	bl	8000f5c <lcd_write_cmd>

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40020400 	.word	0x40020400

08001114 <lcd_locate>:

void lcd_locate(uint8_t x, uint8_t y)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	460a      	mov	r2, r1
 800111e:	71fb      	strb	r3, [r7, #7]
 8001120:	4613      	mov	r3, r2
 8001122:	71bb      	strb	r3, [r7, #6]
	switch(y)
 8001124:	79bb      	ldrb	r3, [r7, #6]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <lcd_locate+0x1c>
 800112a:	2b01      	cmp	r3, #1
 800112c:	d008      	beq.n	8001140 <lcd_locate+0x2c>

		case 1:
			lcd_write_cmd( LCDC_SET_DDRAM | (LCD_LINE2 + x) );
			break;
	}
}
 800112e:	e013      	b.n	8001158 <lcd_locate+0x44>
			lcd_write_cmd( LCDC_SET_DDRAM | (LCD_LINE1 + x) );
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001136:	b2db      	uxtb	r3, r3
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff0f 	bl	8000f5c <lcd_write_cmd>
			break;
 800113e:	e00b      	b.n	8001158 <lcd_locate+0x44>
			lcd_write_cmd( LCDC_SET_DDRAM | (LCD_LINE2 + x) );
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	3340      	adds	r3, #64	; 0x40
 8001144:	b2db      	uxtb	r3, r3
 8001146:	b25b      	sxtb	r3, r3
 8001148:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800114c:	b25b      	sxtb	r3, r3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff03 	bl	8000f5c <lcd_write_cmd>
			break;
 8001156:	bf00      	nop
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <lcd_str_XY>:
{
	while(*text)
		lcd_char(*text++);
}
void lcd_str_XY(uint8_t x, uint8_t y, char *text)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	603a      	str	r2, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	460b      	mov	r3, r1
 800116e:	71bb      	strb	r3, [r7, #6]
	lcd_locate(x,y);
 8001170:	79ba      	ldrb	r2, [r7, #6]
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4611      	mov	r1, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ffcc 	bl	8001114 <lcd_locate>

	while(*text)
 800117c:	e006      	b.n	800118c <lcd_str_XY+0x2c>
		lcd_char(*text++);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	603a      	str	r2, [r7, #0]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fefc 	bl	8000f84 <lcd_char>
	while(*text)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1f4      	bne.n	800117e <lcd_str_XY+0x1e>

}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <lcd_clear>:
void lcd_clear()
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	af00      	add	r7, sp, #0
	lcd_write_cmd( LCD_CLEAR );
 80011a2:	2001      	movs	r0, #1
 80011a4:	f7ff feda 	bl	8000f5c <lcd_write_cmd>
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <I3G4250D_who_check>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool I3G4250D_who_check(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
	uint8_t check = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	71fb      	strb	r3, [r7, #7]
	uint8_t who = 0x8F;
 80011b6:	238f      	movs	r3, #143	; 0x8f
 80011b8:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(naszCS_GPIO_Port, naszCS_Pin, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2108      	movs	r1, #8
 80011be:	480f      	ldr	r0, [pc, #60]	; (80011fc <I3G4250D_who_check+0x50>)
 80011c0:	f001 fab6 	bl	8002730 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&who,1,100);
 80011c4:	1db9      	adds	r1, r7, #6
 80011c6:	2364      	movs	r3, #100	; 0x64
 80011c8:	2201      	movs	r2, #1
 80011ca:	480d      	ldr	r0, [pc, #52]	; (8001200 <I3G4250D_who_check+0x54>)
 80011cc:	f002 ff97 	bl	80040fe <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &check, 1, 100);
 80011d0:	1df9      	adds	r1, r7, #7
 80011d2:	2364      	movs	r3, #100	; 0x64
 80011d4:	2201      	movs	r2, #1
 80011d6:	480a      	ldr	r0, [pc, #40]	; (8001200 <I3G4250D_who_check+0x54>)
 80011d8:	f003 f8cd 	bl	8004376 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(naszCS_GPIO_Port, naszCS_Pin, 1);
 80011dc:	2201      	movs	r2, #1
 80011de:	2108      	movs	r1, #8
 80011e0:	4806      	ldr	r0, [pc, #24]	; (80011fc <I3G4250D_who_check+0x50>)
 80011e2:	f001 faa5 	bl	8002730 <HAL_GPIO_WritePin>
	return check == GYRO_WHO_AM_I;
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2bd3      	cmp	r3, #211	; 0xd3
 80011ea:	bf0c      	ite	eq
 80011ec:	2301      	moveq	r3, #1
 80011ee:	2300      	movne	r3, #0
 80011f0:	b2db      	uxtb	r3, r3
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	20000254 	.word	0x20000254

08001204 <I3G4250D_init>:

void I3G4250D_init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(naszCS_GPIO_Port, naszCS_Pin, 1);
 800120a:	2201      	movs	r2, #1
 800120c:	2108      	movs	r1, #8
 800120e:	4818      	ldr	r0, [pc, #96]	; (8001270 <I3G4250D_init+0x6c>)
 8001210:	f001 fa8e 	bl	8002730 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001214:	2001      	movs	r0, #1
 8001216:	f000 fffd 	bl	8002214 <HAL_Delay>

	uint8_t gyro_ctr1 = 0b00100000;
 800121a:	2320      	movs	r3, #32
 800121c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0b00001111;
 800121e:	230f      	movs	r3, #15
 8001220:	71bb      	strb	r3, [r7, #6]
	if(I3G4250D_who_check())
 8001222:	f7ff ffc3 	bl	80011ac <I3G4250D_who_check>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d016      	beq.n	800125a <I3G4250D_init+0x56>
	{
		//put gyro in normal mode
		HAL_GPIO_WritePin(naszCS_GPIO_Port, naszCS_Pin, 0);
 800122c:	2200      	movs	r2, #0
 800122e:	2108      	movs	r1, #8
 8001230:	480f      	ldr	r0, [pc, #60]	; (8001270 <I3G4250D_init+0x6c>)
 8001232:	f001 fa7d 	bl	8002730 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1,&gyro_ctr1,1,100);
 8001236:	1df9      	adds	r1, r7, #7
 8001238:	2364      	movs	r3, #100	; 0x64
 800123a:	2201      	movs	r2, #1
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <I3G4250D_init+0x70>)
 800123e:	f002 ff5e 	bl	80040fe <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1,&data,1,100);
 8001242:	1db9      	adds	r1, r7, #6
 8001244:	2364      	movs	r3, #100	; 0x64
 8001246:	2201      	movs	r2, #1
 8001248:	480a      	ldr	r0, [pc, #40]	; (8001274 <I3G4250D_init+0x70>)
 800124a:	f002 ff58 	bl	80040fe <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(naszCS_GPIO_Port, naszCS_Pin, 1);
 800124e:	2201      	movs	r2, #1
 8001250:	2108      	movs	r1, #8
 8001252:	4807      	ldr	r0, [pc, #28]	; (8001270 <I3G4250D_init+0x6c>)
 8001254:	f001 fa6c 	bl	8002730 <HAL_GPIO_WritePin>
	else
	{
		printf("ERROR: gyro not found\n");
		HAL_Delay(1000);
	}
}
 8001258:	e006      	b.n	8001268 <I3G4250D_init+0x64>
		printf("ERROR: gyro not found\n");
 800125a:	4807      	ldr	r0, [pc, #28]	; (8001278 <I3G4250D_init+0x74>)
 800125c:	f004 fca0 	bl	8005ba0 <puts>
		HAL_Delay(1000);
 8001260:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001264:	f000 ffd6 	bl	8002214 <HAL_Delay>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000
 8001274:	20000254 	.word	0x20000254
 8001278:	08007e98 	.word	0x08007e98

0800127c <I3G4250D_Read_Gyro>:

void I3G4250D_Read_Gyro(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
	uint8_t odebrane[6] = {0,0,0,0,0,0};
 8001282:	4a3c      	ldr	r2, [pc, #240]	; (8001374 <I3G4250D_Read_Gyro+0xf8>)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	e892 0003 	ldmia.w	r2, {r0, r1}
 800128a:	6018      	str	r0, [r3, #0]
 800128c:	3304      	adds	r3, #4
 800128e:	8019      	strh	r1, [r3, #0]

	for (int i=0; i<6 ; i++)
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	e01c      	b.n	80012d0 <I3G4250D_Read_Gyro+0x54>
	{
	  HAL_GPIO_WritePin(naszCS_GPIO_Port, naszCS_Pin, 0);
 8001296:	2200      	movs	r2, #0
 8001298:	2108      	movs	r1, #8
 800129a:	4837      	ldr	r0, [pc, #220]	; (8001378 <I3G4250D_Read_Gyro+0xfc>)
 800129c:	f001 fa48 	bl	8002730 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1,&gyro_adr[i],1,100);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4a36      	ldr	r2, [pc, #216]	; (800137c <I3G4250D_Read_Gyro+0x100>)
 80012a4:	1899      	adds	r1, r3, r2
 80012a6:	2364      	movs	r3, #100	; 0x64
 80012a8:	2201      	movs	r2, #1
 80012aa:	4835      	ldr	r0, [pc, #212]	; (8001380 <I3G4250D_Read_Gyro+0x104>)
 80012ac:	f002 ff27 	bl	80040fe <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1, &odebrane[i], 1, 100);
 80012b0:	1d3a      	adds	r2, r7, #4
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	18d1      	adds	r1, r2, r3
 80012b6:	2364      	movs	r3, #100	; 0x64
 80012b8:	2201      	movs	r2, #1
 80012ba:	4831      	ldr	r0, [pc, #196]	; (8001380 <I3G4250D_Read_Gyro+0x104>)
 80012bc:	f003 f85b 	bl	8004376 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(naszCS_GPIO_Port, naszCS_Pin, 1);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2108      	movs	r1, #8
 80012c4:	482c      	ldr	r0, [pc, #176]	; (8001378 <I3G4250D_Read_Gyro+0xfc>)
 80012c6:	f001 fa33 	bl	8002730 <HAL_GPIO_WritePin>
	for (int i=0; i<6 ; i++)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3301      	adds	r3, #1
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b05      	cmp	r3, #5
 80012d4:	dddf      	ble.n	8001296 <I3G4250D_Read_Gyro+0x1a>
	}

	gyro_xyz[0]= (int16_t)((odebrane[1] << 8) | odebrane[0]);
 80012d6:	797b      	ldrb	r3, [r7, #5]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21a      	sxth	r2, r3
 80012dc:	793b      	ldrb	r3, [r7, #4]
 80012de:	b21b      	sxth	r3, r3
 80012e0:	4313      	orrs	r3, r2
 80012e2:	b21a      	sxth	r2, r3
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <I3G4250D_Read_Gyro+0x108>)
 80012e6:	801a      	strh	r2, [r3, #0]
	gyro_xyz[1]= (int16_t)((odebrane[3] << 8) | odebrane[2]);
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	021b      	lsls	r3, r3, #8
 80012ec:	b21a      	sxth	r2, r3
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b21a      	sxth	r2, r3
 80012f6:	4b23      	ldr	r3, [pc, #140]	; (8001384 <I3G4250D_Read_Gyro+0x108>)
 80012f8:	805a      	strh	r2, [r3, #2]
	gyro_xyz[2]= (int16_t)((odebrane[5] << 8) | odebrane[4]);
 80012fa:	7a7b      	ldrb	r3, [r7, #9]
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	b21a      	sxth	r2, r3
 8001300:	7a3b      	ldrb	r3, [r7, #8]
 8001302:	b21b      	sxth	r3, r3
 8001304:	4313      	orrs	r3, r2
 8001306:	b21a      	sxth	r2, r3
 8001308:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <I3G4250D_Read_Gyro+0x108>)
 800130a:	809a      	strh	r2, [r3, #4]

	g_x = gyro_xyz[0] * 1/155;
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <I3G4250D_Read_Gyro+0x108>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	4a1d      	ldr	r2, [pc, #116]	; (8001388 <I3G4250D_Read_Gyro+0x10c>)
 8001314:	fb82 1203 	smull	r1, r2, r2, r3
 8001318:	1112      	asrs	r2, r2, #4
 800131a:	17db      	asrs	r3, r3, #31
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <I3G4250D_Read_Gyro+0x110>)
 8001328:	edc3 7a00 	vstr	s15, [r3]
	g_y = gyro_xyz[1] * 1/155;
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <I3G4250D_Read_Gyro+0x108>)
 800132e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001332:	4a15      	ldr	r2, [pc, #84]	; (8001388 <I3G4250D_Read_Gyro+0x10c>)
 8001334:	fb82 1203 	smull	r1, r2, r2, r3
 8001338:	1112      	asrs	r2, r2, #4
 800133a:	17db      	asrs	r3, r3, #31
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <I3G4250D_Read_Gyro+0x114>)
 8001348:	edc3 7a00 	vstr	s15, [r3]
	g_z = gyro_xyz[2] * 1/155;
 800134c:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <I3G4250D_Read_Gyro+0x108>)
 800134e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001352:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <I3G4250D_Read_Gyro+0x10c>)
 8001354:	fb82 1203 	smull	r1, r2, r2, r3
 8001358:	1112      	asrs	r2, r2, #4
 800135a:	17db      	asrs	r3, r3, #31
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <I3G4250D_Read_Gyro+0x118>)
 8001368:	edc3 7a00 	vstr	s15, [r3]
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	08007eb0 	.word	0x08007eb0
 8001378:	40021000 	.word	0x40021000
 800137c:	20000000 	.word	0x20000000
 8001380:	20000254 	.word	0x20000254
 8001384:	200002ac 	.word	0x200002ac
 8001388:	1a6d01a7 	.word	0x1a6d01a7
 800138c:	200002c8 	.word	0x200002c8
 8001390:	200002cc 	.word	0x200002cc
 8001394:	200002d0 	.word	0x200002d0

08001398 <LSM303AGR_init>:

void LSM303AGR_init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af04      	add	r7, sp, #16
	uint8_t check = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, ACC_I2C_ADDR, ACC_ADDR_WHO_AM_I, 1, &check, 1, 1000);
 80013a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a6:	9302      	str	r3, [sp, #8]
 80013a8:	2301      	movs	r3, #1
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2301      	movs	r3, #1
 80013b2:	220f      	movs	r2, #15
 80013b4:	2132      	movs	r1, #50	; 0x32
 80013b6:	4812      	ldr	r0, [pc, #72]	; (8001400 <LSM303AGR_init+0x68>)
 80013b8:	f001 fc12 	bl	8002be0 <HAL_I2C_Mem_Read>

	if(check == ACC_WHO_AM_I)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	2b33      	cmp	r3, #51	; 0x33
 80013c0:	d10f      	bne.n	80013e2 <LSM303AGR_init+0x4a>
	{
		uint8_t data = 0x57;
 80013c2:	2357      	movs	r3, #87	; 0x57
 80013c4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, ACC_I2C_ADDR, ACC_ADDR_CRTL1, 1, &data, 1, 1000);
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	2301      	movs	r3, #1
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	1dbb      	adds	r3, r7, #6
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2301      	movs	r3, #1
 80013d6:	2220      	movs	r2, #32
 80013d8:	2132      	movs	r1, #50	; 0x32
 80013da:	4809      	ldr	r0, [pc, #36]	; (8001400 <LSM303AGR_init+0x68>)
 80013dc:	f001 fb06 	bl	80029ec <HAL_I2C_Mem_Write>
 80013e0:	e006      	b.n	80013f0 <LSM303AGR_init+0x58>
	}
	else
	{
		printf("ERROR: acc not found\n");
 80013e2:	4808      	ldr	r0, [pc, #32]	; (8001404 <LSM303AGR_init+0x6c>)
 80013e4:	f004 fbdc 	bl	8005ba0 <puts>
		HAL_Delay(1000);
 80013e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ec:	f000 ff12 	bl	8002214 <HAL_Delay>
	}
	HAL_Delay(100);
 80013f0:	2064      	movs	r0, #100	; 0x64
 80013f2:	f000 ff0f 	bl	8002214 <HAL_Delay>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000200 	.word	0x20000200
 8001404:	08007eb8 	.word	0x08007eb8

08001408 <LSM303AGR_Read_Acc>:

void LSM303AGR_Read_Acc(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af04      	add	r7, sp, #16
	uint8_t odebrane[6] = {0,0,0,0,0,0};
 800140e:	4a39      	ldr	r2, [pc, #228]	; (80014f4 <LSM303AGR_Read_Acc+0xec>)
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001416:	6018      	str	r0, [r3, #0]
 8001418:	3304      	adds	r3, #4
 800141a:	8019      	strh	r1, [r3, #0]

	for(int i=0; i<6; i++)
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	e015      	b.n	800144e <LSM303AGR_Read_Acc+0x46>
	{
		HAL_I2C_Mem_Read(&hi2c1, ACC_I2C_ADDR, ACC_ADDR_OUT_X_L+i, 1, &odebrane[i], 1, 1000);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	b29b      	uxth	r3, r3
 8001426:	3328      	adds	r3, #40	; 0x28
 8001428:	b299      	uxth	r1, r3
 800142a:	1d3a      	adds	r2, r7, #4
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4413      	add	r3, r2
 8001430:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001434:	9202      	str	r2, [sp, #8]
 8001436:	2201      	movs	r2, #1
 8001438:	9201      	str	r2, [sp, #4]
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2301      	movs	r3, #1
 800143e:	460a      	mov	r2, r1
 8001440:	2132      	movs	r1, #50	; 0x32
 8001442:	482d      	ldr	r0, [pc, #180]	; (80014f8 <LSM303AGR_Read_Acc+0xf0>)
 8001444:	f001 fbcc 	bl	8002be0 <HAL_I2C_Mem_Read>
	for(int i=0; i<6; i++)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3301      	adds	r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2b05      	cmp	r3, #5
 8001452:	dde6      	ble.n	8001422 <LSM303AGR_Read_Acc+0x1a>
	}
	acc_xyz[0]= (int16_t)((odebrane[1] << 8) | odebrane[0]);
 8001454:	797b      	ldrb	r3, [r7, #5]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	b21a      	sxth	r2, r3
 800145a:	793b      	ldrb	r3, [r7, #4]
 800145c:	b21b      	sxth	r3, r3
 800145e:	4313      	orrs	r3, r2
 8001460:	b21a      	sxth	r2, r3
 8001462:	4b26      	ldr	r3, [pc, #152]	; (80014fc <LSM303AGR_Read_Acc+0xf4>)
 8001464:	801a      	strh	r2, [r3, #0]
	acc_xyz[1]= (int16_t)((odebrane[3] << 8) | odebrane[2]);
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	b21a      	sxth	r2, r3
 800146c:	79bb      	ldrb	r3, [r7, #6]
 800146e:	b21b      	sxth	r3, r3
 8001470:	4313      	orrs	r3, r2
 8001472:	b21a      	sxth	r2, r3
 8001474:	4b21      	ldr	r3, [pc, #132]	; (80014fc <LSM303AGR_Read_Acc+0xf4>)
 8001476:	805a      	strh	r2, [r3, #2]
	acc_xyz[2]= (int16_t)((odebrane[5] << 8) | odebrane[4]);
 8001478:	7a7b      	ldrb	r3, [r7, #9]
 800147a:	021b      	lsls	r3, r3, #8
 800147c:	b21a      	sxth	r2, r3
 800147e:	7a3b      	ldrb	r3, [r7, #8]
 8001480:	b21b      	sxth	r3, r3
 8001482:	4313      	orrs	r3, r2
 8001484:	b21a      	sxth	r2, r3
 8001486:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <LSM303AGR_Read_Acc+0xf4>)
 8001488:	809a      	strh	r2, [r3, #4]

	//pomnozyć przez 4 mg
	a_x = acc_xyz[0] * 1/1600;
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <LSM303AGR_Read_Acc+0xf4>)
 800148c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001490:	4a1b      	ldr	r2, [pc, #108]	; (8001500 <LSM303AGR_Read_Acc+0xf8>)
 8001492:	fb82 1203 	smull	r1, r2, r2, r3
 8001496:	1252      	asrs	r2, r2, #9
 8001498:	17db      	asrs	r3, r3, #31
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	ee07 3a90 	vmov	s15, r3
 80014a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <LSM303AGR_Read_Acc+0xfc>)
 80014a6:	edc3 7a00 	vstr	s15, [r3]
	a_y = acc_xyz[1] * 1/1600;
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <LSM303AGR_Read_Acc+0xf4>)
 80014ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014b0:	4a13      	ldr	r2, [pc, #76]	; (8001500 <LSM303AGR_Read_Acc+0xf8>)
 80014b2:	fb82 1203 	smull	r1, r2, r2, r3
 80014b6:	1252      	asrs	r2, r2, #9
 80014b8:	17db      	asrs	r3, r3, #31
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	ee07 3a90 	vmov	s15, r3
 80014c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <LSM303AGR_Read_Acc+0x100>)
 80014c6:	edc3 7a00 	vstr	s15, [r3]
	a_z = acc_xyz[2] * 1/1600;
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <LSM303AGR_Read_Acc+0xf4>)
 80014cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014d0:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <LSM303AGR_Read_Acc+0xf8>)
 80014d2:	fb82 1203 	smull	r1, r2, r2, r3
 80014d6:	1252      	asrs	r2, r2, #9
 80014d8:	17db      	asrs	r3, r3, #31
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <LSM303AGR_Read_Acc+0x104>)
 80014e6:	edc3 7a00 	vstr	s15, [r3]
}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	08007eb0 	.word	0x08007eb0
 80014f8:	20000200 	.word	0x20000200
 80014fc:	200002b4 	.word	0x200002b4
 8001500:	51eb851f 	.word	0x51eb851f
 8001504:	200002bc 	.word	0x200002bc
 8001508:	200002c0 	.word	0x200002c0
 800150c:	200002c4 	.word	0x200002c4

08001510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001514:	b09a      	sub	sp, #104	; 0x68
 8001516:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN 1 */
  char *front_slash = {0b00101111}; // '/'
 8001518:	232f      	movs	r3, #47	; 0x2f
 800151a:	63fb      	str	r3, [r7, #60]	; 0x3c
  char *back_slash = {0b10100100};  // '\'
 800151c:	23a4      	movs	r3, #164	; 0xa4
 800151e:	63bb      	str	r3, [r7, #56]	; 0x38
  char *box = {0b11111111};
 8001520:	23ff      	movs	r3, #255	; 0xff
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001524:	f000 fe04 	bl	8002130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001528:	f000 fa88 	bl	8001a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800152c:	f000 fb54 	bl	8001bd8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001530:	f000 fb1c 	bl	8001b6c <MX_SPI1_Init>
  MX_I2C1_Init();
 8001534:	f000 faec 	bl	8001b10 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8001538:	f7ff fdac 	bl	8001094 <LCD_Init>

  initialise_monitor_handles();
 800153c:	f003 fd26 	bl	8004f8c <initialise_monitor_handles>

  I3G4250D_init();
 8001540:	f7ff fe60 	bl	8001204 <I3G4250D_init>
  LSM303AGR_init();
 8001544:	f7ff ff28 	bl	8001398 <LSM303AGR_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  I3G4250D_Read_Gyro();
 8001548:	f7ff fe98 	bl	800127c <I3G4250D_Read_Gyro>
	  LSM303AGR_Read_Acc();
 800154c:	f7ff ff5c 	bl	8001408 <LSM303AGR_Read_Acc>

	  printf("%.2f\t %.2f\t %.2f\t %.2f\t %.2f\t %.2f\n"
 8001550:	4ba8      	ldr	r3, [pc, #672]	; (80017f4 <main+0x2e4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe ffff 	bl	8000558 <__aeabi_f2d>
 800155a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800155e:	4ba6      	ldr	r3, [pc, #664]	; (80017f8 <main+0x2e8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe fff8 	bl	8000558 <__aeabi_f2d>
 8001568:	4604      	mov	r4, r0
 800156a:	460d      	mov	r5, r1
 800156c:	4ba3      	ldr	r3, [pc, #652]	; (80017fc <main+0x2ec>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe fff1 	bl	8000558 <__aeabi_f2d>
 8001576:	4680      	mov	r8, r0
 8001578:	4689      	mov	r9, r1
 800157a:	4ba1      	ldr	r3, [pc, #644]	; (8001800 <main+0x2f0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe ffea 	bl	8000558 <__aeabi_f2d>
 8001584:	4682      	mov	sl, r0
 8001586:	468b      	mov	fp, r1
 8001588:	4b9e      	ldr	r3, [pc, #632]	; (8001804 <main+0x2f4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ffe3 	bl	8000558 <__aeabi_f2d>
 8001592:	e9c7 0100 	strd	r0, r1, [r7]
 8001596:	4b9c      	ldr	r3, [pc, #624]	; (8001808 <main+0x2f8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ffdc 	bl	8000558 <__aeabi_f2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80015a8:	ed97 7b00 	vldr	d7, [r7]
 80015ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80015b0:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80015b4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80015b8:	e9cd 4500 	strd	r4, r5, [sp]
 80015bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015c0:	4892      	ldr	r0, [pc, #584]	; (800180c <main+0x2fc>)
 80015c2:	f004 fa87 	bl	8005ad4 <iprintf>
			  ,g_x,  g_y,   g_z,   a_x,   a_y,   a_z);

	  sprintf(gyro_X, "%.0f", g_x);
 80015c6:	4b8b      	ldr	r3, [pc, #556]	; (80017f4 <main+0x2e4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffc4 	bl	8000558 <__aeabi_f2d>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80015d8:	498d      	ldr	r1, [pc, #564]	; (8001810 <main+0x300>)
 80015da:	f004 fae9 	bl	8005bb0 <siprintf>
	  sprintf(gyro_Y, "%.0f", g_y);
 80015de:	4b86      	ldr	r3, [pc, #536]	; (80017f8 <main+0x2e8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ffb8 	bl	8000558 <__aeabi_f2d>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	f107 001c 	add.w	r0, r7, #28
 80015f0:	4987      	ldr	r1, [pc, #540]	; (8001810 <main+0x300>)
 80015f2:	f004 fadd 	bl	8005bb0 <siprintf>
	  sprintf(gyro_Z, "%.0f", g_z);
 80015f6:	4b81      	ldr	r3, [pc, #516]	; (80017fc <main+0x2ec>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ffac 	bl	8000558 <__aeabi_f2d>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	f107 0010 	add.w	r0, r7, #16
 8001608:	4981      	ldr	r1, [pc, #516]	; (8001810 <main+0x300>)
 800160a:	f004 fad1 	bl	8005bb0 <siprintf>

	  // Normalnie
	  if ((a_z>=9) && (a_x<=3 && a_x>=-3) && (a_y<=3 && a_y>=-3))
 800160e:	4b7e      	ldr	r3, [pc, #504]	; (8001808 <main+0x2f8>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800161c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001620:	db3d      	blt.n	800169e <main+0x18e>
 8001622:	4b77      	ldr	r3, [pc, #476]	; (8001800 <main+0x2f0>)
 8001624:	edd3 7a00 	vldr	s15, [r3]
 8001628:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800162c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001634:	d833      	bhi.n	800169e <main+0x18e>
 8001636:	4b72      	ldr	r3, [pc, #456]	; (8001800 <main+0x2f0>)
 8001638:	edd3 7a00 	vldr	s15, [r3]
 800163c:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 8001640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001648:	db29      	blt.n	800169e <main+0x18e>
 800164a:	4b6e      	ldr	r3, [pc, #440]	; (8001804 <main+0x2f4>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165c:	d81f      	bhi.n	800169e <main+0x18e>
 800165e:	4b69      	ldr	r3, [pc, #420]	; (8001804 <main+0x2f4>)
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 8001668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001670:	db15      	blt.n	800169e <main+0x18e>
	  	  {
		  lcd_str_XY(0,1, &box);
 8001672:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001676:	461a      	mov	r2, r3
 8001678:	2101      	movs	r1, #1
 800167a:	2000      	movs	r0, #0
 800167c:	f7ff fd70 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(1,1, &box);
 8001680:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001684:	461a      	mov	r2, r3
 8001686:	2101      	movs	r1, #1
 8001688:	2001      	movs	r0, #1
 800168a:	f7ff fd69 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(2,1, &box);
 800168e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001692:	461a      	mov	r2, r3
 8001694:	2101      	movs	r1, #1
 8001696:	2002      	movs	r0, #2
 8001698:	f7ff fd62 	bl	8001160 <lcd_str_XY>
 800169c:	e199      	b.n	80019d2 <main+0x4c2>
	  	  }
	  // Do góry nogami
	  else if (a_z<=-9 && (a_x<=3 && a_x>=-3) && (a_y<=3 && a_y>=-3))
 800169e:	4b5a      	ldr	r3, [pc, #360]	; (8001808 <main+0x2f8>)
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	eeba 7a02 	vmov.f32	s14, #162	; 0xc1100000 -9.0
 80016a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b0:	d83d      	bhi.n	800172e <main+0x21e>
 80016b2:	4b53      	ldr	r3, [pc, #332]	; (8001800 <main+0x2f0>)
 80016b4:	edd3 7a00 	vldr	s15, [r3]
 80016b8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80016bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	d833      	bhi.n	800172e <main+0x21e>
 80016c6:	4b4e      	ldr	r3, [pc, #312]	; (8001800 <main+0x2f0>)
 80016c8:	edd3 7a00 	vldr	s15, [r3]
 80016cc:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 80016d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d8:	db29      	blt.n	800172e <main+0x21e>
 80016da:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <main+0x2f4>)
 80016dc:	edd3 7a00 	vldr	s15, [r3]
 80016e0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80016e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ec:	d81f      	bhi.n	800172e <main+0x21e>
 80016ee:	4b45      	ldr	r3, [pc, #276]	; (8001804 <main+0x2f4>)
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 80016f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001700:	db15      	blt.n	800172e <main+0x21e>
	  	  {
		  lcd_str_XY(0,0, &box);
 8001702:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001706:	461a      	mov	r2, r3
 8001708:	2100      	movs	r1, #0
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff fd28 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(1,0, &box);
 8001710:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001714:	461a      	mov	r2, r3
 8001716:	2100      	movs	r1, #0
 8001718:	2001      	movs	r0, #1
 800171a:	f7ff fd21 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(2,0, &box);
 800171e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001722:	461a      	mov	r2, r3
 8001724:	2100      	movs	r1, #0
 8001726:	2002      	movs	r0, #2
 8001728:	f7ff fd1a 	bl	8001160 <lcd_str_XY>
 800172c:	e151      	b.n	80019d2 <main+0x4c2>
	  	  }
	  // Do przodu
	  else if (a_x>=3 && a_z<=9)
 800172e:	4b34      	ldr	r3, [pc, #208]	; (8001800 <main+0x2f0>)
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800173c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001740:	db34      	blt.n	80017ac <main+0x29c>
 8001742:	4b31      	ldr	r3, [pc, #196]	; (8001808 <main+0x2f8>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800174c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001754:	d82a      	bhi.n	80017ac <main+0x29c>
		  {
		  lcd_str_XY(0,0, &box);
 8001756:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800175a:	461a      	mov	r2, r3
 800175c:	2100      	movs	r1, #0
 800175e:	2000      	movs	r0, #0
 8001760:	f7ff fcfe 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(1,0, &box);
 8001764:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001768:	461a      	mov	r2, r3
 800176a:	2100      	movs	r1, #0
 800176c:	2001      	movs	r0, #1
 800176e:	f7ff fcf7 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(2,0, &box);
 8001772:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001776:	461a      	mov	r2, r3
 8001778:	2100      	movs	r1, #0
 800177a:	2002      	movs	r0, #2
 800177c:	f7ff fcf0 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(0,1, &box);
 8001780:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001784:	461a      	mov	r2, r3
 8001786:	2101      	movs	r1, #1
 8001788:	2000      	movs	r0, #0
 800178a:	f7ff fce9 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(1,1, &box);
 800178e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001792:	461a      	mov	r2, r3
 8001794:	2101      	movs	r1, #1
 8001796:	2001      	movs	r0, #1
 8001798:	f7ff fce2 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(2,1, &box);
 800179c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017a0:	461a      	mov	r2, r3
 80017a2:	2101      	movs	r1, #1
 80017a4:	2002      	movs	r0, #2
 80017a6:	f7ff fcdb 	bl	8001160 <lcd_str_XY>
 80017aa:	e112      	b.n	80019d2 <main+0x4c2>
		  }
	  // Do tyłu
	  else if (a_x<=-3 && a_z<=9)
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <main+0x2f0>)
 80017ae:	edd3 7a00 	vldr	s15, [r3]
 80017b2:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 80017b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017be:	d82b      	bhi.n	8001818 <main+0x308>
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <main+0x2f8>)
 80017c2:	edd3 7a00 	vldr	s15, [r3]
 80017c6:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80017ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d2:	d821      	bhi.n	8001818 <main+0x308>
		  {
		  lcd_str_XY(0,1, "_");
 80017d4:	4a0f      	ldr	r2, [pc, #60]	; (8001814 <main+0x304>)
 80017d6:	2101      	movs	r1, #1
 80017d8:	2000      	movs	r0, #0
 80017da:	f7ff fcc1 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(1,1, "_");
 80017de:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <main+0x304>)
 80017e0:	2101      	movs	r1, #1
 80017e2:	2001      	movs	r0, #1
 80017e4:	f7ff fcbc 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(2,1, "_");
 80017e8:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <main+0x304>)
 80017ea:	2101      	movs	r1, #1
 80017ec:	2002      	movs	r0, #2
 80017ee:	f7ff fcb7 	bl	8001160 <lcd_str_XY>
 80017f2:	e0ee      	b.n	80019d2 <main+0x4c2>
 80017f4:	200002c8 	.word	0x200002c8
 80017f8:	200002cc 	.word	0x200002cc
 80017fc:	200002d0 	.word	0x200002d0
 8001800:	200002bc 	.word	0x200002bc
 8001804:	200002c0 	.word	0x200002c0
 8001808:	200002c4 	.word	0x200002c4
 800180c:	08007ed0 	.word	0x08007ed0
 8001810:	08007ef4 	.word	0x08007ef4
 8001814:	08007efc 	.word	0x08007efc
		  }
	  // Przechył w lewo
	  else if ((a_y>=-9 && a_y<=-3) && (a_z>=3 && a_z<=9))
 8001818:	4b83      	ldr	r3, [pc, #524]	; (8001a28 <main+0x518>)
 800181a:	edd3 7a00 	vldr	s15, [r3]
 800181e:	eeba 7a02 	vmov.f32	s14, #162	; 0xc1100000 -9.0
 8001822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182a:	db41      	blt.n	80018b0 <main+0x3a0>
 800182c:	4b7e      	ldr	r3, [pc, #504]	; (8001a28 <main+0x518>)
 800182e:	edd3 7a00 	vldr	s15, [r3]
 8001832:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 8001836:	eef4 7ac7 	vcmpe.f32	s15, s14
 800183a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183e:	d837      	bhi.n	80018b0 <main+0x3a0>
 8001840:	4b7a      	ldr	r3, [pc, #488]	; (8001a2c <main+0x51c>)
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800184a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	db2d      	blt.n	80018b0 <main+0x3a0>
 8001854:	4b75      	ldr	r3, [pc, #468]	; (8001a2c <main+0x51c>)
 8001856:	edd3 7a00 	vldr	s15, [r3]
 800185a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800185e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001866:	d823      	bhi.n	80018b0 <main+0x3a0>
	  	  {
		  lcd_str_XY(0,0, &box);
 8001868:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800186c:	461a      	mov	r2, r3
 800186e:	2100      	movs	r1, #0
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff fc75 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(1,0, &back_slash);
 8001876:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800187a:	461a      	mov	r2, r3
 800187c:	2100      	movs	r1, #0
 800187e:	2001      	movs	r0, #1
 8001880:	f7ff fc6e 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(0,1, &box);
 8001884:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001888:	461a      	mov	r2, r3
 800188a:	2101      	movs	r1, #1
 800188c:	2000      	movs	r0, #0
 800188e:	f7ff fc67 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(1,1, &box);
 8001892:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001896:	461a      	mov	r2, r3
 8001898:	2101      	movs	r1, #1
 800189a:	2001      	movs	r0, #1
 800189c:	f7ff fc60 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(2,1, &box);
 80018a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018a4:	461a      	mov	r2, r3
 80018a6:	2101      	movs	r1, #1
 80018a8:	2002      	movs	r0, #2
 80018aa:	f7ff fc59 	bl	8001160 <lcd_str_XY>
 80018ae:	e090      	b.n	80019d2 <main+0x4c2>
	  	  }
	  // Pion w lewo
	  else if ((a_y<=-10) && (a_z<=3))
 80018b0:	4b5d      	ldr	r3, [pc, #372]	; (8001a28 <main+0x518>)
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80018ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c2:	d818      	bhi.n	80018f6 <main+0x3e6>
 80018c4:	4b59      	ldr	r3, [pc, #356]	; (8001a2c <main+0x51c>)
 80018c6:	edd3 7a00 	vldr	s15, [r3]
 80018ca:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80018ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d6:	d80e      	bhi.n	80018f6 <main+0x3e6>
	  	  {
		  lcd_str_XY(0,0, &box);
 80018d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018dc:	461a      	mov	r2, r3
 80018de:	2100      	movs	r1, #0
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7ff fc3d 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(0,1, &box);
 80018e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018ea:	461a      	mov	r2, r3
 80018ec:	2101      	movs	r1, #1
 80018ee:	2000      	movs	r0, #0
 80018f0:	f7ff fc36 	bl	8001160 <lcd_str_XY>
 80018f4:	e06d      	b.n	80019d2 <main+0x4c2>
	  	  }
	  //Przechył w prawo
	  else if ((a_y<=9 && a_y>=3) && (a_z>=3 && a_z<=9))
 80018f6:	4b4c      	ldr	r3, [pc, #304]	; (8001a28 <main+0x518>)
 80018f8:	edd3 7a00 	vldr	s15, [r3]
 80018fc:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001908:	d841      	bhi.n	800198e <main+0x47e>
 800190a:	4b47      	ldr	r3, [pc, #284]	; (8001a28 <main+0x518>)
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191c:	db37      	blt.n	800198e <main+0x47e>
 800191e:	4b43      	ldr	r3, [pc, #268]	; (8001a2c <main+0x51c>)
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001930:	db2d      	blt.n	800198e <main+0x47e>
 8001932:	4b3e      	ldr	r3, [pc, #248]	; (8001a2c <main+0x51c>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800193c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001944:	d823      	bhi.n	800198e <main+0x47e>
	  	  {
		  lcd_str_XY(2,0, &box);
 8001946:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800194a:	461a      	mov	r2, r3
 800194c:	2100      	movs	r1, #0
 800194e:	2002      	movs	r0, #2
 8001950:	f7ff fc06 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(1,0, &front_slash);
 8001954:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001958:	461a      	mov	r2, r3
 800195a:	2100      	movs	r1, #0
 800195c:	2001      	movs	r0, #1
 800195e:	f7ff fbff 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(0,1, &box);
 8001962:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001966:	461a      	mov	r2, r3
 8001968:	2101      	movs	r1, #1
 800196a:	2000      	movs	r0, #0
 800196c:	f7ff fbf8 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(1,1, &box);
 8001970:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001974:	461a      	mov	r2, r3
 8001976:	2101      	movs	r1, #1
 8001978:	2001      	movs	r0, #1
 800197a:	f7ff fbf1 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(2,1, &box);
 800197e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001982:	461a      	mov	r2, r3
 8001984:	2101      	movs	r1, #1
 8001986:	2002      	movs	r0, #2
 8001988:	f7ff fbea 	bl	8001160 <lcd_str_XY>
 800198c:	e021      	b.n	80019d2 <main+0x4c2>
	  	  }
	  //Pion w prawo
	  else if ((a_y>=10) && (a_z<=3))
 800198e:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <main+0x518>)
 8001990:	edd3 7a00 	vldr	s15, [r3]
 8001994:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001998:	eef4 7ac7 	vcmpe.f32	s15, s14
 800199c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a0:	db17      	blt.n	80019d2 <main+0x4c2>
 80019a2:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <main+0x51c>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80019ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b4:	d80d      	bhi.n	80019d2 <main+0x4c2>
	  	  {
		  lcd_str_XY(2,0, &box);
 80019b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019ba:	461a      	mov	r2, r3
 80019bc:	2100      	movs	r1, #0
 80019be:	2002      	movs	r0, #2
 80019c0:	f7ff fbce 	bl	8001160 <lcd_str_XY>
		  lcd_str_XY(2,1, &box);
 80019c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019c8:	461a      	mov	r2, r3
 80019ca:	2101      	movs	r1, #1
 80019cc:	2002      	movs	r0, #2
 80019ce:	f7ff fbc7 	bl	8001160 <lcd_str_XY>
	  	  }

	  lcd_str_XY(4, 0, "X:");
 80019d2:	4a17      	ldr	r2, [pc, #92]	; (8001a30 <main+0x520>)
 80019d4:	2100      	movs	r1, #0
 80019d6:	2004      	movs	r0, #4
 80019d8:	f7ff fbc2 	bl	8001160 <lcd_str_XY>
	  lcd_str_XY(4, 1, &gyro_X);
 80019dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e0:	461a      	mov	r2, r3
 80019e2:	2101      	movs	r1, #1
 80019e4:	2004      	movs	r0, #4
 80019e6:	f7ff fbbb 	bl	8001160 <lcd_str_XY>
	  lcd_str_XY(8, 0, "Y:");
 80019ea:	4a12      	ldr	r2, [pc, #72]	; (8001a34 <main+0x524>)
 80019ec:	2100      	movs	r1, #0
 80019ee:	2008      	movs	r0, #8
 80019f0:	f7ff fbb6 	bl	8001160 <lcd_str_XY>
	  lcd_str_XY(8, 1, &gyro_Y);
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	461a      	mov	r2, r3
 80019fa:	2101      	movs	r1, #1
 80019fc:	2008      	movs	r0, #8
 80019fe:	f7ff fbaf 	bl	8001160 <lcd_str_XY>
	  lcd_str_XY(12, 0, "Z:");
 8001a02:	4a0d      	ldr	r2, [pc, #52]	; (8001a38 <main+0x528>)
 8001a04:	2100      	movs	r1, #0
 8001a06:	200c      	movs	r0, #12
 8001a08:	f7ff fbaa 	bl	8001160 <lcd_str_XY>
	  lcd_str_XY(12, 1, &gyro_Z);
 8001a0c:	f107 0310 	add.w	r3, r7, #16
 8001a10:	461a      	mov	r2, r3
 8001a12:	2101      	movs	r1, #1
 8001a14:	200c      	movs	r0, #12
 8001a16:	f7ff fba3 	bl	8001160 <lcd_str_XY>

	  HAL_Delay(250);
 8001a1a:	20fa      	movs	r0, #250	; 0xfa
 8001a1c:	f000 fbfa 	bl	8002214 <HAL_Delay>
	  lcd_clear();
 8001a20:	f7ff fbbd 	bl	800119e <lcd_clear>
  {
 8001a24:	e590      	b.n	8001548 <main+0x38>
 8001a26:	bf00      	nop
 8001a28:	200002c0 	.word	0x200002c0
 8001a2c:	200002c4 	.word	0x200002c4
 8001a30:	08007f00 	.word	0x08007f00
 8001a34:	08007f04 	.word	0x08007f04
 8001a38:	08007f08 	.word	0x08007f08

08001a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b094      	sub	sp, #80	; 0x50
 8001a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a42:	f107 0320 	add.w	r3, r7, #32
 8001a46:	2230      	movs	r2, #48	; 0x30
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f004 f9a8 	bl	8005da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <SystemClock_Config+0xcc>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	4a27      	ldr	r2, [pc, #156]	; (8001b08 <SystemClock_Config+0xcc>)
 8001a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a70:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <SystemClock_Config+0xcc>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <SystemClock_Config+0xd0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a21      	ldr	r2, [pc, #132]	; (8001b0c <SystemClock_Config+0xd0>)
 8001a86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <SystemClock_Config+0xd0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aa0:	2310      	movs	r3, #16
 8001aa2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001aac:	2308      	movs	r3, #8
 8001aae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001ab0:	23c0      	movs	r3, #192	; 0xc0
 8001ab2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001abc:	f107 0320 	add.w	r3, r7, #32
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f001 fe0f 	bl	80036e4 <HAL_RCC_OscConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001acc:	f000 f9d6 	bl	8001e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad0:	230f      	movs	r3, #15
 8001ad2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001adc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ae0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2103      	movs	r1, #3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f002 f870 	bl	8003bd4 <HAL_RCC_ClockConfig>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001afa:	f000 f9bf 	bl	8001e7c <Error_Handler>
  }
}
 8001afe:	bf00      	nop
 8001b00:	3750      	adds	r7, #80	; 0x50
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40007000 	.word	0x40007000

08001b10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b14:	4b12      	ldr	r3, [pc, #72]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b16:	4a13      	ldr	r2, [pc, #76]	; (8001b64 <MX_I2C1_Init+0x54>)
 8001b18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b1c:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <MX_I2C1_Init+0x58>)
 8001b1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <MX_I2C1_Init+0x50>)
 8001b4e:	f000 fe09 	bl	8002764 <HAL_I2C_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b58:	f000 f990 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000200 	.word	0x20000200
 8001b64:	40005400 	.word	0x40005400
 8001b68:	000186a0 	.word	0x000186a0

08001b6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001b72:	4a18      	ldr	r2, [pc, #96]	; (8001bd4 <MX_SPI1_Init+0x68>)
 8001b74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001b78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b8a:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001ba0:	2230      	movs	r2, #48	; 0x30
 8001ba2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ba4:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb0:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001bb8:	220a      	movs	r2, #10
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bbc:	4804      	ldr	r0, [pc, #16]	; (8001bd0 <MX_SPI1_Init+0x64>)
 8001bbe:	f002 fa15 	bl	8003fec <HAL_SPI_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bc8:	f000 f958 	bl	8001e7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000254 	.word	0x20000254
 8001bd4:	40013000 	.word	0x40013000

08001bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08c      	sub	sp, #48	; 0x30
 8001bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
 8001bec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	4b9c      	ldr	r3, [pc, #624]	; (8001e64 <MX_GPIO_Init+0x28c>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a9b      	ldr	r2, [pc, #620]	; (8001e64 <MX_GPIO_Init+0x28c>)
 8001bf8:	f043 0310 	orr.w	r3, r3, #16
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b99      	ldr	r3, [pc, #612]	; (8001e64 <MX_GPIO_Init+0x28c>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0310 	and.w	r3, r3, #16
 8001c06:	61bb      	str	r3, [r7, #24]
 8001c08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	4b95      	ldr	r3, [pc, #596]	; (8001e64 <MX_GPIO_Init+0x28c>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a94      	ldr	r2, [pc, #592]	; (8001e64 <MX_GPIO_Init+0x28c>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b92      	ldr	r3, [pc, #584]	; (8001e64 <MX_GPIO_Init+0x28c>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	4b8e      	ldr	r3, [pc, #568]	; (8001e64 <MX_GPIO_Init+0x28c>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a8d      	ldr	r2, [pc, #564]	; (8001e64 <MX_GPIO_Init+0x28c>)
 8001c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b8b      	ldr	r3, [pc, #556]	; (8001e64 <MX_GPIO_Init+0x28c>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3e:	613b      	str	r3, [r7, #16]
 8001c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b87      	ldr	r3, [pc, #540]	; (8001e64 <MX_GPIO_Init+0x28c>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a86      	ldr	r2, [pc, #536]	; (8001e64 <MX_GPIO_Init+0x28c>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b84      	ldr	r3, [pc, #528]	; (8001e64 <MX_GPIO_Init+0x28c>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	4b80      	ldr	r3, [pc, #512]	; (8001e64 <MX_GPIO_Init+0x28c>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a7f      	ldr	r2, [pc, #508]	; (8001e64 <MX_GPIO_Init+0x28c>)
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b7d      	ldr	r3, [pc, #500]	; (8001e64 <MX_GPIO_Init+0x28c>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	4b79      	ldr	r3, [pc, #484]	; (8001e64 <MX_GPIO_Init+0x28c>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a78      	ldr	r2, [pc, #480]	; (8001e64 <MX_GPIO_Init+0x28c>)
 8001c84:	f043 0308 	orr.w	r3, r3, #8
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b76      	ldr	r3, [pc, #472]	; (8001e64 <MX_GPIO_Init+0x28c>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, naszCS_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8001c96:	2200      	movs	r2, #0
 8001c98:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 8001c9c:	4872      	ldr	r0, [pc, #456]	; (8001e68 <MX_GPIO_Init+0x290>)
 8001c9e:	f000 fd47 	bl	8002730 <HAL_GPIO_WritePin>
                          |LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	4871      	ldr	r0, [pc, #452]	; (8001e6c <MX_GPIO_Init+0x294>)
 8001ca8:	f000 fd42 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_E_Pin, GPIO_PIN_RESET);
 8001cac:	2200      	movs	r2, #0
 8001cae:	2103      	movs	r1, #3
 8001cb0:	486f      	ldr	r0, [pc, #444]	; (8001e70 <MX_GPIO_Init+0x298>)
 8001cb2:	f000 fd3d 	bl	8002730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001cbc:	486d      	ldr	r0, [pc, #436]	; (8001e74 <MX_GPIO_Init+0x29c>)
 8001cbe:	f000 fd37 	bl	8002730 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cc2:	2304      	movs	r3, #4
 8001cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4864      	ldr	r0, [pc, #400]	; (8001e68 <MX_GPIO_Init+0x290>)
 8001cd6:	f000 fba7 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : naszCS_Pin LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin
                           LCD_D7_Pin */
  GPIO_InitStruct.Pin = naszCS_Pin|LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin
 8001cda:	f44f 63f1 	mov.w	r3, #1928	; 0x788
 8001cde:	61fb      	str	r3, [r7, #28]
                          |LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	485d      	ldr	r0, [pc, #372]	; (8001e68 <MX_GPIO_Init+0x290>)
 8001cf4:	f000 fb98 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8001cf8:	2332      	movs	r3, #50	; 0x32
 8001cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001cfc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d06:	f107 031c 	add.w	r3, r7, #28
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4856      	ldr	r0, [pc, #344]	; (8001e68 <MX_GPIO_Init+0x290>)
 8001d0e:	f000 fb8b 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001d12:	2301      	movs	r3, #1
 8001d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d16:	2301      	movs	r3, #1
 8001d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	4619      	mov	r1, r3
 8001d28:	4850      	ldr	r0, [pc, #320]	; (8001e6c <MX_GPIO_Init+0x294>)
 8001d2a:	f000 fb7d 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001d2e:	2308      	movs	r3, #8
 8001d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d32:	2302      	movs	r3, #2
 8001d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d3e:	2305      	movs	r3, #5
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001d42:	f107 031c 	add.w	r3, r7, #28
 8001d46:	4619      	mov	r1, r3
 8001d48:	4848      	ldr	r0, [pc, #288]	; (8001e6c <MX_GPIO_Init+0x294>)
 8001d4a:	f000 fb6d 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d52:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	4619      	mov	r1, r3
 8001d62:	4845      	ldr	r0, [pc, #276]	; (8001e78 <MX_GPIO_Init+0x2a0>)
 8001d64:	f000 fb60 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d68:	2310      	movs	r3, #16
 8001d6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d78:	2306      	movs	r3, #6
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	f107 031c 	add.w	r3, r7, #28
 8001d80:	4619      	mov	r1, r3
 8001d82:	483d      	ldr	r0, [pc, #244]	; (8001e78 <MX_GPIO_Init+0x2a0>)
 8001d84:	f000 fb50 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_E_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4834      	ldr	r0, [pc, #208]	; (8001e70 <MX_GPIO_Init+0x298>)
 8001da0:	f000 fb42 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8001da4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001db6:	2305      	movs	r3, #5
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	482b      	ldr	r0, [pc, #172]	; (8001e70 <MX_GPIO_Init+0x298>)
 8001dc2:	f000 fb31 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001dc6:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001dca:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4825      	ldr	r0, [pc, #148]	; (8001e74 <MX_GPIO_Init+0x29c>)
 8001de0:	f000 fb22 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001de4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001df6:	2306      	movs	r3, #6
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dfa:	f107 031c 	add.w	r3, r7, #28
 8001dfe:	4619      	mov	r1, r3
 8001e00:	481a      	ldr	r0, [pc, #104]	; (8001e6c <MX_GPIO_Init+0x294>)
 8001e02:	f000 fb11 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4817      	ldr	r0, [pc, #92]	; (8001e78 <MX_GPIO_Init+0x2a0>)
 8001e1c:	f000 fb04 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001e20:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e32:	230a      	movs	r3, #10
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480e      	ldr	r0, [pc, #56]	; (8001e78 <MX_GPIO_Init+0x2a0>)
 8001e3e:	f000 faf3 	bl	8002428 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e42:	2320      	movs	r3, #32
 8001e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e4e:	f107 031c 	add.w	r3, r7, #28
 8001e52:	4619      	mov	r1, r3
 8001e54:	4807      	ldr	r0, [pc, #28]	; (8001e74 <MX_GPIO_Init+0x29c>)
 8001e56:	f000 fae7 	bl	8002428 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e5a:	bf00      	nop
 8001e5c:	3730      	adds	r7, #48	; 0x30
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40020800 	.word	0x40020800
 8001e70:	40020400 	.word	0x40020400
 8001e74:	40020c00 	.word	0x40020c00
 8001e78:	40020000 	.word	0x40020000

08001e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e80:	b672      	cpsid	i
}
 8001e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <Error_Handler+0x8>
	...

08001e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001e98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a08      	ldr	r2, [pc, #32]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_MspInit+0x4c>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ec6:	2007      	movs	r0, #7
 8001ec8:	f000 fa7a 	bl	80023c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40023800 	.word	0x40023800

08001ed8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a19      	ldr	r2, [pc, #100]	; (8001f5c <HAL_I2C_MspInit+0x84>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d12c      	bne.n	8001f54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <HAL_I2C_MspInit+0x88>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <HAL_I2C_MspInit+0x88>)
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <HAL_I2C_MspInit+0x88>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001f16:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f1c:	2312      	movs	r3, #18
 8001f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f24:	2303      	movs	r3, #3
 8001f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f28:	2304      	movs	r3, #4
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4619      	mov	r1, r3
 8001f32:	480c      	ldr	r0, [pc, #48]	; (8001f64 <HAL_I2C_MspInit+0x8c>)
 8001f34:	f000 fa78 	bl	8002428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_I2C_MspInit+0x88>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <HAL_I2C_MspInit+0x88>)
 8001f42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f46:	6413      	str	r3, [r2, #64]	; 0x40
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_I2C_MspInit+0x88>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f54:	bf00      	nop
 8001f56:	3728      	adds	r7, #40	; 0x28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40005400 	.word	0x40005400
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020400 	.word	0x40020400

08001f68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a19      	ldr	r2, [pc, #100]	; (8001fec <HAL_SPI_MspInit+0x84>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d12b      	bne.n	8001fe2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_SPI_MspInit+0x88>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <HAL_SPI_MspInit+0x88>)
 8001f94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <HAL_SPI_MspInit+0x88>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_SPI_MspInit+0x88>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a10      	ldr	r2, [pc, #64]	; (8001ff0 <HAL_SPI_MspInit+0x88>)
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <HAL_SPI_MspInit+0x88>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001fc2:	23e0      	movs	r3, #224	; 0xe0
 8001fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fd2:	2305      	movs	r3, #5
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd6:	f107 0314 	add.w	r3, r7, #20
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <HAL_SPI_MspInit+0x8c>)
 8001fde:	f000 fa23 	bl	8002428 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fe2:	bf00      	nop
 8001fe4:	3728      	adds	r7, #40	; 0x28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40013000 	.word	0x40013000
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020000 	.word	0x40020000

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <NMI_Handler+0x4>

08001ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <MemManage_Handler+0x4>

0800200a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <BusFault_Handler+0x4>

08002010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <UsageFault_Handler+0x4>

08002016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002044:	f000 f8c6 	bl	80021d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}

0800204c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002054:	4a14      	ldr	r2, [pc, #80]	; (80020a8 <_sbrk+0x5c>)
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <_sbrk+0x60>)
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <_sbrk+0x64>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d102      	bne.n	800206e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <_sbrk+0x64>)
 800206a:	4a12      	ldr	r2, [pc, #72]	; (80020b4 <_sbrk+0x68>)
 800206c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <_sbrk+0x64>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	429a      	cmp	r2, r3
 800207a:	d207      	bcs.n	800208c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800207c:	f003 fee2 	bl	8005e44 <__errno>
 8002080:	4603      	mov	r3, r0
 8002082:	220c      	movs	r2, #12
 8002084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002086:	f04f 33ff 	mov.w	r3, #4294967295
 800208a:	e009      	b.n	80020a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <_sbrk+0x64>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002092:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <_sbrk+0x64>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <_sbrk+0x64>)
 800209c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800209e:	68fb      	ldr	r3, [r7, #12]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20020000 	.word	0x20020000
 80020ac:	00000400 	.word	0x00000400
 80020b0:	200002d4 	.word	0x200002d4
 80020b4:	200004d8 	.word	0x200004d8

080020b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <SystemInit+0x20>)
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c2:	4a05      	ldr	r2, [pc, #20]	; (80020d8 <SystemInit+0x20>)
 80020c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002114 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020e0:	480d      	ldr	r0, [pc, #52]	; (8002118 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020e2:	490e      	ldr	r1, [pc, #56]	; (800211c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020e4:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e8:	e002      	b.n	80020f0 <LoopCopyDataInit>

080020ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ee:	3304      	adds	r3, #4

080020f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f4:	d3f9      	bcc.n	80020ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f6:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020f8:	4c0b      	ldr	r4, [pc, #44]	; (8002128 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020fc:	e001      	b.n	8002102 <LoopFillZerobss>

080020fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002100:	3204      	adds	r2, #4

08002102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002104:	d3fb      	bcc.n	80020fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002106:	f7ff ffd7 	bl	80020b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800210a:	f003 fea1 	bl	8005e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800210e:	f7ff f9ff 	bl	8001510 <main>
  bx  lr    
 8002112:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002114:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800211c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002120:	080082bc 	.word	0x080082bc
  ldr r2, =_sbss
 8002124:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002128:	200004d4 	.word	0x200004d4

0800212c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800212c:	e7fe      	b.n	800212c <ADC_IRQHandler>
	...

08002130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_Init+0x40>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <HAL_Init+0x40>)
 800213a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800213e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_Init+0x40>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <HAL_Init+0x40>)
 8002146:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800214a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_Init+0x40>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a07      	ldr	r2, [pc, #28]	; (8002170 <HAL_Init+0x40>)
 8002152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002158:	2003      	movs	r0, #3
 800215a:	f000 f931 	bl	80023c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215e:	2000      	movs	r0, #0
 8002160:	f000 f808 	bl	8002174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002164:	f7ff fe90 	bl	8001e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023c00 	.word	0x40023c00

08002174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_InitTick+0x54>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_InitTick+0x58>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4619      	mov	r1, r3
 8002186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800218a:	fbb3 f3f1 	udiv	r3, r3, r1
 800218e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f93b 	bl	800240e <HAL_SYSTICK_Config>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e00e      	b.n	80021c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b0f      	cmp	r3, #15
 80021a6:	d80a      	bhi.n	80021be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a8:	2200      	movs	r2, #0
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f000 f911 	bl	80023d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b4:	4a06      	ldr	r2, [pc, #24]	; (80021d0 <HAL_InitTick+0x5c>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e000      	b.n	80021c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000008 	.word	0x20000008
 80021cc:	20000010 	.word	0x20000010
 80021d0:	2000000c 	.word	0x2000000c

080021d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_IncTick+0x20>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_IncTick+0x24>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4413      	add	r3, r2
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_IncTick+0x24>)
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000010 	.word	0x20000010
 80021f8:	200002d8 	.word	0x200002d8

080021fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <HAL_GetTick+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	200002d8 	.word	0x200002d8

08002214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800221c:	f7ff ffee 	bl	80021fc <HAL_GetTick>
 8002220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222c:	d005      	beq.n	800223a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800222e:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <HAL_Delay+0x44>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4413      	add	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800223a:	bf00      	nop
 800223c:	f7ff ffde 	bl	80021fc <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	429a      	cmp	r2, r3
 800224a:	d8f7      	bhi.n	800223c <HAL_Delay+0x28>
  {
  }
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000010 	.word	0x20000010

0800225c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <__NVIC_SetPriorityGrouping+0x44>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002278:	4013      	ands	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228e:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	60d3      	str	r3, [r2, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <__NVIC_GetPriorityGrouping+0x18>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	0a1b      	lsrs	r3, r3, #8
 80022ae:	f003 0307 	and.w	r3, r3, #7
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	6039      	str	r1, [r7, #0]
 80022ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	db0a      	blt.n	80022ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	490c      	ldr	r1, [pc, #48]	; (800230c <__NVIC_SetPriority+0x4c>)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	0112      	lsls	r2, r2, #4
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	440b      	add	r3, r1
 80022e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022e8:	e00a      	b.n	8002300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4908      	ldr	r1, [pc, #32]	; (8002310 <__NVIC_SetPriority+0x50>)
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	3b04      	subs	r3, #4
 80022f8:	0112      	lsls	r2, r2, #4
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	440b      	add	r3, r1
 80022fe:	761a      	strb	r2, [r3, #24]
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000e100 	.word	0xe000e100
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002314:	b480      	push	{r7}
 8002316:	b089      	sub	sp, #36	; 0x24
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f1c3 0307 	rsb	r3, r3, #7
 800232e:	2b04      	cmp	r3, #4
 8002330:	bf28      	it	cs
 8002332:	2304      	movcs	r3, #4
 8002334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	3304      	adds	r3, #4
 800233a:	2b06      	cmp	r3, #6
 800233c:	d902      	bls.n	8002344 <NVIC_EncodePriority+0x30>
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3b03      	subs	r3, #3
 8002342:	e000      	b.n	8002346 <NVIC_EncodePriority+0x32>
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	f04f 32ff 	mov.w	r2, #4294967295
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43da      	mvns	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	401a      	ands	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800235c:	f04f 31ff 	mov.w	r1, #4294967295
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	fa01 f303 	lsl.w	r3, r1, r3
 8002366:	43d9      	mvns	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800236c:	4313      	orrs	r3, r2
         );
}
 800236e:	4618      	mov	r0, r3
 8002370:	3724      	adds	r7, #36	; 0x24
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800238c:	d301      	bcc.n	8002392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800238e:	2301      	movs	r3, #1
 8002390:	e00f      	b.n	80023b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002392:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <SysTick_Config+0x40>)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3b01      	subs	r3, #1
 8002398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239a:	210f      	movs	r1, #15
 800239c:	f04f 30ff 	mov.w	r0, #4294967295
 80023a0:	f7ff ff8e 	bl	80022c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <SysTick_Config+0x40>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023aa:	4b04      	ldr	r3, [pc, #16]	; (80023bc <SysTick_Config+0x40>)
 80023ac:	2207      	movs	r2, #7
 80023ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	e000e010 	.word	0xe000e010

080023c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7ff ff47 	bl	800225c <__NVIC_SetPriorityGrouping>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	4603      	mov	r3, r0
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
 80023e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023e8:	f7ff ff5c 	bl	80022a4 <__NVIC_GetPriorityGrouping>
 80023ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	68b9      	ldr	r1, [r7, #8]
 80023f2:	6978      	ldr	r0, [r7, #20]
 80023f4:	f7ff ff8e 	bl	8002314 <NVIC_EncodePriority>
 80023f8:	4602      	mov	r2, r0
 80023fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ff5d 	bl	80022c0 <__NVIC_SetPriority>
}
 8002406:	bf00      	nop
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff ffb0 	bl	800237c <SysTick_Config>
 800241c:	4603      	mov	r3, r0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	; 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	e159      	b.n	80026f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002444:	2201      	movs	r2, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	429a      	cmp	r2, r3
 800245e:	f040 8148 	bne.w	80026f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d005      	beq.n	800247a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002476:	2b02      	cmp	r3, #2
 8002478:	d130      	bne.n	80024dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	2203      	movs	r2, #3
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b0:	2201      	movs	r2, #1
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 0201 	and.w	r2, r3, #1
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d017      	beq.n	8002518 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d123      	bne.n	800256c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	08da      	lsrs	r2, r3, #3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3208      	adds	r2, #8
 800252c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	220f      	movs	r2, #15
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	08da      	lsrs	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3208      	adds	r2, #8
 8002566:	69b9      	ldr	r1, [r7, #24]
 8002568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	2203      	movs	r2, #3
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0203 	and.w	r2, r3, #3
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 80a2 	beq.w	80026f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	4b57      	ldr	r3, [pc, #348]	; (8002710 <HAL_GPIO_Init+0x2e8>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	4a56      	ldr	r2, [pc, #344]	; (8002710 <HAL_GPIO_Init+0x2e8>)
 80025b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025bc:	6453      	str	r3, [r2, #68]	; 0x44
 80025be:	4b54      	ldr	r3, [pc, #336]	; (8002710 <HAL_GPIO_Init+0x2e8>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ca:	4a52      	ldr	r2, [pc, #328]	; (8002714 <HAL_GPIO_Init+0x2ec>)
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	089b      	lsrs	r3, r3, #2
 80025d0:	3302      	adds	r3, #2
 80025d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	220f      	movs	r2, #15
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a49      	ldr	r2, [pc, #292]	; (8002718 <HAL_GPIO_Init+0x2f0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d019      	beq.n	800262a <HAL_GPIO_Init+0x202>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a48      	ldr	r2, [pc, #288]	; (800271c <HAL_GPIO_Init+0x2f4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d013      	beq.n	8002626 <HAL_GPIO_Init+0x1fe>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a47      	ldr	r2, [pc, #284]	; (8002720 <HAL_GPIO_Init+0x2f8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00d      	beq.n	8002622 <HAL_GPIO_Init+0x1fa>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a46      	ldr	r2, [pc, #280]	; (8002724 <HAL_GPIO_Init+0x2fc>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d007      	beq.n	800261e <HAL_GPIO_Init+0x1f6>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a45      	ldr	r2, [pc, #276]	; (8002728 <HAL_GPIO_Init+0x300>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d101      	bne.n	800261a <HAL_GPIO_Init+0x1f2>
 8002616:	2304      	movs	r3, #4
 8002618:	e008      	b.n	800262c <HAL_GPIO_Init+0x204>
 800261a:	2307      	movs	r3, #7
 800261c:	e006      	b.n	800262c <HAL_GPIO_Init+0x204>
 800261e:	2303      	movs	r3, #3
 8002620:	e004      	b.n	800262c <HAL_GPIO_Init+0x204>
 8002622:	2302      	movs	r3, #2
 8002624:	e002      	b.n	800262c <HAL_GPIO_Init+0x204>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_GPIO_Init+0x204>
 800262a:	2300      	movs	r3, #0
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	f002 0203 	and.w	r2, r2, #3
 8002632:	0092      	lsls	r2, r2, #2
 8002634:	4093      	lsls	r3, r2
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800263c:	4935      	ldr	r1, [pc, #212]	; (8002714 <HAL_GPIO_Init+0x2ec>)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	3302      	adds	r3, #2
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800264a:	4b38      	ldr	r3, [pc, #224]	; (800272c <HAL_GPIO_Init+0x304>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800266e:	4a2f      	ldr	r2, [pc, #188]	; (800272c <HAL_GPIO_Init+0x304>)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002674:	4b2d      	ldr	r3, [pc, #180]	; (800272c <HAL_GPIO_Init+0x304>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002698:	4a24      	ldr	r2, [pc, #144]	; (800272c <HAL_GPIO_Init+0x304>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800269e:	4b23      	ldr	r3, [pc, #140]	; (800272c <HAL_GPIO_Init+0x304>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026c2:	4a1a      	ldr	r2, [pc, #104]	; (800272c <HAL_GPIO_Init+0x304>)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c8:	4b18      	ldr	r3, [pc, #96]	; (800272c <HAL_GPIO_Init+0x304>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ec:	4a0f      	ldr	r2, [pc, #60]	; (800272c <HAL_GPIO_Init+0x304>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3301      	adds	r3, #1
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2b0f      	cmp	r3, #15
 80026fc:	f67f aea2 	bls.w	8002444 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3724      	adds	r7, #36	; 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800
 8002714:	40013800 	.word	0x40013800
 8002718:	40020000 	.word	0x40020000
 800271c:	40020400 	.word	0x40020400
 8002720:	40020800 	.word	0x40020800
 8002724:	40020c00 	.word	0x40020c00
 8002728:	40021000 	.word	0x40021000
 800272c:	40013c00 	.word	0x40013c00

08002730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	807b      	strh	r3, [r7, #2]
 800273c:	4613      	mov	r3, r2
 800273e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002740:	787b      	ldrb	r3, [r7, #1]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002746:	887a      	ldrh	r2, [r7, #2]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800274c:	e003      	b.n	8002756 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800274e:	887b      	ldrh	r3, [r7, #2]
 8002750:	041a      	lsls	r2, r3, #16
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	619a      	str	r2, [r3, #24]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e12b      	b.n	80029ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d106      	bne.n	8002790 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff fba4 	bl	8001ed8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2224      	movs	r2, #36	; 0x24
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027c8:	f001 fbfc 	bl	8003fc4 <HAL_RCC_GetPCLK1Freq>
 80027cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4a81      	ldr	r2, [pc, #516]	; (80029d8 <HAL_I2C_Init+0x274>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d807      	bhi.n	80027e8 <HAL_I2C_Init+0x84>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4a80      	ldr	r2, [pc, #512]	; (80029dc <HAL_I2C_Init+0x278>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	bf94      	ite	ls
 80027e0:	2301      	movls	r3, #1
 80027e2:	2300      	movhi	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	e006      	b.n	80027f6 <HAL_I2C_Init+0x92>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	4a7d      	ldr	r2, [pc, #500]	; (80029e0 <HAL_I2C_Init+0x27c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	bf94      	ite	ls
 80027f0:	2301      	movls	r3, #1
 80027f2:	2300      	movhi	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e0e7      	b.n	80029ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4a78      	ldr	r2, [pc, #480]	; (80029e4 <HAL_I2C_Init+0x280>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	0c9b      	lsrs	r3, r3, #18
 8002808:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	4a6a      	ldr	r2, [pc, #424]	; (80029d8 <HAL_I2C_Init+0x274>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d802      	bhi.n	8002838 <HAL_I2C_Init+0xd4>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	3301      	adds	r3, #1
 8002836:	e009      	b.n	800284c <HAL_I2C_Init+0xe8>
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800283e:	fb02 f303 	mul.w	r3, r2, r3
 8002842:	4a69      	ldr	r2, [pc, #420]	; (80029e8 <HAL_I2C_Init+0x284>)
 8002844:	fba2 2303 	umull	r2, r3, r2, r3
 8002848:	099b      	lsrs	r3, r3, #6
 800284a:	3301      	adds	r3, #1
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	430b      	orrs	r3, r1
 8002852:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800285e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	495c      	ldr	r1, [pc, #368]	; (80029d8 <HAL_I2C_Init+0x274>)
 8002868:	428b      	cmp	r3, r1
 800286a:	d819      	bhi.n	80028a0 <HAL_I2C_Init+0x13c>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1e59      	subs	r1, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fbb1 f3f3 	udiv	r3, r1, r3
 800287a:	1c59      	adds	r1, r3, #1
 800287c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002880:	400b      	ands	r3, r1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_I2C_Init+0x138>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1e59      	subs	r1, r3, #1
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fbb1 f3f3 	udiv	r3, r1, r3
 8002894:	3301      	adds	r3, #1
 8002896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289a:	e051      	b.n	8002940 <HAL_I2C_Init+0x1dc>
 800289c:	2304      	movs	r3, #4
 800289e:	e04f      	b.n	8002940 <HAL_I2C_Init+0x1dc>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d111      	bne.n	80028cc <HAL_I2C_Init+0x168>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1e58      	subs	r0, r3, #1
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6859      	ldr	r1, [r3, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	440b      	add	r3, r1
 80028b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ba:	3301      	adds	r3, #1
 80028bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	bf0c      	ite	eq
 80028c4:	2301      	moveq	r3, #1
 80028c6:	2300      	movne	r3, #0
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	e012      	b.n	80028f2 <HAL_I2C_Init+0x18e>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1e58      	subs	r0, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	440b      	add	r3, r1
 80028da:	0099      	lsls	r1, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e2:	3301      	adds	r3, #1
 80028e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_I2C_Init+0x196>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e022      	b.n	8002940 <HAL_I2C_Init+0x1dc>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10e      	bne.n	8002920 <HAL_I2C_Init+0x1bc>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1e58      	subs	r0, r3, #1
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6859      	ldr	r1, [r3, #4]
 800290a:	460b      	mov	r3, r1
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	440b      	add	r3, r1
 8002910:	fbb0 f3f3 	udiv	r3, r0, r3
 8002914:	3301      	adds	r3, #1
 8002916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800291e:	e00f      	b.n	8002940 <HAL_I2C_Init+0x1dc>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1e58      	subs	r0, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	0099      	lsls	r1, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	fbb0 f3f3 	udiv	r3, r0, r3
 8002936:	3301      	adds	r3, #1
 8002938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	6809      	ldr	r1, [r1, #0]
 8002944:	4313      	orrs	r3, r2
 8002946:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69da      	ldr	r2, [r3, #28]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800296e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6911      	ldr	r1, [r2, #16]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68d2      	ldr	r2, [r2, #12]
 800297a:	4311      	orrs	r1, r2
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6812      	ldr	r2, [r2, #0]
 8002980:	430b      	orrs	r3, r1
 8002982:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695a      	ldr	r2, [r3, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	000186a0 	.word	0x000186a0
 80029dc:	001e847f 	.word	0x001e847f
 80029e0:	003d08ff 	.word	0x003d08ff
 80029e4:	431bde83 	.word	0x431bde83
 80029e8:	10624dd3 	.word	0x10624dd3

080029ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	4608      	mov	r0, r1
 80029f6:	4611      	mov	r1, r2
 80029f8:	461a      	mov	r2, r3
 80029fa:	4603      	mov	r3, r0
 80029fc:	817b      	strh	r3, [r7, #10]
 80029fe:	460b      	mov	r3, r1
 8002a00:	813b      	strh	r3, [r7, #8]
 8002a02:	4613      	mov	r3, r2
 8002a04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a06:	f7ff fbf9 	bl	80021fc <HAL_GetTick>
 8002a0a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	f040 80d9 	bne.w	8002bcc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	2319      	movs	r3, #25
 8002a20:	2201      	movs	r2, #1
 8002a22:	496d      	ldr	r1, [pc, #436]	; (8002bd8 <HAL_I2C_Mem_Write+0x1ec>)
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 fc7f 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a30:	2302      	movs	r3, #2
 8002a32:	e0cc      	b.n	8002bce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d101      	bne.n	8002a42 <HAL_I2C_Mem_Write+0x56>
 8002a3e:	2302      	movs	r3, #2
 8002a40:	e0c5      	b.n	8002bce <HAL_I2C_Mem_Write+0x1e2>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d007      	beq.n	8002a68 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2221      	movs	r2, #33	; 0x21
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2240      	movs	r2, #64	; 0x40
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6a3a      	ldr	r2, [r7, #32]
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4a4d      	ldr	r2, [pc, #308]	; (8002bdc <HAL_I2C_Mem_Write+0x1f0>)
 8002aa8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aaa:	88f8      	ldrh	r0, [r7, #6]
 8002aac:	893a      	ldrh	r2, [r7, #8]
 8002aae:	8979      	ldrh	r1, [r7, #10]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	4603      	mov	r3, r0
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fab6 	bl	800302c <I2C_RequestMemoryWrite>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d052      	beq.n	8002b6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e081      	b.n	8002bce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fd00 	bl	80034d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00d      	beq.n	8002af6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d107      	bne.n	8002af2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06b      	b.n	8002bce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d11b      	bne.n	8002b6c <HAL_I2C_Mem_Write+0x180>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d017      	beq.n	8002b6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	781a      	ldrb	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1aa      	bne.n	8002aca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 fcec 	bl	8003556 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00d      	beq.n	8002ba0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d107      	bne.n	8002b9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e016      	b.n	8002bce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e000      	b.n	8002bce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bcc:	2302      	movs	r3, #2
  }
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	00100002 	.word	0x00100002
 8002bdc:	ffff0000 	.word	0xffff0000

08002be0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08c      	sub	sp, #48	; 0x30
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	4608      	mov	r0, r1
 8002bea:	4611      	mov	r1, r2
 8002bec:	461a      	mov	r2, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	817b      	strh	r3, [r7, #10]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	813b      	strh	r3, [r7, #8]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bfa:	f7ff faff 	bl	80021fc <HAL_GetTick>
 8002bfe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b20      	cmp	r3, #32
 8002c0a:	f040 8208 	bne.w	800301e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	2319      	movs	r3, #25
 8002c14:	2201      	movs	r2, #1
 8002c16:	497b      	ldr	r1, [pc, #492]	; (8002e04 <HAL_I2C_Mem_Read+0x224>)
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fb85 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c24:	2302      	movs	r3, #2
 8002c26:	e1fb      	b.n	8003020 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d101      	bne.n	8002c36 <HAL_I2C_Mem_Read+0x56>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e1f4      	b.n	8003020 <HAL_I2C_Mem_Read+0x440>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d007      	beq.n	8002c5c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2222      	movs	r2, #34	; 0x22
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2240      	movs	r2, #64	; 0x40
 8002c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a5b      	ldr	r2, [pc, #364]	; (8002e08 <HAL_I2C_Mem_Read+0x228>)
 8002c9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c9e:	88f8      	ldrh	r0, [r7, #6]
 8002ca0:	893a      	ldrh	r2, [r7, #8]
 8002ca2:	8979      	ldrh	r1, [r7, #10]
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	4603      	mov	r3, r0
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 fa52 	bl	8003158 <I2C_RequestMemoryRead>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e1b0      	b.n	8003020 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d113      	bne.n	8002cee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	623b      	str	r3, [r7, #32]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	623b      	str	r3, [r7, #32]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	623b      	str	r3, [r7, #32]
 8002cda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	e184      	b.n	8002ff8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d11b      	bne.n	8002d2e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d06:	2300      	movs	r3, #0
 8002d08:	61fb      	str	r3, [r7, #28]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	61fb      	str	r3, [r7, #28]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	e164      	b.n	8002ff8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d11b      	bne.n	8002d6e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	61bb      	str	r3, [r7, #24]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	61bb      	str	r3, [r7, #24]
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	e144      	b.n	8002ff8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	617b      	str	r3, [r7, #20]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d84:	e138      	b.n	8002ff8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	f200 80f1 	bhi.w	8002f72 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d123      	bne.n	8002de0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fc1b 	bl	80035d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e139      	b.n	8003020 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	1c5a      	adds	r2, r3, #1
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dde:	e10b      	b.n	8002ff8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d14e      	bne.n	8002e86 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	2200      	movs	r2, #0
 8002df0:	4906      	ldr	r1, [pc, #24]	; (8002e0c <HAL_I2C_Mem_Read+0x22c>)
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 fa98 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e10e      	b.n	8003020 <HAL_I2C_Mem_Read+0x440>
 8002e02:	bf00      	nop
 8002e04:	00100002 	.word	0x00100002
 8002e08:	ffff0000 	.word	0xffff0000
 8002e0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e84:	e0b8      	b.n	8002ff8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	4966      	ldr	r1, [pc, #408]	; (8003028 <HAL_I2C_Mem_Read+0x448>)
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 fa49 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0bf      	b.n	8003020 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee8:	2200      	movs	r2, #0
 8002eea:	494f      	ldr	r1, [pc, #316]	; (8003028 <HAL_I2C_Mem_Read+0x448>)
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fa1b 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e091      	b.n	8003020 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691a      	ldr	r2, [r3, #16]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f16:	b2d2      	uxtb	r2, r2
 8002f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f70:	e042      	b.n	8002ff8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fb2e 	bl	80035d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e04c      	b.n	8003020 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691a      	ldr	r2, [r3, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	1c5a      	adds	r2, r3, #1
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d118      	bne.n	8002ff8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f47f aec2 	bne.w	8002d86 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800301e:	2302      	movs	r3, #2
  }
}
 8003020:	4618      	mov	r0, r3
 8003022:	3728      	adds	r7, #40	; 0x28
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	00010004 	.word	0x00010004

0800302c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af02      	add	r7, sp, #8
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	4608      	mov	r0, r1
 8003036:	4611      	mov	r1, r2
 8003038:	461a      	mov	r2, r3
 800303a:	4603      	mov	r3, r0
 800303c:	817b      	strh	r3, [r7, #10]
 800303e:	460b      	mov	r3, r1
 8003040:	813b      	strh	r3, [r7, #8]
 8003042:	4613      	mov	r3, r2
 8003044:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003054:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	2200      	movs	r2, #0
 800305e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 f960 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00d      	beq.n	800308a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800307c:	d103      	bne.n	8003086 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e05f      	b.n	800314a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800308a:	897b      	ldrh	r3, [r7, #10]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003098:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	6a3a      	ldr	r2, [r7, #32]
 800309e:	492d      	ldr	r1, [pc, #180]	; (8003154 <I2C_RequestMemoryWrite+0x128>)
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 f998 	bl	80033d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e04c      	b.n	800314a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c8:	6a39      	ldr	r1, [r7, #32]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fa02 	bl	80034d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d107      	bne.n	80030ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e02b      	b.n	800314a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030f2:	88fb      	ldrh	r3, [r7, #6]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030f8:	893b      	ldrh	r3, [r7, #8]
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	611a      	str	r2, [r3, #16]
 8003102:	e021      	b.n	8003148 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003104:	893b      	ldrh	r3, [r7, #8]
 8003106:	0a1b      	lsrs	r3, r3, #8
 8003108:	b29b      	uxth	r3, r3
 800310a:	b2da      	uxtb	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003114:	6a39      	ldr	r1, [r7, #32]
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f9dc 	bl	80034d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00d      	beq.n	800313e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	2b04      	cmp	r3, #4
 8003128:	d107      	bne.n	800313a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003138:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e005      	b.n	800314a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800313e:	893b      	ldrh	r3, [r7, #8]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	00010002 	.word	0x00010002

08003158 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af02      	add	r7, sp, #8
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	4608      	mov	r0, r1
 8003162:	4611      	mov	r1, r2
 8003164:	461a      	mov	r2, r3
 8003166:	4603      	mov	r3, r0
 8003168:	817b      	strh	r3, [r7, #10]
 800316a:	460b      	mov	r3, r1
 800316c:	813b      	strh	r3, [r7, #8]
 800316e:	4613      	mov	r3, r2
 8003170:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003180:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003190:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	2200      	movs	r2, #0
 800319a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f8c2 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00d      	beq.n	80031c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b8:	d103      	bne.n	80031c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e0aa      	b.n	800331c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031c6:	897b      	ldrh	r3, [r7, #10]
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	6a3a      	ldr	r2, [r7, #32]
 80031da:	4952      	ldr	r1, [pc, #328]	; (8003324 <I2C_RequestMemoryRead+0x1cc>)
 80031dc:	68f8      	ldr	r0, [r7, #12]
 80031de:	f000 f8fa 	bl	80033d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e097      	b.n	800331c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003204:	6a39      	ldr	r1, [r7, #32]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f964 	bl	80034d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00d      	beq.n	800322e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	2b04      	cmp	r3, #4
 8003218:	d107      	bne.n	800322a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003228:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e076      	b.n	800331c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800322e:	88fb      	ldrh	r3, [r7, #6]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d105      	bne.n	8003240 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003234:	893b      	ldrh	r3, [r7, #8]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	611a      	str	r2, [r3, #16]
 800323e:	e021      	b.n	8003284 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003240:	893b      	ldrh	r3, [r7, #8]
 8003242:	0a1b      	lsrs	r3, r3, #8
 8003244:	b29b      	uxth	r3, r3
 8003246:	b2da      	uxtb	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800324e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003250:	6a39      	ldr	r1, [r7, #32]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f93e 	bl	80034d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00d      	beq.n	800327a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	2b04      	cmp	r3, #4
 8003264:	d107      	bne.n	8003276 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003274:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e050      	b.n	800331c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800327a:	893b      	ldrh	r3, [r7, #8]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003286:	6a39      	ldr	r1, [r7, #32]
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 f923 	bl	80034d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00d      	beq.n	80032b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	2b04      	cmp	r3, #4
 800329a:	d107      	bne.n	80032ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e035      	b.n	800331c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 f82b 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00d      	beq.n	80032f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e6:	d103      	bne.n	80032f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e013      	b.n	800331c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032f4:	897b      	ldrh	r3, [r7, #10]
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	6a3a      	ldr	r2, [r7, #32]
 8003308:	4906      	ldr	r1, [pc, #24]	; (8003324 <I2C_RequestMemoryRead+0x1cc>)
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f863 	bl	80033d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	00010002 	.word	0x00010002

08003328 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	4613      	mov	r3, r2
 8003336:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003338:	e025      	b.n	8003386 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003340:	d021      	beq.n	8003386 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003342:	f7fe ff5b 	bl	80021fc <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d302      	bcc.n	8003358 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d116      	bne.n	8003386 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f043 0220 	orr.w	r2, r3, #32
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e023      	b.n	80033ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	0c1b      	lsrs	r3, r3, #16
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b01      	cmp	r3, #1
 800338e:	d10d      	bne.n	80033ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	43da      	mvns	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4013      	ands	r3, r2
 800339c:	b29b      	uxth	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	bf0c      	ite	eq
 80033a2:	2301      	moveq	r3, #1
 80033a4:	2300      	movne	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	e00c      	b.n	80033c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	43da      	mvns	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4013      	ands	r3, r2
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bf0c      	ite	eq
 80033be:	2301      	moveq	r3, #1
 80033c0:	2300      	movne	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	79fb      	ldrb	r3, [r7, #7]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d0b6      	beq.n	800333a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b084      	sub	sp, #16
 80033da:	af00      	add	r7, sp, #0
 80033dc:	60f8      	str	r0, [r7, #12]
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	607a      	str	r2, [r7, #4]
 80033e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033e4:	e051      	b.n	800348a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f4:	d123      	bne.n	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003404:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800340e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f043 0204 	orr.w	r2, r3, #4
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e046      	b.n	80034cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003444:	d021      	beq.n	800348a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003446:	f7fe fed9 	bl	80021fc <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	429a      	cmp	r2, r3
 8003454:	d302      	bcc.n	800345c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d116      	bne.n	800348a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	f043 0220 	orr.w	r2, r3, #32
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e020      	b.n	80034cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	0c1b      	lsrs	r3, r3, #16
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d10c      	bne.n	80034ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	43da      	mvns	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4013      	ands	r3, r2
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	bf14      	ite	ne
 80034a6:	2301      	movne	r3, #1
 80034a8:	2300      	moveq	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	e00b      	b.n	80034c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	43da      	mvns	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	4013      	ands	r3, r2
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bf14      	ite	ne
 80034c0:	2301      	movne	r3, #1
 80034c2:	2300      	moveq	r3, #0
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d18d      	bne.n	80033e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034e0:	e02d      	b.n	800353e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 f8ce 	bl	8003684 <I2C_IsAcknowledgeFailed>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e02d      	b.n	800354e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f8:	d021      	beq.n	800353e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fa:	f7fe fe7f 	bl	80021fc <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	429a      	cmp	r2, r3
 8003508:	d302      	bcc.n	8003510 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d116      	bne.n	800353e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2220      	movs	r2, #32
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f043 0220 	orr.w	r2, r3, #32
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e007      	b.n	800354e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003548:	2b80      	cmp	r3, #128	; 0x80
 800354a:	d1ca      	bne.n	80034e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003562:	e02d      	b.n	80035c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f88d 	bl	8003684 <I2C_IsAcknowledgeFailed>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e02d      	b.n	80035d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357a:	d021      	beq.n	80035c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357c:	f7fe fe3e 	bl	80021fc <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	429a      	cmp	r2, r3
 800358a:	d302      	bcc.n	8003592 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d116      	bne.n	80035c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	f043 0220 	orr.w	r2, r3, #32
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e007      	b.n	80035d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	d1ca      	bne.n	8003564 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035e4:	e042      	b.n	800366c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b10      	cmp	r3, #16
 80035f2:	d119      	bne.n	8003628 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0210 	mvn.w	r2, #16
 80035fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e029      	b.n	800367c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003628:	f7fe fde8 	bl	80021fc <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	429a      	cmp	r2, r3
 8003636:	d302      	bcc.n	800363e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d116      	bne.n	800366c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e007      	b.n	800367c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003676:	2b40      	cmp	r3, #64	; 0x40
 8003678:	d1b5      	bne.n	80035e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369a:	d11b      	bne.n	80036d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	f043 0204 	orr.w	r2, r3, #4
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
	...

080036e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e267      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d075      	beq.n	80037ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003702:	4b88      	ldr	r3, [pc, #544]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b04      	cmp	r3, #4
 800370c:	d00c      	beq.n	8003728 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800370e:	4b85      	ldr	r3, [pc, #532]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003716:	2b08      	cmp	r3, #8
 8003718:	d112      	bne.n	8003740 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800371a:	4b82      	ldr	r3, [pc, #520]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003722:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003726:	d10b      	bne.n	8003740 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003728:	4b7e      	ldr	r3, [pc, #504]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d05b      	beq.n	80037ec <HAL_RCC_OscConfig+0x108>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d157      	bne.n	80037ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e242      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003748:	d106      	bne.n	8003758 <HAL_RCC_OscConfig+0x74>
 800374a:	4b76      	ldr	r3, [pc, #472]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a75      	ldr	r2, [pc, #468]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	e01d      	b.n	8003794 <HAL_RCC_OscConfig+0xb0>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003760:	d10c      	bne.n	800377c <HAL_RCC_OscConfig+0x98>
 8003762:	4b70      	ldr	r3, [pc, #448]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a6f      	ldr	r2, [pc, #444]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	4b6d      	ldr	r3, [pc, #436]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a6c      	ldr	r2, [pc, #432]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	e00b      	b.n	8003794 <HAL_RCC_OscConfig+0xb0>
 800377c:	4b69      	ldr	r3, [pc, #420]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a68      	ldr	r2, [pc, #416]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003786:	6013      	str	r3, [r2, #0]
 8003788:	4b66      	ldr	r3, [pc, #408]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a65      	ldr	r2, [pc, #404]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 800378e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d013      	beq.n	80037c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379c:	f7fe fd2e 	bl	80021fc <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a4:	f7fe fd2a 	bl	80021fc <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b64      	cmp	r3, #100	; 0x64
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e207      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b6:	4b5b      	ldr	r3, [pc, #364]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCC_OscConfig+0xc0>
 80037c2:	e014      	b.n	80037ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7fe fd1a 	bl	80021fc <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037cc:	f7fe fd16 	bl	80021fc <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	; 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e1f3      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037de:	4b51      	ldr	r3, [pc, #324]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1f0      	bne.n	80037cc <HAL_RCC_OscConfig+0xe8>
 80037ea:	e000      	b.n	80037ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d063      	beq.n	80038c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037fa:	4b4a      	ldr	r3, [pc, #296]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00b      	beq.n	800381e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003806:	4b47      	ldr	r3, [pc, #284]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800380e:	2b08      	cmp	r3, #8
 8003810:	d11c      	bne.n	800384c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003812:	4b44      	ldr	r3, [pc, #272]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d116      	bne.n	800384c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381e:	4b41      	ldr	r3, [pc, #260]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <HAL_RCC_OscConfig+0x152>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d001      	beq.n	8003836 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e1c7      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003836:	4b3b      	ldr	r3, [pc, #236]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	4937      	ldr	r1, [pc, #220]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384a:	e03a      	b.n	80038c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d020      	beq.n	8003896 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003854:	4b34      	ldr	r3, [pc, #208]	; (8003928 <HAL_RCC_OscConfig+0x244>)
 8003856:	2201      	movs	r2, #1
 8003858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385a:	f7fe fccf 	bl	80021fc <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003862:	f7fe fccb 	bl	80021fc <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e1a8      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003874:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0f0      	beq.n	8003862 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003880:	4b28      	ldr	r3, [pc, #160]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	4925      	ldr	r1, [pc, #148]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 8003890:	4313      	orrs	r3, r2
 8003892:	600b      	str	r3, [r1, #0]
 8003894:	e015      	b.n	80038c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003896:	4b24      	ldr	r3, [pc, #144]	; (8003928 <HAL_RCC_OscConfig+0x244>)
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fe fcae 	bl	80021fc <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a4:	f7fe fcaa 	bl	80021fc <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e187      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b6:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1f0      	bne.n	80038a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d036      	beq.n	800393c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d016      	beq.n	8003904 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038d6:	4b15      	ldr	r3, [pc, #84]	; (800392c <HAL_RCC_OscConfig+0x248>)
 80038d8:	2201      	movs	r2, #1
 80038da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038dc:	f7fe fc8e 	bl	80021fc <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e4:	f7fe fc8a 	bl	80021fc <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e167      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f6:	4b0b      	ldr	r3, [pc, #44]	; (8003924 <HAL_RCC_OscConfig+0x240>)
 80038f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0x200>
 8003902:	e01b      	b.n	800393c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003904:	4b09      	ldr	r3, [pc, #36]	; (800392c <HAL_RCC_OscConfig+0x248>)
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800390a:	f7fe fc77 	bl	80021fc <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003910:	e00e      	b.n	8003930 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003912:	f7fe fc73 	bl	80021fc <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d907      	bls.n	8003930 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e150      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
 8003924:	40023800 	.word	0x40023800
 8003928:	42470000 	.word	0x42470000
 800392c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003930:	4b88      	ldr	r3, [pc, #544]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1ea      	bne.n	8003912 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8097 	beq.w	8003a78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800394a:	2300      	movs	r3, #0
 800394c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394e:	4b81      	ldr	r3, [pc, #516]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10f      	bne.n	800397a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	4b7d      	ldr	r3, [pc, #500]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	4a7c      	ldr	r2, [pc, #496]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003968:	6413      	str	r3, [r2, #64]	; 0x40
 800396a:	4b7a      	ldr	r3, [pc, #488]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003976:	2301      	movs	r3, #1
 8003978:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397a:	4b77      	ldr	r3, [pc, #476]	; (8003b58 <HAL_RCC_OscConfig+0x474>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003982:	2b00      	cmp	r3, #0
 8003984:	d118      	bne.n	80039b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003986:	4b74      	ldr	r3, [pc, #464]	; (8003b58 <HAL_RCC_OscConfig+0x474>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a73      	ldr	r2, [pc, #460]	; (8003b58 <HAL_RCC_OscConfig+0x474>)
 800398c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003992:	f7fe fc33 	bl	80021fc <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800399a:	f7fe fc2f 	bl	80021fc <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e10c      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ac:	4b6a      	ldr	r3, [pc, #424]	; (8003b58 <HAL_RCC_OscConfig+0x474>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0f0      	beq.n	800399a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d106      	bne.n	80039ce <HAL_RCC_OscConfig+0x2ea>
 80039c0:	4b64      	ldr	r3, [pc, #400]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c4:	4a63      	ldr	r2, [pc, #396]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	6713      	str	r3, [r2, #112]	; 0x70
 80039cc:	e01c      	b.n	8003a08 <HAL_RCC_OscConfig+0x324>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b05      	cmp	r3, #5
 80039d4:	d10c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x30c>
 80039d6:	4b5f      	ldr	r3, [pc, #380]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	4a5e      	ldr	r2, [pc, #376]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039dc:	f043 0304 	orr.w	r3, r3, #4
 80039e0:	6713      	str	r3, [r2, #112]	; 0x70
 80039e2:	4b5c      	ldr	r3, [pc, #368]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	4a5b      	ldr	r2, [pc, #364]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	6713      	str	r3, [r2, #112]	; 0x70
 80039ee:	e00b      	b.n	8003a08 <HAL_RCC_OscConfig+0x324>
 80039f0:	4b58      	ldr	r3, [pc, #352]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f4:	4a57      	ldr	r2, [pc, #348]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039f6:	f023 0301 	bic.w	r3, r3, #1
 80039fa:	6713      	str	r3, [r2, #112]	; 0x70
 80039fc:	4b55      	ldr	r3, [pc, #340]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 80039fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a00:	4a54      	ldr	r2, [pc, #336]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003a02:	f023 0304 	bic.w	r3, r3, #4
 8003a06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d015      	beq.n	8003a3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a10:	f7fe fbf4 	bl	80021fc <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a16:	e00a      	b.n	8003a2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a18:	f7fe fbf0 	bl	80021fc <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e0cb      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2e:	4b49      	ldr	r3, [pc, #292]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d0ee      	beq.n	8003a18 <HAL_RCC_OscConfig+0x334>
 8003a3a:	e014      	b.n	8003a66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3c:	f7fe fbde 	bl	80021fc <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a42:	e00a      	b.n	8003a5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a44:	f7fe fbda 	bl	80021fc <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e0b5      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5a:	4b3e      	ldr	r3, [pc, #248]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1ee      	bne.n	8003a44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a66:	7dfb      	ldrb	r3, [r7, #23]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d105      	bne.n	8003a78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a6c:	4b39      	ldr	r3, [pc, #228]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	4a38      	ldr	r2, [pc, #224]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003a72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a76:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80a1 	beq.w	8003bc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a82:	4b34      	ldr	r3, [pc, #208]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d05c      	beq.n	8003b48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d141      	bne.n	8003b1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a96:	4b31      	ldr	r3, [pc, #196]	; (8003b5c <HAL_RCC_OscConfig+0x478>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9c:	f7fe fbae 	bl	80021fc <HAL_GetTick>
 8003aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa4:	f7fe fbaa 	bl	80021fc <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e087      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab6:	4b27      	ldr	r3, [pc, #156]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f0      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69da      	ldr	r2, [r3, #28]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	019b      	lsls	r3, r3, #6
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	085b      	lsrs	r3, r3, #1
 8003ada:	3b01      	subs	r3, #1
 8003adc:	041b      	lsls	r3, r3, #16
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae4:	061b      	lsls	r3, r3, #24
 8003ae6:	491b      	ldr	r1, [pc, #108]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aec:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <HAL_RCC_OscConfig+0x478>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af2:	f7fe fb83 	bl	80021fc <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afa:	f7fe fb7f 	bl	80021fc <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e05c      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b0c:	4b11      	ldr	r3, [pc, #68]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x416>
 8003b18:	e054      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <HAL_RCC_OscConfig+0x478>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b20:	f7fe fb6c 	bl	80021fc <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b28:	f7fe fb68 	bl	80021fc <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e045      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <HAL_RCC_OscConfig+0x470>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f0      	bne.n	8003b28 <HAL_RCC_OscConfig+0x444>
 8003b46:	e03d      	b.n	8003bc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d107      	bne.n	8003b60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e038      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
 8003b54:	40023800 	.word	0x40023800
 8003b58:	40007000 	.word	0x40007000
 8003b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b60:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <HAL_RCC_OscConfig+0x4ec>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d028      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d121      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d11a      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b90:	4013      	ands	r3, r2
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d111      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba6:	085b      	lsrs	r3, r3, #1
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d107      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40023800 	.word	0x40023800

08003bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0cc      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003be8:	4b68      	ldr	r3, [pc, #416]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d90c      	bls.n	8003c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b65      	ldr	r3, [pc, #404]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b63      	ldr	r3, [pc, #396]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0b8      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d020      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c28:	4b59      	ldr	r3, [pc, #356]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	4a58      	ldr	r2, [pc, #352]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c40:	4b53      	ldr	r3, [pc, #332]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4a52      	ldr	r2, [pc, #328]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c4c:	4b50      	ldr	r3, [pc, #320]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	494d      	ldr	r1, [pc, #308]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d044      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d119      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e07f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d003      	beq.n	8003c92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c92:	4b3f      	ldr	r3, [pc, #252]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d109      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e06f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca2:	4b3b      	ldr	r3, [pc, #236]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e067      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb2:	4b37      	ldr	r3, [pc, #220]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f023 0203 	bic.w	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4934      	ldr	r1, [pc, #208]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc4:	f7fe fa9a 	bl	80021fc <HAL_GetTick>
 8003cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ccc:	f7fe fa96 	bl	80021fc <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e04f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	4b2b      	ldr	r3, [pc, #172]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 020c 	and.w	r2, r3, #12
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d1eb      	bne.n	8003ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf4:	4b25      	ldr	r3, [pc, #148]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d20c      	bcs.n	8003d1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d02:	4b22      	ldr	r3, [pc, #136]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0a:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <HAL_RCC_ClockConfig+0x1b8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e032      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d28:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4916      	ldr	r1, [pc, #88]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d46:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	490e      	ldr	r1, [pc, #56]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d5a:	f000 f821 	bl	8003da0 <HAL_RCC_GetSysClockFreq>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	490a      	ldr	r1, [pc, #40]	; (8003d94 <HAL_RCC_ClockConfig+0x1c0>)
 8003d6c:	5ccb      	ldrb	r3, [r1, r3]
 8003d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d72:	4a09      	ldr	r2, [pc, #36]	; (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_RCC_ClockConfig+0x1c8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fe f9fa 	bl	8002174 <HAL_InitTick>

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40023c00 	.word	0x40023c00
 8003d90:	40023800 	.word	0x40023800
 8003d94:	08007f0c 	.word	0x08007f0c
 8003d98:	20000008 	.word	0x20000008
 8003d9c:	2000000c 	.word	0x2000000c

08003da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da4:	b094      	sub	sp, #80	; 0x50
 8003da6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	647b      	str	r3, [r7, #68]	; 0x44
 8003dac:	2300      	movs	r3, #0
 8003dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db0:	2300      	movs	r3, #0
 8003db2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003db4:	2300      	movs	r3, #0
 8003db6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003db8:	4b79      	ldr	r3, [pc, #484]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 030c 	and.w	r3, r3, #12
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d00d      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0x40>
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	f200 80e1 	bhi.w	8003f8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d003      	beq.n	8003dda <HAL_RCC_GetSysClockFreq+0x3a>
 8003dd2:	e0db      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dd4:	4b73      	ldr	r3, [pc, #460]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dd6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003dd8:	e0db      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dda:	4b73      	ldr	r3, [pc, #460]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ddc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dde:	e0d8      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003de0:	4b6f      	ldr	r3, [pc, #444]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003de8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dea:	4b6d      	ldr	r3, [pc, #436]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d063      	beq.n	8003ebe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df6:	4b6a      	ldr	r3, [pc, #424]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	099b      	lsrs	r3, r3, #6
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e08:	633b      	str	r3, [r7, #48]	; 0x30
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e12:	4622      	mov	r2, r4
 8003e14:	462b      	mov	r3, r5
 8003e16:	f04f 0000 	mov.w	r0, #0
 8003e1a:	f04f 0100 	mov.w	r1, #0
 8003e1e:	0159      	lsls	r1, r3, #5
 8003e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e24:	0150      	lsls	r0, r2, #5
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	1a51      	subs	r1, r2, r1
 8003e2e:	6139      	str	r1, [r7, #16]
 8003e30:	4629      	mov	r1, r5
 8003e32:	eb63 0301 	sbc.w	r3, r3, r1
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e44:	4659      	mov	r1, fp
 8003e46:	018b      	lsls	r3, r1, #6
 8003e48:	4651      	mov	r1, sl
 8003e4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e4e:	4651      	mov	r1, sl
 8003e50:	018a      	lsls	r2, r1, #6
 8003e52:	4651      	mov	r1, sl
 8003e54:	ebb2 0801 	subs.w	r8, r2, r1
 8003e58:	4659      	mov	r1, fp
 8003e5a:	eb63 0901 	sbc.w	r9, r3, r1
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e72:	4690      	mov	r8, r2
 8003e74:	4699      	mov	r9, r3
 8003e76:	4623      	mov	r3, r4
 8003e78:	eb18 0303 	adds.w	r3, r8, r3
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	462b      	mov	r3, r5
 8003e80:	eb49 0303 	adc.w	r3, r9, r3
 8003e84:	60fb      	str	r3, [r7, #12]
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e92:	4629      	mov	r1, r5
 8003e94:	024b      	lsls	r3, r1, #9
 8003e96:	4621      	mov	r1, r4
 8003e98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	024a      	lsls	r2, r1, #9
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003eb0:	f7fc fe82 	bl	8000bb8 <__aeabi_uldivmod>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4613      	mov	r3, r2
 8003eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ebc:	e058      	b.n	8003f70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ebe:	4b38      	ldr	r3, [pc, #224]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	099b      	lsrs	r3, r3, #6
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	4611      	mov	r1, r2
 8003eca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ece:	623b      	str	r3, [r7, #32]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ed8:	4642      	mov	r2, r8
 8003eda:	464b      	mov	r3, r9
 8003edc:	f04f 0000 	mov.w	r0, #0
 8003ee0:	f04f 0100 	mov.w	r1, #0
 8003ee4:	0159      	lsls	r1, r3, #5
 8003ee6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eea:	0150      	lsls	r0, r2, #5
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4641      	mov	r1, r8
 8003ef2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ef6:	4649      	mov	r1, r9
 8003ef8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f10:	ebb2 040a 	subs.w	r4, r2, sl
 8003f14:	eb63 050b 	sbc.w	r5, r3, fp
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	00eb      	lsls	r3, r5, #3
 8003f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f26:	00e2      	lsls	r2, r4, #3
 8003f28:	4614      	mov	r4, r2
 8003f2a:	461d      	mov	r5, r3
 8003f2c:	4643      	mov	r3, r8
 8003f2e:	18e3      	adds	r3, r4, r3
 8003f30:	603b      	str	r3, [r7, #0]
 8003f32:	464b      	mov	r3, r9
 8003f34:	eb45 0303 	adc.w	r3, r5, r3
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f46:	4629      	mov	r1, r5
 8003f48:	028b      	lsls	r3, r1, #10
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f50:	4621      	mov	r1, r4
 8003f52:	028a      	lsls	r2, r1, #10
 8003f54:	4610      	mov	r0, r2
 8003f56:	4619      	mov	r1, r3
 8003f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	61fa      	str	r2, [r7, #28]
 8003f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f64:	f7fc fe28 	bl	8000bb8 <__aeabi_uldivmod>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	0c1b      	lsrs	r3, r3, #16
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f8a:	e002      	b.n	8003f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3750      	adds	r7, #80	; 0x50
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	00f42400 	.word	0x00f42400
 8003fa8:	007a1200 	.word	0x007a1200

08003fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb0:	4b03      	ldr	r3, [pc, #12]	; (8003fc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	20000008 	.word	0x20000008

08003fc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fc8:	f7ff fff0 	bl	8003fac <HAL_RCC_GetHCLKFreq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	0a9b      	lsrs	r3, r3, #10
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	4903      	ldr	r1, [pc, #12]	; (8003fe8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fda:	5ccb      	ldrb	r3, [r1, r3]
 8003fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	08007f1c 	.word	0x08007f1c

08003fec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e07b      	b.n	80040f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	2b00      	cmp	r3, #0
 8004004:	d108      	bne.n	8004018 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800400e:	d009      	beq.n	8004024 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	61da      	str	r2, [r3, #28]
 8004016:	e005      	b.n	8004024 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d106      	bne.n	8004044 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7fd ff92 	bl	8001f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800405a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800406c:	431a      	orrs	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a8:	ea42 0103 	orr.w	r1, r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	0c1b      	lsrs	r3, r3, #16
 80040c2:	f003 0104 	and.w	r1, r3, #4
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	f003 0210 	and.w	r2, r3, #16
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	69da      	ldr	r2, [r3, #28]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b088      	sub	sp, #32
 8004102:	af00      	add	r7, sp, #0
 8004104:	60f8      	str	r0, [r7, #12]
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	603b      	str	r3, [r7, #0]
 800410a:	4613      	mov	r3, r2
 800410c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_SPI_Transmit+0x22>
 800411c:	2302      	movs	r3, #2
 800411e:	e126      	b.n	800436e <HAL_SPI_Transmit+0x270>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004128:	f7fe f868 	bl	80021fc <HAL_GetTick>
 800412c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b01      	cmp	r3, #1
 800413c:	d002      	beq.n	8004144 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800413e:	2302      	movs	r3, #2
 8004140:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004142:	e10b      	b.n	800435c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_SPI_Transmit+0x52>
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d102      	bne.n	8004156 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004154:	e102      	b.n	800435c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2203      	movs	r2, #3
 800415a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	88fa      	ldrh	r2, [r7, #6]
 800416e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	88fa      	ldrh	r2, [r7, #6]
 8004174:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419c:	d10f      	bne.n	80041be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c8:	2b40      	cmp	r3, #64	; 0x40
 80041ca:	d007      	beq.n	80041dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e4:	d14b      	bne.n	800427e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d002      	beq.n	80041f4 <HAL_SPI_Transmit+0xf6>
 80041ee:	8afb      	ldrh	r3, [r7, #22]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d13e      	bne.n	8004272 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	881a      	ldrh	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004204:	1c9a      	adds	r2, r3, #2
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004218:	e02b      	b.n	8004272 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b02      	cmp	r3, #2
 8004226:	d112      	bne.n	800424e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	881a      	ldrh	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	1c9a      	adds	r2, r3, #2
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004242:	b29b      	uxth	r3, r3
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	86da      	strh	r2, [r3, #54]	; 0x36
 800424c:	e011      	b.n	8004272 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800424e:	f7fd ffd5 	bl	80021fc <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d803      	bhi.n	8004266 <HAL_SPI_Transmit+0x168>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004264:	d102      	bne.n	800426c <HAL_SPI_Transmit+0x16e>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d102      	bne.n	8004272 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004270:	e074      	b.n	800435c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004276:	b29b      	uxth	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1ce      	bne.n	800421a <HAL_SPI_Transmit+0x11c>
 800427c:	e04c      	b.n	8004318 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_SPI_Transmit+0x18e>
 8004286:	8afb      	ldrh	r3, [r7, #22]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d140      	bne.n	800430e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	330c      	adds	r3, #12
 8004296:	7812      	ldrb	r2, [r2, #0]
 8004298:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80042b2:	e02c      	b.n	800430e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d113      	bne.n	80042ea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	330c      	adds	r3, #12
 80042cc:	7812      	ldrb	r2, [r2, #0]
 80042ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80042e8:	e011      	b.n	800430e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042ea:	f7fd ff87 	bl	80021fc <HAL_GetTick>
 80042ee:	4602      	mov	r2, r0
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d803      	bhi.n	8004302 <HAL_SPI_Transmit+0x204>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d102      	bne.n	8004308 <HAL_SPI_Transmit+0x20a>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d102      	bne.n	800430e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800430c:	e026      	b.n	800435c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1cd      	bne.n	80042b4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	6839      	ldr	r1, [r7, #0]
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 fbcb 	bl	8004ab8 <SPI_EndRxTxTransaction>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2220      	movs	r2, #32
 800432c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10a      	bne.n	800434c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004336:	2300      	movs	r3, #0
 8004338:	613b      	str	r3, [r7, #16]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	77fb      	strb	r3, [r7, #31]
 8004358:	e000      	b.n	800435c <HAL_SPI_Transmit+0x25e>
  }

error:
 800435a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800436c:	7ffb      	ldrb	r3, [r7, #31]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3720      	adds	r7, #32
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b088      	sub	sp, #32
 800437a:	af02      	add	r7, sp, #8
 800437c:	60f8      	str	r0, [r7, #12]
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	603b      	str	r3, [r7, #0]
 8004382:	4613      	mov	r3, r2
 8004384:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004392:	d112      	bne.n	80043ba <HAL_SPI_Receive+0x44>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10e      	bne.n	80043ba <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2204      	movs	r2, #4
 80043a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80043a4:	88fa      	ldrh	r2, [r7, #6]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	4613      	mov	r3, r2
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	68b9      	ldr	r1, [r7, #8]
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 f8f1 	bl	8004598 <HAL_SPI_TransmitReceive>
 80043b6:	4603      	mov	r3, r0
 80043b8:	e0ea      	b.n	8004590 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_SPI_Receive+0x52>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e0e3      	b.n	8004590 <HAL_SPI_Receive+0x21a>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043d0:	f7fd ff14 	bl	80021fc <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d002      	beq.n	80043e8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80043e2:	2302      	movs	r3, #2
 80043e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043e6:	e0ca      	b.n	800457e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <HAL_SPI_Receive+0x7e>
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d102      	bne.n	80043fa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80043f8:	e0c1      	b.n	800457e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2204      	movs	r2, #4
 80043fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	88fa      	ldrh	r2, [r7, #6]
 8004412:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	88fa      	ldrh	r2, [r7, #6]
 8004418:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004440:	d10f      	bne.n	8004462 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004450:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004460:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446c:	2b40      	cmp	r3, #64	; 0x40
 800446e:	d007      	beq.n	8004480 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800447e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d162      	bne.n	800454e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004488:	e02e      	b.n	80044e8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b01      	cmp	r3, #1
 8004496:	d115      	bne.n	80044c4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f103 020c 	add.w	r2, r3, #12
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	7812      	ldrb	r2, [r2, #0]
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044c2:	e011      	b.n	80044e8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044c4:	f7fd fe9a 	bl	80021fc <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d803      	bhi.n	80044dc <HAL_SPI_Receive+0x166>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044da:	d102      	bne.n	80044e2 <HAL_SPI_Receive+0x16c>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d102      	bne.n	80044e8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80044e6:	e04a      	b.n	800457e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1cb      	bne.n	800448a <HAL_SPI_Receive+0x114>
 80044f2:	e031      	b.n	8004558 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d113      	bne.n	800452a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	b292      	uxth	r2, r2
 800450e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	1c9a      	adds	r2, r3, #2
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800451e:	b29b      	uxth	r3, r3
 8004520:	3b01      	subs	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004528:	e011      	b.n	800454e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800452a:	f7fd fe67 	bl	80021fc <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d803      	bhi.n	8004542 <HAL_SPI_Receive+0x1cc>
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004540:	d102      	bne.n	8004548 <HAL_SPI_Receive+0x1d2>
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d102      	bne.n	800454e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800454c:	e017      	b.n	800457e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004552:	b29b      	uxth	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1cd      	bne.n	80044f4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	6839      	ldr	r1, [r7, #0]
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 fa45 	bl	80049ec <SPI_EndRxTransaction>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	75fb      	strb	r3, [r7, #23]
 800457a:	e000      	b.n	800457e <HAL_SPI_Receive+0x208>
  }

error :
 800457c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800458e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08c      	sub	sp, #48	; 0x30
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045a6:	2301      	movs	r3, #1
 80045a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d101      	bne.n	80045be <HAL_SPI_TransmitReceive+0x26>
 80045ba:	2302      	movs	r3, #2
 80045bc:	e18a      	b.n	80048d4 <HAL_SPI_TransmitReceive+0x33c>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045c6:	f7fd fe19 	bl	80021fc <HAL_GetTick>
 80045ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80045dc:	887b      	ldrh	r3, [r7, #2]
 80045de:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d00f      	beq.n	8004608 <HAL_SPI_TransmitReceive+0x70>
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ee:	d107      	bne.n	8004600 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d103      	bne.n	8004600 <HAL_SPI_TransmitReceive+0x68>
 80045f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d003      	beq.n	8004608 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004600:	2302      	movs	r3, #2
 8004602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004606:	e15b      	b.n	80048c0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <HAL_SPI_TransmitReceive+0x82>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d002      	beq.n	800461a <HAL_SPI_TransmitReceive+0x82>
 8004614:	887b      	ldrh	r3, [r7, #2]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004620:	e14e      	b.n	80048c0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b04      	cmp	r3, #4
 800462c:	d003      	beq.n	8004636 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2205      	movs	r2, #5
 8004632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	887a      	ldrh	r2, [r7, #2]
 8004646:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	887a      	ldrh	r2, [r7, #2]
 8004658:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	887a      	ldrh	r2, [r7, #2]
 800465e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004676:	2b40      	cmp	r3, #64	; 0x40
 8004678:	d007      	beq.n	800468a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004688:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004692:	d178      	bne.n	8004786 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <HAL_SPI_TransmitReceive+0x10a>
 800469c:	8b7b      	ldrh	r3, [r7, #26]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d166      	bne.n	8004770 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	881a      	ldrh	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b2:	1c9a      	adds	r2, r3, #2
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046c6:	e053      	b.n	8004770 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d11b      	bne.n	800470e <HAL_SPI_TransmitReceive+0x176>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d016      	beq.n	800470e <HAL_SPI_TransmitReceive+0x176>
 80046e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d113      	bne.n	800470e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	881a      	ldrh	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	1c9a      	adds	r2, r3, #2
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b01      	cmp	r3, #1
 800471a:	d119      	bne.n	8004750 <HAL_SPI_TransmitReceive+0x1b8>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d014      	beq.n	8004750 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	b292      	uxth	r2, r2
 8004732:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	1c9a      	adds	r2, r3, #2
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800474c:	2301      	movs	r3, #1
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004750:	f7fd fd54 	bl	80021fc <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800475c:	429a      	cmp	r2, r3
 800475e:	d807      	bhi.n	8004770 <HAL_SPI_TransmitReceive+0x1d8>
 8004760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004766:	d003      	beq.n	8004770 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800476e:	e0a7      	b.n	80048c0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1a6      	bne.n	80046c8 <HAL_SPI_TransmitReceive+0x130>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1a1      	bne.n	80046c8 <HAL_SPI_TransmitReceive+0x130>
 8004784:	e07c      	b.n	8004880 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_SPI_TransmitReceive+0x1fc>
 800478e:	8b7b      	ldrh	r3, [r7, #26]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d16b      	bne.n	800486c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	330c      	adds	r3, #12
 800479e:	7812      	ldrb	r2, [r2, #0]
 80047a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047ba:	e057      	b.n	800486c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d11c      	bne.n	8004804 <HAL_SPI_TransmitReceive+0x26c>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d017      	beq.n	8004804 <HAL_SPI_TransmitReceive+0x26c>
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d114      	bne.n	8004804 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	330c      	adds	r3, #12
 80047e4:	7812      	ldrb	r2, [r2, #0]
 80047e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b01      	cmp	r3, #1
 8004810:	d119      	bne.n	8004846 <HAL_SPI_TransmitReceive+0x2ae>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d014      	beq.n	8004846 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004838:	b29b      	uxth	r3, r3
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004842:	2301      	movs	r3, #1
 8004844:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004846:	f7fd fcd9 	bl	80021fc <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004852:	429a      	cmp	r2, r3
 8004854:	d803      	bhi.n	800485e <HAL_SPI_TransmitReceive+0x2c6>
 8004856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485c:	d102      	bne.n	8004864 <HAL_SPI_TransmitReceive+0x2cc>
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	2b00      	cmp	r3, #0
 8004862:	d103      	bne.n	800486c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800486a:	e029      	b.n	80048c0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1a2      	bne.n	80047bc <HAL_SPI_TransmitReceive+0x224>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800487a:	b29b      	uxth	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	d19d      	bne.n	80047bc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004882:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 f917 	bl	8004ab8 <SPI_EndRxTxTransaction>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d006      	beq.n	800489e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2220      	movs	r2, #32
 800489a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800489c:	e010      	b.n	80048c0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10b      	bne.n	80048be <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	e000      	b.n	80048c0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80048be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3730      	adds	r7, #48	; 0x30
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	603b      	str	r3, [r7, #0]
 80048e8:	4613      	mov	r3, r2
 80048ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048ec:	f7fd fc86 	bl	80021fc <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	1a9b      	subs	r3, r3, r2
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	4413      	add	r3, r2
 80048fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048fc:	f7fd fc7e 	bl	80021fc <HAL_GetTick>
 8004900:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004902:	4b39      	ldr	r3, [pc, #228]	; (80049e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	015b      	lsls	r3, r3, #5
 8004908:	0d1b      	lsrs	r3, r3, #20
 800490a:	69fa      	ldr	r2, [r7, #28]
 800490c:	fb02 f303 	mul.w	r3, r2, r3
 8004910:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004912:	e054      	b.n	80049be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491a:	d050      	beq.n	80049be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800491c:	f7fd fc6e 	bl	80021fc <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	69fa      	ldr	r2, [r7, #28]
 8004928:	429a      	cmp	r2, r3
 800492a:	d902      	bls.n	8004932 <SPI_WaitFlagStateUntilTimeout+0x56>
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d13d      	bne.n	80049ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004940:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800494a:	d111      	bne.n	8004970 <SPI_WaitFlagStateUntilTimeout+0x94>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004954:	d004      	beq.n	8004960 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800495e:	d107      	bne.n	8004970 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800496e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004978:	d10f      	bne.n	800499a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004998:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e017      	b.n	80049de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	4013      	ands	r3, r2
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	bf0c      	ite	eq
 80049ce:	2301      	moveq	r3, #1
 80049d0:	2300      	movne	r3, #0
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	461a      	mov	r2, r3
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d19b      	bne.n	8004914 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3720      	adds	r7, #32
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20000008 	.word	0x20000008

080049ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af02      	add	r7, sp, #8
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a00:	d111      	bne.n	8004a26 <SPI_EndRxTransaction+0x3a>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a0a:	d004      	beq.n	8004a16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a14:	d107      	bne.n	8004a26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a24:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a2e:	d12a      	bne.n	8004a86 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a38:	d012      	beq.n	8004a60 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2200      	movs	r2, #0
 8004a42:	2180      	movs	r1, #128	; 0x80
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7ff ff49 	bl	80048dc <SPI_WaitFlagStateUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d02d      	beq.n	8004aac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a54:	f043 0220 	orr.w	r2, r3, #32
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e026      	b.n	8004aae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2200      	movs	r2, #0
 8004a68:	2101      	movs	r1, #1
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f7ff ff36 	bl	80048dc <SPI_WaitFlagStateUntilTimeout>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d01a      	beq.n	8004aac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7a:	f043 0220 	orr.w	r2, r3, #32
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e013      	b.n	8004aae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	2101      	movs	r1, #1
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f7ff ff23 	bl	80048dc <SPI_WaitFlagStateUntilTimeout>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d007      	beq.n	8004aac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa0:	f043 0220 	orr.w	r2, r3, #32
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e000      	b.n	8004aae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
	...

08004ab8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ac4:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <SPI_EndRxTxTransaction+0x7c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a1b      	ldr	r2, [pc, #108]	; (8004b38 <SPI_EndRxTxTransaction+0x80>)
 8004aca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ace:	0d5b      	lsrs	r3, r3, #21
 8004ad0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ad4:	fb02 f303 	mul.w	r3, r2, r3
 8004ad8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ae2:	d112      	bne.n	8004b0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2200      	movs	r2, #0
 8004aec:	2180      	movs	r1, #128	; 0x80
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f7ff fef4 	bl	80048dc <SPI_WaitFlagStateUntilTimeout>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d016      	beq.n	8004b28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afe:	f043 0220 	orr.w	r2, r3, #32
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e00f      	b.n	8004b2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b20:	2b80      	cmp	r3, #128	; 0x80
 8004b22:	d0f2      	beq.n	8004b0a <SPI_EndRxTxTransaction+0x52>
 8004b24:	e000      	b.n	8004b28 <SPI_EndRxTxTransaction+0x70>
        break;
 8004b26:	bf00      	nop
  }

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000008 	.word	0x20000008
 8004b38:	165e9f81 	.word	0x165e9f81

08004b3c <findslot>:
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <findslot+0x2c>)
 8004b3e:	b510      	push	{r4, lr}
 8004b40:	4604      	mov	r4, r0
 8004b42:	6818      	ldr	r0, [r3, #0]
 8004b44:	b118      	cbz	r0, 8004b4e <findslot+0x12>
 8004b46:	6a03      	ldr	r3, [r0, #32]
 8004b48:	b90b      	cbnz	r3, 8004b4e <findslot+0x12>
 8004b4a:	f000 ff8d 	bl	8005a68 <__sinit>
 8004b4e:	2c13      	cmp	r4, #19
 8004b50:	d807      	bhi.n	8004b62 <findslot+0x26>
 8004b52:	4806      	ldr	r0, [pc, #24]	; (8004b6c <findslot+0x30>)
 8004b54:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004b58:	3201      	adds	r2, #1
 8004b5a:	d002      	beq.n	8004b62 <findslot+0x26>
 8004b5c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004b60:	bd10      	pop	{r4, pc}
 8004b62:	2000      	movs	r0, #0
 8004b64:	e7fc      	b.n	8004b60 <findslot+0x24>
 8004b66:	bf00      	nop
 8004b68:	20000074 	.word	0x20000074
 8004b6c:	200002e8 	.word	0x200002e8

08004b70 <error>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	4604      	mov	r4, r0
 8004b74:	f001 f966 	bl	8005e44 <__errno>
 8004b78:	2613      	movs	r6, #19
 8004b7a:	4605      	mov	r5, r0
 8004b7c:	2700      	movs	r7, #0
 8004b7e:	4630      	mov	r0, r6
 8004b80:	4639      	mov	r1, r7
 8004b82:	beab      	bkpt	0x00ab
 8004b84:	4606      	mov	r6, r0
 8004b86:	602e      	str	r6, [r5, #0]
 8004b88:	4620      	mov	r0, r4
 8004b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b8c <checkerror>:
 8004b8c:	1c43      	adds	r3, r0, #1
 8004b8e:	d101      	bne.n	8004b94 <checkerror+0x8>
 8004b90:	f7ff bfee 	b.w	8004b70 <error>
 8004b94:	4770      	bx	lr

08004b96 <_swiread>:
 8004b96:	b530      	push	{r4, r5, lr}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004b9e:	9203      	str	r2, [sp, #12]
 8004ba0:	2406      	movs	r4, #6
 8004ba2:	ad01      	add	r5, sp, #4
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	beab      	bkpt	0x00ab
 8004baa:	4604      	mov	r4, r0
 8004bac:	4620      	mov	r0, r4
 8004bae:	f7ff ffed 	bl	8004b8c <checkerror>
 8004bb2:	b005      	add	sp, #20
 8004bb4:	bd30      	pop	{r4, r5, pc}

08004bb6 <_read>:
 8004bb6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004bb8:	4615      	mov	r5, r2
 8004bba:	9101      	str	r1, [sp, #4]
 8004bbc:	f7ff ffbe 	bl	8004b3c <findslot>
 8004bc0:	9901      	ldr	r1, [sp, #4]
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	b938      	cbnz	r0, 8004bd6 <_read+0x20>
 8004bc6:	f001 f93d 	bl	8005e44 <__errno>
 8004bca:	2309      	movs	r3, #9
 8004bcc:	6003      	str	r3, [r0, #0]
 8004bce:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd2:	b003      	add	sp, #12
 8004bd4:	bd30      	pop	{r4, r5, pc}
 8004bd6:	6800      	ldr	r0, [r0, #0]
 8004bd8:	462a      	mov	r2, r5
 8004bda:	f7ff ffdc 	bl	8004b96 <_swiread>
 8004bde:	1c43      	adds	r3, r0, #1
 8004be0:	d0f7      	beq.n	8004bd2 <_read+0x1c>
 8004be2:	6863      	ldr	r3, [r4, #4]
 8004be4:	1a2a      	subs	r2, r5, r0
 8004be6:	4413      	add	r3, r2
 8004be8:	6063      	str	r3, [r4, #4]
 8004bea:	4610      	mov	r0, r2
 8004bec:	e7f1      	b.n	8004bd2 <_read+0x1c>

08004bee <_swilseek>:
 8004bee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bf0:	460c      	mov	r4, r1
 8004bf2:	4616      	mov	r6, r2
 8004bf4:	f7ff ffa2 	bl	8004b3c <findslot>
 8004bf8:	4605      	mov	r5, r0
 8004bfa:	b940      	cbnz	r0, 8004c0e <_swilseek+0x20>
 8004bfc:	f001 f922 	bl	8005e44 <__errno>
 8004c00:	2309      	movs	r3, #9
 8004c02:	6003      	str	r3, [r0, #0]
 8004c04:	f04f 34ff 	mov.w	r4, #4294967295
 8004c08:	4620      	mov	r0, r4
 8004c0a:	b003      	add	sp, #12
 8004c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c0e:	2e02      	cmp	r6, #2
 8004c10:	d903      	bls.n	8004c1a <_swilseek+0x2c>
 8004c12:	f001 f917 	bl	8005e44 <__errno>
 8004c16:	2316      	movs	r3, #22
 8004c18:	e7f3      	b.n	8004c02 <_swilseek+0x14>
 8004c1a:	2e01      	cmp	r6, #1
 8004c1c:	d112      	bne.n	8004c44 <_swilseek+0x56>
 8004c1e:	6843      	ldr	r3, [r0, #4]
 8004c20:	18e4      	adds	r4, r4, r3
 8004c22:	d4f6      	bmi.n	8004c12 <_swilseek+0x24>
 8004c24:	682b      	ldr	r3, [r5, #0]
 8004c26:	260a      	movs	r6, #10
 8004c28:	e9cd 3400 	strd	r3, r4, [sp]
 8004c2c:	466f      	mov	r7, sp
 8004c2e:	4630      	mov	r0, r6
 8004c30:	4639      	mov	r1, r7
 8004c32:	beab      	bkpt	0x00ab
 8004c34:	4606      	mov	r6, r0
 8004c36:	4630      	mov	r0, r6
 8004c38:	f7ff ffa8 	bl	8004b8c <checkerror>
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	dbe1      	blt.n	8004c04 <_swilseek+0x16>
 8004c40:	606c      	str	r4, [r5, #4]
 8004c42:	e7e1      	b.n	8004c08 <_swilseek+0x1a>
 8004c44:	2e02      	cmp	r6, #2
 8004c46:	6803      	ldr	r3, [r0, #0]
 8004c48:	d1ec      	bne.n	8004c24 <_swilseek+0x36>
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	260c      	movs	r6, #12
 8004c4e:	466f      	mov	r7, sp
 8004c50:	4630      	mov	r0, r6
 8004c52:	4639      	mov	r1, r7
 8004c54:	beab      	bkpt	0x00ab
 8004c56:	4606      	mov	r6, r0
 8004c58:	4630      	mov	r0, r6
 8004c5a:	f7ff ff97 	bl	8004b8c <checkerror>
 8004c5e:	1c43      	adds	r3, r0, #1
 8004c60:	d0d0      	beq.n	8004c04 <_swilseek+0x16>
 8004c62:	4404      	add	r4, r0
 8004c64:	e7de      	b.n	8004c24 <_swilseek+0x36>

08004c66 <_lseek>:
 8004c66:	f7ff bfc2 	b.w	8004bee <_swilseek>

08004c6a <_swiwrite>:
 8004c6a:	b530      	push	{r4, r5, lr}
 8004c6c:	b085      	sub	sp, #20
 8004c6e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004c72:	9203      	str	r2, [sp, #12]
 8004c74:	2405      	movs	r4, #5
 8004c76:	ad01      	add	r5, sp, #4
 8004c78:	4620      	mov	r0, r4
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	beab      	bkpt	0x00ab
 8004c7e:	4604      	mov	r4, r0
 8004c80:	4620      	mov	r0, r4
 8004c82:	f7ff ff83 	bl	8004b8c <checkerror>
 8004c86:	b005      	add	sp, #20
 8004c88:	bd30      	pop	{r4, r5, pc}

08004c8a <_write>:
 8004c8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c8c:	4615      	mov	r5, r2
 8004c8e:	9101      	str	r1, [sp, #4]
 8004c90:	f7ff ff54 	bl	8004b3c <findslot>
 8004c94:	9901      	ldr	r1, [sp, #4]
 8004c96:	4604      	mov	r4, r0
 8004c98:	b930      	cbnz	r0, 8004ca8 <_write+0x1e>
 8004c9a:	f001 f8d3 	bl	8005e44 <__errno>
 8004c9e:	2309      	movs	r3, #9
 8004ca0:	6003      	str	r3, [r0, #0]
 8004ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca6:	e012      	b.n	8004cce <_write+0x44>
 8004ca8:	6800      	ldr	r0, [r0, #0]
 8004caa:	462a      	mov	r2, r5
 8004cac:	f7ff ffdd 	bl	8004c6a <_swiwrite>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	dbf6      	blt.n	8004ca2 <_write+0x18>
 8004cb4:	6862      	ldr	r2, [r4, #4]
 8004cb6:	1a2b      	subs	r3, r5, r0
 8004cb8:	441a      	add	r2, r3
 8004cba:	42a8      	cmp	r0, r5
 8004cbc:	6062      	str	r2, [r4, #4]
 8004cbe:	d105      	bne.n	8004ccc <_write+0x42>
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	b003      	add	sp, #12
 8004cc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004cc8:	f7ff bf52 	b.w	8004b70 <error>
 8004ccc:	4618      	mov	r0, r3
 8004cce:	b003      	add	sp, #12
 8004cd0:	bd30      	pop	{r4, r5, pc}

08004cd2 <_swiclose>:
 8004cd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cd4:	2402      	movs	r4, #2
 8004cd6:	9001      	str	r0, [sp, #4]
 8004cd8:	ad01      	add	r5, sp, #4
 8004cda:	4620      	mov	r0, r4
 8004cdc:	4629      	mov	r1, r5
 8004cde:	beab      	bkpt	0x00ab
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f7ff ff52 	bl	8004b8c <checkerror>
 8004ce8:	b003      	add	sp, #12
 8004cea:	bd30      	pop	{r4, r5, pc}

08004cec <_close>:
 8004cec:	b538      	push	{r3, r4, r5, lr}
 8004cee:	4605      	mov	r5, r0
 8004cf0:	f7ff ff24 	bl	8004b3c <findslot>
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	b930      	cbnz	r0, 8004d06 <_close+0x1a>
 8004cf8:	f001 f8a4 	bl	8005e44 <__errno>
 8004cfc:	2309      	movs	r3, #9
 8004cfe:	6003      	str	r3, [r0, #0]
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295
 8004d04:	bd38      	pop	{r3, r4, r5, pc}
 8004d06:	3d01      	subs	r5, #1
 8004d08:	2d01      	cmp	r5, #1
 8004d0a:	d809      	bhi.n	8004d20 <_close+0x34>
 8004d0c:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <_close+0x48>)
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d104      	bne.n	8004d20 <_close+0x34>
 8004d16:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1a:	6003      	str	r3, [r0, #0]
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	e7f1      	b.n	8004d04 <_close+0x18>
 8004d20:	6820      	ldr	r0, [r4, #0]
 8004d22:	f7ff ffd6 	bl	8004cd2 <_swiclose>
 8004d26:	2800      	cmp	r0, #0
 8004d28:	d1ec      	bne.n	8004d04 <_close+0x18>
 8004d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d2e:	6023      	str	r3, [r4, #0]
 8004d30:	e7e8      	b.n	8004d04 <_close+0x18>
 8004d32:	bf00      	nop
 8004d34:	200002e8 	.word	0x200002e8

08004d38 <_getpid>:
 8004d38:	2001      	movs	r0, #1
 8004d3a:	4770      	bx	lr

08004d3c <_swistat>:
 8004d3c:	b570      	push	{r4, r5, r6, lr}
 8004d3e:	460c      	mov	r4, r1
 8004d40:	f7ff fefc 	bl	8004b3c <findslot>
 8004d44:	4605      	mov	r5, r0
 8004d46:	b930      	cbnz	r0, 8004d56 <_swistat+0x1a>
 8004d48:	f001 f87c 	bl	8005e44 <__errno>
 8004d4c:	2309      	movs	r3, #9
 8004d4e:	6003      	str	r3, [r0, #0]
 8004d50:	f04f 30ff 	mov.w	r0, #4294967295
 8004d54:	bd70      	pop	{r4, r5, r6, pc}
 8004d56:	6863      	ldr	r3, [r4, #4]
 8004d58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d5c:	6063      	str	r3, [r4, #4]
 8004d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d62:	64a3      	str	r3, [r4, #72]	; 0x48
 8004d64:	260c      	movs	r6, #12
 8004d66:	4630      	mov	r0, r6
 8004d68:	4629      	mov	r1, r5
 8004d6a:	beab      	bkpt	0x00ab
 8004d6c:	4605      	mov	r5, r0
 8004d6e:	4628      	mov	r0, r5
 8004d70:	f7ff ff0c 	bl	8004b8c <checkerror>
 8004d74:	1c43      	adds	r3, r0, #1
 8004d76:	bf1c      	itt	ne
 8004d78:	6120      	strne	r0, [r4, #16]
 8004d7a:	2000      	movne	r0, #0
 8004d7c:	e7ea      	b.n	8004d54 <_swistat+0x18>

08004d7e <_fstat>:
 8004d7e:	460b      	mov	r3, r1
 8004d80:	b510      	push	{r4, lr}
 8004d82:	2100      	movs	r1, #0
 8004d84:	4604      	mov	r4, r0
 8004d86:	2258      	movs	r2, #88	; 0x58
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f001 f809 	bl	8005da0 <memset>
 8004d8e:	4601      	mov	r1, r0
 8004d90:	4620      	mov	r0, r4
 8004d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d96:	f7ff bfd1 	b.w	8004d3c <_swistat>

08004d9a <_stat>:
 8004d9a:	b538      	push	{r3, r4, r5, lr}
 8004d9c:	460d      	mov	r5, r1
 8004d9e:	4604      	mov	r4, r0
 8004da0:	2258      	movs	r2, #88	; 0x58
 8004da2:	2100      	movs	r1, #0
 8004da4:	4628      	mov	r0, r5
 8004da6:	f000 fffb 	bl	8005da0 <memset>
 8004daa:	4620      	mov	r0, r4
 8004dac:	2100      	movs	r1, #0
 8004dae:	f000 f811 	bl	8004dd4 <_swiopen>
 8004db2:	1c43      	adds	r3, r0, #1
 8004db4:	4604      	mov	r4, r0
 8004db6:	d00b      	beq.n	8004dd0 <_stat+0x36>
 8004db8:	686b      	ldr	r3, [r5, #4]
 8004dba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004dbe:	606b      	str	r3, [r5, #4]
 8004dc0:	4629      	mov	r1, r5
 8004dc2:	f7ff ffbb 	bl	8004d3c <_swistat>
 8004dc6:	4605      	mov	r5, r0
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f7ff ff8f 	bl	8004cec <_close>
 8004dce:	462c      	mov	r4, r5
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	bd38      	pop	{r3, r4, r5, pc}

08004dd4 <_swiopen>:
 8004dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004dd8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004e84 <_swiopen+0xb0>
 8004ddc:	b097      	sub	sp, #92	; 0x5c
 8004dde:	4607      	mov	r7, r0
 8004de0:	460e      	mov	r6, r1
 8004de2:	2500      	movs	r5, #0
 8004de4:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8004de8:	1c61      	adds	r1, r4, #1
 8004dea:	d037      	beq.n	8004e5c <_swiopen+0x88>
 8004dec:	3501      	adds	r5, #1
 8004dee:	2d14      	cmp	r5, #20
 8004df0:	d1f8      	bne.n	8004de4 <_swiopen+0x10>
 8004df2:	f001 f827 	bl	8005e44 <__errno>
 8004df6:	2318      	movs	r3, #24
 8004df8:	6003      	str	r3, [r0, #0]
 8004dfa:	f04f 34ff 	mov.w	r4, #4294967295
 8004dfe:	e03d      	b.n	8004e7c <_swiopen+0xa8>
 8004e00:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8004e04:	f240 6301 	movw	r3, #1537	; 0x601
 8004e08:	07b2      	lsls	r2, r6, #30
 8004e0a:	bf48      	it	mi
 8004e0c:	f044 0402 	orrmi.w	r4, r4, #2
 8004e10:	421e      	tst	r6, r3
 8004e12:	bf18      	it	ne
 8004e14:	f044 0404 	orrne.w	r4, r4, #4
 8004e18:	0733      	lsls	r3, r6, #28
 8004e1a:	bf48      	it	mi
 8004e1c:	f024 0404 	bicmi.w	r4, r4, #4
 8004e20:	4638      	mov	r0, r7
 8004e22:	bf48      	it	mi
 8004e24:	f044 0408 	orrmi.w	r4, r4, #8
 8004e28:	9700      	str	r7, [sp, #0]
 8004e2a:	f7fb fa29 	bl	8000280 <strlen>
 8004e2e:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8004e32:	2401      	movs	r4, #1
 8004e34:	4620      	mov	r0, r4
 8004e36:	4649      	mov	r1, r9
 8004e38:	beab      	bkpt	0x00ab
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	2c00      	cmp	r4, #0
 8004e3e:	db08      	blt.n	8004e52 <_swiopen+0x7e>
 8004e40:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8004e44:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f8c8 3004 	str.w	r3, [r8, #4]
 8004e4e:	462c      	mov	r4, r5
 8004e50:	e014      	b.n	8004e7c <_swiopen+0xa8>
 8004e52:	4620      	mov	r0, r4
 8004e54:	f7ff fe8c 	bl	8004b70 <error>
 8004e58:	4604      	mov	r4, r0
 8004e5a:	e00f      	b.n	8004e7c <_swiopen+0xa8>
 8004e5c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8004e60:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004e64:	46e9      	mov	r9, sp
 8004e66:	d1cb      	bne.n	8004e00 <_swiopen+0x2c>
 8004e68:	4649      	mov	r1, r9
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	f7ff ff95 	bl	8004d9a <_stat>
 8004e70:	3001      	adds	r0, #1
 8004e72:	d0c5      	beq.n	8004e00 <_swiopen+0x2c>
 8004e74:	f000 ffe6 	bl	8005e44 <__errno>
 8004e78:	2311      	movs	r3, #17
 8004e7a:	6003      	str	r3, [r0, #0]
 8004e7c:	4620      	mov	r0, r4
 8004e7e:	b017      	add	sp, #92	; 0x5c
 8004e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e84:	200002e8 	.word	0x200002e8

08004e88 <_get_semihosting_exts>:
 8004e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004e8c:	4606      	mov	r6, r0
 8004e8e:	460f      	mov	r7, r1
 8004e90:	482a      	ldr	r0, [pc, #168]	; (8004f3c <_get_semihosting_exts+0xb4>)
 8004e92:	2100      	movs	r1, #0
 8004e94:	4615      	mov	r5, r2
 8004e96:	f7ff ff9d 	bl	8004dd4 <_swiopen>
 8004e9a:	462a      	mov	r2, r5
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	f000 ff7d 	bl	8005da0 <memset>
 8004ea6:	1c63      	adds	r3, r4, #1
 8004ea8:	d016      	beq.n	8004ed8 <_get_semihosting_exts+0x50>
 8004eaa:	4620      	mov	r0, r4
 8004eac:	f7ff fe46 	bl	8004b3c <findslot>
 8004eb0:	f04f 080c 	mov.w	r8, #12
 8004eb4:	4681      	mov	r9, r0
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	4649      	mov	r1, r9
 8004eba:	beab      	bkpt	0x00ab
 8004ebc:	4680      	mov	r8, r0
 8004ebe:	4640      	mov	r0, r8
 8004ec0:	f7ff fe64 	bl	8004b8c <checkerror>
 8004ec4:	2803      	cmp	r0, #3
 8004ec6:	dd02      	ble.n	8004ece <_get_semihosting_exts+0x46>
 8004ec8:	1ec3      	subs	r3, r0, #3
 8004eca:	42ab      	cmp	r3, r5
 8004ecc:	dc08      	bgt.n	8004ee0 <_get_semihosting_exts+0x58>
 8004ece:	4620      	mov	r0, r4
 8004ed0:	f7ff ff0c 	bl	8004cec <_close>
 8004ed4:	f04f 34ff 	mov.w	r4, #4294967295
 8004ed8:	4620      	mov	r0, r4
 8004eda:	b003      	add	sp, #12
 8004edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ee0:	2204      	movs	r2, #4
 8004ee2:	eb0d 0102 	add.w	r1, sp, r2
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	f7ff fe65 	bl	8004bb6 <_read>
 8004eec:	2803      	cmp	r0, #3
 8004eee:	ddee      	ble.n	8004ece <_get_semihosting_exts+0x46>
 8004ef0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004ef4:	2b53      	cmp	r3, #83	; 0x53
 8004ef6:	d1ea      	bne.n	8004ece <_get_semihosting_exts+0x46>
 8004ef8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004efc:	2b48      	cmp	r3, #72	; 0x48
 8004efe:	d1e6      	bne.n	8004ece <_get_semihosting_exts+0x46>
 8004f00:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004f04:	2b46      	cmp	r3, #70	; 0x46
 8004f06:	d1e2      	bne.n	8004ece <_get_semihosting_exts+0x46>
 8004f08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004f0c:	2b42      	cmp	r3, #66	; 0x42
 8004f0e:	d1de      	bne.n	8004ece <_get_semihosting_exts+0x46>
 8004f10:	2201      	movs	r2, #1
 8004f12:	4639      	mov	r1, r7
 8004f14:	4620      	mov	r0, r4
 8004f16:	f7ff fe6a 	bl	8004bee <_swilseek>
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	dbd7      	blt.n	8004ece <_get_semihosting_exts+0x46>
 8004f1e:	462a      	mov	r2, r5
 8004f20:	4631      	mov	r1, r6
 8004f22:	4620      	mov	r0, r4
 8004f24:	f7ff fe47 	bl	8004bb6 <_read>
 8004f28:	4605      	mov	r5, r0
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f7ff fede 	bl	8004cec <_close>
 8004f30:	4628      	mov	r0, r5
 8004f32:	f7ff fe2b 	bl	8004b8c <checkerror>
 8004f36:	4604      	mov	r4, r0
 8004f38:	e7ce      	b.n	8004ed8 <_get_semihosting_exts+0x50>
 8004f3a:	bf00      	nop
 8004f3c:	08007f24 	.word	0x08007f24

08004f40 <initialise_semihosting_exts>:
 8004f40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f42:	4d0a      	ldr	r5, [pc, #40]	; (8004f6c <initialise_semihosting_exts+0x2c>)
 8004f44:	4c0a      	ldr	r4, [pc, #40]	; (8004f70 <initialise_semihosting_exts+0x30>)
 8004f46:	2100      	movs	r1, #0
 8004f48:	2201      	movs	r2, #1
 8004f4a:	a801      	add	r0, sp, #4
 8004f4c:	6029      	str	r1, [r5, #0]
 8004f4e:	6022      	str	r2, [r4, #0]
 8004f50:	f7ff ff9a 	bl	8004e88 <_get_semihosting_exts>
 8004f54:	2800      	cmp	r0, #0
 8004f56:	dd07      	ble.n	8004f68 <initialise_semihosting_exts+0x28>
 8004f58:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004f5c:	f003 0201 	and.w	r2, r3, #1
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	602a      	str	r2, [r5, #0]
 8004f66:	6023      	str	r3, [r4, #0]
 8004f68:	b003      	add	sp, #12
 8004f6a:	bd30      	pop	{r4, r5, pc}
 8004f6c:	20000014 	.word	0x20000014
 8004f70:	20000018 	.word	0x20000018

08004f74 <_has_ext_stdout_stderr>:
 8004f74:	b510      	push	{r4, lr}
 8004f76:	4c04      	ldr	r4, [pc, #16]	; (8004f88 <_has_ext_stdout_stderr+0x14>)
 8004f78:	6823      	ldr	r3, [r4, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	da01      	bge.n	8004f82 <_has_ext_stdout_stderr+0xe>
 8004f7e:	f7ff ffdf 	bl	8004f40 <initialise_semihosting_exts>
 8004f82:	6820      	ldr	r0, [r4, #0]
 8004f84:	bd10      	pop	{r4, pc}
 8004f86:	bf00      	nop
 8004f88:	20000018 	.word	0x20000018

08004f8c <initialise_monitor_handles>:
 8004f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f90:	b085      	sub	sp, #20
 8004f92:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8005044 <initialise_monitor_handles+0xb8>
 8004f96:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	2400      	movs	r4, #0
 8004f9e:	9303      	str	r3, [sp, #12]
 8004fa0:	af01      	add	r7, sp, #4
 8004fa2:	9402      	str	r4, [sp, #8]
 8004fa4:	2501      	movs	r5, #1
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	4639      	mov	r1, r7
 8004faa:	beab      	bkpt	0x00ab
 8004fac:	4605      	mov	r5, r0
 8004fae:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8005048 <initialise_monitor_handles+0xbc>
 8004fb2:	4623      	mov	r3, r4
 8004fb4:	4c20      	ldr	r4, [pc, #128]	; (8005038 <initialise_monitor_handles+0xac>)
 8004fb6:	f8c8 5000 	str.w	r5, [r8]
 8004fba:	f04f 32ff 	mov.w	r2, #4294967295
 8004fbe:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	2b14      	cmp	r3, #20
 8004fc6:	d1fa      	bne.n	8004fbe <initialise_monitor_handles+0x32>
 8004fc8:	f7ff ffd4 	bl	8004f74 <_has_ext_stdout_stderr>
 8004fcc:	4d1b      	ldr	r5, [pc, #108]	; (800503c <initialise_monitor_handles+0xb0>)
 8004fce:	b1d0      	cbz	r0, 8005006 <initialise_monitor_handles+0x7a>
 8004fd0:	f04f 0a03 	mov.w	sl, #3
 8004fd4:	2304      	movs	r3, #4
 8004fd6:	f8cd 9004 	str.w	r9, [sp, #4]
 8004fda:	2601      	movs	r6, #1
 8004fdc:	f8cd a00c 	str.w	sl, [sp, #12]
 8004fe0:	9302      	str	r3, [sp, #8]
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	4639      	mov	r1, r7
 8004fe6:	beab      	bkpt	0x00ab
 8004fe8:	4683      	mov	fp, r0
 8004fea:	4b15      	ldr	r3, [pc, #84]	; (8005040 <initialise_monitor_handles+0xb4>)
 8004fec:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ff0:	f8c3 b000 	str.w	fp, [r3]
 8004ff4:	2308      	movs	r3, #8
 8004ff6:	f8cd a00c 	str.w	sl, [sp, #12]
 8004ffa:	9302      	str	r3, [sp, #8]
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	4639      	mov	r1, r7
 8005000:	beab      	bkpt	0x00ab
 8005002:	4606      	mov	r6, r0
 8005004:	602e      	str	r6, [r5, #0]
 8005006:	682b      	ldr	r3, [r5, #0]
 8005008:	3301      	adds	r3, #1
 800500a:	bf02      	ittt	eq
 800500c:	4b0c      	ldreq	r3, [pc, #48]	; (8005040 <initialise_monitor_handles+0xb4>)
 800500e:	681b      	ldreq	r3, [r3, #0]
 8005010:	602b      	streq	r3, [r5, #0]
 8005012:	2600      	movs	r6, #0
 8005014:	f8d8 3000 	ldr.w	r3, [r8]
 8005018:	6023      	str	r3, [r4, #0]
 800501a:	6066      	str	r6, [r4, #4]
 800501c:	f7ff ffaa 	bl	8004f74 <_has_ext_stdout_stderr>
 8005020:	b130      	cbz	r0, 8005030 <initialise_monitor_handles+0xa4>
 8005022:	4b07      	ldr	r3, [pc, #28]	; (8005040 <initialise_monitor_handles+0xb4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800502a:	682b      	ldr	r3, [r5, #0]
 800502c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8005030:	b005      	add	sp, #20
 8005032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005036:	bf00      	nop
 8005038:	200002e8 	.word	0x200002e8
 800503c:	200002dc 	.word	0x200002dc
 8005040:	200002e4 	.word	0x200002e4
 8005044:	08007f3a 	.word	0x08007f3a
 8005048:	200002e0 	.word	0x200002e0

0800504c <_isatty>:
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	f7ff fd75 	bl	8004b3c <findslot>
 8005052:	2509      	movs	r5, #9
 8005054:	4604      	mov	r4, r0
 8005056:	b920      	cbnz	r0, 8005062 <_isatty+0x16>
 8005058:	f000 fef4 	bl	8005e44 <__errno>
 800505c:	6005      	str	r5, [r0, #0]
 800505e:	4620      	mov	r0, r4
 8005060:	bd70      	pop	{r4, r5, r6, pc}
 8005062:	4628      	mov	r0, r5
 8005064:	4621      	mov	r1, r4
 8005066:	beab      	bkpt	0x00ab
 8005068:	4604      	mov	r4, r0
 800506a:	2c01      	cmp	r4, #1
 800506c:	d0f7      	beq.n	800505e <_isatty+0x12>
 800506e:	f000 fee9 	bl	8005e44 <__errno>
 8005072:	2400      	movs	r4, #0
 8005074:	4605      	mov	r5, r0
 8005076:	2613      	movs	r6, #19
 8005078:	4630      	mov	r0, r6
 800507a:	4621      	mov	r1, r4
 800507c:	beab      	bkpt	0x00ab
 800507e:	4606      	mov	r6, r0
 8005080:	602e      	str	r6, [r5, #0]
 8005082:	e7ec      	b.n	800505e <_isatty+0x12>

08005084 <__cvt>:
 8005084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005088:	ec55 4b10 	vmov	r4, r5, d0
 800508c:	2d00      	cmp	r5, #0
 800508e:	460e      	mov	r6, r1
 8005090:	4619      	mov	r1, r3
 8005092:	462b      	mov	r3, r5
 8005094:	bfbb      	ittet	lt
 8005096:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800509a:	461d      	movlt	r5, r3
 800509c:	2300      	movge	r3, #0
 800509e:	232d      	movlt	r3, #45	; 0x2d
 80050a0:	700b      	strb	r3, [r1, #0]
 80050a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80050a8:	4691      	mov	r9, r2
 80050aa:	f023 0820 	bic.w	r8, r3, #32
 80050ae:	bfbc      	itt	lt
 80050b0:	4622      	movlt	r2, r4
 80050b2:	4614      	movlt	r4, r2
 80050b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050b8:	d005      	beq.n	80050c6 <__cvt+0x42>
 80050ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80050be:	d100      	bne.n	80050c2 <__cvt+0x3e>
 80050c0:	3601      	adds	r6, #1
 80050c2:	2102      	movs	r1, #2
 80050c4:	e000      	b.n	80050c8 <__cvt+0x44>
 80050c6:	2103      	movs	r1, #3
 80050c8:	ab03      	add	r3, sp, #12
 80050ca:	9301      	str	r3, [sp, #4]
 80050cc:	ab02      	add	r3, sp, #8
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	ec45 4b10 	vmov	d0, r4, r5
 80050d4:	4653      	mov	r3, sl
 80050d6:	4632      	mov	r2, r6
 80050d8:	f000 ff6a 	bl	8005fb0 <_dtoa_r>
 80050dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80050e0:	4607      	mov	r7, r0
 80050e2:	d102      	bne.n	80050ea <__cvt+0x66>
 80050e4:	f019 0f01 	tst.w	r9, #1
 80050e8:	d022      	beq.n	8005130 <__cvt+0xac>
 80050ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80050ee:	eb07 0906 	add.w	r9, r7, r6
 80050f2:	d110      	bne.n	8005116 <__cvt+0x92>
 80050f4:	783b      	ldrb	r3, [r7, #0]
 80050f6:	2b30      	cmp	r3, #48	; 0x30
 80050f8:	d10a      	bne.n	8005110 <__cvt+0x8c>
 80050fa:	2200      	movs	r2, #0
 80050fc:	2300      	movs	r3, #0
 80050fe:	4620      	mov	r0, r4
 8005100:	4629      	mov	r1, r5
 8005102:	f7fb fce9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005106:	b918      	cbnz	r0, 8005110 <__cvt+0x8c>
 8005108:	f1c6 0601 	rsb	r6, r6, #1
 800510c:	f8ca 6000 	str.w	r6, [sl]
 8005110:	f8da 3000 	ldr.w	r3, [sl]
 8005114:	4499      	add	r9, r3
 8005116:	2200      	movs	r2, #0
 8005118:	2300      	movs	r3, #0
 800511a:	4620      	mov	r0, r4
 800511c:	4629      	mov	r1, r5
 800511e:	f7fb fcdb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005122:	b108      	cbz	r0, 8005128 <__cvt+0xa4>
 8005124:	f8cd 900c 	str.w	r9, [sp, #12]
 8005128:	2230      	movs	r2, #48	; 0x30
 800512a:	9b03      	ldr	r3, [sp, #12]
 800512c:	454b      	cmp	r3, r9
 800512e:	d307      	bcc.n	8005140 <__cvt+0xbc>
 8005130:	9b03      	ldr	r3, [sp, #12]
 8005132:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005134:	1bdb      	subs	r3, r3, r7
 8005136:	4638      	mov	r0, r7
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	b004      	add	sp, #16
 800513c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005140:	1c59      	adds	r1, r3, #1
 8005142:	9103      	str	r1, [sp, #12]
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	e7f0      	b.n	800512a <__cvt+0xa6>

08005148 <__exponent>:
 8005148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800514a:	4603      	mov	r3, r0
 800514c:	2900      	cmp	r1, #0
 800514e:	bfb8      	it	lt
 8005150:	4249      	neglt	r1, r1
 8005152:	f803 2b02 	strb.w	r2, [r3], #2
 8005156:	bfb4      	ite	lt
 8005158:	222d      	movlt	r2, #45	; 0x2d
 800515a:	222b      	movge	r2, #43	; 0x2b
 800515c:	2909      	cmp	r1, #9
 800515e:	7042      	strb	r2, [r0, #1]
 8005160:	dd2a      	ble.n	80051b8 <__exponent+0x70>
 8005162:	f10d 0207 	add.w	r2, sp, #7
 8005166:	4617      	mov	r7, r2
 8005168:	260a      	movs	r6, #10
 800516a:	4694      	mov	ip, r2
 800516c:	fb91 f5f6 	sdiv	r5, r1, r6
 8005170:	fb06 1415 	mls	r4, r6, r5, r1
 8005174:	3430      	adds	r4, #48	; 0x30
 8005176:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800517a:	460c      	mov	r4, r1
 800517c:	2c63      	cmp	r4, #99	; 0x63
 800517e:	f102 32ff 	add.w	r2, r2, #4294967295
 8005182:	4629      	mov	r1, r5
 8005184:	dcf1      	bgt.n	800516a <__exponent+0x22>
 8005186:	3130      	adds	r1, #48	; 0x30
 8005188:	f1ac 0402 	sub.w	r4, ip, #2
 800518c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005190:	1c41      	adds	r1, r0, #1
 8005192:	4622      	mov	r2, r4
 8005194:	42ba      	cmp	r2, r7
 8005196:	d30a      	bcc.n	80051ae <__exponent+0x66>
 8005198:	f10d 0209 	add.w	r2, sp, #9
 800519c:	eba2 020c 	sub.w	r2, r2, ip
 80051a0:	42bc      	cmp	r4, r7
 80051a2:	bf88      	it	hi
 80051a4:	2200      	movhi	r2, #0
 80051a6:	4413      	add	r3, r2
 80051a8:	1a18      	subs	r0, r3, r0
 80051aa:	b003      	add	sp, #12
 80051ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051ae:	f812 5b01 	ldrb.w	r5, [r2], #1
 80051b2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80051b6:	e7ed      	b.n	8005194 <__exponent+0x4c>
 80051b8:	2330      	movs	r3, #48	; 0x30
 80051ba:	3130      	adds	r1, #48	; 0x30
 80051bc:	7083      	strb	r3, [r0, #2]
 80051be:	70c1      	strb	r1, [r0, #3]
 80051c0:	1d03      	adds	r3, r0, #4
 80051c2:	e7f1      	b.n	80051a8 <__exponent+0x60>

080051c4 <_printf_float>:
 80051c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c8:	ed2d 8b02 	vpush	{d8}
 80051cc:	b08d      	sub	sp, #52	; 0x34
 80051ce:	460c      	mov	r4, r1
 80051d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80051d4:	4616      	mov	r6, r2
 80051d6:	461f      	mov	r7, r3
 80051d8:	4605      	mov	r5, r0
 80051da:	f000 fde9 	bl	8005db0 <_localeconv_r>
 80051de:	f8d0 a000 	ldr.w	sl, [r0]
 80051e2:	4650      	mov	r0, sl
 80051e4:	f7fb f84c 	bl	8000280 <strlen>
 80051e8:	2300      	movs	r3, #0
 80051ea:	930a      	str	r3, [sp, #40]	; 0x28
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	9305      	str	r3, [sp, #20]
 80051f0:	f8d8 3000 	ldr.w	r3, [r8]
 80051f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80051f8:	3307      	adds	r3, #7
 80051fa:	f023 0307 	bic.w	r3, r3, #7
 80051fe:	f103 0208 	add.w	r2, r3, #8
 8005202:	f8c8 2000 	str.w	r2, [r8]
 8005206:	e9d3 8900 	ldrd	r8, r9, [r3]
 800520a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800520e:	9307      	str	r3, [sp, #28]
 8005210:	f8cd 8018 	str.w	r8, [sp, #24]
 8005214:	ee08 0a10 	vmov	s16, r0
 8005218:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800521c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005220:	4b9e      	ldr	r3, [pc, #632]	; (800549c <_printf_float+0x2d8>)
 8005222:	f04f 32ff 	mov.w	r2, #4294967295
 8005226:	f7fb fc89 	bl	8000b3c <__aeabi_dcmpun>
 800522a:	bb88      	cbnz	r0, 8005290 <_printf_float+0xcc>
 800522c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005230:	4b9a      	ldr	r3, [pc, #616]	; (800549c <_printf_float+0x2d8>)
 8005232:	f04f 32ff 	mov.w	r2, #4294967295
 8005236:	f7fb fc63 	bl	8000b00 <__aeabi_dcmple>
 800523a:	bb48      	cbnz	r0, 8005290 <_printf_float+0xcc>
 800523c:	2200      	movs	r2, #0
 800523e:	2300      	movs	r3, #0
 8005240:	4640      	mov	r0, r8
 8005242:	4649      	mov	r1, r9
 8005244:	f7fb fc52 	bl	8000aec <__aeabi_dcmplt>
 8005248:	b110      	cbz	r0, 8005250 <_printf_float+0x8c>
 800524a:	232d      	movs	r3, #45	; 0x2d
 800524c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005250:	4a93      	ldr	r2, [pc, #588]	; (80054a0 <_printf_float+0x2dc>)
 8005252:	4b94      	ldr	r3, [pc, #592]	; (80054a4 <_printf_float+0x2e0>)
 8005254:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005258:	bf94      	ite	ls
 800525a:	4690      	movls	r8, r2
 800525c:	4698      	movhi	r8, r3
 800525e:	2303      	movs	r3, #3
 8005260:	6123      	str	r3, [r4, #16]
 8005262:	9b05      	ldr	r3, [sp, #20]
 8005264:	f023 0304 	bic.w	r3, r3, #4
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	f04f 0900 	mov.w	r9, #0
 800526e:	9700      	str	r7, [sp, #0]
 8005270:	4633      	mov	r3, r6
 8005272:	aa0b      	add	r2, sp, #44	; 0x2c
 8005274:	4621      	mov	r1, r4
 8005276:	4628      	mov	r0, r5
 8005278:	f000 f9da 	bl	8005630 <_printf_common>
 800527c:	3001      	adds	r0, #1
 800527e:	f040 8090 	bne.w	80053a2 <_printf_float+0x1de>
 8005282:	f04f 30ff 	mov.w	r0, #4294967295
 8005286:	b00d      	add	sp, #52	; 0x34
 8005288:	ecbd 8b02 	vpop	{d8}
 800528c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005290:	4642      	mov	r2, r8
 8005292:	464b      	mov	r3, r9
 8005294:	4640      	mov	r0, r8
 8005296:	4649      	mov	r1, r9
 8005298:	f7fb fc50 	bl	8000b3c <__aeabi_dcmpun>
 800529c:	b140      	cbz	r0, 80052b0 <_printf_float+0xec>
 800529e:	464b      	mov	r3, r9
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	bfbc      	itt	lt
 80052a4:	232d      	movlt	r3, #45	; 0x2d
 80052a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80052aa:	4a7f      	ldr	r2, [pc, #508]	; (80054a8 <_printf_float+0x2e4>)
 80052ac:	4b7f      	ldr	r3, [pc, #508]	; (80054ac <_printf_float+0x2e8>)
 80052ae:	e7d1      	b.n	8005254 <_printf_float+0x90>
 80052b0:	6863      	ldr	r3, [r4, #4]
 80052b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80052b6:	9206      	str	r2, [sp, #24]
 80052b8:	1c5a      	adds	r2, r3, #1
 80052ba:	d13f      	bne.n	800533c <_printf_float+0x178>
 80052bc:	2306      	movs	r3, #6
 80052be:	6063      	str	r3, [r4, #4]
 80052c0:	9b05      	ldr	r3, [sp, #20]
 80052c2:	6861      	ldr	r1, [r4, #4]
 80052c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80052c8:	2300      	movs	r3, #0
 80052ca:	9303      	str	r3, [sp, #12]
 80052cc:	ab0a      	add	r3, sp, #40	; 0x28
 80052ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80052d2:	ab09      	add	r3, sp, #36	; 0x24
 80052d4:	ec49 8b10 	vmov	d0, r8, r9
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	6022      	str	r2, [r4, #0]
 80052dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80052e0:	4628      	mov	r0, r5
 80052e2:	f7ff fecf 	bl	8005084 <__cvt>
 80052e6:	9b06      	ldr	r3, [sp, #24]
 80052e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052ea:	2b47      	cmp	r3, #71	; 0x47
 80052ec:	4680      	mov	r8, r0
 80052ee:	d108      	bne.n	8005302 <_printf_float+0x13e>
 80052f0:	1cc8      	adds	r0, r1, #3
 80052f2:	db02      	blt.n	80052fa <_printf_float+0x136>
 80052f4:	6863      	ldr	r3, [r4, #4]
 80052f6:	4299      	cmp	r1, r3
 80052f8:	dd41      	ble.n	800537e <_printf_float+0x1ba>
 80052fa:	f1ab 0302 	sub.w	r3, fp, #2
 80052fe:	fa5f fb83 	uxtb.w	fp, r3
 8005302:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005306:	d820      	bhi.n	800534a <_printf_float+0x186>
 8005308:	3901      	subs	r1, #1
 800530a:	465a      	mov	r2, fp
 800530c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005310:	9109      	str	r1, [sp, #36]	; 0x24
 8005312:	f7ff ff19 	bl	8005148 <__exponent>
 8005316:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005318:	1813      	adds	r3, r2, r0
 800531a:	2a01      	cmp	r2, #1
 800531c:	4681      	mov	r9, r0
 800531e:	6123      	str	r3, [r4, #16]
 8005320:	dc02      	bgt.n	8005328 <_printf_float+0x164>
 8005322:	6822      	ldr	r2, [r4, #0]
 8005324:	07d2      	lsls	r2, r2, #31
 8005326:	d501      	bpl.n	800532c <_printf_float+0x168>
 8005328:	3301      	adds	r3, #1
 800532a:	6123      	str	r3, [r4, #16]
 800532c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005330:	2b00      	cmp	r3, #0
 8005332:	d09c      	beq.n	800526e <_printf_float+0xaa>
 8005334:	232d      	movs	r3, #45	; 0x2d
 8005336:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800533a:	e798      	b.n	800526e <_printf_float+0xaa>
 800533c:	9a06      	ldr	r2, [sp, #24]
 800533e:	2a47      	cmp	r2, #71	; 0x47
 8005340:	d1be      	bne.n	80052c0 <_printf_float+0xfc>
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1bc      	bne.n	80052c0 <_printf_float+0xfc>
 8005346:	2301      	movs	r3, #1
 8005348:	e7b9      	b.n	80052be <_printf_float+0xfa>
 800534a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800534e:	d118      	bne.n	8005382 <_printf_float+0x1be>
 8005350:	2900      	cmp	r1, #0
 8005352:	6863      	ldr	r3, [r4, #4]
 8005354:	dd0b      	ble.n	800536e <_printf_float+0x1aa>
 8005356:	6121      	str	r1, [r4, #16]
 8005358:	b913      	cbnz	r3, 8005360 <_printf_float+0x19c>
 800535a:	6822      	ldr	r2, [r4, #0]
 800535c:	07d0      	lsls	r0, r2, #31
 800535e:	d502      	bpl.n	8005366 <_printf_float+0x1a2>
 8005360:	3301      	adds	r3, #1
 8005362:	440b      	add	r3, r1
 8005364:	6123      	str	r3, [r4, #16]
 8005366:	65a1      	str	r1, [r4, #88]	; 0x58
 8005368:	f04f 0900 	mov.w	r9, #0
 800536c:	e7de      	b.n	800532c <_printf_float+0x168>
 800536e:	b913      	cbnz	r3, 8005376 <_printf_float+0x1b2>
 8005370:	6822      	ldr	r2, [r4, #0]
 8005372:	07d2      	lsls	r2, r2, #31
 8005374:	d501      	bpl.n	800537a <_printf_float+0x1b6>
 8005376:	3302      	adds	r3, #2
 8005378:	e7f4      	b.n	8005364 <_printf_float+0x1a0>
 800537a:	2301      	movs	r3, #1
 800537c:	e7f2      	b.n	8005364 <_printf_float+0x1a0>
 800537e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005384:	4299      	cmp	r1, r3
 8005386:	db05      	blt.n	8005394 <_printf_float+0x1d0>
 8005388:	6823      	ldr	r3, [r4, #0]
 800538a:	6121      	str	r1, [r4, #16]
 800538c:	07d8      	lsls	r0, r3, #31
 800538e:	d5ea      	bpl.n	8005366 <_printf_float+0x1a2>
 8005390:	1c4b      	adds	r3, r1, #1
 8005392:	e7e7      	b.n	8005364 <_printf_float+0x1a0>
 8005394:	2900      	cmp	r1, #0
 8005396:	bfd4      	ite	le
 8005398:	f1c1 0202 	rsble	r2, r1, #2
 800539c:	2201      	movgt	r2, #1
 800539e:	4413      	add	r3, r2
 80053a0:	e7e0      	b.n	8005364 <_printf_float+0x1a0>
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	055a      	lsls	r2, r3, #21
 80053a6:	d407      	bmi.n	80053b8 <_printf_float+0x1f4>
 80053a8:	6923      	ldr	r3, [r4, #16]
 80053aa:	4642      	mov	r2, r8
 80053ac:	4631      	mov	r1, r6
 80053ae:	4628      	mov	r0, r5
 80053b0:	47b8      	blx	r7
 80053b2:	3001      	adds	r0, #1
 80053b4:	d12c      	bne.n	8005410 <_printf_float+0x24c>
 80053b6:	e764      	b.n	8005282 <_printf_float+0xbe>
 80053b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80053bc:	f240 80e0 	bls.w	8005580 <_printf_float+0x3bc>
 80053c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053c4:	2200      	movs	r2, #0
 80053c6:	2300      	movs	r3, #0
 80053c8:	f7fb fb86 	bl	8000ad8 <__aeabi_dcmpeq>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d034      	beq.n	800543a <_printf_float+0x276>
 80053d0:	4a37      	ldr	r2, [pc, #220]	; (80054b0 <_printf_float+0x2ec>)
 80053d2:	2301      	movs	r3, #1
 80053d4:	4631      	mov	r1, r6
 80053d6:	4628      	mov	r0, r5
 80053d8:	47b8      	blx	r7
 80053da:	3001      	adds	r0, #1
 80053dc:	f43f af51 	beq.w	8005282 <_printf_float+0xbe>
 80053e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80053e4:	429a      	cmp	r2, r3
 80053e6:	db02      	blt.n	80053ee <_printf_float+0x22a>
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	07d8      	lsls	r0, r3, #31
 80053ec:	d510      	bpl.n	8005410 <_printf_float+0x24c>
 80053ee:	ee18 3a10 	vmov	r3, s16
 80053f2:	4652      	mov	r2, sl
 80053f4:	4631      	mov	r1, r6
 80053f6:	4628      	mov	r0, r5
 80053f8:	47b8      	blx	r7
 80053fa:	3001      	adds	r0, #1
 80053fc:	f43f af41 	beq.w	8005282 <_printf_float+0xbe>
 8005400:	f04f 0800 	mov.w	r8, #0
 8005404:	f104 091a 	add.w	r9, r4, #26
 8005408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800540a:	3b01      	subs	r3, #1
 800540c:	4543      	cmp	r3, r8
 800540e:	dc09      	bgt.n	8005424 <_printf_float+0x260>
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	079b      	lsls	r3, r3, #30
 8005414:	f100 8107 	bmi.w	8005626 <_printf_float+0x462>
 8005418:	68e0      	ldr	r0, [r4, #12]
 800541a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800541c:	4298      	cmp	r0, r3
 800541e:	bfb8      	it	lt
 8005420:	4618      	movlt	r0, r3
 8005422:	e730      	b.n	8005286 <_printf_float+0xc2>
 8005424:	2301      	movs	r3, #1
 8005426:	464a      	mov	r2, r9
 8005428:	4631      	mov	r1, r6
 800542a:	4628      	mov	r0, r5
 800542c:	47b8      	blx	r7
 800542e:	3001      	adds	r0, #1
 8005430:	f43f af27 	beq.w	8005282 <_printf_float+0xbe>
 8005434:	f108 0801 	add.w	r8, r8, #1
 8005438:	e7e6      	b.n	8005408 <_printf_float+0x244>
 800543a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800543c:	2b00      	cmp	r3, #0
 800543e:	dc39      	bgt.n	80054b4 <_printf_float+0x2f0>
 8005440:	4a1b      	ldr	r2, [pc, #108]	; (80054b0 <_printf_float+0x2ec>)
 8005442:	2301      	movs	r3, #1
 8005444:	4631      	mov	r1, r6
 8005446:	4628      	mov	r0, r5
 8005448:	47b8      	blx	r7
 800544a:	3001      	adds	r0, #1
 800544c:	f43f af19 	beq.w	8005282 <_printf_float+0xbe>
 8005450:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005454:	4313      	orrs	r3, r2
 8005456:	d102      	bne.n	800545e <_printf_float+0x29a>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	07d9      	lsls	r1, r3, #31
 800545c:	d5d8      	bpl.n	8005410 <_printf_float+0x24c>
 800545e:	ee18 3a10 	vmov	r3, s16
 8005462:	4652      	mov	r2, sl
 8005464:	4631      	mov	r1, r6
 8005466:	4628      	mov	r0, r5
 8005468:	47b8      	blx	r7
 800546a:	3001      	adds	r0, #1
 800546c:	f43f af09 	beq.w	8005282 <_printf_float+0xbe>
 8005470:	f04f 0900 	mov.w	r9, #0
 8005474:	f104 0a1a 	add.w	sl, r4, #26
 8005478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800547a:	425b      	negs	r3, r3
 800547c:	454b      	cmp	r3, r9
 800547e:	dc01      	bgt.n	8005484 <_printf_float+0x2c0>
 8005480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005482:	e792      	b.n	80053aa <_printf_float+0x1e6>
 8005484:	2301      	movs	r3, #1
 8005486:	4652      	mov	r2, sl
 8005488:	4631      	mov	r1, r6
 800548a:	4628      	mov	r0, r5
 800548c:	47b8      	blx	r7
 800548e:	3001      	adds	r0, #1
 8005490:	f43f aef7 	beq.w	8005282 <_printf_float+0xbe>
 8005494:	f109 0901 	add.w	r9, r9, #1
 8005498:	e7ee      	b.n	8005478 <_printf_float+0x2b4>
 800549a:	bf00      	nop
 800549c:	7fefffff 	.word	0x7fefffff
 80054a0:	08007f3e 	.word	0x08007f3e
 80054a4:	08007f42 	.word	0x08007f42
 80054a8:	08007f46 	.word	0x08007f46
 80054ac:	08007f4a 	.word	0x08007f4a
 80054b0:	08007f4e 	.word	0x08007f4e
 80054b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054b8:	429a      	cmp	r2, r3
 80054ba:	bfa8      	it	ge
 80054bc:	461a      	movge	r2, r3
 80054be:	2a00      	cmp	r2, #0
 80054c0:	4691      	mov	r9, r2
 80054c2:	dc37      	bgt.n	8005534 <_printf_float+0x370>
 80054c4:	f04f 0b00 	mov.w	fp, #0
 80054c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054cc:	f104 021a 	add.w	r2, r4, #26
 80054d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80054d2:	9305      	str	r3, [sp, #20]
 80054d4:	eba3 0309 	sub.w	r3, r3, r9
 80054d8:	455b      	cmp	r3, fp
 80054da:	dc33      	bgt.n	8005544 <_printf_float+0x380>
 80054dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054e0:	429a      	cmp	r2, r3
 80054e2:	db3b      	blt.n	800555c <_printf_float+0x398>
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	07da      	lsls	r2, r3, #31
 80054e8:	d438      	bmi.n	800555c <_printf_float+0x398>
 80054ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80054ee:	eba2 0903 	sub.w	r9, r2, r3
 80054f2:	9b05      	ldr	r3, [sp, #20]
 80054f4:	1ad2      	subs	r2, r2, r3
 80054f6:	4591      	cmp	r9, r2
 80054f8:	bfa8      	it	ge
 80054fa:	4691      	movge	r9, r2
 80054fc:	f1b9 0f00 	cmp.w	r9, #0
 8005500:	dc35      	bgt.n	800556e <_printf_float+0x3aa>
 8005502:	f04f 0800 	mov.w	r8, #0
 8005506:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800550a:	f104 0a1a 	add.w	sl, r4, #26
 800550e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005512:	1a9b      	subs	r3, r3, r2
 8005514:	eba3 0309 	sub.w	r3, r3, r9
 8005518:	4543      	cmp	r3, r8
 800551a:	f77f af79 	ble.w	8005410 <_printf_float+0x24c>
 800551e:	2301      	movs	r3, #1
 8005520:	4652      	mov	r2, sl
 8005522:	4631      	mov	r1, r6
 8005524:	4628      	mov	r0, r5
 8005526:	47b8      	blx	r7
 8005528:	3001      	adds	r0, #1
 800552a:	f43f aeaa 	beq.w	8005282 <_printf_float+0xbe>
 800552e:	f108 0801 	add.w	r8, r8, #1
 8005532:	e7ec      	b.n	800550e <_printf_float+0x34a>
 8005534:	4613      	mov	r3, r2
 8005536:	4631      	mov	r1, r6
 8005538:	4642      	mov	r2, r8
 800553a:	4628      	mov	r0, r5
 800553c:	47b8      	blx	r7
 800553e:	3001      	adds	r0, #1
 8005540:	d1c0      	bne.n	80054c4 <_printf_float+0x300>
 8005542:	e69e      	b.n	8005282 <_printf_float+0xbe>
 8005544:	2301      	movs	r3, #1
 8005546:	4631      	mov	r1, r6
 8005548:	4628      	mov	r0, r5
 800554a:	9205      	str	r2, [sp, #20]
 800554c:	47b8      	blx	r7
 800554e:	3001      	adds	r0, #1
 8005550:	f43f ae97 	beq.w	8005282 <_printf_float+0xbe>
 8005554:	9a05      	ldr	r2, [sp, #20]
 8005556:	f10b 0b01 	add.w	fp, fp, #1
 800555a:	e7b9      	b.n	80054d0 <_printf_float+0x30c>
 800555c:	ee18 3a10 	vmov	r3, s16
 8005560:	4652      	mov	r2, sl
 8005562:	4631      	mov	r1, r6
 8005564:	4628      	mov	r0, r5
 8005566:	47b8      	blx	r7
 8005568:	3001      	adds	r0, #1
 800556a:	d1be      	bne.n	80054ea <_printf_float+0x326>
 800556c:	e689      	b.n	8005282 <_printf_float+0xbe>
 800556e:	9a05      	ldr	r2, [sp, #20]
 8005570:	464b      	mov	r3, r9
 8005572:	4442      	add	r2, r8
 8005574:	4631      	mov	r1, r6
 8005576:	4628      	mov	r0, r5
 8005578:	47b8      	blx	r7
 800557a:	3001      	adds	r0, #1
 800557c:	d1c1      	bne.n	8005502 <_printf_float+0x33e>
 800557e:	e680      	b.n	8005282 <_printf_float+0xbe>
 8005580:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005582:	2a01      	cmp	r2, #1
 8005584:	dc01      	bgt.n	800558a <_printf_float+0x3c6>
 8005586:	07db      	lsls	r3, r3, #31
 8005588:	d53a      	bpl.n	8005600 <_printf_float+0x43c>
 800558a:	2301      	movs	r3, #1
 800558c:	4642      	mov	r2, r8
 800558e:	4631      	mov	r1, r6
 8005590:	4628      	mov	r0, r5
 8005592:	47b8      	blx	r7
 8005594:	3001      	adds	r0, #1
 8005596:	f43f ae74 	beq.w	8005282 <_printf_float+0xbe>
 800559a:	ee18 3a10 	vmov	r3, s16
 800559e:	4652      	mov	r2, sl
 80055a0:	4631      	mov	r1, r6
 80055a2:	4628      	mov	r0, r5
 80055a4:	47b8      	blx	r7
 80055a6:	3001      	adds	r0, #1
 80055a8:	f43f ae6b 	beq.w	8005282 <_printf_float+0xbe>
 80055ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80055b0:	2200      	movs	r2, #0
 80055b2:	2300      	movs	r3, #0
 80055b4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80055b8:	f7fb fa8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80055bc:	b9d8      	cbnz	r0, 80055f6 <_printf_float+0x432>
 80055be:	f10a 33ff 	add.w	r3, sl, #4294967295
 80055c2:	f108 0201 	add.w	r2, r8, #1
 80055c6:	4631      	mov	r1, r6
 80055c8:	4628      	mov	r0, r5
 80055ca:	47b8      	blx	r7
 80055cc:	3001      	adds	r0, #1
 80055ce:	d10e      	bne.n	80055ee <_printf_float+0x42a>
 80055d0:	e657      	b.n	8005282 <_printf_float+0xbe>
 80055d2:	2301      	movs	r3, #1
 80055d4:	4652      	mov	r2, sl
 80055d6:	4631      	mov	r1, r6
 80055d8:	4628      	mov	r0, r5
 80055da:	47b8      	blx	r7
 80055dc:	3001      	adds	r0, #1
 80055de:	f43f ae50 	beq.w	8005282 <_printf_float+0xbe>
 80055e2:	f108 0801 	add.w	r8, r8, #1
 80055e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e8:	3b01      	subs	r3, #1
 80055ea:	4543      	cmp	r3, r8
 80055ec:	dcf1      	bgt.n	80055d2 <_printf_float+0x40e>
 80055ee:	464b      	mov	r3, r9
 80055f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80055f4:	e6da      	b.n	80053ac <_printf_float+0x1e8>
 80055f6:	f04f 0800 	mov.w	r8, #0
 80055fa:	f104 0a1a 	add.w	sl, r4, #26
 80055fe:	e7f2      	b.n	80055e6 <_printf_float+0x422>
 8005600:	2301      	movs	r3, #1
 8005602:	4642      	mov	r2, r8
 8005604:	e7df      	b.n	80055c6 <_printf_float+0x402>
 8005606:	2301      	movs	r3, #1
 8005608:	464a      	mov	r2, r9
 800560a:	4631      	mov	r1, r6
 800560c:	4628      	mov	r0, r5
 800560e:	47b8      	blx	r7
 8005610:	3001      	adds	r0, #1
 8005612:	f43f ae36 	beq.w	8005282 <_printf_float+0xbe>
 8005616:	f108 0801 	add.w	r8, r8, #1
 800561a:	68e3      	ldr	r3, [r4, #12]
 800561c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800561e:	1a5b      	subs	r3, r3, r1
 8005620:	4543      	cmp	r3, r8
 8005622:	dcf0      	bgt.n	8005606 <_printf_float+0x442>
 8005624:	e6f8      	b.n	8005418 <_printf_float+0x254>
 8005626:	f04f 0800 	mov.w	r8, #0
 800562a:	f104 0919 	add.w	r9, r4, #25
 800562e:	e7f4      	b.n	800561a <_printf_float+0x456>

08005630 <_printf_common>:
 8005630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005634:	4616      	mov	r6, r2
 8005636:	4699      	mov	r9, r3
 8005638:	688a      	ldr	r2, [r1, #8]
 800563a:	690b      	ldr	r3, [r1, #16]
 800563c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005640:	4293      	cmp	r3, r2
 8005642:	bfb8      	it	lt
 8005644:	4613      	movlt	r3, r2
 8005646:	6033      	str	r3, [r6, #0]
 8005648:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800564c:	4607      	mov	r7, r0
 800564e:	460c      	mov	r4, r1
 8005650:	b10a      	cbz	r2, 8005656 <_printf_common+0x26>
 8005652:	3301      	adds	r3, #1
 8005654:	6033      	str	r3, [r6, #0]
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	0699      	lsls	r1, r3, #26
 800565a:	bf42      	ittt	mi
 800565c:	6833      	ldrmi	r3, [r6, #0]
 800565e:	3302      	addmi	r3, #2
 8005660:	6033      	strmi	r3, [r6, #0]
 8005662:	6825      	ldr	r5, [r4, #0]
 8005664:	f015 0506 	ands.w	r5, r5, #6
 8005668:	d106      	bne.n	8005678 <_printf_common+0x48>
 800566a:	f104 0a19 	add.w	sl, r4, #25
 800566e:	68e3      	ldr	r3, [r4, #12]
 8005670:	6832      	ldr	r2, [r6, #0]
 8005672:	1a9b      	subs	r3, r3, r2
 8005674:	42ab      	cmp	r3, r5
 8005676:	dc26      	bgt.n	80056c6 <_printf_common+0x96>
 8005678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800567c:	1e13      	subs	r3, r2, #0
 800567e:	6822      	ldr	r2, [r4, #0]
 8005680:	bf18      	it	ne
 8005682:	2301      	movne	r3, #1
 8005684:	0692      	lsls	r2, r2, #26
 8005686:	d42b      	bmi.n	80056e0 <_printf_common+0xb0>
 8005688:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800568c:	4649      	mov	r1, r9
 800568e:	4638      	mov	r0, r7
 8005690:	47c0      	blx	r8
 8005692:	3001      	adds	r0, #1
 8005694:	d01e      	beq.n	80056d4 <_printf_common+0xa4>
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	6922      	ldr	r2, [r4, #16]
 800569a:	f003 0306 	and.w	r3, r3, #6
 800569e:	2b04      	cmp	r3, #4
 80056a0:	bf02      	ittt	eq
 80056a2:	68e5      	ldreq	r5, [r4, #12]
 80056a4:	6833      	ldreq	r3, [r6, #0]
 80056a6:	1aed      	subeq	r5, r5, r3
 80056a8:	68a3      	ldr	r3, [r4, #8]
 80056aa:	bf0c      	ite	eq
 80056ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056b0:	2500      	movne	r5, #0
 80056b2:	4293      	cmp	r3, r2
 80056b4:	bfc4      	itt	gt
 80056b6:	1a9b      	subgt	r3, r3, r2
 80056b8:	18ed      	addgt	r5, r5, r3
 80056ba:	2600      	movs	r6, #0
 80056bc:	341a      	adds	r4, #26
 80056be:	42b5      	cmp	r5, r6
 80056c0:	d11a      	bne.n	80056f8 <_printf_common+0xc8>
 80056c2:	2000      	movs	r0, #0
 80056c4:	e008      	b.n	80056d8 <_printf_common+0xa8>
 80056c6:	2301      	movs	r3, #1
 80056c8:	4652      	mov	r2, sl
 80056ca:	4649      	mov	r1, r9
 80056cc:	4638      	mov	r0, r7
 80056ce:	47c0      	blx	r8
 80056d0:	3001      	adds	r0, #1
 80056d2:	d103      	bne.n	80056dc <_printf_common+0xac>
 80056d4:	f04f 30ff 	mov.w	r0, #4294967295
 80056d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056dc:	3501      	adds	r5, #1
 80056de:	e7c6      	b.n	800566e <_printf_common+0x3e>
 80056e0:	18e1      	adds	r1, r4, r3
 80056e2:	1c5a      	adds	r2, r3, #1
 80056e4:	2030      	movs	r0, #48	; 0x30
 80056e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056ea:	4422      	add	r2, r4
 80056ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056f4:	3302      	adds	r3, #2
 80056f6:	e7c7      	b.n	8005688 <_printf_common+0x58>
 80056f8:	2301      	movs	r3, #1
 80056fa:	4622      	mov	r2, r4
 80056fc:	4649      	mov	r1, r9
 80056fe:	4638      	mov	r0, r7
 8005700:	47c0      	blx	r8
 8005702:	3001      	adds	r0, #1
 8005704:	d0e6      	beq.n	80056d4 <_printf_common+0xa4>
 8005706:	3601      	adds	r6, #1
 8005708:	e7d9      	b.n	80056be <_printf_common+0x8e>
	...

0800570c <_printf_i>:
 800570c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005710:	7e0f      	ldrb	r7, [r1, #24]
 8005712:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005714:	2f78      	cmp	r7, #120	; 0x78
 8005716:	4691      	mov	r9, r2
 8005718:	4680      	mov	r8, r0
 800571a:	460c      	mov	r4, r1
 800571c:	469a      	mov	sl, r3
 800571e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005722:	d807      	bhi.n	8005734 <_printf_i+0x28>
 8005724:	2f62      	cmp	r7, #98	; 0x62
 8005726:	d80a      	bhi.n	800573e <_printf_i+0x32>
 8005728:	2f00      	cmp	r7, #0
 800572a:	f000 80d4 	beq.w	80058d6 <_printf_i+0x1ca>
 800572e:	2f58      	cmp	r7, #88	; 0x58
 8005730:	f000 80c0 	beq.w	80058b4 <_printf_i+0x1a8>
 8005734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005738:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800573c:	e03a      	b.n	80057b4 <_printf_i+0xa8>
 800573e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005742:	2b15      	cmp	r3, #21
 8005744:	d8f6      	bhi.n	8005734 <_printf_i+0x28>
 8005746:	a101      	add	r1, pc, #4	; (adr r1, 800574c <_printf_i+0x40>)
 8005748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800574c:	080057a5 	.word	0x080057a5
 8005750:	080057b9 	.word	0x080057b9
 8005754:	08005735 	.word	0x08005735
 8005758:	08005735 	.word	0x08005735
 800575c:	08005735 	.word	0x08005735
 8005760:	08005735 	.word	0x08005735
 8005764:	080057b9 	.word	0x080057b9
 8005768:	08005735 	.word	0x08005735
 800576c:	08005735 	.word	0x08005735
 8005770:	08005735 	.word	0x08005735
 8005774:	08005735 	.word	0x08005735
 8005778:	080058bd 	.word	0x080058bd
 800577c:	080057e5 	.word	0x080057e5
 8005780:	08005877 	.word	0x08005877
 8005784:	08005735 	.word	0x08005735
 8005788:	08005735 	.word	0x08005735
 800578c:	080058df 	.word	0x080058df
 8005790:	08005735 	.word	0x08005735
 8005794:	080057e5 	.word	0x080057e5
 8005798:	08005735 	.word	0x08005735
 800579c:	08005735 	.word	0x08005735
 80057a0:	0800587f 	.word	0x0800587f
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	1d1a      	adds	r2, r3, #4
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	602a      	str	r2, [r5, #0]
 80057ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057b4:	2301      	movs	r3, #1
 80057b6:	e09f      	b.n	80058f8 <_printf_i+0x1ec>
 80057b8:	6820      	ldr	r0, [r4, #0]
 80057ba:	682b      	ldr	r3, [r5, #0]
 80057bc:	0607      	lsls	r7, r0, #24
 80057be:	f103 0104 	add.w	r1, r3, #4
 80057c2:	6029      	str	r1, [r5, #0]
 80057c4:	d501      	bpl.n	80057ca <_printf_i+0xbe>
 80057c6:	681e      	ldr	r6, [r3, #0]
 80057c8:	e003      	b.n	80057d2 <_printf_i+0xc6>
 80057ca:	0646      	lsls	r6, r0, #25
 80057cc:	d5fb      	bpl.n	80057c6 <_printf_i+0xba>
 80057ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80057d2:	2e00      	cmp	r6, #0
 80057d4:	da03      	bge.n	80057de <_printf_i+0xd2>
 80057d6:	232d      	movs	r3, #45	; 0x2d
 80057d8:	4276      	negs	r6, r6
 80057da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057de:	485a      	ldr	r0, [pc, #360]	; (8005948 <_printf_i+0x23c>)
 80057e0:	230a      	movs	r3, #10
 80057e2:	e012      	b.n	800580a <_printf_i+0xfe>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	6820      	ldr	r0, [r4, #0]
 80057e8:	1d19      	adds	r1, r3, #4
 80057ea:	6029      	str	r1, [r5, #0]
 80057ec:	0605      	lsls	r5, r0, #24
 80057ee:	d501      	bpl.n	80057f4 <_printf_i+0xe8>
 80057f0:	681e      	ldr	r6, [r3, #0]
 80057f2:	e002      	b.n	80057fa <_printf_i+0xee>
 80057f4:	0641      	lsls	r1, r0, #25
 80057f6:	d5fb      	bpl.n	80057f0 <_printf_i+0xe4>
 80057f8:	881e      	ldrh	r6, [r3, #0]
 80057fa:	4853      	ldr	r0, [pc, #332]	; (8005948 <_printf_i+0x23c>)
 80057fc:	2f6f      	cmp	r7, #111	; 0x6f
 80057fe:	bf0c      	ite	eq
 8005800:	2308      	moveq	r3, #8
 8005802:	230a      	movne	r3, #10
 8005804:	2100      	movs	r1, #0
 8005806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800580a:	6865      	ldr	r5, [r4, #4]
 800580c:	60a5      	str	r5, [r4, #8]
 800580e:	2d00      	cmp	r5, #0
 8005810:	bfa2      	ittt	ge
 8005812:	6821      	ldrge	r1, [r4, #0]
 8005814:	f021 0104 	bicge.w	r1, r1, #4
 8005818:	6021      	strge	r1, [r4, #0]
 800581a:	b90e      	cbnz	r6, 8005820 <_printf_i+0x114>
 800581c:	2d00      	cmp	r5, #0
 800581e:	d04b      	beq.n	80058b8 <_printf_i+0x1ac>
 8005820:	4615      	mov	r5, r2
 8005822:	fbb6 f1f3 	udiv	r1, r6, r3
 8005826:	fb03 6711 	mls	r7, r3, r1, r6
 800582a:	5dc7      	ldrb	r7, [r0, r7]
 800582c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005830:	4637      	mov	r7, r6
 8005832:	42bb      	cmp	r3, r7
 8005834:	460e      	mov	r6, r1
 8005836:	d9f4      	bls.n	8005822 <_printf_i+0x116>
 8005838:	2b08      	cmp	r3, #8
 800583a:	d10b      	bne.n	8005854 <_printf_i+0x148>
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	07de      	lsls	r6, r3, #31
 8005840:	d508      	bpl.n	8005854 <_printf_i+0x148>
 8005842:	6923      	ldr	r3, [r4, #16]
 8005844:	6861      	ldr	r1, [r4, #4]
 8005846:	4299      	cmp	r1, r3
 8005848:	bfde      	ittt	le
 800584a:	2330      	movle	r3, #48	; 0x30
 800584c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005850:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005854:	1b52      	subs	r2, r2, r5
 8005856:	6122      	str	r2, [r4, #16]
 8005858:	f8cd a000 	str.w	sl, [sp]
 800585c:	464b      	mov	r3, r9
 800585e:	aa03      	add	r2, sp, #12
 8005860:	4621      	mov	r1, r4
 8005862:	4640      	mov	r0, r8
 8005864:	f7ff fee4 	bl	8005630 <_printf_common>
 8005868:	3001      	adds	r0, #1
 800586a:	d14a      	bne.n	8005902 <_printf_i+0x1f6>
 800586c:	f04f 30ff 	mov.w	r0, #4294967295
 8005870:	b004      	add	sp, #16
 8005872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005876:	6823      	ldr	r3, [r4, #0]
 8005878:	f043 0320 	orr.w	r3, r3, #32
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	4833      	ldr	r0, [pc, #204]	; (800594c <_printf_i+0x240>)
 8005880:	2778      	movs	r7, #120	; 0x78
 8005882:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	6829      	ldr	r1, [r5, #0]
 800588a:	061f      	lsls	r7, r3, #24
 800588c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005890:	d402      	bmi.n	8005898 <_printf_i+0x18c>
 8005892:	065f      	lsls	r7, r3, #25
 8005894:	bf48      	it	mi
 8005896:	b2b6      	uxthmi	r6, r6
 8005898:	07df      	lsls	r7, r3, #31
 800589a:	bf48      	it	mi
 800589c:	f043 0320 	orrmi.w	r3, r3, #32
 80058a0:	6029      	str	r1, [r5, #0]
 80058a2:	bf48      	it	mi
 80058a4:	6023      	strmi	r3, [r4, #0]
 80058a6:	b91e      	cbnz	r6, 80058b0 <_printf_i+0x1a4>
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	f023 0320 	bic.w	r3, r3, #32
 80058ae:	6023      	str	r3, [r4, #0]
 80058b0:	2310      	movs	r3, #16
 80058b2:	e7a7      	b.n	8005804 <_printf_i+0xf8>
 80058b4:	4824      	ldr	r0, [pc, #144]	; (8005948 <_printf_i+0x23c>)
 80058b6:	e7e4      	b.n	8005882 <_printf_i+0x176>
 80058b8:	4615      	mov	r5, r2
 80058ba:	e7bd      	b.n	8005838 <_printf_i+0x12c>
 80058bc:	682b      	ldr	r3, [r5, #0]
 80058be:	6826      	ldr	r6, [r4, #0]
 80058c0:	6961      	ldr	r1, [r4, #20]
 80058c2:	1d18      	adds	r0, r3, #4
 80058c4:	6028      	str	r0, [r5, #0]
 80058c6:	0635      	lsls	r5, r6, #24
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	d501      	bpl.n	80058d0 <_printf_i+0x1c4>
 80058cc:	6019      	str	r1, [r3, #0]
 80058ce:	e002      	b.n	80058d6 <_printf_i+0x1ca>
 80058d0:	0670      	lsls	r0, r6, #25
 80058d2:	d5fb      	bpl.n	80058cc <_printf_i+0x1c0>
 80058d4:	8019      	strh	r1, [r3, #0]
 80058d6:	2300      	movs	r3, #0
 80058d8:	6123      	str	r3, [r4, #16]
 80058da:	4615      	mov	r5, r2
 80058dc:	e7bc      	b.n	8005858 <_printf_i+0x14c>
 80058de:	682b      	ldr	r3, [r5, #0]
 80058e0:	1d1a      	adds	r2, r3, #4
 80058e2:	602a      	str	r2, [r5, #0]
 80058e4:	681d      	ldr	r5, [r3, #0]
 80058e6:	6862      	ldr	r2, [r4, #4]
 80058e8:	2100      	movs	r1, #0
 80058ea:	4628      	mov	r0, r5
 80058ec:	f7fa fc78 	bl	80001e0 <memchr>
 80058f0:	b108      	cbz	r0, 80058f6 <_printf_i+0x1ea>
 80058f2:	1b40      	subs	r0, r0, r5
 80058f4:	6060      	str	r0, [r4, #4]
 80058f6:	6863      	ldr	r3, [r4, #4]
 80058f8:	6123      	str	r3, [r4, #16]
 80058fa:	2300      	movs	r3, #0
 80058fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005900:	e7aa      	b.n	8005858 <_printf_i+0x14c>
 8005902:	6923      	ldr	r3, [r4, #16]
 8005904:	462a      	mov	r2, r5
 8005906:	4649      	mov	r1, r9
 8005908:	4640      	mov	r0, r8
 800590a:	47d0      	blx	sl
 800590c:	3001      	adds	r0, #1
 800590e:	d0ad      	beq.n	800586c <_printf_i+0x160>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	079b      	lsls	r3, r3, #30
 8005914:	d413      	bmi.n	800593e <_printf_i+0x232>
 8005916:	68e0      	ldr	r0, [r4, #12]
 8005918:	9b03      	ldr	r3, [sp, #12]
 800591a:	4298      	cmp	r0, r3
 800591c:	bfb8      	it	lt
 800591e:	4618      	movlt	r0, r3
 8005920:	e7a6      	b.n	8005870 <_printf_i+0x164>
 8005922:	2301      	movs	r3, #1
 8005924:	4632      	mov	r2, r6
 8005926:	4649      	mov	r1, r9
 8005928:	4640      	mov	r0, r8
 800592a:	47d0      	blx	sl
 800592c:	3001      	adds	r0, #1
 800592e:	d09d      	beq.n	800586c <_printf_i+0x160>
 8005930:	3501      	adds	r5, #1
 8005932:	68e3      	ldr	r3, [r4, #12]
 8005934:	9903      	ldr	r1, [sp, #12]
 8005936:	1a5b      	subs	r3, r3, r1
 8005938:	42ab      	cmp	r3, r5
 800593a:	dcf2      	bgt.n	8005922 <_printf_i+0x216>
 800593c:	e7eb      	b.n	8005916 <_printf_i+0x20a>
 800593e:	2500      	movs	r5, #0
 8005940:	f104 0619 	add.w	r6, r4, #25
 8005944:	e7f5      	b.n	8005932 <_printf_i+0x226>
 8005946:	bf00      	nop
 8005948:	08007f50 	.word	0x08007f50
 800594c:	08007f61 	.word	0x08007f61

08005950 <std>:
 8005950:	2300      	movs	r3, #0
 8005952:	b510      	push	{r4, lr}
 8005954:	4604      	mov	r4, r0
 8005956:	e9c0 3300 	strd	r3, r3, [r0]
 800595a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800595e:	6083      	str	r3, [r0, #8]
 8005960:	8181      	strh	r1, [r0, #12]
 8005962:	6643      	str	r3, [r0, #100]	; 0x64
 8005964:	81c2      	strh	r2, [r0, #14]
 8005966:	6183      	str	r3, [r0, #24]
 8005968:	4619      	mov	r1, r3
 800596a:	2208      	movs	r2, #8
 800596c:	305c      	adds	r0, #92	; 0x5c
 800596e:	f000 fa17 	bl	8005da0 <memset>
 8005972:	4b0d      	ldr	r3, [pc, #52]	; (80059a8 <std+0x58>)
 8005974:	6263      	str	r3, [r4, #36]	; 0x24
 8005976:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <std+0x5c>)
 8005978:	62a3      	str	r3, [r4, #40]	; 0x28
 800597a:	4b0d      	ldr	r3, [pc, #52]	; (80059b0 <std+0x60>)
 800597c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800597e:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <std+0x64>)
 8005980:	6323      	str	r3, [r4, #48]	; 0x30
 8005982:	4b0d      	ldr	r3, [pc, #52]	; (80059b8 <std+0x68>)
 8005984:	6224      	str	r4, [r4, #32]
 8005986:	429c      	cmp	r4, r3
 8005988:	d006      	beq.n	8005998 <std+0x48>
 800598a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800598e:	4294      	cmp	r4, r2
 8005990:	d002      	beq.n	8005998 <std+0x48>
 8005992:	33d0      	adds	r3, #208	; 0xd0
 8005994:	429c      	cmp	r4, r3
 8005996:	d105      	bne.n	80059a4 <std+0x54>
 8005998:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800599c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059a0:	f000 ba7a 	b.w	8005e98 <__retarget_lock_init_recursive>
 80059a4:	bd10      	pop	{r4, pc}
 80059a6:	bf00      	nop
 80059a8:	08005bf1 	.word	0x08005bf1
 80059ac:	08005c13 	.word	0x08005c13
 80059b0:	08005c4b 	.word	0x08005c4b
 80059b4:	08005c6f 	.word	0x08005c6f
 80059b8:	20000388 	.word	0x20000388

080059bc <stdio_exit_handler>:
 80059bc:	4a02      	ldr	r2, [pc, #8]	; (80059c8 <stdio_exit_handler+0xc>)
 80059be:	4903      	ldr	r1, [pc, #12]	; (80059cc <stdio_exit_handler+0x10>)
 80059c0:	4803      	ldr	r0, [pc, #12]	; (80059d0 <stdio_exit_handler+0x14>)
 80059c2:	f000 b869 	b.w	8005a98 <_fwalk_sglue>
 80059c6:	bf00      	nop
 80059c8:	2000001c 	.word	0x2000001c
 80059cc:	08007ad1 	.word	0x08007ad1
 80059d0:	20000028 	.word	0x20000028

080059d4 <cleanup_stdio>:
 80059d4:	6841      	ldr	r1, [r0, #4]
 80059d6:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <cleanup_stdio+0x34>)
 80059d8:	4299      	cmp	r1, r3
 80059da:	b510      	push	{r4, lr}
 80059dc:	4604      	mov	r4, r0
 80059de:	d001      	beq.n	80059e4 <cleanup_stdio+0x10>
 80059e0:	f002 f876 	bl	8007ad0 <_fflush_r>
 80059e4:	68a1      	ldr	r1, [r4, #8]
 80059e6:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <cleanup_stdio+0x38>)
 80059e8:	4299      	cmp	r1, r3
 80059ea:	d002      	beq.n	80059f2 <cleanup_stdio+0x1e>
 80059ec:	4620      	mov	r0, r4
 80059ee:	f002 f86f 	bl	8007ad0 <_fflush_r>
 80059f2:	68e1      	ldr	r1, [r4, #12]
 80059f4:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <cleanup_stdio+0x3c>)
 80059f6:	4299      	cmp	r1, r3
 80059f8:	d004      	beq.n	8005a04 <cleanup_stdio+0x30>
 80059fa:	4620      	mov	r0, r4
 80059fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a00:	f002 b866 	b.w	8007ad0 <_fflush_r>
 8005a04:	bd10      	pop	{r4, pc}
 8005a06:	bf00      	nop
 8005a08:	20000388 	.word	0x20000388
 8005a0c:	200003f0 	.word	0x200003f0
 8005a10:	20000458 	.word	0x20000458

08005a14 <global_stdio_init.part.0>:
 8005a14:	b510      	push	{r4, lr}
 8005a16:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <global_stdio_init.part.0+0x30>)
 8005a18:	4c0b      	ldr	r4, [pc, #44]	; (8005a48 <global_stdio_init.part.0+0x34>)
 8005a1a:	4a0c      	ldr	r2, [pc, #48]	; (8005a4c <global_stdio_init.part.0+0x38>)
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	4620      	mov	r0, r4
 8005a20:	2200      	movs	r2, #0
 8005a22:	2104      	movs	r1, #4
 8005a24:	f7ff ff94 	bl	8005950 <std>
 8005a28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	2109      	movs	r1, #9
 8005a30:	f7ff ff8e 	bl	8005950 <std>
 8005a34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005a38:	2202      	movs	r2, #2
 8005a3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a3e:	2112      	movs	r1, #18
 8005a40:	f7ff bf86 	b.w	8005950 <std>
 8005a44:	200004c0 	.word	0x200004c0
 8005a48:	20000388 	.word	0x20000388
 8005a4c:	080059bd 	.word	0x080059bd

08005a50 <__sfp_lock_acquire>:
 8005a50:	4801      	ldr	r0, [pc, #4]	; (8005a58 <__sfp_lock_acquire+0x8>)
 8005a52:	f000 ba22 	b.w	8005e9a <__retarget_lock_acquire_recursive>
 8005a56:	bf00      	nop
 8005a58:	200004c9 	.word	0x200004c9

08005a5c <__sfp_lock_release>:
 8005a5c:	4801      	ldr	r0, [pc, #4]	; (8005a64 <__sfp_lock_release+0x8>)
 8005a5e:	f000 ba1d 	b.w	8005e9c <__retarget_lock_release_recursive>
 8005a62:	bf00      	nop
 8005a64:	200004c9 	.word	0x200004c9

08005a68 <__sinit>:
 8005a68:	b510      	push	{r4, lr}
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	f7ff fff0 	bl	8005a50 <__sfp_lock_acquire>
 8005a70:	6a23      	ldr	r3, [r4, #32]
 8005a72:	b11b      	cbz	r3, 8005a7c <__sinit+0x14>
 8005a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a78:	f7ff bff0 	b.w	8005a5c <__sfp_lock_release>
 8005a7c:	4b04      	ldr	r3, [pc, #16]	; (8005a90 <__sinit+0x28>)
 8005a7e:	6223      	str	r3, [r4, #32]
 8005a80:	4b04      	ldr	r3, [pc, #16]	; (8005a94 <__sinit+0x2c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f5      	bne.n	8005a74 <__sinit+0xc>
 8005a88:	f7ff ffc4 	bl	8005a14 <global_stdio_init.part.0>
 8005a8c:	e7f2      	b.n	8005a74 <__sinit+0xc>
 8005a8e:	bf00      	nop
 8005a90:	080059d5 	.word	0x080059d5
 8005a94:	200004c0 	.word	0x200004c0

08005a98 <_fwalk_sglue>:
 8005a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a9c:	4607      	mov	r7, r0
 8005a9e:	4688      	mov	r8, r1
 8005aa0:	4614      	mov	r4, r2
 8005aa2:	2600      	movs	r6, #0
 8005aa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005aa8:	f1b9 0901 	subs.w	r9, r9, #1
 8005aac:	d505      	bpl.n	8005aba <_fwalk_sglue+0x22>
 8005aae:	6824      	ldr	r4, [r4, #0]
 8005ab0:	2c00      	cmp	r4, #0
 8005ab2:	d1f7      	bne.n	8005aa4 <_fwalk_sglue+0xc>
 8005ab4:	4630      	mov	r0, r6
 8005ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aba:	89ab      	ldrh	r3, [r5, #12]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d907      	bls.n	8005ad0 <_fwalk_sglue+0x38>
 8005ac0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	d003      	beq.n	8005ad0 <_fwalk_sglue+0x38>
 8005ac8:	4629      	mov	r1, r5
 8005aca:	4638      	mov	r0, r7
 8005acc:	47c0      	blx	r8
 8005ace:	4306      	orrs	r6, r0
 8005ad0:	3568      	adds	r5, #104	; 0x68
 8005ad2:	e7e9      	b.n	8005aa8 <_fwalk_sglue+0x10>

08005ad4 <iprintf>:
 8005ad4:	b40f      	push	{r0, r1, r2, r3}
 8005ad6:	b507      	push	{r0, r1, r2, lr}
 8005ad8:	4906      	ldr	r1, [pc, #24]	; (8005af4 <iprintf+0x20>)
 8005ada:	ab04      	add	r3, sp, #16
 8005adc:	6808      	ldr	r0, [r1, #0]
 8005ade:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ae2:	6881      	ldr	r1, [r0, #8]
 8005ae4:	9301      	str	r3, [sp, #4]
 8005ae6:	f001 fe53 	bl	8007790 <_vfiprintf_r>
 8005aea:	b003      	add	sp, #12
 8005aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8005af0:	b004      	add	sp, #16
 8005af2:	4770      	bx	lr
 8005af4:	20000074 	.word	0x20000074

08005af8 <_puts_r>:
 8005af8:	6a03      	ldr	r3, [r0, #32]
 8005afa:	b570      	push	{r4, r5, r6, lr}
 8005afc:	6884      	ldr	r4, [r0, #8]
 8005afe:	4605      	mov	r5, r0
 8005b00:	460e      	mov	r6, r1
 8005b02:	b90b      	cbnz	r3, 8005b08 <_puts_r+0x10>
 8005b04:	f7ff ffb0 	bl	8005a68 <__sinit>
 8005b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b0a:	07db      	lsls	r3, r3, #31
 8005b0c:	d405      	bmi.n	8005b1a <_puts_r+0x22>
 8005b0e:	89a3      	ldrh	r3, [r4, #12]
 8005b10:	0598      	lsls	r0, r3, #22
 8005b12:	d402      	bmi.n	8005b1a <_puts_r+0x22>
 8005b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b16:	f000 f9c0 	bl	8005e9a <__retarget_lock_acquire_recursive>
 8005b1a:	89a3      	ldrh	r3, [r4, #12]
 8005b1c:	0719      	lsls	r1, r3, #28
 8005b1e:	d513      	bpl.n	8005b48 <_puts_r+0x50>
 8005b20:	6923      	ldr	r3, [r4, #16]
 8005b22:	b18b      	cbz	r3, 8005b48 <_puts_r+0x50>
 8005b24:	3e01      	subs	r6, #1
 8005b26:	68a3      	ldr	r3, [r4, #8]
 8005b28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	60a3      	str	r3, [r4, #8]
 8005b30:	b9e9      	cbnz	r1, 8005b6e <_puts_r+0x76>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	da2e      	bge.n	8005b94 <_puts_r+0x9c>
 8005b36:	4622      	mov	r2, r4
 8005b38:	210a      	movs	r1, #10
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	f000 f89b 	bl	8005c76 <__swbuf_r>
 8005b40:	3001      	adds	r0, #1
 8005b42:	d007      	beq.n	8005b54 <_puts_r+0x5c>
 8005b44:	250a      	movs	r5, #10
 8005b46:	e007      	b.n	8005b58 <_puts_r+0x60>
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f000 f8d0 	bl	8005cf0 <__swsetup_r>
 8005b50:	2800      	cmp	r0, #0
 8005b52:	d0e7      	beq.n	8005b24 <_puts_r+0x2c>
 8005b54:	f04f 35ff 	mov.w	r5, #4294967295
 8005b58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b5a:	07da      	lsls	r2, r3, #31
 8005b5c:	d405      	bmi.n	8005b6a <_puts_r+0x72>
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	059b      	lsls	r3, r3, #22
 8005b62:	d402      	bmi.n	8005b6a <_puts_r+0x72>
 8005b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b66:	f000 f999 	bl	8005e9c <__retarget_lock_release_recursive>
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	bd70      	pop	{r4, r5, r6, pc}
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	da04      	bge.n	8005b7c <_puts_r+0x84>
 8005b72:	69a2      	ldr	r2, [r4, #24]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	dc06      	bgt.n	8005b86 <_puts_r+0x8e>
 8005b78:	290a      	cmp	r1, #10
 8005b7a:	d004      	beq.n	8005b86 <_puts_r+0x8e>
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	1c5a      	adds	r2, r3, #1
 8005b80:	6022      	str	r2, [r4, #0]
 8005b82:	7019      	strb	r1, [r3, #0]
 8005b84:	e7cf      	b.n	8005b26 <_puts_r+0x2e>
 8005b86:	4622      	mov	r2, r4
 8005b88:	4628      	mov	r0, r5
 8005b8a:	f000 f874 	bl	8005c76 <__swbuf_r>
 8005b8e:	3001      	adds	r0, #1
 8005b90:	d1c9      	bne.n	8005b26 <_puts_r+0x2e>
 8005b92:	e7df      	b.n	8005b54 <_puts_r+0x5c>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	250a      	movs	r5, #10
 8005b98:	1c5a      	adds	r2, r3, #1
 8005b9a:	6022      	str	r2, [r4, #0]
 8005b9c:	701d      	strb	r5, [r3, #0]
 8005b9e:	e7db      	b.n	8005b58 <_puts_r+0x60>

08005ba0 <puts>:
 8005ba0:	4b02      	ldr	r3, [pc, #8]	; (8005bac <puts+0xc>)
 8005ba2:	4601      	mov	r1, r0
 8005ba4:	6818      	ldr	r0, [r3, #0]
 8005ba6:	f7ff bfa7 	b.w	8005af8 <_puts_r>
 8005baa:	bf00      	nop
 8005bac:	20000074 	.word	0x20000074

08005bb0 <siprintf>:
 8005bb0:	b40e      	push	{r1, r2, r3}
 8005bb2:	b500      	push	{lr}
 8005bb4:	b09c      	sub	sp, #112	; 0x70
 8005bb6:	ab1d      	add	r3, sp, #116	; 0x74
 8005bb8:	9002      	str	r0, [sp, #8]
 8005bba:	9006      	str	r0, [sp, #24]
 8005bbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bc0:	4809      	ldr	r0, [pc, #36]	; (8005be8 <siprintf+0x38>)
 8005bc2:	9107      	str	r1, [sp, #28]
 8005bc4:	9104      	str	r1, [sp, #16]
 8005bc6:	4909      	ldr	r1, [pc, #36]	; (8005bec <siprintf+0x3c>)
 8005bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bcc:	9105      	str	r1, [sp, #20]
 8005bce:	6800      	ldr	r0, [r0, #0]
 8005bd0:	9301      	str	r3, [sp, #4]
 8005bd2:	a902      	add	r1, sp, #8
 8005bd4:	f001 fcb4 	bl	8007540 <_svfiprintf_r>
 8005bd8:	9b02      	ldr	r3, [sp, #8]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	701a      	strb	r2, [r3, #0]
 8005bde:	b01c      	add	sp, #112	; 0x70
 8005be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005be4:	b003      	add	sp, #12
 8005be6:	4770      	bx	lr
 8005be8:	20000074 	.word	0x20000074
 8005bec:	ffff0208 	.word	0xffff0208

08005bf0 <__sread>:
 8005bf0:	b510      	push	{r4, lr}
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf8:	f000 f900 	bl	8005dfc <_read_r>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	bfab      	itete	ge
 8005c00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c02:	89a3      	ldrhlt	r3, [r4, #12]
 8005c04:	181b      	addge	r3, r3, r0
 8005c06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c0a:	bfac      	ite	ge
 8005c0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005c0e:	81a3      	strhlt	r3, [r4, #12]
 8005c10:	bd10      	pop	{r4, pc}

08005c12 <__swrite>:
 8005c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c16:	461f      	mov	r7, r3
 8005c18:	898b      	ldrh	r3, [r1, #12]
 8005c1a:	05db      	lsls	r3, r3, #23
 8005c1c:	4605      	mov	r5, r0
 8005c1e:	460c      	mov	r4, r1
 8005c20:	4616      	mov	r6, r2
 8005c22:	d505      	bpl.n	8005c30 <__swrite+0x1e>
 8005c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c28:	2302      	movs	r3, #2
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f000 f8d4 	bl	8005dd8 <_lseek_r>
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c3a:	81a3      	strh	r3, [r4, #12]
 8005c3c:	4632      	mov	r2, r6
 8005c3e:	463b      	mov	r3, r7
 8005c40:	4628      	mov	r0, r5
 8005c42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c46:	f000 b8eb 	b.w	8005e20 <_write_r>

08005c4a <__sseek>:
 8005c4a:	b510      	push	{r4, lr}
 8005c4c:	460c      	mov	r4, r1
 8005c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c52:	f000 f8c1 	bl	8005dd8 <_lseek_r>
 8005c56:	1c43      	adds	r3, r0, #1
 8005c58:	89a3      	ldrh	r3, [r4, #12]
 8005c5a:	bf15      	itete	ne
 8005c5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005c5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005c62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005c66:	81a3      	strheq	r3, [r4, #12]
 8005c68:	bf18      	it	ne
 8005c6a:	81a3      	strhne	r3, [r4, #12]
 8005c6c:	bd10      	pop	{r4, pc}

08005c6e <__sclose>:
 8005c6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c72:	f000 b8a1 	b.w	8005db8 <_close_r>

08005c76 <__swbuf_r>:
 8005c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c78:	460e      	mov	r6, r1
 8005c7a:	4614      	mov	r4, r2
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	b118      	cbz	r0, 8005c88 <__swbuf_r+0x12>
 8005c80:	6a03      	ldr	r3, [r0, #32]
 8005c82:	b90b      	cbnz	r3, 8005c88 <__swbuf_r+0x12>
 8005c84:	f7ff fef0 	bl	8005a68 <__sinit>
 8005c88:	69a3      	ldr	r3, [r4, #24]
 8005c8a:	60a3      	str	r3, [r4, #8]
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	071a      	lsls	r2, r3, #28
 8005c90:	d525      	bpl.n	8005cde <__swbuf_r+0x68>
 8005c92:	6923      	ldr	r3, [r4, #16]
 8005c94:	b31b      	cbz	r3, 8005cde <__swbuf_r+0x68>
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	6922      	ldr	r2, [r4, #16]
 8005c9a:	1a98      	subs	r0, r3, r2
 8005c9c:	6963      	ldr	r3, [r4, #20]
 8005c9e:	b2f6      	uxtb	r6, r6
 8005ca0:	4283      	cmp	r3, r0
 8005ca2:	4637      	mov	r7, r6
 8005ca4:	dc04      	bgt.n	8005cb0 <__swbuf_r+0x3a>
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f001 ff11 	bl	8007ad0 <_fflush_r>
 8005cae:	b9e0      	cbnz	r0, 8005cea <__swbuf_r+0x74>
 8005cb0:	68a3      	ldr	r3, [r4, #8]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	60a3      	str	r3, [r4, #8]
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	6022      	str	r2, [r4, #0]
 8005cbc:	701e      	strb	r6, [r3, #0]
 8005cbe:	6962      	ldr	r2, [r4, #20]
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d004      	beq.n	8005cd0 <__swbuf_r+0x5a>
 8005cc6:	89a3      	ldrh	r3, [r4, #12]
 8005cc8:	07db      	lsls	r3, r3, #31
 8005cca:	d506      	bpl.n	8005cda <__swbuf_r+0x64>
 8005ccc:	2e0a      	cmp	r6, #10
 8005cce:	d104      	bne.n	8005cda <__swbuf_r+0x64>
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	f001 fefc 	bl	8007ad0 <_fflush_r>
 8005cd8:	b938      	cbnz	r0, 8005cea <__swbuf_r+0x74>
 8005cda:	4638      	mov	r0, r7
 8005cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cde:	4621      	mov	r1, r4
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	f000 f805 	bl	8005cf0 <__swsetup_r>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d0d5      	beq.n	8005c96 <__swbuf_r+0x20>
 8005cea:	f04f 37ff 	mov.w	r7, #4294967295
 8005cee:	e7f4      	b.n	8005cda <__swbuf_r+0x64>

08005cf0 <__swsetup_r>:
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	4b2a      	ldr	r3, [pc, #168]	; (8005d9c <__swsetup_r+0xac>)
 8005cf4:	4605      	mov	r5, r0
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	460c      	mov	r4, r1
 8005cfa:	b118      	cbz	r0, 8005d04 <__swsetup_r+0x14>
 8005cfc:	6a03      	ldr	r3, [r0, #32]
 8005cfe:	b90b      	cbnz	r3, 8005d04 <__swsetup_r+0x14>
 8005d00:	f7ff feb2 	bl	8005a68 <__sinit>
 8005d04:	89a3      	ldrh	r3, [r4, #12]
 8005d06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d0a:	0718      	lsls	r0, r3, #28
 8005d0c:	d422      	bmi.n	8005d54 <__swsetup_r+0x64>
 8005d0e:	06d9      	lsls	r1, r3, #27
 8005d10:	d407      	bmi.n	8005d22 <__swsetup_r+0x32>
 8005d12:	2309      	movs	r3, #9
 8005d14:	602b      	str	r3, [r5, #0]
 8005d16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d1a:	81a3      	strh	r3, [r4, #12]
 8005d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d20:	e034      	b.n	8005d8c <__swsetup_r+0x9c>
 8005d22:	0758      	lsls	r0, r3, #29
 8005d24:	d512      	bpl.n	8005d4c <__swsetup_r+0x5c>
 8005d26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d28:	b141      	cbz	r1, 8005d3c <__swsetup_r+0x4c>
 8005d2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d2e:	4299      	cmp	r1, r3
 8005d30:	d002      	beq.n	8005d38 <__swsetup_r+0x48>
 8005d32:	4628      	mov	r0, r5
 8005d34:	f000 ff2e 	bl	8006b94 <_free_r>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	6363      	str	r3, [r4, #52]	; 0x34
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005d42:	81a3      	strh	r3, [r4, #12]
 8005d44:	2300      	movs	r3, #0
 8005d46:	6063      	str	r3, [r4, #4]
 8005d48:	6923      	ldr	r3, [r4, #16]
 8005d4a:	6023      	str	r3, [r4, #0]
 8005d4c:	89a3      	ldrh	r3, [r4, #12]
 8005d4e:	f043 0308 	orr.w	r3, r3, #8
 8005d52:	81a3      	strh	r3, [r4, #12]
 8005d54:	6923      	ldr	r3, [r4, #16]
 8005d56:	b94b      	cbnz	r3, 8005d6c <__swsetup_r+0x7c>
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d62:	d003      	beq.n	8005d6c <__swsetup_r+0x7c>
 8005d64:	4621      	mov	r1, r4
 8005d66:	4628      	mov	r0, r5
 8005d68:	f001 ff00 	bl	8007b6c <__smakebuf_r>
 8005d6c:	89a0      	ldrh	r0, [r4, #12]
 8005d6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d72:	f010 0301 	ands.w	r3, r0, #1
 8005d76:	d00a      	beq.n	8005d8e <__swsetup_r+0x9e>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60a3      	str	r3, [r4, #8]
 8005d7c:	6963      	ldr	r3, [r4, #20]
 8005d7e:	425b      	negs	r3, r3
 8005d80:	61a3      	str	r3, [r4, #24]
 8005d82:	6923      	ldr	r3, [r4, #16]
 8005d84:	b943      	cbnz	r3, 8005d98 <__swsetup_r+0xa8>
 8005d86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d8a:	d1c4      	bne.n	8005d16 <__swsetup_r+0x26>
 8005d8c:	bd38      	pop	{r3, r4, r5, pc}
 8005d8e:	0781      	lsls	r1, r0, #30
 8005d90:	bf58      	it	pl
 8005d92:	6963      	ldrpl	r3, [r4, #20]
 8005d94:	60a3      	str	r3, [r4, #8]
 8005d96:	e7f4      	b.n	8005d82 <__swsetup_r+0x92>
 8005d98:	2000      	movs	r0, #0
 8005d9a:	e7f7      	b.n	8005d8c <__swsetup_r+0x9c>
 8005d9c:	20000074 	.word	0x20000074

08005da0 <memset>:
 8005da0:	4402      	add	r2, r0
 8005da2:	4603      	mov	r3, r0
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d100      	bne.n	8005daa <memset+0xa>
 8005da8:	4770      	bx	lr
 8005daa:	f803 1b01 	strb.w	r1, [r3], #1
 8005dae:	e7f9      	b.n	8005da4 <memset+0x4>

08005db0 <_localeconv_r>:
 8005db0:	4800      	ldr	r0, [pc, #0]	; (8005db4 <_localeconv_r+0x4>)
 8005db2:	4770      	bx	lr
 8005db4:	20000168 	.word	0x20000168

08005db8 <_close_r>:
 8005db8:	b538      	push	{r3, r4, r5, lr}
 8005dba:	4d06      	ldr	r5, [pc, #24]	; (8005dd4 <_close_r+0x1c>)
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	602b      	str	r3, [r5, #0]
 8005dc4:	f7fe ff92 	bl	8004cec <_close>
 8005dc8:	1c43      	adds	r3, r0, #1
 8005dca:	d102      	bne.n	8005dd2 <_close_r+0x1a>
 8005dcc:	682b      	ldr	r3, [r5, #0]
 8005dce:	b103      	cbz	r3, 8005dd2 <_close_r+0x1a>
 8005dd0:	6023      	str	r3, [r4, #0]
 8005dd2:	bd38      	pop	{r3, r4, r5, pc}
 8005dd4:	200004c4 	.word	0x200004c4

08005dd8 <_lseek_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4d07      	ldr	r5, [pc, #28]	; (8005df8 <_lseek_r+0x20>)
 8005ddc:	4604      	mov	r4, r0
 8005dde:	4608      	mov	r0, r1
 8005de0:	4611      	mov	r1, r2
 8005de2:	2200      	movs	r2, #0
 8005de4:	602a      	str	r2, [r5, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	f7fe ff3d 	bl	8004c66 <_lseek>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d102      	bne.n	8005df6 <_lseek_r+0x1e>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	b103      	cbz	r3, 8005df6 <_lseek_r+0x1e>
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	200004c4 	.word	0x200004c4

08005dfc <_read_r>:
 8005dfc:	b538      	push	{r3, r4, r5, lr}
 8005dfe:	4d07      	ldr	r5, [pc, #28]	; (8005e1c <_read_r+0x20>)
 8005e00:	4604      	mov	r4, r0
 8005e02:	4608      	mov	r0, r1
 8005e04:	4611      	mov	r1, r2
 8005e06:	2200      	movs	r2, #0
 8005e08:	602a      	str	r2, [r5, #0]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f7fe fed3 	bl	8004bb6 <_read>
 8005e10:	1c43      	adds	r3, r0, #1
 8005e12:	d102      	bne.n	8005e1a <_read_r+0x1e>
 8005e14:	682b      	ldr	r3, [r5, #0]
 8005e16:	b103      	cbz	r3, 8005e1a <_read_r+0x1e>
 8005e18:	6023      	str	r3, [r4, #0]
 8005e1a:	bd38      	pop	{r3, r4, r5, pc}
 8005e1c:	200004c4 	.word	0x200004c4

08005e20 <_write_r>:
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	4d07      	ldr	r5, [pc, #28]	; (8005e40 <_write_r+0x20>)
 8005e24:	4604      	mov	r4, r0
 8005e26:	4608      	mov	r0, r1
 8005e28:	4611      	mov	r1, r2
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	602a      	str	r2, [r5, #0]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f7fe ff2b 	bl	8004c8a <_write>
 8005e34:	1c43      	adds	r3, r0, #1
 8005e36:	d102      	bne.n	8005e3e <_write_r+0x1e>
 8005e38:	682b      	ldr	r3, [r5, #0]
 8005e3a:	b103      	cbz	r3, 8005e3e <_write_r+0x1e>
 8005e3c:	6023      	str	r3, [r4, #0]
 8005e3e:	bd38      	pop	{r3, r4, r5, pc}
 8005e40:	200004c4 	.word	0x200004c4

08005e44 <__errno>:
 8005e44:	4b01      	ldr	r3, [pc, #4]	; (8005e4c <__errno+0x8>)
 8005e46:	6818      	ldr	r0, [r3, #0]
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	20000074 	.word	0x20000074

08005e50 <__libc_init_array>:
 8005e50:	b570      	push	{r4, r5, r6, lr}
 8005e52:	4d0d      	ldr	r5, [pc, #52]	; (8005e88 <__libc_init_array+0x38>)
 8005e54:	4c0d      	ldr	r4, [pc, #52]	; (8005e8c <__libc_init_array+0x3c>)
 8005e56:	1b64      	subs	r4, r4, r5
 8005e58:	10a4      	asrs	r4, r4, #2
 8005e5a:	2600      	movs	r6, #0
 8005e5c:	42a6      	cmp	r6, r4
 8005e5e:	d109      	bne.n	8005e74 <__libc_init_array+0x24>
 8005e60:	4d0b      	ldr	r5, [pc, #44]	; (8005e90 <__libc_init_array+0x40>)
 8005e62:	4c0c      	ldr	r4, [pc, #48]	; (8005e94 <__libc_init_array+0x44>)
 8005e64:	f002 f80a 	bl	8007e7c <_init>
 8005e68:	1b64      	subs	r4, r4, r5
 8005e6a:	10a4      	asrs	r4, r4, #2
 8005e6c:	2600      	movs	r6, #0
 8005e6e:	42a6      	cmp	r6, r4
 8005e70:	d105      	bne.n	8005e7e <__libc_init_array+0x2e>
 8005e72:	bd70      	pop	{r4, r5, r6, pc}
 8005e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e78:	4798      	blx	r3
 8005e7a:	3601      	adds	r6, #1
 8005e7c:	e7ee      	b.n	8005e5c <__libc_init_array+0xc>
 8005e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e82:	4798      	blx	r3
 8005e84:	3601      	adds	r6, #1
 8005e86:	e7f2      	b.n	8005e6e <__libc_init_array+0x1e>
 8005e88:	080082b4 	.word	0x080082b4
 8005e8c:	080082b4 	.word	0x080082b4
 8005e90:	080082b4 	.word	0x080082b4
 8005e94:	080082b8 	.word	0x080082b8

08005e98 <__retarget_lock_init_recursive>:
 8005e98:	4770      	bx	lr

08005e9a <__retarget_lock_acquire_recursive>:
 8005e9a:	4770      	bx	lr

08005e9c <__retarget_lock_release_recursive>:
 8005e9c:	4770      	bx	lr

08005e9e <quorem>:
 8005e9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea2:	6903      	ldr	r3, [r0, #16]
 8005ea4:	690c      	ldr	r4, [r1, #16]
 8005ea6:	42a3      	cmp	r3, r4
 8005ea8:	4607      	mov	r7, r0
 8005eaa:	db7e      	blt.n	8005faa <quorem+0x10c>
 8005eac:	3c01      	subs	r4, #1
 8005eae:	f101 0814 	add.w	r8, r1, #20
 8005eb2:	f100 0514 	add.w	r5, r0, #20
 8005eb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005eba:	9301      	str	r3, [sp, #4]
 8005ebc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005ec0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ecc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ed0:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ed4:	d331      	bcc.n	8005f3a <quorem+0x9c>
 8005ed6:	f04f 0e00 	mov.w	lr, #0
 8005eda:	4640      	mov	r0, r8
 8005edc:	46ac      	mov	ip, r5
 8005ede:	46f2      	mov	sl, lr
 8005ee0:	f850 2b04 	ldr.w	r2, [r0], #4
 8005ee4:	b293      	uxth	r3, r2
 8005ee6:	fb06 e303 	mla	r3, r6, r3, lr
 8005eea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005eee:	0c1a      	lsrs	r2, r3, #16
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	ebaa 0303 	sub.w	r3, sl, r3
 8005ef6:	f8dc a000 	ldr.w	sl, [ip]
 8005efa:	fa13 f38a 	uxtah	r3, r3, sl
 8005efe:	fb06 220e 	mla	r2, r6, lr, r2
 8005f02:	9300      	str	r3, [sp, #0]
 8005f04:	9b00      	ldr	r3, [sp, #0]
 8005f06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005f0a:	b292      	uxth	r2, r2
 8005f0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005f10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f14:	f8bd 3000 	ldrh.w	r3, [sp]
 8005f18:	4581      	cmp	r9, r0
 8005f1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f1e:	f84c 3b04 	str.w	r3, [ip], #4
 8005f22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005f26:	d2db      	bcs.n	8005ee0 <quorem+0x42>
 8005f28:	f855 300b 	ldr.w	r3, [r5, fp]
 8005f2c:	b92b      	cbnz	r3, 8005f3a <quorem+0x9c>
 8005f2e:	9b01      	ldr	r3, [sp, #4]
 8005f30:	3b04      	subs	r3, #4
 8005f32:	429d      	cmp	r5, r3
 8005f34:	461a      	mov	r2, r3
 8005f36:	d32c      	bcc.n	8005f92 <quorem+0xf4>
 8005f38:	613c      	str	r4, [r7, #16]
 8005f3a:	4638      	mov	r0, r7
 8005f3c:	f001 f9a6 	bl	800728c <__mcmp>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	db22      	blt.n	8005f8a <quorem+0xec>
 8005f44:	3601      	adds	r6, #1
 8005f46:	4629      	mov	r1, r5
 8005f48:	2000      	movs	r0, #0
 8005f4a:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f4e:	f8d1 c000 	ldr.w	ip, [r1]
 8005f52:	b293      	uxth	r3, r2
 8005f54:	1ac3      	subs	r3, r0, r3
 8005f56:	0c12      	lsrs	r2, r2, #16
 8005f58:	fa13 f38c 	uxtah	r3, r3, ip
 8005f5c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005f60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f6a:	45c1      	cmp	r9, r8
 8005f6c:	f841 3b04 	str.w	r3, [r1], #4
 8005f70:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f74:	d2e9      	bcs.n	8005f4a <quorem+0xac>
 8005f76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f7e:	b922      	cbnz	r2, 8005f8a <quorem+0xec>
 8005f80:	3b04      	subs	r3, #4
 8005f82:	429d      	cmp	r5, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	d30a      	bcc.n	8005f9e <quorem+0x100>
 8005f88:	613c      	str	r4, [r7, #16]
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	b003      	add	sp, #12
 8005f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f92:	6812      	ldr	r2, [r2, #0]
 8005f94:	3b04      	subs	r3, #4
 8005f96:	2a00      	cmp	r2, #0
 8005f98:	d1ce      	bne.n	8005f38 <quorem+0x9a>
 8005f9a:	3c01      	subs	r4, #1
 8005f9c:	e7c9      	b.n	8005f32 <quorem+0x94>
 8005f9e:	6812      	ldr	r2, [r2, #0]
 8005fa0:	3b04      	subs	r3, #4
 8005fa2:	2a00      	cmp	r2, #0
 8005fa4:	d1f0      	bne.n	8005f88 <quorem+0xea>
 8005fa6:	3c01      	subs	r4, #1
 8005fa8:	e7eb      	b.n	8005f82 <quorem+0xe4>
 8005faa:	2000      	movs	r0, #0
 8005fac:	e7ee      	b.n	8005f8c <quorem+0xee>
	...

08005fb0 <_dtoa_r>:
 8005fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb4:	ed2d 8b04 	vpush	{d8-d9}
 8005fb8:	69c5      	ldr	r5, [r0, #28]
 8005fba:	b093      	sub	sp, #76	; 0x4c
 8005fbc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005fc0:	ec57 6b10 	vmov	r6, r7, d0
 8005fc4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005fc8:	9107      	str	r1, [sp, #28]
 8005fca:	4604      	mov	r4, r0
 8005fcc:	920a      	str	r2, [sp, #40]	; 0x28
 8005fce:	930d      	str	r3, [sp, #52]	; 0x34
 8005fd0:	b975      	cbnz	r5, 8005ff0 <_dtoa_r+0x40>
 8005fd2:	2010      	movs	r0, #16
 8005fd4:	f000 fe2a 	bl	8006c2c <malloc>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	61e0      	str	r0, [r4, #28]
 8005fdc:	b920      	cbnz	r0, 8005fe8 <_dtoa_r+0x38>
 8005fde:	4bae      	ldr	r3, [pc, #696]	; (8006298 <_dtoa_r+0x2e8>)
 8005fe0:	21ef      	movs	r1, #239	; 0xef
 8005fe2:	48ae      	ldr	r0, [pc, #696]	; (800629c <_dtoa_r+0x2ec>)
 8005fe4:	f001 fe58 	bl	8007c98 <__assert_func>
 8005fe8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005fec:	6005      	str	r5, [r0, #0]
 8005fee:	60c5      	str	r5, [r0, #12]
 8005ff0:	69e3      	ldr	r3, [r4, #28]
 8005ff2:	6819      	ldr	r1, [r3, #0]
 8005ff4:	b151      	cbz	r1, 800600c <_dtoa_r+0x5c>
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	604a      	str	r2, [r1, #4]
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	4093      	lsls	r3, r2
 8005ffe:	608b      	str	r3, [r1, #8]
 8006000:	4620      	mov	r0, r4
 8006002:	f000 ff07 	bl	8006e14 <_Bfree>
 8006006:	69e3      	ldr	r3, [r4, #28]
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	1e3b      	subs	r3, r7, #0
 800600e:	bfbb      	ittet	lt
 8006010:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006014:	9303      	strlt	r3, [sp, #12]
 8006016:	2300      	movge	r3, #0
 8006018:	2201      	movlt	r2, #1
 800601a:	bfac      	ite	ge
 800601c:	f8c8 3000 	strge.w	r3, [r8]
 8006020:	f8c8 2000 	strlt.w	r2, [r8]
 8006024:	4b9e      	ldr	r3, [pc, #632]	; (80062a0 <_dtoa_r+0x2f0>)
 8006026:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800602a:	ea33 0308 	bics.w	r3, r3, r8
 800602e:	d11b      	bne.n	8006068 <_dtoa_r+0xb8>
 8006030:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006032:	f242 730f 	movw	r3, #9999	; 0x270f
 8006036:	6013      	str	r3, [r2, #0]
 8006038:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800603c:	4333      	orrs	r3, r6
 800603e:	f000 8593 	beq.w	8006b68 <_dtoa_r+0xbb8>
 8006042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006044:	b963      	cbnz	r3, 8006060 <_dtoa_r+0xb0>
 8006046:	4b97      	ldr	r3, [pc, #604]	; (80062a4 <_dtoa_r+0x2f4>)
 8006048:	e027      	b.n	800609a <_dtoa_r+0xea>
 800604a:	4b97      	ldr	r3, [pc, #604]	; (80062a8 <_dtoa_r+0x2f8>)
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	3308      	adds	r3, #8
 8006050:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006052:	6013      	str	r3, [r2, #0]
 8006054:	9800      	ldr	r0, [sp, #0]
 8006056:	b013      	add	sp, #76	; 0x4c
 8006058:	ecbd 8b04 	vpop	{d8-d9}
 800605c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006060:	4b90      	ldr	r3, [pc, #576]	; (80062a4 <_dtoa_r+0x2f4>)
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	3303      	adds	r3, #3
 8006066:	e7f3      	b.n	8006050 <_dtoa_r+0xa0>
 8006068:	ed9d 7b02 	vldr	d7, [sp, #8]
 800606c:	2200      	movs	r2, #0
 800606e:	ec51 0b17 	vmov	r0, r1, d7
 8006072:	eeb0 8a47 	vmov.f32	s16, s14
 8006076:	eef0 8a67 	vmov.f32	s17, s15
 800607a:	2300      	movs	r3, #0
 800607c:	f7fa fd2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006080:	4681      	mov	r9, r0
 8006082:	b160      	cbz	r0, 800609e <_dtoa_r+0xee>
 8006084:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006086:	2301      	movs	r3, #1
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800608c:	2b00      	cmp	r3, #0
 800608e:	f000 8568 	beq.w	8006b62 <_dtoa_r+0xbb2>
 8006092:	4b86      	ldr	r3, [pc, #536]	; (80062ac <_dtoa_r+0x2fc>)
 8006094:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	3b01      	subs	r3, #1
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	e7da      	b.n	8006054 <_dtoa_r+0xa4>
 800609e:	aa10      	add	r2, sp, #64	; 0x40
 80060a0:	a911      	add	r1, sp, #68	; 0x44
 80060a2:	4620      	mov	r0, r4
 80060a4:	eeb0 0a48 	vmov.f32	s0, s16
 80060a8:	eef0 0a68 	vmov.f32	s1, s17
 80060ac:	f001 f994 	bl	80073d8 <__d2b>
 80060b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80060b4:	4682      	mov	sl, r0
 80060b6:	2d00      	cmp	r5, #0
 80060b8:	d07f      	beq.n	80061ba <_dtoa_r+0x20a>
 80060ba:	ee18 3a90 	vmov	r3, s17
 80060be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80060c6:	ec51 0b18 	vmov	r0, r1, d8
 80060ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80060ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80060d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80060d6:	4619      	mov	r1, r3
 80060d8:	2200      	movs	r2, #0
 80060da:	4b75      	ldr	r3, [pc, #468]	; (80062b0 <_dtoa_r+0x300>)
 80060dc:	f7fa f8dc 	bl	8000298 <__aeabi_dsub>
 80060e0:	a367      	add	r3, pc, #412	; (adr r3, 8006280 <_dtoa_r+0x2d0>)
 80060e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e6:	f7fa fa8f 	bl	8000608 <__aeabi_dmul>
 80060ea:	a367      	add	r3, pc, #412	; (adr r3, 8006288 <_dtoa_r+0x2d8>)
 80060ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f0:	f7fa f8d4 	bl	800029c <__adddf3>
 80060f4:	4606      	mov	r6, r0
 80060f6:	4628      	mov	r0, r5
 80060f8:	460f      	mov	r7, r1
 80060fa:	f7fa fa1b 	bl	8000534 <__aeabi_i2d>
 80060fe:	a364      	add	r3, pc, #400	; (adr r3, 8006290 <_dtoa_r+0x2e0>)
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	f7fa fa80 	bl	8000608 <__aeabi_dmul>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4630      	mov	r0, r6
 800610e:	4639      	mov	r1, r7
 8006110:	f7fa f8c4 	bl	800029c <__adddf3>
 8006114:	4606      	mov	r6, r0
 8006116:	460f      	mov	r7, r1
 8006118:	f7fa fd26 	bl	8000b68 <__aeabi_d2iz>
 800611c:	2200      	movs	r2, #0
 800611e:	4683      	mov	fp, r0
 8006120:	2300      	movs	r3, #0
 8006122:	4630      	mov	r0, r6
 8006124:	4639      	mov	r1, r7
 8006126:	f7fa fce1 	bl	8000aec <__aeabi_dcmplt>
 800612a:	b148      	cbz	r0, 8006140 <_dtoa_r+0x190>
 800612c:	4658      	mov	r0, fp
 800612e:	f7fa fa01 	bl	8000534 <__aeabi_i2d>
 8006132:	4632      	mov	r2, r6
 8006134:	463b      	mov	r3, r7
 8006136:	f7fa fccf 	bl	8000ad8 <__aeabi_dcmpeq>
 800613a:	b908      	cbnz	r0, 8006140 <_dtoa_r+0x190>
 800613c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006140:	f1bb 0f16 	cmp.w	fp, #22
 8006144:	d857      	bhi.n	80061f6 <_dtoa_r+0x246>
 8006146:	4b5b      	ldr	r3, [pc, #364]	; (80062b4 <_dtoa_r+0x304>)
 8006148:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	ec51 0b18 	vmov	r0, r1, d8
 8006154:	f7fa fcca 	bl	8000aec <__aeabi_dcmplt>
 8006158:	2800      	cmp	r0, #0
 800615a:	d04e      	beq.n	80061fa <_dtoa_r+0x24a>
 800615c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006160:	2300      	movs	r3, #0
 8006162:	930c      	str	r3, [sp, #48]	; 0x30
 8006164:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006166:	1b5b      	subs	r3, r3, r5
 8006168:	1e5a      	subs	r2, r3, #1
 800616a:	bf45      	ittet	mi
 800616c:	f1c3 0301 	rsbmi	r3, r3, #1
 8006170:	9305      	strmi	r3, [sp, #20]
 8006172:	2300      	movpl	r3, #0
 8006174:	2300      	movmi	r3, #0
 8006176:	9206      	str	r2, [sp, #24]
 8006178:	bf54      	ite	pl
 800617a:	9305      	strpl	r3, [sp, #20]
 800617c:	9306      	strmi	r3, [sp, #24]
 800617e:	f1bb 0f00 	cmp.w	fp, #0
 8006182:	db3c      	blt.n	80061fe <_dtoa_r+0x24e>
 8006184:	9b06      	ldr	r3, [sp, #24]
 8006186:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800618a:	445b      	add	r3, fp
 800618c:	9306      	str	r3, [sp, #24]
 800618e:	2300      	movs	r3, #0
 8006190:	9308      	str	r3, [sp, #32]
 8006192:	9b07      	ldr	r3, [sp, #28]
 8006194:	2b09      	cmp	r3, #9
 8006196:	d868      	bhi.n	800626a <_dtoa_r+0x2ba>
 8006198:	2b05      	cmp	r3, #5
 800619a:	bfc4      	itt	gt
 800619c:	3b04      	subgt	r3, #4
 800619e:	9307      	strgt	r3, [sp, #28]
 80061a0:	9b07      	ldr	r3, [sp, #28]
 80061a2:	f1a3 0302 	sub.w	r3, r3, #2
 80061a6:	bfcc      	ite	gt
 80061a8:	2500      	movgt	r5, #0
 80061aa:	2501      	movle	r5, #1
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	f200 8085 	bhi.w	80062bc <_dtoa_r+0x30c>
 80061b2:	e8df f003 	tbb	[pc, r3]
 80061b6:	3b2e      	.short	0x3b2e
 80061b8:	5839      	.short	0x5839
 80061ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80061be:	441d      	add	r5, r3
 80061c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80061c4:	2b20      	cmp	r3, #32
 80061c6:	bfc1      	itttt	gt
 80061c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80061cc:	fa08 f803 	lslgt.w	r8, r8, r3
 80061d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80061d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80061d8:	bfd6      	itet	le
 80061da:	f1c3 0320 	rsble	r3, r3, #32
 80061de:	ea48 0003 	orrgt.w	r0, r8, r3
 80061e2:	fa06 f003 	lslle.w	r0, r6, r3
 80061e6:	f7fa f995 	bl	8000514 <__aeabi_ui2d>
 80061ea:	2201      	movs	r2, #1
 80061ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80061f0:	3d01      	subs	r5, #1
 80061f2:	920e      	str	r2, [sp, #56]	; 0x38
 80061f4:	e76f      	b.n	80060d6 <_dtoa_r+0x126>
 80061f6:	2301      	movs	r3, #1
 80061f8:	e7b3      	b.n	8006162 <_dtoa_r+0x1b2>
 80061fa:	900c      	str	r0, [sp, #48]	; 0x30
 80061fc:	e7b2      	b.n	8006164 <_dtoa_r+0x1b4>
 80061fe:	9b05      	ldr	r3, [sp, #20]
 8006200:	eba3 030b 	sub.w	r3, r3, fp
 8006204:	9305      	str	r3, [sp, #20]
 8006206:	f1cb 0300 	rsb	r3, fp, #0
 800620a:	9308      	str	r3, [sp, #32]
 800620c:	2300      	movs	r3, #0
 800620e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006210:	e7bf      	b.n	8006192 <_dtoa_r+0x1e2>
 8006212:	2300      	movs	r3, #0
 8006214:	9309      	str	r3, [sp, #36]	; 0x24
 8006216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006218:	2b00      	cmp	r3, #0
 800621a:	dc52      	bgt.n	80062c2 <_dtoa_r+0x312>
 800621c:	2301      	movs	r3, #1
 800621e:	9301      	str	r3, [sp, #4]
 8006220:	9304      	str	r3, [sp, #16]
 8006222:	461a      	mov	r2, r3
 8006224:	920a      	str	r2, [sp, #40]	; 0x28
 8006226:	e00b      	b.n	8006240 <_dtoa_r+0x290>
 8006228:	2301      	movs	r3, #1
 800622a:	e7f3      	b.n	8006214 <_dtoa_r+0x264>
 800622c:	2300      	movs	r3, #0
 800622e:	9309      	str	r3, [sp, #36]	; 0x24
 8006230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006232:	445b      	add	r3, fp
 8006234:	9301      	str	r3, [sp, #4]
 8006236:	3301      	adds	r3, #1
 8006238:	2b01      	cmp	r3, #1
 800623a:	9304      	str	r3, [sp, #16]
 800623c:	bfb8      	it	lt
 800623e:	2301      	movlt	r3, #1
 8006240:	69e0      	ldr	r0, [r4, #28]
 8006242:	2100      	movs	r1, #0
 8006244:	2204      	movs	r2, #4
 8006246:	f102 0614 	add.w	r6, r2, #20
 800624a:	429e      	cmp	r6, r3
 800624c:	d93d      	bls.n	80062ca <_dtoa_r+0x31a>
 800624e:	6041      	str	r1, [r0, #4]
 8006250:	4620      	mov	r0, r4
 8006252:	f000 fd9f 	bl	8006d94 <_Balloc>
 8006256:	9000      	str	r0, [sp, #0]
 8006258:	2800      	cmp	r0, #0
 800625a:	d139      	bne.n	80062d0 <_dtoa_r+0x320>
 800625c:	4b16      	ldr	r3, [pc, #88]	; (80062b8 <_dtoa_r+0x308>)
 800625e:	4602      	mov	r2, r0
 8006260:	f240 11af 	movw	r1, #431	; 0x1af
 8006264:	e6bd      	b.n	8005fe2 <_dtoa_r+0x32>
 8006266:	2301      	movs	r3, #1
 8006268:	e7e1      	b.n	800622e <_dtoa_r+0x27e>
 800626a:	2501      	movs	r5, #1
 800626c:	2300      	movs	r3, #0
 800626e:	9307      	str	r3, [sp, #28]
 8006270:	9509      	str	r5, [sp, #36]	; 0x24
 8006272:	f04f 33ff 	mov.w	r3, #4294967295
 8006276:	9301      	str	r3, [sp, #4]
 8006278:	9304      	str	r3, [sp, #16]
 800627a:	2200      	movs	r2, #0
 800627c:	2312      	movs	r3, #18
 800627e:	e7d1      	b.n	8006224 <_dtoa_r+0x274>
 8006280:	636f4361 	.word	0x636f4361
 8006284:	3fd287a7 	.word	0x3fd287a7
 8006288:	8b60c8b3 	.word	0x8b60c8b3
 800628c:	3fc68a28 	.word	0x3fc68a28
 8006290:	509f79fb 	.word	0x509f79fb
 8006294:	3fd34413 	.word	0x3fd34413
 8006298:	08007f7f 	.word	0x08007f7f
 800629c:	08007f96 	.word	0x08007f96
 80062a0:	7ff00000 	.word	0x7ff00000
 80062a4:	08007f7b 	.word	0x08007f7b
 80062a8:	08007f72 	.word	0x08007f72
 80062ac:	08007f4f 	.word	0x08007f4f
 80062b0:	3ff80000 	.word	0x3ff80000
 80062b4:	08008080 	.word	0x08008080
 80062b8:	08007fee 	.word	0x08007fee
 80062bc:	2301      	movs	r3, #1
 80062be:	9309      	str	r3, [sp, #36]	; 0x24
 80062c0:	e7d7      	b.n	8006272 <_dtoa_r+0x2c2>
 80062c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062c4:	9301      	str	r3, [sp, #4]
 80062c6:	9304      	str	r3, [sp, #16]
 80062c8:	e7ba      	b.n	8006240 <_dtoa_r+0x290>
 80062ca:	3101      	adds	r1, #1
 80062cc:	0052      	lsls	r2, r2, #1
 80062ce:	e7ba      	b.n	8006246 <_dtoa_r+0x296>
 80062d0:	69e3      	ldr	r3, [r4, #28]
 80062d2:	9a00      	ldr	r2, [sp, #0]
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	9b04      	ldr	r3, [sp, #16]
 80062d8:	2b0e      	cmp	r3, #14
 80062da:	f200 80a8 	bhi.w	800642e <_dtoa_r+0x47e>
 80062de:	2d00      	cmp	r5, #0
 80062e0:	f000 80a5 	beq.w	800642e <_dtoa_r+0x47e>
 80062e4:	f1bb 0f00 	cmp.w	fp, #0
 80062e8:	dd38      	ble.n	800635c <_dtoa_r+0x3ac>
 80062ea:	4bc0      	ldr	r3, [pc, #768]	; (80065ec <_dtoa_r+0x63c>)
 80062ec:	f00b 020f 	and.w	r2, fp, #15
 80062f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80062f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80062fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006300:	d019      	beq.n	8006336 <_dtoa_r+0x386>
 8006302:	4bbb      	ldr	r3, [pc, #748]	; (80065f0 <_dtoa_r+0x640>)
 8006304:	ec51 0b18 	vmov	r0, r1, d8
 8006308:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800630c:	f7fa faa6 	bl	800085c <__aeabi_ddiv>
 8006310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006314:	f008 080f 	and.w	r8, r8, #15
 8006318:	2503      	movs	r5, #3
 800631a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80065f0 <_dtoa_r+0x640>
 800631e:	f1b8 0f00 	cmp.w	r8, #0
 8006322:	d10a      	bne.n	800633a <_dtoa_r+0x38a>
 8006324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006328:	4632      	mov	r2, r6
 800632a:	463b      	mov	r3, r7
 800632c:	f7fa fa96 	bl	800085c <__aeabi_ddiv>
 8006330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006334:	e02b      	b.n	800638e <_dtoa_r+0x3de>
 8006336:	2502      	movs	r5, #2
 8006338:	e7ef      	b.n	800631a <_dtoa_r+0x36a>
 800633a:	f018 0f01 	tst.w	r8, #1
 800633e:	d008      	beq.n	8006352 <_dtoa_r+0x3a2>
 8006340:	4630      	mov	r0, r6
 8006342:	4639      	mov	r1, r7
 8006344:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006348:	f7fa f95e 	bl	8000608 <__aeabi_dmul>
 800634c:	3501      	adds	r5, #1
 800634e:	4606      	mov	r6, r0
 8006350:	460f      	mov	r7, r1
 8006352:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006356:	f109 0908 	add.w	r9, r9, #8
 800635a:	e7e0      	b.n	800631e <_dtoa_r+0x36e>
 800635c:	f000 809f 	beq.w	800649e <_dtoa_r+0x4ee>
 8006360:	f1cb 0600 	rsb	r6, fp, #0
 8006364:	4ba1      	ldr	r3, [pc, #644]	; (80065ec <_dtoa_r+0x63c>)
 8006366:	4fa2      	ldr	r7, [pc, #648]	; (80065f0 <_dtoa_r+0x640>)
 8006368:	f006 020f 	and.w	r2, r6, #15
 800636c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	ec51 0b18 	vmov	r0, r1, d8
 8006378:	f7fa f946 	bl	8000608 <__aeabi_dmul>
 800637c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006380:	1136      	asrs	r6, r6, #4
 8006382:	2300      	movs	r3, #0
 8006384:	2502      	movs	r5, #2
 8006386:	2e00      	cmp	r6, #0
 8006388:	d17e      	bne.n	8006488 <_dtoa_r+0x4d8>
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1d0      	bne.n	8006330 <_dtoa_r+0x380>
 800638e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006390:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 8084 	beq.w	80064a2 <_dtoa_r+0x4f2>
 800639a:	4b96      	ldr	r3, [pc, #600]	; (80065f4 <_dtoa_r+0x644>)
 800639c:	2200      	movs	r2, #0
 800639e:	4640      	mov	r0, r8
 80063a0:	4649      	mov	r1, r9
 80063a2:	f7fa fba3 	bl	8000aec <__aeabi_dcmplt>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d07b      	beq.n	80064a2 <_dtoa_r+0x4f2>
 80063aa:	9b04      	ldr	r3, [sp, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d078      	beq.n	80064a2 <_dtoa_r+0x4f2>
 80063b0:	9b01      	ldr	r3, [sp, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	dd39      	ble.n	800642a <_dtoa_r+0x47a>
 80063b6:	4b90      	ldr	r3, [pc, #576]	; (80065f8 <_dtoa_r+0x648>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	4640      	mov	r0, r8
 80063bc:	4649      	mov	r1, r9
 80063be:	f7fa f923 	bl	8000608 <__aeabi_dmul>
 80063c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063c6:	9e01      	ldr	r6, [sp, #4]
 80063c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80063cc:	3501      	adds	r5, #1
 80063ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80063d2:	4628      	mov	r0, r5
 80063d4:	f7fa f8ae 	bl	8000534 <__aeabi_i2d>
 80063d8:	4642      	mov	r2, r8
 80063da:	464b      	mov	r3, r9
 80063dc:	f7fa f914 	bl	8000608 <__aeabi_dmul>
 80063e0:	4b86      	ldr	r3, [pc, #536]	; (80065fc <_dtoa_r+0x64c>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	f7f9 ff5a 	bl	800029c <__adddf3>
 80063e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80063ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063f0:	9303      	str	r3, [sp, #12]
 80063f2:	2e00      	cmp	r6, #0
 80063f4:	d158      	bne.n	80064a8 <_dtoa_r+0x4f8>
 80063f6:	4b82      	ldr	r3, [pc, #520]	; (8006600 <_dtoa_r+0x650>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	4640      	mov	r0, r8
 80063fc:	4649      	mov	r1, r9
 80063fe:	f7f9 ff4b 	bl	8000298 <__aeabi_dsub>
 8006402:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006406:	4680      	mov	r8, r0
 8006408:	4689      	mov	r9, r1
 800640a:	f7fa fb8d 	bl	8000b28 <__aeabi_dcmpgt>
 800640e:	2800      	cmp	r0, #0
 8006410:	f040 8296 	bne.w	8006940 <_dtoa_r+0x990>
 8006414:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006418:	4640      	mov	r0, r8
 800641a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800641e:	4649      	mov	r1, r9
 8006420:	f7fa fb64 	bl	8000aec <__aeabi_dcmplt>
 8006424:	2800      	cmp	r0, #0
 8006426:	f040 8289 	bne.w	800693c <_dtoa_r+0x98c>
 800642a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800642e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006430:	2b00      	cmp	r3, #0
 8006432:	f2c0 814e 	blt.w	80066d2 <_dtoa_r+0x722>
 8006436:	f1bb 0f0e 	cmp.w	fp, #14
 800643a:	f300 814a 	bgt.w	80066d2 <_dtoa_r+0x722>
 800643e:	4b6b      	ldr	r3, [pc, #428]	; (80065ec <_dtoa_r+0x63c>)
 8006440:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006444:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800644a:	2b00      	cmp	r3, #0
 800644c:	f280 80dc 	bge.w	8006608 <_dtoa_r+0x658>
 8006450:	9b04      	ldr	r3, [sp, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	f300 80d8 	bgt.w	8006608 <_dtoa_r+0x658>
 8006458:	f040 826f 	bne.w	800693a <_dtoa_r+0x98a>
 800645c:	4b68      	ldr	r3, [pc, #416]	; (8006600 <_dtoa_r+0x650>)
 800645e:	2200      	movs	r2, #0
 8006460:	4640      	mov	r0, r8
 8006462:	4649      	mov	r1, r9
 8006464:	f7fa f8d0 	bl	8000608 <__aeabi_dmul>
 8006468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800646c:	f7fa fb52 	bl	8000b14 <__aeabi_dcmpge>
 8006470:	9e04      	ldr	r6, [sp, #16]
 8006472:	4637      	mov	r7, r6
 8006474:	2800      	cmp	r0, #0
 8006476:	f040 8245 	bne.w	8006904 <_dtoa_r+0x954>
 800647a:	9d00      	ldr	r5, [sp, #0]
 800647c:	2331      	movs	r3, #49	; 0x31
 800647e:	f805 3b01 	strb.w	r3, [r5], #1
 8006482:	f10b 0b01 	add.w	fp, fp, #1
 8006486:	e241      	b.n	800690c <_dtoa_r+0x95c>
 8006488:	07f2      	lsls	r2, r6, #31
 800648a:	d505      	bpl.n	8006498 <_dtoa_r+0x4e8>
 800648c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006490:	f7fa f8ba 	bl	8000608 <__aeabi_dmul>
 8006494:	3501      	adds	r5, #1
 8006496:	2301      	movs	r3, #1
 8006498:	1076      	asrs	r6, r6, #1
 800649a:	3708      	adds	r7, #8
 800649c:	e773      	b.n	8006386 <_dtoa_r+0x3d6>
 800649e:	2502      	movs	r5, #2
 80064a0:	e775      	b.n	800638e <_dtoa_r+0x3de>
 80064a2:	9e04      	ldr	r6, [sp, #16]
 80064a4:	465f      	mov	r7, fp
 80064a6:	e792      	b.n	80063ce <_dtoa_r+0x41e>
 80064a8:	9900      	ldr	r1, [sp, #0]
 80064aa:	4b50      	ldr	r3, [pc, #320]	; (80065ec <_dtoa_r+0x63c>)
 80064ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064b0:	4431      	add	r1, r6
 80064b2:	9102      	str	r1, [sp, #8]
 80064b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064b6:	eeb0 9a47 	vmov.f32	s18, s14
 80064ba:	eef0 9a67 	vmov.f32	s19, s15
 80064be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80064c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80064c6:	2900      	cmp	r1, #0
 80064c8:	d044      	beq.n	8006554 <_dtoa_r+0x5a4>
 80064ca:	494e      	ldr	r1, [pc, #312]	; (8006604 <_dtoa_r+0x654>)
 80064cc:	2000      	movs	r0, #0
 80064ce:	f7fa f9c5 	bl	800085c <__aeabi_ddiv>
 80064d2:	ec53 2b19 	vmov	r2, r3, d9
 80064d6:	f7f9 fedf 	bl	8000298 <__aeabi_dsub>
 80064da:	9d00      	ldr	r5, [sp, #0]
 80064dc:	ec41 0b19 	vmov	d9, r0, r1
 80064e0:	4649      	mov	r1, r9
 80064e2:	4640      	mov	r0, r8
 80064e4:	f7fa fb40 	bl	8000b68 <__aeabi_d2iz>
 80064e8:	4606      	mov	r6, r0
 80064ea:	f7fa f823 	bl	8000534 <__aeabi_i2d>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4640      	mov	r0, r8
 80064f4:	4649      	mov	r1, r9
 80064f6:	f7f9 fecf 	bl	8000298 <__aeabi_dsub>
 80064fa:	3630      	adds	r6, #48	; 0x30
 80064fc:	f805 6b01 	strb.w	r6, [r5], #1
 8006500:	ec53 2b19 	vmov	r2, r3, d9
 8006504:	4680      	mov	r8, r0
 8006506:	4689      	mov	r9, r1
 8006508:	f7fa faf0 	bl	8000aec <__aeabi_dcmplt>
 800650c:	2800      	cmp	r0, #0
 800650e:	d164      	bne.n	80065da <_dtoa_r+0x62a>
 8006510:	4642      	mov	r2, r8
 8006512:	464b      	mov	r3, r9
 8006514:	4937      	ldr	r1, [pc, #220]	; (80065f4 <_dtoa_r+0x644>)
 8006516:	2000      	movs	r0, #0
 8006518:	f7f9 febe 	bl	8000298 <__aeabi_dsub>
 800651c:	ec53 2b19 	vmov	r2, r3, d9
 8006520:	f7fa fae4 	bl	8000aec <__aeabi_dcmplt>
 8006524:	2800      	cmp	r0, #0
 8006526:	f040 80b6 	bne.w	8006696 <_dtoa_r+0x6e6>
 800652a:	9b02      	ldr	r3, [sp, #8]
 800652c:	429d      	cmp	r5, r3
 800652e:	f43f af7c 	beq.w	800642a <_dtoa_r+0x47a>
 8006532:	4b31      	ldr	r3, [pc, #196]	; (80065f8 <_dtoa_r+0x648>)
 8006534:	ec51 0b19 	vmov	r0, r1, d9
 8006538:	2200      	movs	r2, #0
 800653a:	f7fa f865 	bl	8000608 <__aeabi_dmul>
 800653e:	4b2e      	ldr	r3, [pc, #184]	; (80065f8 <_dtoa_r+0x648>)
 8006540:	ec41 0b19 	vmov	d9, r0, r1
 8006544:	2200      	movs	r2, #0
 8006546:	4640      	mov	r0, r8
 8006548:	4649      	mov	r1, r9
 800654a:	f7fa f85d 	bl	8000608 <__aeabi_dmul>
 800654e:	4680      	mov	r8, r0
 8006550:	4689      	mov	r9, r1
 8006552:	e7c5      	b.n	80064e0 <_dtoa_r+0x530>
 8006554:	ec51 0b17 	vmov	r0, r1, d7
 8006558:	f7fa f856 	bl	8000608 <__aeabi_dmul>
 800655c:	9b02      	ldr	r3, [sp, #8]
 800655e:	9d00      	ldr	r5, [sp, #0]
 8006560:	930f      	str	r3, [sp, #60]	; 0x3c
 8006562:	ec41 0b19 	vmov	d9, r0, r1
 8006566:	4649      	mov	r1, r9
 8006568:	4640      	mov	r0, r8
 800656a:	f7fa fafd 	bl	8000b68 <__aeabi_d2iz>
 800656e:	4606      	mov	r6, r0
 8006570:	f7f9 ffe0 	bl	8000534 <__aeabi_i2d>
 8006574:	3630      	adds	r6, #48	; 0x30
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4640      	mov	r0, r8
 800657c:	4649      	mov	r1, r9
 800657e:	f7f9 fe8b 	bl	8000298 <__aeabi_dsub>
 8006582:	f805 6b01 	strb.w	r6, [r5], #1
 8006586:	9b02      	ldr	r3, [sp, #8]
 8006588:	429d      	cmp	r5, r3
 800658a:	4680      	mov	r8, r0
 800658c:	4689      	mov	r9, r1
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	d124      	bne.n	80065de <_dtoa_r+0x62e>
 8006594:	4b1b      	ldr	r3, [pc, #108]	; (8006604 <_dtoa_r+0x654>)
 8006596:	ec51 0b19 	vmov	r0, r1, d9
 800659a:	f7f9 fe7f 	bl	800029c <__adddf3>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4640      	mov	r0, r8
 80065a4:	4649      	mov	r1, r9
 80065a6:	f7fa fabf 	bl	8000b28 <__aeabi_dcmpgt>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d173      	bne.n	8006696 <_dtoa_r+0x6e6>
 80065ae:	ec53 2b19 	vmov	r2, r3, d9
 80065b2:	4914      	ldr	r1, [pc, #80]	; (8006604 <_dtoa_r+0x654>)
 80065b4:	2000      	movs	r0, #0
 80065b6:	f7f9 fe6f 	bl	8000298 <__aeabi_dsub>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	4640      	mov	r0, r8
 80065c0:	4649      	mov	r1, r9
 80065c2:	f7fa fa93 	bl	8000aec <__aeabi_dcmplt>
 80065c6:	2800      	cmp	r0, #0
 80065c8:	f43f af2f 	beq.w	800642a <_dtoa_r+0x47a>
 80065cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80065ce:	1e6b      	subs	r3, r5, #1
 80065d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80065d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80065d6:	2b30      	cmp	r3, #48	; 0x30
 80065d8:	d0f8      	beq.n	80065cc <_dtoa_r+0x61c>
 80065da:	46bb      	mov	fp, r7
 80065dc:	e04a      	b.n	8006674 <_dtoa_r+0x6c4>
 80065de:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <_dtoa_r+0x648>)
 80065e0:	f7fa f812 	bl	8000608 <__aeabi_dmul>
 80065e4:	4680      	mov	r8, r0
 80065e6:	4689      	mov	r9, r1
 80065e8:	e7bd      	b.n	8006566 <_dtoa_r+0x5b6>
 80065ea:	bf00      	nop
 80065ec:	08008080 	.word	0x08008080
 80065f0:	08008058 	.word	0x08008058
 80065f4:	3ff00000 	.word	0x3ff00000
 80065f8:	40240000 	.word	0x40240000
 80065fc:	401c0000 	.word	0x401c0000
 8006600:	40140000 	.word	0x40140000
 8006604:	3fe00000 	.word	0x3fe00000
 8006608:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800660c:	9d00      	ldr	r5, [sp, #0]
 800660e:	4642      	mov	r2, r8
 8006610:	464b      	mov	r3, r9
 8006612:	4630      	mov	r0, r6
 8006614:	4639      	mov	r1, r7
 8006616:	f7fa f921 	bl	800085c <__aeabi_ddiv>
 800661a:	f7fa faa5 	bl	8000b68 <__aeabi_d2iz>
 800661e:	9001      	str	r0, [sp, #4]
 8006620:	f7f9 ff88 	bl	8000534 <__aeabi_i2d>
 8006624:	4642      	mov	r2, r8
 8006626:	464b      	mov	r3, r9
 8006628:	f7f9 ffee 	bl	8000608 <__aeabi_dmul>
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	4630      	mov	r0, r6
 8006632:	4639      	mov	r1, r7
 8006634:	f7f9 fe30 	bl	8000298 <__aeabi_dsub>
 8006638:	9e01      	ldr	r6, [sp, #4]
 800663a:	9f04      	ldr	r7, [sp, #16]
 800663c:	3630      	adds	r6, #48	; 0x30
 800663e:	f805 6b01 	strb.w	r6, [r5], #1
 8006642:	9e00      	ldr	r6, [sp, #0]
 8006644:	1bae      	subs	r6, r5, r6
 8006646:	42b7      	cmp	r7, r6
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	d134      	bne.n	80066b8 <_dtoa_r+0x708>
 800664e:	f7f9 fe25 	bl	800029c <__adddf3>
 8006652:	4642      	mov	r2, r8
 8006654:	464b      	mov	r3, r9
 8006656:	4606      	mov	r6, r0
 8006658:	460f      	mov	r7, r1
 800665a:	f7fa fa65 	bl	8000b28 <__aeabi_dcmpgt>
 800665e:	b9c8      	cbnz	r0, 8006694 <_dtoa_r+0x6e4>
 8006660:	4642      	mov	r2, r8
 8006662:	464b      	mov	r3, r9
 8006664:	4630      	mov	r0, r6
 8006666:	4639      	mov	r1, r7
 8006668:	f7fa fa36 	bl	8000ad8 <__aeabi_dcmpeq>
 800666c:	b110      	cbz	r0, 8006674 <_dtoa_r+0x6c4>
 800666e:	9b01      	ldr	r3, [sp, #4]
 8006670:	07db      	lsls	r3, r3, #31
 8006672:	d40f      	bmi.n	8006694 <_dtoa_r+0x6e4>
 8006674:	4651      	mov	r1, sl
 8006676:	4620      	mov	r0, r4
 8006678:	f000 fbcc 	bl	8006e14 <_Bfree>
 800667c:	2300      	movs	r3, #0
 800667e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006680:	702b      	strb	r3, [r5, #0]
 8006682:	f10b 0301 	add.w	r3, fp, #1
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800668a:	2b00      	cmp	r3, #0
 800668c:	f43f ace2 	beq.w	8006054 <_dtoa_r+0xa4>
 8006690:	601d      	str	r5, [r3, #0]
 8006692:	e4df      	b.n	8006054 <_dtoa_r+0xa4>
 8006694:	465f      	mov	r7, fp
 8006696:	462b      	mov	r3, r5
 8006698:	461d      	mov	r5, r3
 800669a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800669e:	2a39      	cmp	r2, #57	; 0x39
 80066a0:	d106      	bne.n	80066b0 <_dtoa_r+0x700>
 80066a2:	9a00      	ldr	r2, [sp, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d1f7      	bne.n	8006698 <_dtoa_r+0x6e8>
 80066a8:	9900      	ldr	r1, [sp, #0]
 80066aa:	2230      	movs	r2, #48	; 0x30
 80066ac:	3701      	adds	r7, #1
 80066ae:	700a      	strb	r2, [r1, #0]
 80066b0:	781a      	ldrb	r2, [r3, #0]
 80066b2:	3201      	adds	r2, #1
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	e790      	b.n	80065da <_dtoa_r+0x62a>
 80066b8:	4ba3      	ldr	r3, [pc, #652]	; (8006948 <_dtoa_r+0x998>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	f7f9 ffa4 	bl	8000608 <__aeabi_dmul>
 80066c0:	2200      	movs	r2, #0
 80066c2:	2300      	movs	r3, #0
 80066c4:	4606      	mov	r6, r0
 80066c6:	460f      	mov	r7, r1
 80066c8:	f7fa fa06 	bl	8000ad8 <__aeabi_dcmpeq>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d09e      	beq.n	800660e <_dtoa_r+0x65e>
 80066d0:	e7d0      	b.n	8006674 <_dtoa_r+0x6c4>
 80066d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066d4:	2a00      	cmp	r2, #0
 80066d6:	f000 80ca 	beq.w	800686e <_dtoa_r+0x8be>
 80066da:	9a07      	ldr	r2, [sp, #28]
 80066dc:	2a01      	cmp	r2, #1
 80066de:	f300 80ad 	bgt.w	800683c <_dtoa_r+0x88c>
 80066e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80066e4:	2a00      	cmp	r2, #0
 80066e6:	f000 80a5 	beq.w	8006834 <_dtoa_r+0x884>
 80066ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80066ee:	9e08      	ldr	r6, [sp, #32]
 80066f0:	9d05      	ldr	r5, [sp, #20]
 80066f2:	9a05      	ldr	r2, [sp, #20]
 80066f4:	441a      	add	r2, r3
 80066f6:	9205      	str	r2, [sp, #20]
 80066f8:	9a06      	ldr	r2, [sp, #24]
 80066fa:	2101      	movs	r1, #1
 80066fc:	441a      	add	r2, r3
 80066fe:	4620      	mov	r0, r4
 8006700:	9206      	str	r2, [sp, #24]
 8006702:	f000 fc3d 	bl	8006f80 <__i2b>
 8006706:	4607      	mov	r7, r0
 8006708:	b165      	cbz	r5, 8006724 <_dtoa_r+0x774>
 800670a:	9b06      	ldr	r3, [sp, #24]
 800670c:	2b00      	cmp	r3, #0
 800670e:	dd09      	ble.n	8006724 <_dtoa_r+0x774>
 8006710:	42ab      	cmp	r3, r5
 8006712:	9a05      	ldr	r2, [sp, #20]
 8006714:	bfa8      	it	ge
 8006716:	462b      	movge	r3, r5
 8006718:	1ad2      	subs	r2, r2, r3
 800671a:	9205      	str	r2, [sp, #20]
 800671c:	9a06      	ldr	r2, [sp, #24]
 800671e:	1aed      	subs	r5, r5, r3
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	9306      	str	r3, [sp, #24]
 8006724:	9b08      	ldr	r3, [sp, #32]
 8006726:	b1f3      	cbz	r3, 8006766 <_dtoa_r+0x7b6>
 8006728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 80a3 	beq.w	8006876 <_dtoa_r+0x8c6>
 8006730:	2e00      	cmp	r6, #0
 8006732:	dd10      	ble.n	8006756 <_dtoa_r+0x7a6>
 8006734:	4639      	mov	r1, r7
 8006736:	4632      	mov	r2, r6
 8006738:	4620      	mov	r0, r4
 800673a:	f000 fce1 	bl	8007100 <__pow5mult>
 800673e:	4652      	mov	r2, sl
 8006740:	4601      	mov	r1, r0
 8006742:	4607      	mov	r7, r0
 8006744:	4620      	mov	r0, r4
 8006746:	f000 fc31 	bl	8006fac <__multiply>
 800674a:	4651      	mov	r1, sl
 800674c:	4680      	mov	r8, r0
 800674e:	4620      	mov	r0, r4
 8006750:	f000 fb60 	bl	8006e14 <_Bfree>
 8006754:	46c2      	mov	sl, r8
 8006756:	9b08      	ldr	r3, [sp, #32]
 8006758:	1b9a      	subs	r2, r3, r6
 800675a:	d004      	beq.n	8006766 <_dtoa_r+0x7b6>
 800675c:	4651      	mov	r1, sl
 800675e:	4620      	mov	r0, r4
 8006760:	f000 fcce 	bl	8007100 <__pow5mult>
 8006764:	4682      	mov	sl, r0
 8006766:	2101      	movs	r1, #1
 8006768:	4620      	mov	r0, r4
 800676a:	f000 fc09 	bl	8006f80 <__i2b>
 800676e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006770:	2b00      	cmp	r3, #0
 8006772:	4606      	mov	r6, r0
 8006774:	f340 8081 	ble.w	800687a <_dtoa_r+0x8ca>
 8006778:	461a      	mov	r2, r3
 800677a:	4601      	mov	r1, r0
 800677c:	4620      	mov	r0, r4
 800677e:	f000 fcbf 	bl	8007100 <__pow5mult>
 8006782:	9b07      	ldr	r3, [sp, #28]
 8006784:	2b01      	cmp	r3, #1
 8006786:	4606      	mov	r6, r0
 8006788:	dd7a      	ble.n	8006880 <_dtoa_r+0x8d0>
 800678a:	f04f 0800 	mov.w	r8, #0
 800678e:	6933      	ldr	r3, [r6, #16]
 8006790:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006794:	6918      	ldr	r0, [r3, #16]
 8006796:	f000 fba5 	bl	8006ee4 <__hi0bits>
 800679a:	f1c0 0020 	rsb	r0, r0, #32
 800679e:	9b06      	ldr	r3, [sp, #24]
 80067a0:	4418      	add	r0, r3
 80067a2:	f010 001f 	ands.w	r0, r0, #31
 80067a6:	f000 8094 	beq.w	80068d2 <_dtoa_r+0x922>
 80067aa:	f1c0 0320 	rsb	r3, r0, #32
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	f340 8085 	ble.w	80068be <_dtoa_r+0x90e>
 80067b4:	9b05      	ldr	r3, [sp, #20]
 80067b6:	f1c0 001c 	rsb	r0, r0, #28
 80067ba:	4403      	add	r3, r0
 80067bc:	9305      	str	r3, [sp, #20]
 80067be:	9b06      	ldr	r3, [sp, #24]
 80067c0:	4403      	add	r3, r0
 80067c2:	4405      	add	r5, r0
 80067c4:	9306      	str	r3, [sp, #24]
 80067c6:	9b05      	ldr	r3, [sp, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	dd05      	ble.n	80067d8 <_dtoa_r+0x828>
 80067cc:	4651      	mov	r1, sl
 80067ce:	461a      	mov	r2, r3
 80067d0:	4620      	mov	r0, r4
 80067d2:	f000 fcef 	bl	80071b4 <__lshift>
 80067d6:	4682      	mov	sl, r0
 80067d8:	9b06      	ldr	r3, [sp, #24]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	dd05      	ble.n	80067ea <_dtoa_r+0x83a>
 80067de:	4631      	mov	r1, r6
 80067e0:	461a      	mov	r2, r3
 80067e2:	4620      	mov	r0, r4
 80067e4:	f000 fce6 	bl	80071b4 <__lshift>
 80067e8:	4606      	mov	r6, r0
 80067ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d072      	beq.n	80068d6 <_dtoa_r+0x926>
 80067f0:	4631      	mov	r1, r6
 80067f2:	4650      	mov	r0, sl
 80067f4:	f000 fd4a 	bl	800728c <__mcmp>
 80067f8:	2800      	cmp	r0, #0
 80067fa:	da6c      	bge.n	80068d6 <_dtoa_r+0x926>
 80067fc:	2300      	movs	r3, #0
 80067fe:	4651      	mov	r1, sl
 8006800:	220a      	movs	r2, #10
 8006802:	4620      	mov	r0, r4
 8006804:	f000 fb28 	bl	8006e58 <__multadd>
 8006808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800680a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800680e:	4682      	mov	sl, r0
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 81b0 	beq.w	8006b76 <_dtoa_r+0xbc6>
 8006816:	2300      	movs	r3, #0
 8006818:	4639      	mov	r1, r7
 800681a:	220a      	movs	r2, #10
 800681c:	4620      	mov	r0, r4
 800681e:	f000 fb1b 	bl	8006e58 <__multadd>
 8006822:	9b01      	ldr	r3, [sp, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	4607      	mov	r7, r0
 8006828:	f300 8096 	bgt.w	8006958 <_dtoa_r+0x9a8>
 800682c:	9b07      	ldr	r3, [sp, #28]
 800682e:	2b02      	cmp	r3, #2
 8006830:	dc59      	bgt.n	80068e6 <_dtoa_r+0x936>
 8006832:	e091      	b.n	8006958 <_dtoa_r+0x9a8>
 8006834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006836:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800683a:	e758      	b.n	80066ee <_dtoa_r+0x73e>
 800683c:	9b04      	ldr	r3, [sp, #16]
 800683e:	1e5e      	subs	r6, r3, #1
 8006840:	9b08      	ldr	r3, [sp, #32]
 8006842:	42b3      	cmp	r3, r6
 8006844:	bfbf      	itttt	lt
 8006846:	9b08      	ldrlt	r3, [sp, #32]
 8006848:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800684a:	9608      	strlt	r6, [sp, #32]
 800684c:	1af3      	sublt	r3, r6, r3
 800684e:	bfb4      	ite	lt
 8006850:	18d2      	addlt	r2, r2, r3
 8006852:	1b9e      	subge	r6, r3, r6
 8006854:	9b04      	ldr	r3, [sp, #16]
 8006856:	bfbc      	itt	lt
 8006858:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800685a:	2600      	movlt	r6, #0
 800685c:	2b00      	cmp	r3, #0
 800685e:	bfb7      	itett	lt
 8006860:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006864:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006868:	1a9d      	sublt	r5, r3, r2
 800686a:	2300      	movlt	r3, #0
 800686c:	e741      	b.n	80066f2 <_dtoa_r+0x742>
 800686e:	9e08      	ldr	r6, [sp, #32]
 8006870:	9d05      	ldr	r5, [sp, #20]
 8006872:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006874:	e748      	b.n	8006708 <_dtoa_r+0x758>
 8006876:	9a08      	ldr	r2, [sp, #32]
 8006878:	e770      	b.n	800675c <_dtoa_r+0x7ac>
 800687a:	9b07      	ldr	r3, [sp, #28]
 800687c:	2b01      	cmp	r3, #1
 800687e:	dc19      	bgt.n	80068b4 <_dtoa_r+0x904>
 8006880:	9b02      	ldr	r3, [sp, #8]
 8006882:	b9bb      	cbnz	r3, 80068b4 <_dtoa_r+0x904>
 8006884:	9b03      	ldr	r3, [sp, #12]
 8006886:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800688a:	b99b      	cbnz	r3, 80068b4 <_dtoa_r+0x904>
 800688c:	9b03      	ldr	r3, [sp, #12]
 800688e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006892:	0d1b      	lsrs	r3, r3, #20
 8006894:	051b      	lsls	r3, r3, #20
 8006896:	b183      	cbz	r3, 80068ba <_dtoa_r+0x90a>
 8006898:	9b05      	ldr	r3, [sp, #20]
 800689a:	3301      	adds	r3, #1
 800689c:	9305      	str	r3, [sp, #20]
 800689e:	9b06      	ldr	r3, [sp, #24]
 80068a0:	3301      	adds	r3, #1
 80068a2:	9306      	str	r3, [sp, #24]
 80068a4:	f04f 0801 	mov.w	r8, #1
 80068a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f47f af6f 	bne.w	800678e <_dtoa_r+0x7de>
 80068b0:	2001      	movs	r0, #1
 80068b2:	e774      	b.n	800679e <_dtoa_r+0x7ee>
 80068b4:	f04f 0800 	mov.w	r8, #0
 80068b8:	e7f6      	b.n	80068a8 <_dtoa_r+0x8f8>
 80068ba:	4698      	mov	r8, r3
 80068bc:	e7f4      	b.n	80068a8 <_dtoa_r+0x8f8>
 80068be:	d082      	beq.n	80067c6 <_dtoa_r+0x816>
 80068c0:	9a05      	ldr	r2, [sp, #20]
 80068c2:	331c      	adds	r3, #28
 80068c4:	441a      	add	r2, r3
 80068c6:	9205      	str	r2, [sp, #20]
 80068c8:	9a06      	ldr	r2, [sp, #24]
 80068ca:	441a      	add	r2, r3
 80068cc:	441d      	add	r5, r3
 80068ce:	9206      	str	r2, [sp, #24]
 80068d0:	e779      	b.n	80067c6 <_dtoa_r+0x816>
 80068d2:	4603      	mov	r3, r0
 80068d4:	e7f4      	b.n	80068c0 <_dtoa_r+0x910>
 80068d6:	9b04      	ldr	r3, [sp, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	dc37      	bgt.n	800694c <_dtoa_r+0x99c>
 80068dc:	9b07      	ldr	r3, [sp, #28]
 80068de:	2b02      	cmp	r3, #2
 80068e0:	dd34      	ble.n	800694c <_dtoa_r+0x99c>
 80068e2:	9b04      	ldr	r3, [sp, #16]
 80068e4:	9301      	str	r3, [sp, #4]
 80068e6:	9b01      	ldr	r3, [sp, #4]
 80068e8:	b963      	cbnz	r3, 8006904 <_dtoa_r+0x954>
 80068ea:	4631      	mov	r1, r6
 80068ec:	2205      	movs	r2, #5
 80068ee:	4620      	mov	r0, r4
 80068f0:	f000 fab2 	bl	8006e58 <__multadd>
 80068f4:	4601      	mov	r1, r0
 80068f6:	4606      	mov	r6, r0
 80068f8:	4650      	mov	r0, sl
 80068fa:	f000 fcc7 	bl	800728c <__mcmp>
 80068fe:	2800      	cmp	r0, #0
 8006900:	f73f adbb 	bgt.w	800647a <_dtoa_r+0x4ca>
 8006904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006906:	9d00      	ldr	r5, [sp, #0]
 8006908:	ea6f 0b03 	mvn.w	fp, r3
 800690c:	f04f 0800 	mov.w	r8, #0
 8006910:	4631      	mov	r1, r6
 8006912:	4620      	mov	r0, r4
 8006914:	f000 fa7e 	bl	8006e14 <_Bfree>
 8006918:	2f00      	cmp	r7, #0
 800691a:	f43f aeab 	beq.w	8006674 <_dtoa_r+0x6c4>
 800691e:	f1b8 0f00 	cmp.w	r8, #0
 8006922:	d005      	beq.n	8006930 <_dtoa_r+0x980>
 8006924:	45b8      	cmp	r8, r7
 8006926:	d003      	beq.n	8006930 <_dtoa_r+0x980>
 8006928:	4641      	mov	r1, r8
 800692a:	4620      	mov	r0, r4
 800692c:	f000 fa72 	bl	8006e14 <_Bfree>
 8006930:	4639      	mov	r1, r7
 8006932:	4620      	mov	r0, r4
 8006934:	f000 fa6e 	bl	8006e14 <_Bfree>
 8006938:	e69c      	b.n	8006674 <_dtoa_r+0x6c4>
 800693a:	2600      	movs	r6, #0
 800693c:	4637      	mov	r7, r6
 800693e:	e7e1      	b.n	8006904 <_dtoa_r+0x954>
 8006940:	46bb      	mov	fp, r7
 8006942:	4637      	mov	r7, r6
 8006944:	e599      	b.n	800647a <_dtoa_r+0x4ca>
 8006946:	bf00      	nop
 8006948:	40240000 	.word	0x40240000
 800694c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800694e:	2b00      	cmp	r3, #0
 8006950:	f000 80c8 	beq.w	8006ae4 <_dtoa_r+0xb34>
 8006954:	9b04      	ldr	r3, [sp, #16]
 8006956:	9301      	str	r3, [sp, #4]
 8006958:	2d00      	cmp	r5, #0
 800695a:	dd05      	ble.n	8006968 <_dtoa_r+0x9b8>
 800695c:	4639      	mov	r1, r7
 800695e:	462a      	mov	r2, r5
 8006960:	4620      	mov	r0, r4
 8006962:	f000 fc27 	bl	80071b4 <__lshift>
 8006966:	4607      	mov	r7, r0
 8006968:	f1b8 0f00 	cmp.w	r8, #0
 800696c:	d05b      	beq.n	8006a26 <_dtoa_r+0xa76>
 800696e:	6879      	ldr	r1, [r7, #4]
 8006970:	4620      	mov	r0, r4
 8006972:	f000 fa0f 	bl	8006d94 <_Balloc>
 8006976:	4605      	mov	r5, r0
 8006978:	b928      	cbnz	r0, 8006986 <_dtoa_r+0x9d6>
 800697a:	4b83      	ldr	r3, [pc, #524]	; (8006b88 <_dtoa_r+0xbd8>)
 800697c:	4602      	mov	r2, r0
 800697e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006982:	f7ff bb2e 	b.w	8005fe2 <_dtoa_r+0x32>
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	3202      	adds	r2, #2
 800698a:	0092      	lsls	r2, r2, #2
 800698c:	f107 010c 	add.w	r1, r7, #12
 8006990:	300c      	adds	r0, #12
 8006992:	f001 f973 	bl	8007c7c <memcpy>
 8006996:	2201      	movs	r2, #1
 8006998:	4629      	mov	r1, r5
 800699a:	4620      	mov	r0, r4
 800699c:	f000 fc0a 	bl	80071b4 <__lshift>
 80069a0:	9b00      	ldr	r3, [sp, #0]
 80069a2:	3301      	adds	r3, #1
 80069a4:	9304      	str	r3, [sp, #16]
 80069a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80069aa:	4413      	add	r3, r2
 80069ac:	9308      	str	r3, [sp, #32]
 80069ae:	9b02      	ldr	r3, [sp, #8]
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	46b8      	mov	r8, r7
 80069b6:	9306      	str	r3, [sp, #24]
 80069b8:	4607      	mov	r7, r0
 80069ba:	9b04      	ldr	r3, [sp, #16]
 80069bc:	4631      	mov	r1, r6
 80069be:	3b01      	subs	r3, #1
 80069c0:	4650      	mov	r0, sl
 80069c2:	9301      	str	r3, [sp, #4]
 80069c4:	f7ff fa6b 	bl	8005e9e <quorem>
 80069c8:	4641      	mov	r1, r8
 80069ca:	9002      	str	r0, [sp, #8]
 80069cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80069d0:	4650      	mov	r0, sl
 80069d2:	f000 fc5b 	bl	800728c <__mcmp>
 80069d6:	463a      	mov	r2, r7
 80069d8:	9005      	str	r0, [sp, #20]
 80069da:	4631      	mov	r1, r6
 80069dc:	4620      	mov	r0, r4
 80069de:	f000 fc71 	bl	80072c4 <__mdiff>
 80069e2:	68c2      	ldr	r2, [r0, #12]
 80069e4:	4605      	mov	r5, r0
 80069e6:	bb02      	cbnz	r2, 8006a2a <_dtoa_r+0xa7a>
 80069e8:	4601      	mov	r1, r0
 80069ea:	4650      	mov	r0, sl
 80069ec:	f000 fc4e 	bl	800728c <__mcmp>
 80069f0:	4602      	mov	r2, r0
 80069f2:	4629      	mov	r1, r5
 80069f4:	4620      	mov	r0, r4
 80069f6:	9209      	str	r2, [sp, #36]	; 0x24
 80069f8:	f000 fa0c 	bl	8006e14 <_Bfree>
 80069fc:	9b07      	ldr	r3, [sp, #28]
 80069fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a00:	9d04      	ldr	r5, [sp, #16]
 8006a02:	ea43 0102 	orr.w	r1, r3, r2
 8006a06:	9b06      	ldr	r3, [sp, #24]
 8006a08:	4319      	orrs	r1, r3
 8006a0a:	d110      	bne.n	8006a2e <_dtoa_r+0xa7e>
 8006a0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a10:	d029      	beq.n	8006a66 <_dtoa_r+0xab6>
 8006a12:	9b05      	ldr	r3, [sp, #20]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	dd02      	ble.n	8006a1e <_dtoa_r+0xa6e>
 8006a18:	9b02      	ldr	r3, [sp, #8]
 8006a1a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006a1e:	9b01      	ldr	r3, [sp, #4]
 8006a20:	f883 9000 	strb.w	r9, [r3]
 8006a24:	e774      	b.n	8006910 <_dtoa_r+0x960>
 8006a26:	4638      	mov	r0, r7
 8006a28:	e7ba      	b.n	80069a0 <_dtoa_r+0x9f0>
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	e7e1      	b.n	80069f2 <_dtoa_r+0xa42>
 8006a2e:	9b05      	ldr	r3, [sp, #20]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	db04      	blt.n	8006a3e <_dtoa_r+0xa8e>
 8006a34:	9907      	ldr	r1, [sp, #28]
 8006a36:	430b      	orrs	r3, r1
 8006a38:	9906      	ldr	r1, [sp, #24]
 8006a3a:	430b      	orrs	r3, r1
 8006a3c:	d120      	bne.n	8006a80 <_dtoa_r+0xad0>
 8006a3e:	2a00      	cmp	r2, #0
 8006a40:	dded      	ble.n	8006a1e <_dtoa_r+0xa6e>
 8006a42:	4651      	mov	r1, sl
 8006a44:	2201      	movs	r2, #1
 8006a46:	4620      	mov	r0, r4
 8006a48:	f000 fbb4 	bl	80071b4 <__lshift>
 8006a4c:	4631      	mov	r1, r6
 8006a4e:	4682      	mov	sl, r0
 8006a50:	f000 fc1c 	bl	800728c <__mcmp>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	dc03      	bgt.n	8006a60 <_dtoa_r+0xab0>
 8006a58:	d1e1      	bne.n	8006a1e <_dtoa_r+0xa6e>
 8006a5a:	f019 0f01 	tst.w	r9, #1
 8006a5e:	d0de      	beq.n	8006a1e <_dtoa_r+0xa6e>
 8006a60:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a64:	d1d8      	bne.n	8006a18 <_dtoa_r+0xa68>
 8006a66:	9a01      	ldr	r2, [sp, #4]
 8006a68:	2339      	movs	r3, #57	; 0x39
 8006a6a:	7013      	strb	r3, [r2, #0]
 8006a6c:	462b      	mov	r3, r5
 8006a6e:	461d      	mov	r5, r3
 8006a70:	3b01      	subs	r3, #1
 8006a72:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a76:	2a39      	cmp	r2, #57	; 0x39
 8006a78:	d06c      	beq.n	8006b54 <_dtoa_r+0xba4>
 8006a7a:	3201      	adds	r2, #1
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	e747      	b.n	8006910 <_dtoa_r+0x960>
 8006a80:	2a00      	cmp	r2, #0
 8006a82:	dd07      	ble.n	8006a94 <_dtoa_r+0xae4>
 8006a84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006a88:	d0ed      	beq.n	8006a66 <_dtoa_r+0xab6>
 8006a8a:	9a01      	ldr	r2, [sp, #4]
 8006a8c:	f109 0301 	add.w	r3, r9, #1
 8006a90:	7013      	strb	r3, [r2, #0]
 8006a92:	e73d      	b.n	8006910 <_dtoa_r+0x960>
 8006a94:	9b04      	ldr	r3, [sp, #16]
 8006a96:	9a08      	ldr	r2, [sp, #32]
 8006a98:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d043      	beq.n	8006b28 <_dtoa_r+0xb78>
 8006aa0:	4651      	mov	r1, sl
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	220a      	movs	r2, #10
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f000 f9d6 	bl	8006e58 <__multadd>
 8006aac:	45b8      	cmp	r8, r7
 8006aae:	4682      	mov	sl, r0
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	f04f 020a 	mov.w	r2, #10
 8006ab8:	4641      	mov	r1, r8
 8006aba:	4620      	mov	r0, r4
 8006abc:	d107      	bne.n	8006ace <_dtoa_r+0xb1e>
 8006abe:	f000 f9cb 	bl	8006e58 <__multadd>
 8006ac2:	4680      	mov	r8, r0
 8006ac4:	4607      	mov	r7, r0
 8006ac6:	9b04      	ldr	r3, [sp, #16]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	9304      	str	r3, [sp, #16]
 8006acc:	e775      	b.n	80069ba <_dtoa_r+0xa0a>
 8006ace:	f000 f9c3 	bl	8006e58 <__multadd>
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	4680      	mov	r8, r0
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	220a      	movs	r2, #10
 8006ada:	4620      	mov	r0, r4
 8006adc:	f000 f9bc 	bl	8006e58 <__multadd>
 8006ae0:	4607      	mov	r7, r0
 8006ae2:	e7f0      	b.n	8006ac6 <_dtoa_r+0xb16>
 8006ae4:	9b04      	ldr	r3, [sp, #16]
 8006ae6:	9301      	str	r3, [sp, #4]
 8006ae8:	9d00      	ldr	r5, [sp, #0]
 8006aea:	4631      	mov	r1, r6
 8006aec:	4650      	mov	r0, sl
 8006aee:	f7ff f9d6 	bl	8005e9e <quorem>
 8006af2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006af6:	9b00      	ldr	r3, [sp, #0]
 8006af8:	f805 9b01 	strb.w	r9, [r5], #1
 8006afc:	1aea      	subs	r2, r5, r3
 8006afe:	9b01      	ldr	r3, [sp, #4]
 8006b00:	4293      	cmp	r3, r2
 8006b02:	dd07      	ble.n	8006b14 <_dtoa_r+0xb64>
 8006b04:	4651      	mov	r1, sl
 8006b06:	2300      	movs	r3, #0
 8006b08:	220a      	movs	r2, #10
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f000 f9a4 	bl	8006e58 <__multadd>
 8006b10:	4682      	mov	sl, r0
 8006b12:	e7ea      	b.n	8006aea <_dtoa_r+0xb3a>
 8006b14:	9b01      	ldr	r3, [sp, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bfc8      	it	gt
 8006b1a:	461d      	movgt	r5, r3
 8006b1c:	9b00      	ldr	r3, [sp, #0]
 8006b1e:	bfd8      	it	le
 8006b20:	2501      	movle	r5, #1
 8006b22:	441d      	add	r5, r3
 8006b24:	f04f 0800 	mov.w	r8, #0
 8006b28:	4651      	mov	r1, sl
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	f000 fb41 	bl	80071b4 <__lshift>
 8006b32:	4631      	mov	r1, r6
 8006b34:	4682      	mov	sl, r0
 8006b36:	f000 fba9 	bl	800728c <__mcmp>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	dc96      	bgt.n	8006a6c <_dtoa_r+0xabc>
 8006b3e:	d102      	bne.n	8006b46 <_dtoa_r+0xb96>
 8006b40:	f019 0f01 	tst.w	r9, #1
 8006b44:	d192      	bne.n	8006a6c <_dtoa_r+0xabc>
 8006b46:	462b      	mov	r3, r5
 8006b48:	461d      	mov	r5, r3
 8006b4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b4e:	2a30      	cmp	r2, #48	; 0x30
 8006b50:	d0fa      	beq.n	8006b48 <_dtoa_r+0xb98>
 8006b52:	e6dd      	b.n	8006910 <_dtoa_r+0x960>
 8006b54:	9a00      	ldr	r2, [sp, #0]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d189      	bne.n	8006a6e <_dtoa_r+0xabe>
 8006b5a:	f10b 0b01 	add.w	fp, fp, #1
 8006b5e:	2331      	movs	r3, #49	; 0x31
 8006b60:	e796      	b.n	8006a90 <_dtoa_r+0xae0>
 8006b62:	4b0a      	ldr	r3, [pc, #40]	; (8006b8c <_dtoa_r+0xbdc>)
 8006b64:	f7ff ba99 	b.w	800609a <_dtoa_r+0xea>
 8006b68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f47f aa6d 	bne.w	800604a <_dtoa_r+0x9a>
 8006b70:	4b07      	ldr	r3, [pc, #28]	; (8006b90 <_dtoa_r+0xbe0>)
 8006b72:	f7ff ba92 	b.w	800609a <_dtoa_r+0xea>
 8006b76:	9b01      	ldr	r3, [sp, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	dcb5      	bgt.n	8006ae8 <_dtoa_r+0xb38>
 8006b7c:	9b07      	ldr	r3, [sp, #28]
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	f73f aeb1 	bgt.w	80068e6 <_dtoa_r+0x936>
 8006b84:	e7b0      	b.n	8006ae8 <_dtoa_r+0xb38>
 8006b86:	bf00      	nop
 8006b88:	08007fee 	.word	0x08007fee
 8006b8c:	08007f4e 	.word	0x08007f4e
 8006b90:	08007f72 	.word	0x08007f72

08006b94 <_free_r>:
 8006b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b96:	2900      	cmp	r1, #0
 8006b98:	d044      	beq.n	8006c24 <_free_r+0x90>
 8006b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b9e:	9001      	str	r0, [sp, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f1a1 0404 	sub.w	r4, r1, #4
 8006ba6:	bfb8      	it	lt
 8006ba8:	18e4      	addlt	r4, r4, r3
 8006baa:	f000 f8e7 	bl	8006d7c <__malloc_lock>
 8006bae:	4a1e      	ldr	r2, [pc, #120]	; (8006c28 <_free_r+0x94>)
 8006bb0:	9801      	ldr	r0, [sp, #4]
 8006bb2:	6813      	ldr	r3, [r2, #0]
 8006bb4:	b933      	cbnz	r3, 8006bc4 <_free_r+0x30>
 8006bb6:	6063      	str	r3, [r4, #4]
 8006bb8:	6014      	str	r4, [r2, #0]
 8006bba:	b003      	add	sp, #12
 8006bbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bc0:	f000 b8e2 	b.w	8006d88 <__malloc_unlock>
 8006bc4:	42a3      	cmp	r3, r4
 8006bc6:	d908      	bls.n	8006bda <_free_r+0x46>
 8006bc8:	6825      	ldr	r5, [r4, #0]
 8006bca:	1961      	adds	r1, r4, r5
 8006bcc:	428b      	cmp	r3, r1
 8006bce:	bf01      	itttt	eq
 8006bd0:	6819      	ldreq	r1, [r3, #0]
 8006bd2:	685b      	ldreq	r3, [r3, #4]
 8006bd4:	1949      	addeq	r1, r1, r5
 8006bd6:	6021      	streq	r1, [r4, #0]
 8006bd8:	e7ed      	b.n	8006bb6 <_free_r+0x22>
 8006bda:	461a      	mov	r2, r3
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	b10b      	cbz	r3, 8006be4 <_free_r+0x50>
 8006be0:	42a3      	cmp	r3, r4
 8006be2:	d9fa      	bls.n	8006bda <_free_r+0x46>
 8006be4:	6811      	ldr	r1, [r2, #0]
 8006be6:	1855      	adds	r5, r2, r1
 8006be8:	42a5      	cmp	r5, r4
 8006bea:	d10b      	bne.n	8006c04 <_free_r+0x70>
 8006bec:	6824      	ldr	r4, [r4, #0]
 8006bee:	4421      	add	r1, r4
 8006bf0:	1854      	adds	r4, r2, r1
 8006bf2:	42a3      	cmp	r3, r4
 8006bf4:	6011      	str	r1, [r2, #0]
 8006bf6:	d1e0      	bne.n	8006bba <_free_r+0x26>
 8006bf8:	681c      	ldr	r4, [r3, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	6053      	str	r3, [r2, #4]
 8006bfe:	440c      	add	r4, r1
 8006c00:	6014      	str	r4, [r2, #0]
 8006c02:	e7da      	b.n	8006bba <_free_r+0x26>
 8006c04:	d902      	bls.n	8006c0c <_free_r+0x78>
 8006c06:	230c      	movs	r3, #12
 8006c08:	6003      	str	r3, [r0, #0]
 8006c0a:	e7d6      	b.n	8006bba <_free_r+0x26>
 8006c0c:	6825      	ldr	r5, [r4, #0]
 8006c0e:	1961      	adds	r1, r4, r5
 8006c10:	428b      	cmp	r3, r1
 8006c12:	bf04      	itt	eq
 8006c14:	6819      	ldreq	r1, [r3, #0]
 8006c16:	685b      	ldreq	r3, [r3, #4]
 8006c18:	6063      	str	r3, [r4, #4]
 8006c1a:	bf04      	itt	eq
 8006c1c:	1949      	addeq	r1, r1, r5
 8006c1e:	6021      	streq	r1, [r4, #0]
 8006c20:	6054      	str	r4, [r2, #4]
 8006c22:	e7ca      	b.n	8006bba <_free_r+0x26>
 8006c24:	b003      	add	sp, #12
 8006c26:	bd30      	pop	{r4, r5, pc}
 8006c28:	200004cc 	.word	0x200004cc

08006c2c <malloc>:
 8006c2c:	4b02      	ldr	r3, [pc, #8]	; (8006c38 <malloc+0xc>)
 8006c2e:	4601      	mov	r1, r0
 8006c30:	6818      	ldr	r0, [r3, #0]
 8006c32:	f000 b823 	b.w	8006c7c <_malloc_r>
 8006c36:	bf00      	nop
 8006c38:	20000074 	.word	0x20000074

08006c3c <sbrk_aligned>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	4e0e      	ldr	r6, [pc, #56]	; (8006c78 <sbrk_aligned+0x3c>)
 8006c40:	460c      	mov	r4, r1
 8006c42:	6831      	ldr	r1, [r6, #0]
 8006c44:	4605      	mov	r5, r0
 8006c46:	b911      	cbnz	r1, 8006c4e <sbrk_aligned+0x12>
 8006c48:	f001 f808 	bl	8007c5c <_sbrk_r>
 8006c4c:	6030      	str	r0, [r6, #0]
 8006c4e:	4621      	mov	r1, r4
 8006c50:	4628      	mov	r0, r5
 8006c52:	f001 f803 	bl	8007c5c <_sbrk_r>
 8006c56:	1c43      	adds	r3, r0, #1
 8006c58:	d00a      	beq.n	8006c70 <sbrk_aligned+0x34>
 8006c5a:	1cc4      	adds	r4, r0, #3
 8006c5c:	f024 0403 	bic.w	r4, r4, #3
 8006c60:	42a0      	cmp	r0, r4
 8006c62:	d007      	beq.n	8006c74 <sbrk_aligned+0x38>
 8006c64:	1a21      	subs	r1, r4, r0
 8006c66:	4628      	mov	r0, r5
 8006c68:	f000 fff8 	bl	8007c5c <_sbrk_r>
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	d101      	bne.n	8006c74 <sbrk_aligned+0x38>
 8006c70:	f04f 34ff 	mov.w	r4, #4294967295
 8006c74:	4620      	mov	r0, r4
 8006c76:	bd70      	pop	{r4, r5, r6, pc}
 8006c78:	200004d0 	.word	0x200004d0

08006c7c <_malloc_r>:
 8006c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c80:	1ccd      	adds	r5, r1, #3
 8006c82:	f025 0503 	bic.w	r5, r5, #3
 8006c86:	3508      	adds	r5, #8
 8006c88:	2d0c      	cmp	r5, #12
 8006c8a:	bf38      	it	cc
 8006c8c:	250c      	movcc	r5, #12
 8006c8e:	2d00      	cmp	r5, #0
 8006c90:	4607      	mov	r7, r0
 8006c92:	db01      	blt.n	8006c98 <_malloc_r+0x1c>
 8006c94:	42a9      	cmp	r1, r5
 8006c96:	d905      	bls.n	8006ca4 <_malloc_r+0x28>
 8006c98:	230c      	movs	r3, #12
 8006c9a:	603b      	str	r3, [r7, #0]
 8006c9c:	2600      	movs	r6, #0
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ca4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006d78 <_malloc_r+0xfc>
 8006ca8:	f000 f868 	bl	8006d7c <__malloc_lock>
 8006cac:	f8d8 3000 	ldr.w	r3, [r8]
 8006cb0:	461c      	mov	r4, r3
 8006cb2:	bb5c      	cbnz	r4, 8006d0c <_malloc_r+0x90>
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	f7ff ffc0 	bl	8006c3c <sbrk_aligned>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	d155      	bne.n	8006d6e <_malloc_r+0xf2>
 8006cc2:	f8d8 4000 	ldr.w	r4, [r8]
 8006cc6:	4626      	mov	r6, r4
 8006cc8:	2e00      	cmp	r6, #0
 8006cca:	d145      	bne.n	8006d58 <_malloc_r+0xdc>
 8006ccc:	2c00      	cmp	r4, #0
 8006cce:	d048      	beq.n	8006d62 <_malloc_r+0xe6>
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	4631      	mov	r1, r6
 8006cd4:	4638      	mov	r0, r7
 8006cd6:	eb04 0903 	add.w	r9, r4, r3
 8006cda:	f000 ffbf 	bl	8007c5c <_sbrk_r>
 8006cde:	4581      	cmp	r9, r0
 8006ce0:	d13f      	bne.n	8006d62 <_malloc_r+0xe6>
 8006ce2:	6821      	ldr	r1, [r4, #0]
 8006ce4:	1a6d      	subs	r5, r5, r1
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	4638      	mov	r0, r7
 8006cea:	f7ff ffa7 	bl	8006c3c <sbrk_aligned>
 8006cee:	3001      	adds	r0, #1
 8006cf0:	d037      	beq.n	8006d62 <_malloc_r+0xe6>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	442b      	add	r3, r5
 8006cf6:	6023      	str	r3, [r4, #0]
 8006cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d038      	beq.n	8006d72 <_malloc_r+0xf6>
 8006d00:	685a      	ldr	r2, [r3, #4]
 8006d02:	42a2      	cmp	r2, r4
 8006d04:	d12b      	bne.n	8006d5e <_malloc_r+0xe2>
 8006d06:	2200      	movs	r2, #0
 8006d08:	605a      	str	r2, [r3, #4]
 8006d0a:	e00f      	b.n	8006d2c <_malloc_r+0xb0>
 8006d0c:	6822      	ldr	r2, [r4, #0]
 8006d0e:	1b52      	subs	r2, r2, r5
 8006d10:	d41f      	bmi.n	8006d52 <_malloc_r+0xd6>
 8006d12:	2a0b      	cmp	r2, #11
 8006d14:	d917      	bls.n	8006d46 <_malloc_r+0xca>
 8006d16:	1961      	adds	r1, r4, r5
 8006d18:	42a3      	cmp	r3, r4
 8006d1a:	6025      	str	r5, [r4, #0]
 8006d1c:	bf18      	it	ne
 8006d1e:	6059      	strne	r1, [r3, #4]
 8006d20:	6863      	ldr	r3, [r4, #4]
 8006d22:	bf08      	it	eq
 8006d24:	f8c8 1000 	streq.w	r1, [r8]
 8006d28:	5162      	str	r2, [r4, r5]
 8006d2a:	604b      	str	r3, [r1, #4]
 8006d2c:	4638      	mov	r0, r7
 8006d2e:	f104 060b 	add.w	r6, r4, #11
 8006d32:	f000 f829 	bl	8006d88 <__malloc_unlock>
 8006d36:	f026 0607 	bic.w	r6, r6, #7
 8006d3a:	1d23      	adds	r3, r4, #4
 8006d3c:	1af2      	subs	r2, r6, r3
 8006d3e:	d0ae      	beq.n	8006c9e <_malloc_r+0x22>
 8006d40:	1b9b      	subs	r3, r3, r6
 8006d42:	50a3      	str	r3, [r4, r2]
 8006d44:	e7ab      	b.n	8006c9e <_malloc_r+0x22>
 8006d46:	42a3      	cmp	r3, r4
 8006d48:	6862      	ldr	r2, [r4, #4]
 8006d4a:	d1dd      	bne.n	8006d08 <_malloc_r+0x8c>
 8006d4c:	f8c8 2000 	str.w	r2, [r8]
 8006d50:	e7ec      	b.n	8006d2c <_malloc_r+0xb0>
 8006d52:	4623      	mov	r3, r4
 8006d54:	6864      	ldr	r4, [r4, #4]
 8006d56:	e7ac      	b.n	8006cb2 <_malloc_r+0x36>
 8006d58:	4634      	mov	r4, r6
 8006d5a:	6876      	ldr	r6, [r6, #4]
 8006d5c:	e7b4      	b.n	8006cc8 <_malloc_r+0x4c>
 8006d5e:	4613      	mov	r3, r2
 8006d60:	e7cc      	b.n	8006cfc <_malloc_r+0x80>
 8006d62:	230c      	movs	r3, #12
 8006d64:	603b      	str	r3, [r7, #0]
 8006d66:	4638      	mov	r0, r7
 8006d68:	f000 f80e 	bl	8006d88 <__malloc_unlock>
 8006d6c:	e797      	b.n	8006c9e <_malloc_r+0x22>
 8006d6e:	6025      	str	r5, [r4, #0]
 8006d70:	e7dc      	b.n	8006d2c <_malloc_r+0xb0>
 8006d72:	605b      	str	r3, [r3, #4]
 8006d74:	deff      	udf	#255	; 0xff
 8006d76:	bf00      	nop
 8006d78:	200004cc 	.word	0x200004cc

08006d7c <__malloc_lock>:
 8006d7c:	4801      	ldr	r0, [pc, #4]	; (8006d84 <__malloc_lock+0x8>)
 8006d7e:	f7ff b88c 	b.w	8005e9a <__retarget_lock_acquire_recursive>
 8006d82:	bf00      	nop
 8006d84:	200004c8 	.word	0x200004c8

08006d88 <__malloc_unlock>:
 8006d88:	4801      	ldr	r0, [pc, #4]	; (8006d90 <__malloc_unlock+0x8>)
 8006d8a:	f7ff b887 	b.w	8005e9c <__retarget_lock_release_recursive>
 8006d8e:	bf00      	nop
 8006d90:	200004c8 	.word	0x200004c8

08006d94 <_Balloc>:
 8006d94:	b570      	push	{r4, r5, r6, lr}
 8006d96:	69c6      	ldr	r6, [r0, #28]
 8006d98:	4604      	mov	r4, r0
 8006d9a:	460d      	mov	r5, r1
 8006d9c:	b976      	cbnz	r6, 8006dbc <_Balloc+0x28>
 8006d9e:	2010      	movs	r0, #16
 8006da0:	f7ff ff44 	bl	8006c2c <malloc>
 8006da4:	4602      	mov	r2, r0
 8006da6:	61e0      	str	r0, [r4, #28]
 8006da8:	b920      	cbnz	r0, 8006db4 <_Balloc+0x20>
 8006daa:	4b18      	ldr	r3, [pc, #96]	; (8006e0c <_Balloc+0x78>)
 8006dac:	4818      	ldr	r0, [pc, #96]	; (8006e10 <_Balloc+0x7c>)
 8006dae:	216b      	movs	r1, #107	; 0x6b
 8006db0:	f000 ff72 	bl	8007c98 <__assert_func>
 8006db4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006db8:	6006      	str	r6, [r0, #0]
 8006dba:	60c6      	str	r6, [r0, #12]
 8006dbc:	69e6      	ldr	r6, [r4, #28]
 8006dbe:	68f3      	ldr	r3, [r6, #12]
 8006dc0:	b183      	cbz	r3, 8006de4 <_Balloc+0x50>
 8006dc2:	69e3      	ldr	r3, [r4, #28]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dca:	b9b8      	cbnz	r0, 8006dfc <_Balloc+0x68>
 8006dcc:	2101      	movs	r1, #1
 8006dce:	fa01 f605 	lsl.w	r6, r1, r5
 8006dd2:	1d72      	adds	r2, r6, #5
 8006dd4:	0092      	lsls	r2, r2, #2
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	f000 ff7c 	bl	8007cd4 <_calloc_r>
 8006ddc:	b160      	cbz	r0, 8006df8 <_Balloc+0x64>
 8006dde:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006de2:	e00e      	b.n	8006e02 <_Balloc+0x6e>
 8006de4:	2221      	movs	r2, #33	; 0x21
 8006de6:	2104      	movs	r1, #4
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 ff73 	bl	8007cd4 <_calloc_r>
 8006dee:	69e3      	ldr	r3, [r4, #28]
 8006df0:	60f0      	str	r0, [r6, #12]
 8006df2:	68db      	ldr	r3, [r3, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1e4      	bne.n	8006dc2 <_Balloc+0x2e>
 8006df8:	2000      	movs	r0, #0
 8006dfa:	bd70      	pop	{r4, r5, r6, pc}
 8006dfc:	6802      	ldr	r2, [r0, #0]
 8006dfe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e02:	2300      	movs	r3, #0
 8006e04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e08:	e7f7      	b.n	8006dfa <_Balloc+0x66>
 8006e0a:	bf00      	nop
 8006e0c:	08007f7f 	.word	0x08007f7f
 8006e10:	08007fff 	.word	0x08007fff

08006e14 <_Bfree>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	69c6      	ldr	r6, [r0, #28]
 8006e18:	4605      	mov	r5, r0
 8006e1a:	460c      	mov	r4, r1
 8006e1c:	b976      	cbnz	r6, 8006e3c <_Bfree+0x28>
 8006e1e:	2010      	movs	r0, #16
 8006e20:	f7ff ff04 	bl	8006c2c <malloc>
 8006e24:	4602      	mov	r2, r0
 8006e26:	61e8      	str	r0, [r5, #28]
 8006e28:	b920      	cbnz	r0, 8006e34 <_Bfree+0x20>
 8006e2a:	4b09      	ldr	r3, [pc, #36]	; (8006e50 <_Bfree+0x3c>)
 8006e2c:	4809      	ldr	r0, [pc, #36]	; (8006e54 <_Bfree+0x40>)
 8006e2e:	218f      	movs	r1, #143	; 0x8f
 8006e30:	f000 ff32 	bl	8007c98 <__assert_func>
 8006e34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e38:	6006      	str	r6, [r0, #0]
 8006e3a:	60c6      	str	r6, [r0, #12]
 8006e3c:	b13c      	cbz	r4, 8006e4e <_Bfree+0x3a>
 8006e3e:	69eb      	ldr	r3, [r5, #28]
 8006e40:	6862      	ldr	r2, [r4, #4]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e48:	6021      	str	r1, [r4, #0]
 8006e4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	08007f7f 	.word	0x08007f7f
 8006e54:	08007fff 	.word	0x08007fff

08006e58 <__multadd>:
 8006e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e5c:	690d      	ldr	r5, [r1, #16]
 8006e5e:	4607      	mov	r7, r0
 8006e60:	460c      	mov	r4, r1
 8006e62:	461e      	mov	r6, r3
 8006e64:	f101 0c14 	add.w	ip, r1, #20
 8006e68:	2000      	movs	r0, #0
 8006e6a:	f8dc 3000 	ldr.w	r3, [ip]
 8006e6e:	b299      	uxth	r1, r3
 8006e70:	fb02 6101 	mla	r1, r2, r1, r6
 8006e74:	0c1e      	lsrs	r6, r3, #16
 8006e76:	0c0b      	lsrs	r3, r1, #16
 8006e78:	fb02 3306 	mla	r3, r2, r6, r3
 8006e7c:	b289      	uxth	r1, r1
 8006e7e:	3001      	adds	r0, #1
 8006e80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e84:	4285      	cmp	r5, r0
 8006e86:	f84c 1b04 	str.w	r1, [ip], #4
 8006e8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e8e:	dcec      	bgt.n	8006e6a <__multadd+0x12>
 8006e90:	b30e      	cbz	r6, 8006ed6 <__multadd+0x7e>
 8006e92:	68a3      	ldr	r3, [r4, #8]
 8006e94:	42ab      	cmp	r3, r5
 8006e96:	dc19      	bgt.n	8006ecc <__multadd+0x74>
 8006e98:	6861      	ldr	r1, [r4, #4]
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	3101      	adds	r1, #1
 8006e9e:	f7ff ff79 	bl	8006d94 <_Balloc>
 8006ea2:	4680      	mov	r8, r0
 8006ea4:	b928      	cbnz	r0, 8006eb2 <__multadd+0x5a>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	4b0c      	ldr	r3, [pc, #48]	; (8006edc <__multadd+0x84>)
 8006eaa:	480d      	ldr	r0, [pc, #52]	; (8006ee0 <__multadd+0x88>)
 8006eac:	21ba      	movs	r1, #186	; 0xba
 8006eae:	f000 fef3 	bl	8007c98 <__assert_func>
 8006eb2:	6922      	ldr	r2, [r4, #16]
 8006eb4:	3202      	adds	r2, #2
 8006eb6:	f104 010c 	add.w	r1, r4, #12
 8006eba:	0092      	lsls	r2, r2, #2
 8006ebc:	300c      	adds	r0, #12
 8006ebe:	f000 fedd 	bl	8007c7c <memcpy>
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	f7ff ffa5 	bl	8006e14 <_Bfree>
 8006eca:	4644      	mov	r4, r8
 8006ecc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ed0:	3501      	adds	r5, #1
 8006ed2:	615e      	str	r6, [r3, #20]
 8006ed4:	6125      	str	r5, [r4, #16]
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006edc:	08007fee 	.word	0x08007fee
 8006ee0:	08007fff 	.word	0x08007fff

08006ee4 <__hi0bits>:
 8006ee4:	0c03      	lsrs	r3, r0, #16
 8006ee6:	041b      	lsls	r3, r3, #16
 8006ee8:	b9d3      	cbnz	r3, 8006f20 <__hi0bits+0x3c>
 8006eea:	0400      	lsls	r0, r0, #16
 8006eec:	2310      	movs	r3, #16
 8006eee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006ef2:	bf04      	itt	eq
 8006ef4:	0200      	lsleq	r0, r0, #8
 8006ef6:	3308      	addeq	r3, #8
 8006ef8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006efc:	bf04      	itt	eq
 8006efe:	0100      	lsleq	r0, r0, #4
 8006f00:	3304      	addeq	r3, #4
 8006f02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f06:	bf04      	itt	eq
 8006f08:	0080      	lsleq	r0, r0, #2
 8006f0a:	3302      	addeq	r3, #2
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	db05      	blt.n	8006f1c <__hi0bits+0x38>
 8006f10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f14:	f103 0301 	add.w	r3, r3, #1
 8006f18:	bf08      	it	eq
 8006f1a:	2320      	moveq	r3, #32
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	4770      	bx	lr
 8006f20:	2300      	movs	r3, #0
 8006f22:	e7e4      	b.n	8006eee <__hi0bits+0xa>

08006f24 <__lo0bits>:
 8006f24:	6803      	ldr	r3, [r0, #0]
 8006f26:	f013 0207 	ands.w	r2, r3, #7
 8006f2a:	d00c      	beq.n	8006f46 <__lo0bits+0x22>
 8006f2c:	07d9      	lsls	r1, r3, #31
 8006f2e:	d422      	bmi.n	8006f76 <__lo0bits+0x52>
 8006f30:	079a      	lsls	r2, r3, #30
 8006f32:	bf49      	itett	mi
 8006f34:	085b      	lsrmi	r3, r3, #1
 8006f36:	089b      	lsrpl	r3, r3, #2
 8006f38:	6003      	strmi	r3, [r0, #0]
 8006f3a:	2201      	movmi	r2, #1
 8006f3c:	bf5c      	itt	pl
 8006f3e:	6003      	strpl	r3, [r0, #0]
 8006f40:	2202      	movpl	r2, #2
 8006f42:	4610      	mov	r0, r2
 8006f44:	4770      	bx	lr
 8006f46:	b299      	uxth	r1, r3
 8006f48:	b909      	cbnz	r1, 8006f4e <__lo0bits+0x2a>
 8006f4a:	0c1b      	lsrs	r3, r3, #16
 8006f4c:	2210      	movs	r2, #16
 8006f4e:	b2d9      	uxtb	r1, r3
 8006f50:	b909      	cbnz	r1, 8006f56 <__lo0bits+0x32>
 8006f52:	3208      	adds	r2, #8
 8006f54:	0a1b      	lsrs	r3, r3, #8
 8006f56:	0719      	lsls	r1, r3, #28
 8006f58:	bf04      	itt	eq
 8006f5a:	091b      	lsreq	r3, r3, #4
 8006f5c:	3204      	addeq	r2, #4
 8006f5e:	0799      	lsls	r1, r3, #30
 8006f60:	bf04      	itt	eq
 8006f62:	089b      	lsreq	r3, r3, #2
 8006f64:	3202      	addeq	r2, #2
 8006f66:	07d9      	lsls	r1, r3, #31
 8006f68:	d403      	bmi.n	8006f72 <__lo0bits+0x4e>
 8006f6a:	085b      	lsrs	r3, r3, #1
 8006f6c:	f102 0201 	add.w	r2, r2, #1
 8006f70:	d003      	beq.n	8006f7a <__lo0bits+0x56>
 8006f72:	6003      	str	r3, [r0, #0]
 8006f74:	e7e5      	b.n	8006f42 <__lo0bits+0x1e>
 8006f76:	2200      	movs	r2, #0
 8006f78:	e7e3      	b.n	8006f42 <__lo0bits+0x1e>
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	e7e1      	b.n	8006f42 <__lo0bits+0x1e>
	...

08006f80 <__i2b>:
 8006f80:	b510      	push	{r4, lr}
 8006f82:	460c      	mov	r4, r1
 8006f84:	2101      	movs	r1, #1
 8006f86:	f7ff ff05 	bl	8006d94 <_Balloc>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	b928      	cbnz	r0, 8006f9a <__i2b+0x1a>
 8006f8e:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <__i2b+0x24>)
 8006f90:	4805      	ldr	r0, [pc, #20]	; (8006fa8 <__i2b+0x28>)
 8006f92:	f240 1145 	movw	r1, #325	; 0x145
 8006f96:	f000 fe7f 	bl	8007c98 <__assert_func>
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	6144      	str	r4, [r0, #20]
 8006f9e:	6103      	str	r3, [r0, #16]
 8006fa0:	bd10      	pop	{r4, pc}
 8006fa2:	bf00      	nop
 8006fa4:	08007fee 	.word	0x08007fee
 8006fa8:	08007fff 	.word	0x08007fff

08006fac <__multiply>:
 8006fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb0:	4691      	mov	r9, r2
 8006fb2:	690a      	ldr	r2, [r1, #16]
 8006fb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	bfb8      	it	lt
 8006fbc:	460b      	movlt	r3, r1
 8006fbe:	460c      	mov	r4, r1
 8006fc0:	bfbc      	itt	lt
 8006fc2:	464c      	movlt	r4, r9
 8006fc4:	4699      	movlt	r9, r3
 8006fc6:	6927      	ldr	r7, [r4, #16]
 8006fc8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006fcc:	68a3      	ldr	r3, [r4, #8]
 8006fce:	6861      	ldr	r1, [r4, #4]
 8006fd0:	eb07 060a 	add.w	r6, r7, sl
 8006fd4:	42b3      	cmp	r3, r6
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	bfb8      	it	lt
 8006fda:	3101      	addlt	r1, #1
 8006fdc:	f7ff feda 	bl	8006d94 <_Balloc>
 8006fe0:	b930      	cbnz	r0, 8006ff0 <__multiply+0x44>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	4b44      	ldr	r3, [pc, #272]	; (80070f8 <__multiply+0x14c>)
 8006fe6:	4845      	ldr	r0, [pc, #276]	; (80070fc <__multiply+0x150>)
 8006fe8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006fec:	f000 fe54 	bl	8007c98 <__assert_func>
 8006ff0:	f100 0514 	add.w	r5, r0, #20
 8006ff4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ff8:	462b      	mov	r3, r5
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	4543      	cmp	r3, r8
 8006ffe:	d321      	bcc.n	8007044 <__multiply+0x98>
 8007000:	f104 0314 	add.w	r3, r4, #20
 8007004:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007008:	f109 0314 	add.w	r3, r9, #20
 800700c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007010:	9202      	str	r2, [sp, #8]
 8007012:	1b3a      	subs	r2, r7, r4
 8007014:	3a15      	subs	r2, #21
 8007016:	f022 0203 	bic.w	r2, r2, #3
 800701a:	3204      	adds	r2, #4
 800701c:	f104 0115 	add.w	r1, r4, #21
 8007020:	428f      	cmp	r7, r1
 8007022:	bf38      	it	cc
 8007024:	2204      	movcc	r2, #4
 8007026:	9201      	str	r2, [sp, #4]
 8007028:	9a02      	ldr	r2, [sp, #8]
 800702a:	9303      	str	r3, [sp, #12]
 800702c:	429a      	cmp	r2, r3
 800702e:	d80c      	bhi.n	800704a <__multiply+0x9e>
 8007030:	2e00      	cmp	r6, #0
 8007032:	dd03      	ble.n	800703c <__multiply+0x90>
 8007034:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007038:	2b00      	cmp	r3, #0
 800703a:	d05b      	beq.n	80070f4 <__multiply+0x148>
 800703c:	6106      	str	r6, [r0, #16]
 800703e:	b005      	add	sp, #20
 8007040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007044:	f843 2b04 	str.w	r2, [r3], #4
 8007048:	e7d8      	b.n	8006ffc <__multiply+0x50>
 800704a:	f8b3 a000 	ldrh.w	sl, [r3]
 800704e:	f1ba 0f00 	cmp.w	sl, #0
 8007052:	d024      	beq.n	800709e <__multiply+0xf2>
 8007054:	f104 0e14 	add.w	lr, r4, #20
 8007058:	46a9      	mov	r9, r5
 800705a:	f04f 0c00 	mov.w	ip, #0
 800705e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007062:	f8d9 1000 	ldr.w	r1, [r9]
 8007066:	fa1f fb82 	uxth.w	fp, r2
 800706a:	b289      	uxth	r1, r1
 800706c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007070:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007074:	f8d9 2000 	ldr.w	r2, [r9]
 8007078:	4461      	add	r1, ip
 800707a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800707e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007082:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007086:	b289      	uxth	r1, r1
 8007088:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800708c:	4577      	cmp	r7, lr
 800708e:	f849 1b04 	str.w	r1, [r9], #4
 8007092:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007096:	d8e2      	bhi.n	800705e <__multiply+0xb2>
 8007098:	9a01      	ldr	r2, [sp, #4]
 800709a:	f845 c002 	str.w	ip, [r5, r2]
 800709e:	9a03      	ldr	r2, [sp, #12]
 80070a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80070a4:	3304      	adds	r3, #4
 80070a6:	f1b9 0f00 	cmp.w	r9, #0
 80070aa:	d021      	beq.n	80070f0 <__multiply+0x144>
 80070ac:	6829      	ldr	r1, [r5, #0]
 80070ae:	f104 0c14 	add.w	ip, r4, #20
 80070b2:	46ae      	mov	lr, r5
 80070b4:	f04f 0a00 	mov.w	sl, #0
 80070b8:	f8bc b000 	ldrh.w	fp, [ip]
 80070bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80070c0:	fb09 220b 	mla	r2, r9, fp, r2
 80070c4:	4452      	add	r2, sl
 80070c6:	b289      	uxth	r1, r1
 80070c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070cc:	f84e 1b04 	str.w	r1, [lr], #4
 80070d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80070d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070d8:	f8be 1000 	ldrh.w	r1, [lr]
 80070dc:	fb09 110a 	mla	r1, r9, sl, r1
 80070e0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80070e4:	4567      	cmp	r7, ip
 80070e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80070ea:	d8e5      	bhi.n	80070b8 <__multiply+0x10c>
 80070ec:	9a01      	ldr	r2, [sp, #4]
 80070ee:	50a9      	str	r1, [r5, r2]
 80070f0:	3504      	adds	r5, #4
 80070f2:	e799      	b.n	8007028 <__multiply+0x7c>
 80070f4:	3e01      	subs	r6, #1
 80070f6:	e79b      	b.n	8007030 <__multiply+0x84>
 80070f8:	08007fee 	.word	0x08007fee
 80070fc:	08007fff 	.word	0x08007fff

08007100 <__pow5mult>:
 8007100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007104:	4615      	mov	r5, r2
 8007106:	f012 0203 	ands.w	r2, r2, #3
 800710a:	4606      	mov	r6, r0
 800710c:	460f      	mov	r7, r1
 800710e:	d007      	beq.n	8007120 <__pow5mult+0x20>
 8007110:	4c25      	ldr	r4, [pc, #148]	; (80071a8 <__pow5mult+0xa8>)
 8007112:	3a01      	subs	r2, #1
 8007114:	2300      	movs	r3, #0
 8007116:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800711a:	f7ff fe9d 	bl	8006e58 <__multadd>
 800711e:	4607      	mov	r7, r0
 8007120:	10ad      	asrs	r5, r5, #2
 8007122:	d03d      	beq.n	80071a0 <__pow5mult+0xa0>
 8007124:	69f4      	ldr	r4, [r6, #28]
 8007126:	b97c      	cbnz	r4, 8007148 <__pow5mult+0x48>
 8007128:	2010      	movs	r0, #16
 800712a:	f7ff fd7f 	bl	8006c2c <malloc>
 800712e:	4602      	mov	r2, r0
 8007130:	61f0      	str	r0, [r6, #28]
 8007132:	b928      	cbnz	r0, 8007140 <__pow5mult+0x40>
 8007134:	4b1d      	ldr	r3, [pc, #116]	; (80071ac <__pow5mult+0xac>)
 8007136:	481e      	ldr	r0, [pc, #120]	; (80071b0 <__pow5mult+0xb0>)
 8007138:	f240 11b3 	movw	r1, #435	; 0x1b3
 800713c:	f000 fdac 	bl	8007c98 <__assert_func>
 8007140:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007144:	6004      	str	r4, [r0, #0]
 8007146:	60c4      	str	r4, [r0, #12]
 8007148:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800714c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007150:	b94c      	cbnz	r4, 8007166 <__pow5mult+0x66>
 8007152:	f240 2171 	movw	r1, #625	; 0x271
 8007156:	4630      	mov	r0, r6
 8007158:	f7ff ff12 	bl	8006f80 <__i2b>
 800715c:	2300      	movs	r3, #0
 800715e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007162:	4604      	mov	r4, r0
 8007164:	6003      	str	r3, [r0, #0]
 8007166:	f04f 0900 	mov.w	r9, #0
 800716a:	07eb      	lsls	r3, r5, #31
 800716c:	d50a      	bpl.n	8007184 <__pow5mult+0x84>
 800716e:	4639      	mov	r1, r7
 8007170:	4622      	mov	r2, r4
 8007172:	4630      	mov	r0, r6
 8007174:	f7ff ff1a 	bl	8006fac <__multiply>
 8007178:	4639      	mov	r1, r7
 800717a:	4680      	mov	r8, r0
 800717c:	4630      	mov	r0, r6
 800717e:	f7ff fe49 	bl	8006e14 <_Bfree>
 8007182:	4647      	mov	r7, r8
 8007184:	106d      	asrs	r5, r5, #1
 8007186:	d00b      	beq.n	80071a0 <__pow5mult+0xa0>
 8007188:	6820      	ldr	r0, [r4, #0]
 800718a:	b938      	cbnz	r0, 800719c <__pow5mult+0x9c>
 800718c:	4622      	mov	r2, r4
 800718e:	4621      	mov	r1, r4
 8007190:	4630      	mov	r0, r6
 8007192:	f7ff ff0b 	bl	8006fac <__multiply>
 8007196:	6020      	str	r0, [r4, #0]
 8007198:	f8c0 9000 	str.w	r9, [r0]
 800719c:	4604      	mov	r4, r0
 800719e:	e7e4      	b.n	800716a <__pow5mult+0x6a>
 80071a0:	4638      	mov	r0, r7
 80071a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071a6:	bf00      	nop
 80071a8:	08008148 	.word	0x08008148
 80071ac:	08007f7f 	.word	0x08007f7f
 80071b0:	08007fff 	.word	0x08007fff

080071b4 <__lshift>:
 80071b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b8:	460c      	mov	r4, r1
 80071ba:	6849      	ldr	r1, [r1, #4]
 80071bc:	6923      	ldr	r3, [r4, #16]
 80071be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071c2:	68a3      	ldr	r3, [r4, #8]
 80071c4:	4607      	mov	r7, r0
 80071c6:	4691      	mov	r9, r2
 80071c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071cc:	f108 0601 	add.w	r6, r8, #1
 80071d0:	42b3      	cmp	r3, r6
 80071d2:	db0b      	blt.n	80071ec <__lshift+0x38>
 80071d4:	4638      	mov	r0, r7
 80071d6:	f7ff fddd 	bl	8006d94 <_Balloc>
 80071da:	4605      	mov	r5, r0
 80071dc:	b948      	cbnz	r0, 80071f2 <__lshift+0x3e>
 80071de:	4602      	mov	r2, r0
 80071e0:	4b28      	ldr	r3, [pc, #160]	; (8007284 <__lshift+0xd0>)
 80071e2:	4829      	ldr	r0, [pc, #164]	; (8007288 <__lshift+0xd4>)
 80071e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80071e8:	f000 fd56 	bl	8007c98 <__assert_func>
 80071ec:	3101      	adds	r1, #1
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	e7ee      	b.n	80071d0 <__lshift+0x1c>
 80071f2:	2300      	movs	r3, #0
 80071f4:	f100 0114 	add.w	r1, r0, #20
 80071f8:	f100 0210 	add.w	r2, r0, #16
 80071fc:	4618      	mov	r0, r3
 80071fe:	4553      	cmp	r3, sl
 8007200:	db33      	blt.n	800726a <__lshift+0xb6>
 8007202:	6920      	ldr	r0, [r4, #16]
 8007204:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007208:	f104 0314 	add.w	r3, r4, #20
 800720c:	f019 091f 	ands.w	r9, r9, #31
 8007210:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007214:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007218:	d02b      	beq.n	8007272 <__lshift+0xbe>
 800721a:	f1c9 0e20 	rsb	lr, r9, #32
 800721e:	468a      	mov	sl, r1
 8007220:	2200      	movs	r2, #0
 8007222:	6818      	ldr	r0, [r3, #0]
 8007224:	fa00 f009 	lsl.w	r0, r0, r9
 8007228:	4310      	orrs	r0, r2
 800722a:	f84a 0b04 	str.w	r0, [sl], #4
 800722e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007232:	459c      	cmp	ip, r3
 8007234:	fa22 f20e 	lsr.w	r2, r2, lr
 8007238:	d8f3      	bhi.n	8007222 <__lshift+0x6e>
 800723a:	ebac 0304 	sub.w	r3, ip, r4
 800723e:	3b15      	subs	r3, #21
 8007240:	f023 0303 	bic.w	r3, r3, #3
 8007244:	3304      	adds	r3, #4
 8007246:	f104 0015 	add.w	r0, r4, #21
 800724a:	4584      	cmp	ip, r0
 800724c:	bf38      	it	cc
 800724e:	2304      	movcc	r3, #4
 8007250:	50ca      	str	r2, [r1, r3]
 8007252:	b10a      	cbz	r2, 8007258 <__lshift+0xa4>
 8007254:	f108 0602 	add.w	r6, r8, #2
 8007258:	3e01      	subs	r6, #1
 800725a:	4638      	mov	r0, r7
 800725c:	612e      	str	r6, [r5, #16]
 800725e:	4621      	mov	r1, r4
 8007260:	f7ff fdd8 	bl	8006e14 <_Bfree>
 8007264:	4628      	mov	r0, r5
 8007266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726a:	f842 0f04 	str.w	r0, [r2, #4]!
 800726e:	3301      	adds	r3, #1
 8007270:	e7c5      	b.n	80071fe <__lshift+0x4a>
 8007272:	3904      	subs	r1, #4
 8007274:	f853 2b04 	ldr.w	r2, [r3], #4
 8007278:	f841 2f04 	str.w	r2, [r1, #4]!
 800727c:	459c      	cmp	ip, r3
 800727e:	d8f9      	bhi.n	8007274 <__lshift+0xc0>
 8007280:	e7ea      	b.n	8007258 <__lshift+0xa4>
 8007282:	bf00      	nop
 8007284:	08007fee 	.word	0x08007fee
 8007288:	08007fff 	.word	0x08007fff

0800728c <__mcmp>:
 800728c:	b530      	push	{r4, r5, lr}
 800728e:	6902      	ldr	r2, [r0, #16]
 8007290:	690c      	ldr	r4, [r1, #16]
 8007292:	1b12      	subs	r2, r2, r4
 8007294:	d10e      	bne.n	80072b4 <__mcmp+0x28>
 8007296:	f100 0314 	add.w	r3, r0, #20
 800729a:	3114      	adds	r1, #20
 800729c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80072a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80072a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80072a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80072ac:	42a5      	cmp	r5, r4
 80072ae:	d003      	beq.n	80072b8 <__mcmp+0x2c>
 80072b0:	d305      	bcc.n	80072be <__mcmp+0x32>
 80072b2:	2201      	movs	r2, #1
 80072b4:	4610      	mov	r0, r2
 80072b6:	bd30      	pop	{r4, r5, pc}
 80072b8:	4283      	cmp	r3, r0
 80072ba:	d3f3      	bcc.n	80072a4 <__mcmp+0x18>
 80072bc:	e7fa      	b.n	80072b4 <__mcmp+0x28>
 80072be:	f04f 32ff 	mov.w	r2, #4294967295
 80072c2:	e7f7      	b.n	80072b4 <__mcmp+0x28>

080072c4 <__mdiff>:
 80072c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c8:	460c      	mov	r4, r1
 80072ca:	4606      	mov	r6, r0
 80072cc:	4611      	mov	r1, r2
 80072ce:	4620      	mov	r0, r4
 80072d0:	4690      	mov	r8, r2
 80072d2:	f7ff ffdb 	bl	800728c <__mcmp>
 80072d6:	1e05      	subs	r5, r0, #0
 80072d8:	d110      	bne.n	80072fc <__mdiff+0x38>
 80072da:	4629      	mov	r1, r5
 80072dc:	4630      	mov	r0, r6
 80072de:	f7ff fd59 	bl	8006d94 <_Balloc>
 80072e2:	b930      	cbnz	r0, 80072f2 <__mdiff+0x2e>
 80072e4:	4b3a      	ldr	r3, [pc, #232]	; (80073d0 <__mdiff+0x10c>)
 80072e6:	4602      	mov	r2, r0
 80072e8:	f240 2137 	movw	r1, #567	; 0x237
 80072ec:	4839      	ldr	r0, [pc, #228]	; (80073d4 <__mdiff+0x110>)
 80072ee:	f000 fcd3 	bl	8007c98 <__assert_func>
 80072f2:	2301      	movs	r3, #1
 80072f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80072f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072fc:	bfa4      	itt	ge
 80072fe:	4643      	movge	r3, r8
 8007300:	46a0      	movge	r8, r4
 8007302:	4630      	mov	r0, r6
 8007304:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007308:	bfa6      	itte	ge
 800730a:	461c      	movge	r4, r3
 800730c:	2500      	movge	r5, #0
 800730e:	2501      	movlt	r5, #1
 8007310:	f7ff fd40 	bl	8006d94 <_Balloc>
 8007314:	b920      	cbnz	r0, 8007320 <__mdiff+0x5c>
 8007316:	4b2e      	ldr	r3, [pc, #184]	; (80073d0 <__mdiff+0x10c>)
 8007318:	4602      	mov	r2, r0
 800731a:	f240 2145 	movw	r1, #581	; 0x245
 800731e:	e7e5      	b.n	80072ec <__mdiff+0x28>
 8007320:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007324:	6926      	ldr	r6, [r4, #16]
 8007326:	60c5      	str	r5, [r0, #12]
 8007328:	f104 0914 	add.w	r9, r4, #20
 800732c:	f108 0514 	add.w	r5, r8, #20
 8007330:	f100 0e14 	add.w	lr, r0, #20
 8007334:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007338:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800733c:	f108 0210 	add.w	r2, r8, #16
 8007340:	46f2      	mov	sl, lr
 8007342:	2100      	movs	r1, #0
 8007344:	f859 3b04 	ldr.w	r3, [r9], #4
 8007348:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800734c:	fa11 f88b 	uxtah	r8, r1, fp
 8007350:	b299      	uxth	r1, r3
 8007352:	0c1b      	lsrs	r3, r3, #16
 8007354:	eba8 0801 	sub.w	r8, r8, r1
 8007358:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800735c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007360:	fa1f f888 	uxth.w	r8, r8
 8007364:	1419      	asrs	r1, r3, #16
 8007366:	454e      	cmp	r6, r9
 8007368:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800736c:	f84a 3b04 	str.w	r3, [sl], #4
 8007370:	d8e8      	bhi.n	8007344 <__mdiff+0x80>
 8007372:	1b33      	subs	r3, r6, r4
 8007374:	3b15      	subs	r3, #21
 8007376:	f023 0303 	bic.w	r3, r3, #3
 800737a:	3304      	adds	r3, #4
 800737c:	3415      	adds	r4, #21
 800737e:	42a6      	cmp	r6, r4
 8007380:	bf38      	it	cc
 8007382:	2304      	movcc	r3, #4
 8007384:	441d      	add	r5, r3
 8007386:	4473      	add	r3, lr
 8007388:	469e      	mov	lr, r3
 800738a:	462e      	mov	r6, r5
 800738c:	4566      	cmp	r6, ip
 800738e:	d30e      	bcc.n	80073ae <__mdiff+0xea>
 8007390:	f10c 0203 	add.w	r2, ip, #3
 8007394:	1b52      	subs	r2, r2, r5
 8007396:	f022 0203 	bic.w	r2, r2, #3
 800739a:	3d03      	subs	r5, #3
 800739c:	45ac      	cmp	ip, r5
 800739e:	bf38      	it	cc
 80073a0:	2200      	movcc	r2, #0
 80073a2:	4413      	add	r3, r2
 80073a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80073a8:	b17a      	cbz	r2, 80073ca <__mdiff+0x106>
 80073aa:	6107      	str	r7, [r0, #16]
 80073ac:	e7a4      	b.n	80072f8 <__mdiff+0x34>
 80073ae:	f856 8b04 	ldr.w	r8, [r6], #4
 80073b2:	fa11 f288 	uxtah	r2, r1, r8
 80073b6:	1414      	asrs	r4, r2, #16
 80073b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80073bc:	b292      	uxth	r2, r2
 80073be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80073c2:	f84e 2b04 	str.w	r2, [lr], #4
 80073c6:	1421      	asrs	r1, r4, #16
 80073c8:	e7e0      	b.n	800738c <__mdiff+0xc8>
 80073ca:	3f01      	subs	r7, #1
 80073cc:	e7ea      	b.n	80073a4 <__mdiff+0xe0>
 80073ce:	bf00      	nop
 80073d0:	08007fee 	.word	0x08007fee
 80073d4:	08007fff 	.word	0x08007fff

080073d8 <__d2b>:
 80073d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073dc:	460f      	mov	r7, r1
 80073de:	2101      	movs	r1, #1
 80073e0:	ec59 8b10 	vmov	r8, r9, d0
 80073e4:	4616      	mov	r6, r2
 80073e6:	f7ff fcd5 	bl	8006d94 <_Balloc>
 80073ea:	4604      	mov	r4, r0
 80073ec:	b930      	cbnz	r0, 80073fc <__d2b+0x24>
 80073ee:	4602      	mov	r2, r0
 80073f0:	4b24      	ldr	r3, [pc, #144]	; (8007484 <__d2b+0xac>)
 80073f2:	4825      	ldr	r0, [pc, #148]	; (8007488 <__d2b+0xb0>)
 80073f4:	f240 310f 	movw	r1, #783	; 0x30f
 80073f8:	f000 fc4e 	bl	8007c98 <__assert_func>
 80073fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007400:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007404:	bb2d      	cbnz	r5, 8007452 <__d2b+0x7a>
 8007406:	9301      	str	r3, [sp, #4]
 8007408:	f1b8 0300 	subs.w	r3, r8, #0
 800740c:	d026      	beq.n	800745c <__d2b+0x84>
 800740e:	4668      	mov	r0, sp
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	f7ff fd87 	bl	8006f24 <__lo0bits>
 8007416:	e9dd 1200 	ldrd	r1, r2, [sp]
 800741a:	b1e8      	cbz	r0, 8007458 <__d2b+0x80>
 800741c:	f1c0 0320 	rsb	r3, r0, #32
 8007420:	fa02 f303 	lsl.w	r3, r2, r3
 8007424:	430b      	orrs	r3, r1
 8007426:	40c2      	lsrs	r2, r0
 8007428:	6163      	str	r3, [r4, #20]
 800742a:	9201      	str	r2, [sp, #4]
 800742c:	9b01      	ldr	r3, [sp, #4]
 800742e:	61a3      	str	r3, [r4, #24]
 8007430:	2b00      	cmp	r3, #0
 8007432:	bf14      	ite	ne
 8007434:	2202      	movne	r2, #2
 8007436:	2201      	moveq	r2, #1
 8007438:	6122      	str	r2, [r4, #16]
 800743a:	b1bd      	cbz	r5, 800746c <__d2b+0x94>
 800743c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007440:	4405      	add	r5, r0
 8007442:	603d      	str	r5, [r7, #0]
 8007444:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007448:	6030      	str	r0, [r6, #0]
 800744a:	4620      	mov	r0, r4
 800744c:	b003      	add	sp, #12
 800744e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007452:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007456:	e7d6      	b.n	8007406 <__d2b+0x2e>
 8007458:	6161      	str	r1, [r4, #20]
 800745a:	e7e7      	b.n	800742c <__d2b+0x54>
 800745c:	a801      	add	r0, sp, #4
 800745e:	f7ff fd61 	bl	8006f24 <__lo0bits>
 8007462:	9b01      	ldr	r3, [sp, #4]
 8007464:	6163      	str	r3, [r4, #20]
 8007466:	3020      	adds	r0, #32
 8007468:	2201      	movs	r2, #1
 800746a:	e7e5      	b.n	8007438 <__d2b+0x60>
 800746c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007470:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007474:	6038      	str	r0, [r7, #0]
 8007476:	6918      	ldr	r0, [r3, #16]
 8007478:	f7ff fd34 	bl	8006ee4 <__hi0bits>
 800747c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007480:	e7e2      	b.n	8007448 <__d2b+0x70>
 8007482:	bf00      	nop
 8007484:	08007fee 	.word	0x08007fee
 8007488:	08007fff 	.word	0x08007fff

0800748c <__ssputs_r>:
 800748c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007490:	688e      	ldr	r6, [r1, #8]
 8007492:	461f      	mov	r7, r3
 8007494:	42be      	cmp	r6, r7
 8007496:	680b      	ldr	r3, [r1, #0]
 8007498:	4682      	mov	sl, r0
 800749a:	460c      	mov	r4, r1
 800749c:	4690      	mov	r8, r2
 800749e:	d82c      	bhi.n	80074fa <__ssputs_r+0x6e>
 80074a0:	898a      	ldrh	r2, [r1, #12]
 80074a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074a6:	d026      	beq.n	80074f6 <__ssputs_r+0x6a>
 80074a8:	6965      	ldr	r5, [r4, #20]
 80074aa:	6909      	ldr	r1, [r1, #16]
 80074ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074b0:	eba3 0901 	sub.w	r9, r3, r1
 80074b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074b8:	1c7b      	adds	r3, r7, #1
 80074ba:	444b      	add	r3, r9
 80074bc:	106d      	asrs	r5, r5, #1
 80074be:	429d      	cmp	r5, r3
 80074c0:	bf38      	it	cc
 80074c2:	461d      	movcc	r5, r3
 80074c4:	0553      	lsls	r3, r2, #21
 80074c6:	d527      	bpl.n	8007518 <__ssputs_r+0x8c>
 80074c8:	4629      	mov	r1, r5
 80074ca:	f7ff fbd7 	bl	8006c7c <_malloc_r>
 80074ce:	4606      	mov	r6, r0
 80074d0:	b360      	cbz	r0, 800752c <__ssputs_r+0xa0>
 80074d2:	6921      	ldr	r1, [r4, #16]
 80074d4:	464a      	mov	r2, r9
 80074d6:	f000 fbd1 	bl	8007c7c <memcpy>
 80074da:	89a3      	ldrh	r3, [r4, #12]
 80074dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074e4:	81a3      	strh	r3, [r4, #12]
 80074e6:	6126      	str	r6, [r4, #16]
 80074e8:	6165      	str	r5, [r4, #20]
 80074ea:	444e      	add	r6, r9
 80074ec:	eba5 0509 	sub.w	r5, r5, r9
 80074f0:	6026      	str	r6, [r4, #0]
 80074f2:	60a5      	str	r5, [r4, #8]
 80074f4:	463e      	mov	r6, r7
 80074f6:	42be      	cmp	r6, r7
 80074f8:	d900      	bls.n	80074fc <__ssputs_r+0x70>
 80074fa:	463e      	mov	r6, r7
 80074fc:	6820      	ldr	r0, [r4, #0]
 80074fe:	4632      	mov	r2, r6
 8007500:	4641      	mov	r1, r8
 8007502:	f000 fb6f 	bl	8007be4 <memmove>
 8007506:	68a3      	ldr	r3, [r4, #8]
 8007508:	1b9b      	subs	r3, r3, r6
 800750a:	60a3      	str	r3, [r4, #8]
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	4433      	add	r3, r6
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	2000      	movs	r0, #0
 8007514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007518:	462a      	mov	r2, r5
 800751a:	f000 fc03 	bl	8007d24 <_realloc_r>
 800751e:	4606      	mov	r6, r0
 8007520:	2800      	cmp	r0, #0
 8007522:	d1e0      	bne.n	80074e6 <__ssputs_r+0x5a>
 8007524:	6921      	ldr	r1, [r4, #16]
 8007526:	4650      	mov	r0, sl
 8007528:	f7ff fb34 	bl	8006b94 <_free_r>
 800752c:	230c      	movs	r3, #12
 800752e:	f8ca 3000 	str.w	r3, [sl]
 8007532:	89a3      	ldrh	r3, [r4, #12]
 8007534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	f04f 30ff 	mov.w	r0, #4294967295
 800753e:	e7e9      	b.n	8007514 <__ssputs_r+0x88>

08007540 <_svfiprintf_r>:
 8007540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007544:	4698      	mov	r8, r3
 8007546:	898b      	ldrh	r3, [r1, #12]
 8007548:	061b      	lsls	r3, r3, #24
 800754a:	b09d      	sub	sp, #116	; 0x74
 800754c:	4607      	mov	r7, r0
 800754e:	460d      	mov	r5, r1
 8007550:	4614      	mov	r4, r2
 8007552:	d50e      	bpl.n	8007572 <_svfiprintf_r+0x32>
 8007554:	690b      	ldr	r3, [r1, #16]
 8007556:	b963      	cbnz	r3, 8007572 <_svfiprintf_r+0x32>
 8007558:	2140      	movs	r1, #64	; 0x40
 800755a:	f7ff fb8f 	bl	8006c7c <_malloc_r>
 800755e:	6028      	str	r0, [r5, #0]
 8007560:	6128      	str	r0, [r5, #16]
 8007562:	b920      	cbnz	r0, 800756e <_svfiprintf_r+0x2e>
 8007564:	230c      	movs	r3, #12
 8007566:	603b      	str	r3, [r7, #0]
 8007568:	f04f 30ff 	mov.w	r0, #4294967295
 800756c:	e0d0      	b.n	8007710 <_svfiprintf_r+0x1d0>
 800756e:	2340      	movs	r3, #64	; 0x40
 8007570:	616b      	str	r3, [r5, #20]
 8007572:	2300      	movs	r3, #0
 8007574:	9309      	str	r3, [sp, #36]	; 0x24
 8007576:	2320      	movs	r3, #32
 8007578:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800757c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007580:	2330      	movs	r3, #48	; 0x30
 8007582:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007728 <_svfiprintf_r+0x1e8>
 8007586:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800758a:	f04f 0901 	mov.w	r9, #1
 800758e:	4623      	mov	r3, r4
 8007590:	469a      	mov	sl, r3
 8007592:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007596:	b10a      	cbz	r2, 800759c <_svfiprintf_r+0x5c>
 8007598:	2a25      	cmp	r2, #37	; 0x25
 800759a:	d1f9      	bne.n	8007590 <_svfiprintf_r+0x50>
 800759c:	ebba 0b04 	subs.w	fp, sl, r4
 80075a0:	d00b      	beq.n	80075ba <_svfiprintf_r+0x7a>
 80075a2:	465b      	mov	r3, fp
 80075a4:	4622      	mov	r2, r4
 80075a6:	4629      	mov	r1, r5
 80075a8:	4638      	mov	r0, r7
 80075aa:	f7ff ff6f 	bl	800748c <__ssputs_r>
 80075ae:	3001      	adds	r0, #1
 80075b0:	f000 80a9 	beq.w	8007706 <_svfiprintf_r+0x1c6>
 80075b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075b6:	445a      	add	r2, fp
 80075b8:	9209      	str	r2, [sp, #36]	; 0x24
 80075ba:	f89a 3000 	ldrb.w	r3, [sl]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f000 80a1 	beq.w	8007706 <_svfiprintf_r+0x1c6>
 80075c4:	2300      	movs	r3, #0
 80075c6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075ce:	f10a 0a01 	add.w	sl, sl, #1
 80075d2:	9304      	str	r3, [sp, #16]
 80075d4:	9307      	str	r3, [sp, #28]
 80075d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075da:	931a      	str	r3, [sp, #104]	; 0x68
 80075dc:	4654      	mov	r4, sl
 80075de:	2205      	movs	r2, #5
 80075e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075e4:	4850      	ldr	r0, [pc, #320]	; (8007728 <_svfiprintf_r+0x1e8>)
 80075e6:	f7f8 fdfb 	bl	80001e0 <memchr>
 80075ea:	9a04      	ldr	r2, [sp, #16]
 80075ec:	b9d8      	cbnz	r0, 8007626 <_svfiprintf_r+0xe6>
 80075ee:	06d0      	lsls	r0, r2, #27
 80075f0:	bf44      	itt	mi
 80075f2:	2320      	movmi	r3, #32
 80075f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075f8:	0711      	lsls	r1, r2, #28
 80075fa:	bf44      	itt	mi
 80075fc:	232b      	movmi	r3, #43	; 0x2b
 80075fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007602:	f89a 3000 	ldrb.w	r3, [sl]
 8007606:	2b2a      	cmp	r3, #42	; 0x2a
 8007608:	d015      	beq.n	8007636 <_svfiprintf_r+0xf6>
 800760a:	9a07      	ldr	r2, [sp, #28]
 800760c:	4654      	mov	r4, sl
 800760e:	2000      	movs	r0, #0
 8007610:	f04f 0c0a 	mov.w	ip, #10
 8007614:	4621      	mov	r1, r4
 8007616:	f811 3b01 	ldrb.w	r3, [r1], #1
 800761a:	3b30      	subs	r3, #48	; 0x30
 800761c:	2b09      	cmp	r3, #9
 800761e:	d94d      	bls.n	80076bc <_svfiprintf_r+0x17c>
 8007620:	b1b0      	cbz	r0, 8007650 <_svfiprintf_r+0x110>
 8007622:	9207      	str	r2, [sp, #28]
 8007624:	e014      	b.n	8007650 <_svfiprintf_r+0x110>
 8007626:	eba0 0308 	sub.w	r3, r0, r8
 800762a:	fa09 f303 	lsl.w	r3, r9, r3
 800762e:	4313      	orrs	r3, r2
 8007630:	9304      	str	r3, [sp, #16]
 8007632:	46a2      	mov	sl, r4
 8007634:	e7d2      	b.n	80075dc <_svfiprintf_r+0x9c>
 8007636:	9b03      	ldr	r3, [sp, #12]
 8007638:	1d19      	adds	r1, r3, #4
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	9103      	str	r1, [sp, #12]
 800763e:	2b00      	cmp	r3, #0
 8007640:	bfbb      	ittet	lt
 8007642:	425b      	neglt	r3, r3
 8007644:	f042 0202 	orrlt.w	r2, r2, #2
 8007648:	9307      	strge	r3, [sp, #28]
 800764a:	9307      	strlt	r3, [sp, #28]
 800764c:	bfb8      	it	lt
 800764e:	9204      	strlt	r2, [sp, #16]
 8007650:	7823      	ldrb	r3, [r4, #0]
 8007652:	2b2e      	cmp	r3, #46	; 0x2e
 8007654:	d10c      	bne.n	8007670 <_svfiprintf_r+0x130>
 8007656:	7863      	ldrb	r3, [r4, #1]
 8007658:	2b2a      	cmp	r3, #42	; 0x2a
 800765a:	d134      	bne.n	80076c6 <_svfiprintf_r+0x186>
 800765c:	9b03      	ldr	r3, [sp, #12]
 800765e:	1d1a      	adds	r2, r3, #4
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	9203      	str	r2, [sp, #12]
 8007664:	2b00      	cmp	r3, #0
 8007666:	bfb8      	it	lt
 8007668:	f04f 33ff 	movlt.w	r3, #4294967295
 800766c:	3402      	adds	r4, #2
 800766e:	9305      	str	r3, [sp, #20]
 8007670:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007738 <_svfiprintf_r+0x1f8>
 8007674:	7821      	ldrb	r1, [r4, #0]
 8007676:	2203      	movs	r2, #3
 8007678:	4650      	mov	r0, sl
 800767a:	f7f8 fdb1 	bl	80001e0 <memchr>
 800767e:	b138      	cbz	r0, 8007690 <_svfiprintf_r+0x150>
 8007680:	9b04      	ldr	r3, [sp, #16]
 8007682:	eba0 000a 	sub.w	r0, r0, sl
 8007686:	2240      	movs	r2, #64	; 0x40
 8007688:	4082      	lsls	r2, r0
 800768a:	4313      	orrs	r3, r2
 800768c:	3401      	adds	r4, #1
 800768e:	9304      	str	r3, [sp, #16]
 8007690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007694:	4825      	ldr	r0, [pc, #148]	; (800772c <_svfiprintf_r+0x1ec>)
 8007696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800769a:	2206      	movs	r2, #6
 800769c:	f7f8 fda0 	bl	80001e0 <memchr>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d038      	beq.n	8007716 <_svfiprintf_r+0x1d6>
 80076a4:	4b22      	ldr	r3, [pc, #136]	; (8007730 <_svfiprintf_r+0x1f0>)
 80076a6:	bb1b      	cbnz	r3, 80076f0 <_svfiprintf_r+0x1b0>
 80076a8:	9b03      	ldr	r3, [sp, #12]
 80076aa:	3307      	adds	r3, #7
 80076ac:	f023 0307 	bic.w	r3, r3, #7
 80076b0:	3308      	adds	r3, #8
 80076b2:	9303      	str	r3, [sp, #12]
 80076b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b6:	4433      	add	r3, r6
 80076b8:	9309      	str	r3, [sp, #36]	; 0x24
 80076ba:	e768      	b.n	800758e <_svfiprintf_r+0x4e>
 80076bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80076c0:	460c      	mov	r4, r1
 80076c2:	2001      	movs	r0, #1
 80076c4:	e7a6      	b.n	8007614 <_svfiprintf_r+0xd4>
 80076c6:	2300      	movs	r3, #0
 80076c8:	3401      	adds	r4, #1
 80076ca:	9305      	str	r3, [sp, #20]
 80076cc:	4619      	mov	r1, r3
 80076ce:	f04f 0c0a 	mov.w	ip, #10
 80076d2:	4620      	mov	r0, r4
 80076d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076d8:	3a30      	subs	r2, #48	; 0x30
 80076da:	2a09      	cmp	r2, #9
 80076dc:	d903      	bls.n	80076e6 <_svfiprintf_r+0x1a6>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0c6      	beq.n	8007670 <_svfiprintf_r+0x130>
 80076e2:	9105      	str	r1, [sp, #20]
 80076e4:	e7c4      	b.n	8007670 <_svfiprintf_r+0x130>
 80076e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80076ea:	4604      	mov	r4, r0
 80076ec:	2301      	movs	r3, #1
 80076ee:	e7f0      	b.n	80076d2 <_svfiprintf_r+0x192>
 80076f0:	ab03      	add	r3, sp, #12
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	462a      	mov	r2, r5
 80076f6:	4b0f      	ldr	r3, [pc, #60]	; (8007734 <_svfiprintf_r+0x1f4>)
 80076f8:	a904      	add	r1, sp, #16
 80076fa:	4638      	mov	r0, r7
 80076fc:	f7fd fd62 	bl	80051c4 <_printf_float>
 8007700:	1c42      	adds	r2, r0, #1
 8007702:	4606      	mov	r6, r0
 8007704:	d1d6      	bne.n	80076b4 <_svfiprintf_r+0x174>
 8007706:	89ab      	ldrh	r3, [r5, #12]
 8007708:	065b      	lsls	r3, r3, #25
 800770a:	f53f af2d 	bmi.w	8007568 <_svfiprintf_r+0x28>
 800770e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007710:	b01d      	add	sp, #116	; 0x74
 8007712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007716:	ab03      	add	r3, sp, #12
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	462a      	mov	r2, r5
 800771c:	4b05      	ldr	r3, [pc, #20]	; (8007734 <_svfiprintf_r+0x1f4>)
 800771e:	a904      	add	r1, sp, #16
 8007720:	4638      	mov	r0, r7
 8007722:	f7fd fff3 	bl	800570c <_printf_i>
 8007726:	e7eb      	b.n	8007700 <_svfiprintf_r+0x1c0>
 8007728:	08008154 	.word	0x08008154
 800772c:	0800815e 	.word	0x0800815e
 8007730:	080051c5 	.word	0x080051c5
 8007734:	0800748d 	.word	0x0800748d
 8007738:	0800815a 	.word	0x0800815a

0800773c <__sfputc_r>:
 800773c:	6893      	ldr	r3, [r2, #8]
 800773e:	3b01      	subs	r3, #1
 8007740:	2b00      	cmp	r3, #0
 8007742:	b410      	push	{r4}
 8007744:	6093      	str	r3, [r2, #8]
 8007746:	da08      	bge.n	800775a <__sfputc_r+0x1e>
 8007748:	6994      	ldr	r4, [r2, #24]
 800774a:	42a3      	cmp	r3, r4
 800774c:	db01      	blt.n	8007752 <__sfputc_r+0x16>
 800774e:	290a      	cmp	r1, #10
 8007750:	d103      	bne.n	800775a <__sfputc_r+0x1e>
 8007752:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007756:	f7fe ba8e 	b.w	8005c76 <__swbuf_r>
 800775a:	6813      	ldr	r3, [r2, #0]
 800775c:	1c58      	adds	r0, r3, #1
 800775e:	6010      	str	r0, [r2, #0]
 8007760:	7019      	strb	r1, [r3, #0]
 8007762:	4608      	mov	r0, r1
 8007764:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007768:	4770      	bx	lr

0800776a <__sfputs_r>:
 800776a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776c:	4606      	mov	r6, r0
 800776e:	460f      	mov	r7, r1
 8007770:	4614      	mov	r4, r2
 8007772:	18d5      	adds	r5, r2, r3
 8007774:	42ac      	cmp	r4, r5
 8007776:	d101      	bne.n	800777c <__sfputs_r+0x12>
 8007778:	2000      	movs	r0, #0
 800777a:	e007      	b.n	800778c <__sfputs_r+0x22>
 800777c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007780:	463a      	mov	r2, r7
 8007782:	4630      	mov	r0, r6
 8007784:	f7ff ffda 	bl	800773c <__sfputc_r>
 8007788:	1c43      	adds	r3, r0, #1
 800778a:	d1f3      	bne.n	8007774 <__sfputs_r+0xa>
 800778c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007790 <_vfiprintf_r>:
 8007790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007794:	460d      	mov	r5, r1
 8007796:	b09d      	sub	sp, #116	; 0x74
 8007798:	4614      	mov	r4, r2
 800779a:	4698      	mov	r8, r3
 800779c:	4606      	mov	r6, r0
 800779e:	b118      	cbz	r0, 80077a8 <_vfiprintf_r+0x18>
 80077a0:	6a03      	ldr	r3, [r0, #32]
 80077a2:	b90b      	cbnz	r3, 80077a8 <_vfiprintf_r+0x18>
 80077a4:	f7fe f960 	bl	8005a68 <__sinit>
 80077a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077aa:	07d9      	lsls	r1, r3, #31
 80077ac:	d405      	bmi.n	80077ba <_vfiprintf_r+0x2a>
 80077ae:	89ab      	ldrh	r3, [r5, #12]
 80077b0:	059a      	lsls	r2, r3, #22
 80077b2:	d402      	bmi.n	80077ba <_vfiprintf_r+0x2a>
 80077b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077b6:	f7fe fb70 	bl	8005e9a <__retarget_lock_acquire_recursive>
 80077ba:	89ab      	ldrh	r3, [r5, #12]
 80077bc:	071b      	lsls	r3, r3, #28
 80077be:	d501      	bpl.n	80077c4 <_vfiprintf_r+0x34>
 80077c0:	692b      	ldr	r3, [r5, #16]
 80077c2:	b99b      	cbnz	r3, 80077ec <_vfiprintf_r+0x5c>
 80077c4:	4629      	mov	r1, r5
 80077c6:	4630      	mov	r0, r6
 80077c8:	f7fe fa92 	bl	8005cf0 <__swsetup_r>
 80077cc:	b170      	cbz	r0, 80077ec <_vfiprintf_r+0x5c>
 80077ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077d0:	07dc      	lsls	r4, r3, #31
 80077d2:	d504      	bpl.n	80077de <_vfiprintf_r+0x4e>
 80077d4:	f04f 30ff 	mov.w	r0, #4294967295
 80077d8:	b01d      	add	sp, #116	; 0x74
 80077da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077de:	89ab      	ldrh	r3, [r5, #12]
 80077e0:	0598      	lsls	r0, r3, #22
 80077e2:	d4f7      	bmi.n	80077d4 <_vfiprintf_r+0x44>
 80077e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077e6:	f7fe fb59 	bl	8005e9c <__retarget_lock_release_recursive>
 80077ea:	e7f3      	b.n	80077d4 <_vfiprintf_r+0x44>
 80077ec:	2300      	movs	r3, #0
 80077ee:	9309      	str	r3, [sp, #36]	; 0x24
 80077f0:	2320      	movs	r3, #32
 80077f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80077fa:	2330      	movs	r3, #48	; 0x30
 80077fc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80079b0 <_vfiprintf_r+0x220>
 8007800:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007804:	f04f 0901 	mov.w	r9, #1
 8007808:	4623      	mov	r3, r4
 800780a:	469a      	mov	sl, r3
 800780c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007810:	b10a      	cbz	r2, 8007816 <_vfiprintf_r+0x86>
 8007812:	2a25      	cmp	r2, #37	; 0x25
 8007814:	d1f9      	bne.n	800780a <_vfiprintf_r+0x7a>
 8007816:	ebba 0b04 	subs.w	fp, sl, r4
 800781a:	d00b      	beq.n	8007834 <_vfiprintf_r+0xa4>
 800781c:	465b      	mov	r3, fp
 800781e:	4622      	mov	r2, r4
 8007820:	4629      	mov	r1, r5
 8007822:	4630      	mov	r0, r6
 8007824:	f7ff ffa1 	bl	800776a <__sfputs_r>
 8007828:	3001      	adds	r0, #1
 800782a:	f000 80a9 	beq.w	8007980 <_vfiprintf_r+0x1f0>
 800782e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007830:	445a      	add	r2, fp
 8007832:	9209      	str	r2, [sp, #36]	; 0x24
 8007834:	f89a 3000 	ldrb.w	r3, [sl]
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 80a1 	beq.w	8007980 <_vfiprintf_r+0x1f0>
 800783e:	2300      	movs	r3, #0
 8007840:	f04f 32ff 	mov.w	r2, #4294967295
 8007844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007848:	f10a 0a01 	add.w	sl, sl, #1
 800784c:	9304      	str	r3, [sp, #16]
 800784e:	9307      	str	r3, [sp, #28]
 8007850:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007854:	931a      	str	r3, [sp, #104]	; 0x68
 8007856:	4654      	mov	r4, sl
 8007858:	2205      	movs	r2, #5
 800785a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800785e:	4854      	ldr	r0, [pc, #336]	; (80079b0 <_vfiprintf_r+0x220>)
 8007860:	f7f8 fcbe 	bl	80001e0 <memchr>
 8007864:	9a04      	ldr	r2, [sp, #16]
 8007866:	b9d8      	cbnz	r0, 80078a0 <_vfiprintf_r+0x110>
 8007868:	06d1      	lsls	r1, r2, #27
 800786a:	bf44      	itt	mi
 800786c:	2320      	movmi	r3, #32
 800786e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007872:	0713      	lsls	r3, r2, #28
 8007874:	bf44      	itt	mi
 8007876:	232b      	movmi	r3, #43	; 0x2b
 8007878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800787c:	f89a 3000 	ldrb.w	r3, [sl]
 8007880:	2b2a      	cmp	r3, #42	; 0x2a
 8007882:	d015      	beq.n	80078b0 <_vfiprintf_r+0x120>
 8007884:	9a07      	ldr	r2, [sp, #28]
 8007886:	4654      	mov	r4, sl
 8007888:	2000      	movs	r0, #0
 800788a:	f04f 0c0a 	mov.w	ip, #10
 800788e:	4621      	mov	r1, r4
 8007890:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007894:	3b30      	subs	r3, #48	; 0x30
 8007896:	2b09      	cmp	r3, #9
 8007898:	d94d      	bls.n	8007936 <_vfiprintf_r+0x1a6>
 800789a:	b1b0      	cbz	r0, 80078ca <_vfiprintf_r+0x13a>
 800789c:	9207      	str	r2, [sp, #28]
 800789e:	e014      	b.n	80078ca <_vfiprintf_r+0x13a>
 80078a0:	eba0 0308 	sub.w	r3, r0, r8
 80078a4:	fa09 f303 	lsl.w	r3, r9, r3
 80078a8:	4313      	orrs	r3, r2
 80078aa:	9304      	str	r3, [sp, #16]
 80078ac:	46a2      	mov	sl, r4
 80078ae:	e7d2      	b.n	8007856 <_vfiprintf_r+0xc6>
 80078b0:	9b03      	ldr	r3, [sp, #12]
 80078b2:	1d19      	adds	r1, r3, #4
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	9103      	str	r1, [sp, #12]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	bfbb      	ittet	lt
 80078bc:	425b      	neglt	r3, r3
 80078be:	f042 0202 	orrlt.w	r2, r2, #2
 80078c2:	9307      	strge	r3, [sp, #28]
 80078c4:	9307      	strlt	r3, [sp, #28]
 80078c6:	bfb8      	it	lt
 80078c8:	9204      	strlt	r2, [sp, #16]
 80078ca:	7823      	ldrb	r3, [r4, #0]
 80078cc:	2b2e      	cmp	r3, #46	; 0x2e
 80078ce:	d10c      	bne.n	80078ea <_vfiprintf_r+0x15a>
 80078d0:	7863      	ldrb	r3, [r4, #1]
 80078d2:	2b2a      	cmp	r3, #42	; 0x2a
 80078d4:	d134      	bne.n	8007940 <_vfiprintf_r+0x1b0>
 80078d6:	9b03      	ldr	r3, [sp, #12]
 80078d8:	1d1a      	adds	r2, r3, #4
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	9203      	str	r2, [sp, #12]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	bfb8      	it	lt
 80078e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80078e6:	3402      	adds	r4, #2
 80078e8:	9305      	str	r3, [sp, #20]
 80078ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80079c0 <_vfiprintf_r+0x230>
 80078ee:	7821      	ldrb	r1, [r4, #0]
 80078f0:	2203      	movs	r2, #3
 80078f2:	4650      	mov	r0, sl
 80078f4:	f7f8 fc74 	bl	80001e0 <memchr>
 80078f8:	b138      	cbz	r0, 800790a <_vfiprintf_r+0x17a>
 80078fa:	9b04      	ldr	r3, [sp, #16]
 80078fc:	eba0 000a 	sub.w	r0, r0, sl
 8007900:	2240      	movs	r2, #64	; 0x40
 8007902:	4082      	lsls	r2, r0
 8007904:	4313      	orrs	r3, r2
 8007906:	3401      	adds	r4, #1
 8007908:	9304      	str	r3, [sp, #16]
 800790a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800790e:	4829      	ldr	r0, [pc, #164]	; (80079b4 <_vfiprintf_r+0x224>)
 8007910:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007914:	2206      	movs	r2, #6
 8007916:	f7f8 fc63 	bl	80001e0 <memchr>
 800791a:	2800      	cmp	r0, #0
 800791c:	d03f      	beq.n	800799e <_vfiprintf_r+0x20e>
 800791e:	4b26      	ldr	r3, [pc, #152]	; (80079b8 <_vfiprintf_r+0x228>)
 8007920:	bb1b      	cbnz	r3, 800796a <_vfiprintf_r+0x1da>
 8007922:	9b03      	ldr	r3, [sp, #12]
 8007924:	3307      	adds	r3, #7
 8007926:	f023 0307 	bic.w	r3, r3, #7
 800792a:	3308      	adds	r3, #8
 800792c:	9303      	str	r3, [sp, #12]
 800792e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007930:	443b      	add	r3, r7
 8007932:	9309      	str	r3, [sp, #36]	; 0x24
 8007934:	e768      	b.n	8007808 <_vfiprintf_r+0x78>
 8007936:	fb0c 3202 	mla	r2, ip, r2, r3
 800793a:	460c      	mov	r4, r1
 800793c:	2001      	movs	r0, #1
 800793e:	e7a6      	b.n	800788e <_vfiprintf_r+0xfe>
 8007940:	2300      	movs	r3, #0
 8007942:	3401      	adds	r4, #1
 8007944:	9305      	str	r3, [sp, #20]
 8007946:	4619      	mov	r1, r3
 8007948:	f04f 0c0a 	mov.w	ip, #10
 800794c:	4620      	mov	r0, r4
 800794e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007952:	3a30      	subs	r2, #48	; 0x30
 8007954:	2a09      	cmp	r2, #9
 8007956:	d903      	bls.n	8007960 <_vfiprintf_r+0x1d0>
 8007958:	2b00      	cmp	r3, #0
 800795a:	d0c6      	beq.n	80078ea <_vfiprintf_r+0x15a>
 800795c:	9105      	str	r1, [sp, #20]
 800795e:	e7c4      	b.n	80078ea <_vfiprintf_r+0x15a>
 8007960:	fb0c 2101 	mla	r1, ip, r1, r2
 8007964:	4604      	mov	r4, r0
 8007966:	2301      	movs	r3, #1
 8007968:	e7f0      	b.n	800794c <_vfiprintf_r+0x1bc>
 800796a:	ab03      	add	r3, sp, #12
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	462a      	mov	r2, r5
 8007970:	4b12      	ldr	r3, [pc, #72]	; (80079bc <_vfiprintf_r+0x22c>)
 8007972:	a904      	add	r1, sp, #16
 8007974:	4630      	mov	r0, r6
 8007976:	f7fd fc25 	bl	80051c4 <_printf_float>
 800797a:	4607      	mov	r7, r0
 800797c:	1c78      	adds	r0, r7, #1
 800797e:	d1d6      	bne.n	800792e <_vfiprintf_r+0x19e>
 8007980:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007982:	07d9      	lsls	r1, r3, #31
 8007984:	d405      	bmi.n	8007992 <_vfiprintf_r+0x202>
 8007986:	89ab      	ldrh	r3, [r5, #12]
 8007988:	059a      	lsls	r2, r3, #22
 800798a:	d402      	bmi.n	8007992 <_vfiprintf_r+0x202>
 800798c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800798e:	f7fe fa85 	bl	8005e9c <__retarget_lock_release_recursive>
 8007992:	89ab      	ldrh	r3, [r5, #12]
 8007994:	065b      	lsls	r3, r3, #25
 8007996:	f53f af1d 	bmi.w	80077d4 <_vfiprintf_r+0x44>
 800799a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800799c:	e71c      	b.n	80077d8 <_vfiprintf_r+0x48>
 800799e:	ab03      	add	r3, sp, #12
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	462a      	mov	r2, r5
 80079a4:	4b05      	ldr	r3, [pc, #20]	; (80079bc <_vfiprintf_r+0x22c>)
 80079a6:	a904      	add	r1, sp, #16
 80079a8:	4630      	mov	r0, r6
 80079aa:	f7fd feaf 	bl	800570c <_printf_i>
 80079ae:	e7e4      	b.n	800797a <_vfiprintf_r+0x1ea>
 80079b0:	08008154 	.word	0x08008154
 80079b4:	0800815e 	.word	0x0800815e
 80079b8:	080051c5 	.word	0x080051c5
 80079bc:	0800776b 	.word	0x0800776b
 80079c0:	0800815a 	.word	0x0800815a

080079c4 <__sflush_r>:
 80079c4:	898a      	ldrh	r2, [r1, #12]
 80079c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ca:	4605      	mov	r5, r0
 80079cc:	0710      	lsls	r0, r2, #28
 80079ce:	460c      	mov	r4, r1
 80079d0:	d458      	bmi.n	8007a84 <__sflush_r+0xc0>
 80079d2:	684b      	ldr	r3, [r1, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	dc05      	bgt.n	80079e4 <__sflush_r+0x20>
 80079d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	dc02      	bgt.n	80079e4 <__sflush_r+0x20>
 80079de:	2000      	movs	r0, #0
 80079e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079e6:	2e00      	cmp	r6, #0
 80079e8:	d0f9      	beq.n	80079de <__sflush_r+0x1a>
 80079ea:	2300      	movs	r3, #0
 80079ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079f0:	682f      	ldr	r7, [r5, #0]
 80079f2:	6a21      	ldr	r1, [r4, #32]
 80079f4:	602b      	str	r3, [r5, #0]
 80079f6:	d032      	beq.n	8007a5e <__sflush_r+0x9a>
 80079f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	075a      	lsls	r2, r3, #29
 80079fe:	d505      	bpl.n	8007a0c <__sflush_r+0x48>
 8007a00:	6863      	ldr	r3, [r4, #4]
 8007a02:	1ac0      	subs	r0, r0, r3
 8007a04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a06:	b10b      	cbz	r3, 8007a0c <__sflush_r+0x48>
 8007a08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a0a:	1ac0      	subs	r0, r0, r3
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	4602      	mov	r2, r0
 8007a10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a12:	6a21      	ldr	r1, [r4, #32]
 8007a14:	4628      	mov	r0, r5
 8007a16:	47b0      	blx	r6
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	89a3      	ldrh	r3, [r4, #12]
 8007a1c:	d106      	bne.n	8007a2c <__sflush_r+0x68>
 8007a1e:	6829      	ldr	r1, [r5, #0]
 8007a20:	291d      	cmp	r1, #29
 8007a22:	d82b      	bhi.n	8007a7c <__sflush_r+0xb8>
 8007a24:	4a29      	ldr	r2, [pc, #164]	; (8007acc <__sflush_r+0x108>)
 8007a26:	410a      	asrs	r2, r1
 8007a28:	07d6      	lsls	r6, r2, #31
 8007a2a:	d427      	bmi.n	8007a7c <__sflush_r+0xb8>
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	6062      	str	r2, [r4, #4]
 8007a30:	04d9      	lsls	r1, r3, #19
 8007a32:	6922      	ldr	r2, [r4, #16]
 8007a34:	6022      	str	r2, [r4, #0]
 8007a36:	d504      	bpl.n	8007a42 <__sflush_r+0x7e>
 8007a38:	1c42      	adds	r2, r0, #1
 8007a3a:	d101      	bne.n	8007a40 <__sflush_r+0x7c>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	b903      	cbnz	r3, 8007a42 <__sflush_r+0x7e>
 8007a40:	6560      	str	r0, [r4, #84]	; 0x54
 8007a42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a44:	602f      	str	r7, [r5, #0]
 8007a46:	2900      	cmp	r1, #0
 8007a48:	d0c9      	beq.n	80079de <__sflush_r+0x1a>
 8007a4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a4e:	4299      	cmp	r1, r3
 8007a50:	d002      	beq.n	8007a58 <__sflush_r+0x94>
 8007a52:	4628      	mov	r0, r5
 8007a54:	f7ff f89e 	bl	8006b94 <_free_r>
 8007a58:	2000      	movs	r0, #0
 8007a5a:	6360      	str	r0, [r4, #52]	; 0x34
 8007a5c:	e7c0      	b.n	80079e0 <__sflush_r+0x1c>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	4628      	mov	r0, r5
 8007a62:	47b0      	blx	r6
 8007a64:	1c41      	adds	r1, r0, #1
 8007a66:	d1c8      	bne.n	80079fa <__sflush_r+0x36>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0c5      	beq.n	80079fa <__sflush_r+0x36>
 8007a6e:	2b1d      	cmp	r3, #29
 8007a70:	d001      	beq.n	8007a76 <__sflush_r+0xb2>
 8007a72:	2b16      	cmp	r3, #22
 8007a74:	d101      	bne.n	8007a7a <__sflush_r+0xb6>
 8007a76:	602f      	str	r7, [r5, #0]
 8007a78:	e7b1      	b.n	80079de <__sflush_r+0x1a>
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a80:	81a3      	strh	r3, [r4, #12]
 8007a82:	e7ad      	b.n	80079e0 <__sflush_r+0x1c>
 8007a84:	690f      	ldr	r7, [r1, #16]
 8007a86:	2f00      	cmp	r7, #0
 8007a88:	d0a9      	beq.n	80079de <__sflush_r+0x1a>
 8007a8a:	0793      	lsls	r3, r2, #30
 8007a8c:	680e      	ldr	r6, [r1, #0]
 8007a8e:	bf08      	it	eq
 8007a90:	694b      	ldreq	r3, [r1, #20]
 8007a92:	600f      	str	r7, [r1, #0]
 8007a94:	bf18      	it	ne
 8007a96:	2300      	movne	r3, #0
 8007a98:	eba6 0807 	sub.w	r8, r6, r7
 8007a9c:	608b      	str	r3, [r1, #8]
 8007a9e:	f1b8 0f00 	cmp.w	r8, #0
 8007aa2:	dd9c      	ble.n	80079de <__sflush_r+0x1a>
 8007aa4:	6a21      	ldr	r1, [r4, #32]
 8007aa6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007aa8:	4643      	mov	r3, r8
 8007aaa:	463a      	mov	r2, r7
 8007aac:	4628      	mov	r0, r5
 8007aae:	47b0      	blx	r6
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	dc06      	bgt.n	8007ac2 <__sflush_r+0xfe>
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aba:	81a3      	strh	r3, [r4, #12]
 8007abc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac0:	e78e      	b.n	80079e0 <__sflush_r+0x1c>
 8007ac2:	4407      	add	r7, r0
 8007ac4:	eba8 0800 	sub.w	r8, r8, r0
 8007ac8:	e7e9      	b.n	8007a9e <__sflush_r+0xda>
 8007aca:	bf00      	nop
 8007acc:	dfbffffe 	.word	0xdfbffffe

08007ad0 <_fflush_r>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	690b      	ldr	r3, [r1, #16]
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	b913      	cbnz	r3, 8007ae0 <_fflush_r+0x10>
 8007ada:	2500      	movs	r5, #0
 8007adc:	4628      	mov	r0, r5
 8007ade:	bd38      	pop	{r3, r4, r5, pc}
 8007ae0:	b118      	cbz	r0, 8007aea <_fflush_r+0x1a>
 8007ae2:	6a03      	ldr	r3, [r0, #32]
 8007ae4:	b90b      	cbnz	r3, 8007aea <_fflush_r+0x1a>
 8007ae6:	f7fd ffbf 	bl	8005a68 <__sinit>
 8007aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d0f3      	beq.n	8007ada <_fflush_r+0xa>
 8007af2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007af4:	07d0      	lsls	r0, r2, #31
 8007af6:	d404      	bmi.n	8007b02 <_fflush_r+0x32>
 8007af8:	0599      	lsls	r1, r3, #22
 8007afa:	d402      	bmi.n	8007b02 <_fflush_r+0x32>
 8007afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007afe:	f7fe f9cc 	bl	8005e9a <__retarget_lock_acquire_recursive>
 8007b02:	4628      	mov	r0, r5
 8007b04:	4621      	mov	r1, r4
 8007b06:	f7ff ff5d 	bl	80079c4 <__sflush_r>
 8007b0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b0c:	07da      	lsls	r2, r3, #31
 8007b0e:	4605      	mov	r5, r0
 8007b10:	d4e4      	bmi.n	8007adc <_fflush_r+0xc>
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	059b      	lsls	r3, r3, #22
 8007b16:	d4e1      	bmi.n	8007adc <_fflush_r+0xc>
 8007b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b1a:	f7fe f9bf 	bl	8005e9c <__retarget_lock_release_recursive>
 8007b1e:	e7dd      	b.n	8007adc <_fflush_r+0xc>

08007b20 <__swhatbuf_r>:
 8007b20:	b570      	push	{r4, r5, r6, lr}
 8007b22:	460c      	mov	r4, r1
 8007b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b28:	2900      	cmp	r1, #0
 8007b2a:	b096      	sub	sp, #88	; 0x58
 8007b2c:	4615      	mov	r5, r2
 8007b2e:	461e      	mov	r6, r3
 8007b30:	da0d      	bge.n	8007b4e <__swhatbuf_r+0x2e>
 8007b32:	89a3      	ldrh	r3, [r4, #12]
 8007b34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007b38:	f04f 0100 	mov.w	r1, #0
 8007b3c:	bf0c      	ite	eq
 8007b3e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007b42:	2340      	movne	r3, #64	; 0x40
 8007b44:	2000      	movs	r0, #0
 8007b46:	6031      	str	r1, [r6, #0]
 8007b48:	602b      	str	r3, [r5, #0]
 8007b4a:	b016      	add	sp, #88	; 0x58
 8007b4c:	bd70      	pop	{r4, r5, r6, pc}
 8007b4e:	466a      	mov	r2, sp
 8007b50:	f000 f862 	bl	8007c18 <_fstat_r>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	dbec      	blt.n	8007b32 <__swhatbuf_r+0x12>
 8007b58:	9901      	ldr	r1, [sp, #4]
 8007b5a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007b5e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007b62:	4259      	negs	r1, r3
 8007b64:	4159      	adcs	r1, r3
 8007b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b6a:	e7eb      	b.n	8007b44 <__swhatbuf_r+0x24>

08007b6c <__smakebuf_r>:
 8007b6c:	898b      	ldrh	r3, [r1, #12]
 8007b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b70:	079d      	lsls	r5, r3, #30
 8007b72:	4606      	mov	r6, r0
 8007b74:	460c      	mov	r4, r1
 8007b76:	d507      	bpl.n	8007b88 <__smakebuf_r+0x1c>
 8007b78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	6123      	str	r3, [r4, #16]
 8007b80:	2301      	movs	r3, #1
 8007b82:	6163      	str	r3, [r4, #20]
 8007b84:	b002      	add	sp, #8
 8007b86:	bd70      	pop	{r4, r5, r6, pc}
 8007b88:	ab01      	add	r3, sp, #4
 8007b8a:	466a      	mov	r2, sp
 8007b8c:	f7ff ffc8 	bl	8007b20 <__swhatbuf_r>
 8007b90:	9900      	ldr	r1, [sp, #0]
 8007b92:	4605      	mov	r5, r0
 8007b94:	4630      	mov	r0, r6
 8007b96:	f7ff f871 	bl	8006c7c <_malloc_r>
 8007b9a:	b948      	cbnz	r0, 8007bb0 <__smakebuf_r+0x44>
 8007b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ba0:	059a      	lsls	r2, r3, #22
 8007ba2:	d4ef      	bmi.n	8007b84 <__smakebuf_r+0x18>
 8007ba4:	f023 0303 	bic.w	r3, r3, #3
 8007ba8:	f043 0302 	orr.w	r3, r3, #2
 8007bac:	81a3      	strh	r3, [r4, #12]
 8007bae:	e7e3      	b.n	8007b78 <__smakebuf_r+0xc>
 8007bb0:	89a3      	ldrh	r3, [r4, #12]
 8007bb2:	6020      	str	r0, [r4, #0]
 8007bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb8:	81a3      	strh	r3, [r4, #12]
 8007bba:	9b00      	ldr	r3, [sp, #0]
 8007bbc:	6163      	str	r3, [r4, #20]
 8007bbe:	9b01      	ldr	r3, [sp, #4]
 8007bc0:	6120      	str	r0, [r4, #16]
 8007bc2:	b15b      	cbz	r3, 8007bdc <__smakebuf_r+0x70>
 8007bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bc8:	4630      	mov	r0, r6
 8007bca:	f000 f837 	bl	8007c3c <_isatty_r>
 8007bce:	b128      	cbz	r0, 8007bdc <__smakebuf_r+0x70>
 8007bd0:	89a3      	ldrh	r3, [r4, #12]
 8007bd2:	f023 0303 	bic.w	r3, r3, #3
 8007bd6:	f043 0301 	orr.w	r3, r3, #1
 8007bda:	81a3      	strh	r3, [r4, #12]
 8007bdc:	89a3      	ldrh	r3, [r4, #12]
 8007bde:	431d      	orrs	r5, r3
 8007be0:	81a5      	strh	r5, [r4, #12]
 8007be2:	e7cf      	b.n	8007b84 <__smakebuf_r+0x18>

08007be4 <memmove>:
 8007be4:	4288      	cmp	r0, r1
 8007be6:	b510      	push	{r4, lr}
 8007be8:	eb01 0402 	add.w	r4, r1, r2
 8007bec:	d902      	bls.n	8007bf4 <memmove+0x10>
 8007bee:	4284      	cmp	r4, r0
 8007bf0:	4623      	mov	r3, r4
 8007bf2:	d807      	bhi.n	8007c04 <memmove+0x20>
 8007bf4:	1e43      	subs	r3, r0, #1
 8007bf6:	42a1      	cmp	r1, r4
 8007bf8:	d008      	beq.n	8007c0c <memmove+0x28>
 8007bfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c02:	e7f8      	b.n	8007bf6 <memmove+0x12>
 8007c04:	4402      	add	r2, r0
 8007c06:	4601      	mov	r1, r0
 8007c08:	428a      	cmp	r2, r1
 8007c0a:	d100      	bne.n	8007c0e <memmove+0x2a>
 8007c0c:	bd10      	pop	{r4, pc}
 8007c0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c16:	e7f7      	b.n	8007c08 <memmove+0x24>

08007c18 <_fstat_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	4d07      	ldr	r5, [pc, #28]	; (8007c38 <_fstat_r+0x20>)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	4604      	mov	r4, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	4611      	mov	r1, r2
 8007c24:	602b      	str	r3, [r5, #0]
 8007c26:	f7fd f8aa 	bl	8004d7e <_fstat>
 8007c2a:	1c43      	adds	r3, r0, #1
 8007c2c:	d102      	bne.n	8007c34 <_fstat_r+0x1c>
 8007c2e:	682b      	ldr	r3, [r5, #0]
 8007c30:	b103      	cbz	r3, 8007c34 <_fstat_r+0x1c>
 8007c32:	6023      	str	r3, [r4, #0]
 8007c34:	bd38      	pop	{r3, r4, r5, pc}
 8007c36:	bf00      	nop
 8007c38:	200004c4 	.word	0x200004c4

08007c3c <_isatty_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4d06      	ldr	r5, [pc, #24]	; (8007c58 <_isatty_r+0x1c>)
 8007c40:	2300      	movs	r3, #0
 8007c42:	4604      	mov	r4, r0
 8007c44:	4608      	mov	r0, r1
 8007c46:	602b      	str	r3, [r5, #0]
 8007c48:	f7fd fa00 	bl	800504c <_isatty>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_isatty_r+0x1a>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_isatty_r+0x1a>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	200004c4 	.word	0x200004c4

08007c5c <_sbrk_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4d06      	ldr	r5, [pc, #24]	; (8007c78 <_sbrk_r+0x1c>)
 8007c60:	2300      	movs	r3, #0
 8007c62:	4604      	mov	r4, r0
 8007c64:	4608      	mov	r0, r1
 8007c66:	602b      	str	r3, [r5, #0]
 8007c68:	f7fa f9f0 	bl	800204c <_sbrk>
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	d102      	bne.n	8007c76 <_sbrk_r+0x1a>
 8007c70:	682b      	ldr	r3, [r5, #0]
 8007c72:	b103      	cbz	r3, 8007c76 <_sbrk_r+0x1a>
 8007c74:	6023      	str	r3, [r4, #0]
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	200004c4 	.word	0x200004c4

08007c7c <memcpy>:
 8007c7c:	440a      	add	r2, r1
 8007c7e:	4291      	cmp	r1, r2
 8007c80:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c84:	d100      	bne.n	8007c88 <memcpy+0xc>
 8007c86:	4770      	bx	lr
 8007c88:	b510      	push	{r4, lr}
 8007c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c92:	4291      	cmp	r1, r2
 8007c94:	d1f9      	bne.n	8007c8a <memcpy+0xe>
 8007c96:	bd10      	pop	{r4, pc}

08007c98 <__assert_func>:
 8007c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c9a:	4614      	mov	r4, r2
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	4b09      	ldr	r3, [pc, #36]	; (8007cc4 <__assert_func+0x2c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4605      	mov	r5, r0
 8007ca4:	68d8      	ldr	r0, [r3, #12]
 8007ca6:	b14c      	cbz	r4, 8007cbc <__assert_func+0x24>
 8007ca8:	4b07      	ldr	r3, [pc, #28]	; (8007cc8 <__assert_func+0x30>)
 8007caa:	9100      	str	r1, [sp, #0]
 8007cac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007cb0:	4906      	ldr	r1, [pc, #24]	; (8007ccc <__assert_func+0x34>)
 8007cb2:	462b      	mov	r3, r5
 8007cb4:	f000 f872 	bl	8007d9c <fiprintf>
 8007cb8:	f000 f882 	bl	8007dc0 <abort>
 8007cbc:	4b04      	ldr	r3, [pc, #16]	; (8007cd0 <__assert_func+0x38>)
 8007cbe:	461c      	mov	r4, r3
 8007cc0:	e7f3      	b.n	8007caa <__assert_func+0x12>
 8007cc2:	bf00      	nop
 8007cc4:	20000074 	.word	0x20000074
 8007cc8:	0800816f 	.word	0x0800816f
 8007ccc:	0800817c 	.word	0x0800817c
 8007cd0:	080081aa 	.word	0x080081aa

08007cd4 <_calloc_r>:
 8007cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cd6:	fba1 2402 	umull	r2, r4, r1, r2
 8007cda:	b94c      	cbnz	r4, 8007cf0 <_calloc_r+0x1c>
 8007cdc:	4611      	mov	r1, r2
 8007cde:	9201      	str	r2, [sp, #4]
 8007ce0:	f7fe ffcc 	bl	8006c7c <_malloc_r>
 8007ce4:	9a01      	ldr	r2, [sp, #4]
 8007ce6:	4605      	mov	r5, r0
 8007ce8:	b930      	cbnz	r0, 8007cf8 <_calloc_r+0x24>
 8007cea:	4628      	mov	r0, r5
 8007cec:	b003      	add	sp, #12
 8007cee:	bd30      	pop	{r4, r5, pc}
 8007cf0:	220c      	movs	r2, #12
 8007cf2:	6002      	str	r2, [r0, #0]
 8007cf4:	2500      	movs	r5, #0
 8007cf6:	e7f8      	b.n	8007cea <_calloc_r+0x16>
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	f7fe f851 	bl	8005da0 <memset>
 8007cfe:	e7f4      	b.n	8007cea <_calloc_r+0x16>

08007d00 <__ascii_mbtowc>:
 8007d00:	b082      	sub	sp, #8
 8007d02:	b901      	cbnz	r1, 8007d06 <__ascii_mbtowc+0x6>
 8007d04:	a901      	add	r1, sp, #4
 8007d06:	b142      	cbz	r2, 8007d1a <__ascii_mbtowc+0x1a>
 8007d08:	b14b      	cbz	r3, 8007d1e <__ascii_mbtowc+0x1e>
 8007d0a:	7813      	ldrb	r3, [r2, #0]
 8007d0c:	600b      	str	r3, [r1, #0]
 8007d0e:	7812      	ldrb	r2, [r2, #0]
 8007d10:	1e10      	subs	r0, r2, #0
 8007d12:	bf18      	it	ne
 8007d14:	2001      	movne	r0, #1
 8007d16:	b002      	add	sp, #8
 8007d18:	4770      	bx	lr
 8007d1a:	4610      	mov	r0, r2
 8007d1c:	e7fb      	b.n	8007d16 <__ascii_mbtowc+0x16>
 8007d1e:	f06f 0001 	mvn.w	r0, #1
 8007d22:	e7f8      	b.n	8007d16 <__ascii_mbtowc+0x16>

08007d24 <_realloc_r>:
 8007d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d28:	4680      	mov	r8, r0
 8007d2a:	4614      	mov	r4, r2
 8007d2c:	460e      	mov	r6, r1
 8007d2e:	b921      	cbnz	r1, 8007d3a <_realloc_r+0x16>
 8007d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d34:	4611      	mov	r1, r2
 8007d36:	f7fe bfa1 	b.w	8006c7c <_malloc_r>
 8007d3a:	b92a      	cbnz	r2, 8007d48 <_realloc_r+0x24>
 8007d3c:	f7fe ff2a 	bl	8006b94 <_free_r>
 8007d40:	4625      	mov	r5, r4
 8007d42:	4628      	mov	r0, r5
 8007d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d48:	f000 f841 	bl	8007dce <_malloc_usable_size_r>
 8007d4c:	4284      	cmp	r4, r0
 8007d4e:	4607      	mov	r7, r0
 8007d50:	d802      	bhi.n	8007d58 <_realloc_r+0x34>
 8007d52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d56:	d812      	bhi.n	8007d7e <_realloc_r+0x5a>
 8007d58:	4621      	mov	r1, r4
 8007d5a:	4640      	mov	r0, r8
 8007d5c:	f7fe ff8e 	bl	8006c7c <_malloc_r>
 8007d60:	4605      	mov	r5, r0
 8007d62:	2800      	cmp	r0, #0
 8007d64:	d0ed      	beq.n	8007d42 <_realloc_r+0x1e>
 8007d66:	42bc      	cmp	r4, r7
 8007d68:	4622      	mov	r2, r4
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	bf28      	it	cs
 8007d6e:	463a      	movcs	r2, r7
 8007d70:	f7ff ff84 	bl	8007c7c <memcpy>
 8007d74:	4631      	mov	r1, r6
 8007d76:	4640      	mov	r0, r8
 8007d78:	f7fe ff0c 	bl	8006b94 <_free_r>
 8007d7c:	e7e1      	b.n	8007d42 <_realloc_r+0x1e>
 8007d7e:	4635      	mov	r5, r6
 8007d80:	e7df      	b.n	8007d42 <_realloc_r+0x1e>

08007d82 <__ascii_wctomb>:
 8007d82:	b149      	cbz	r1, 8007d98 <__ascii_wctomb+0x16>
 8007d84:	2aff      	cmp	r2, #255	; 0xff
 8007d86:	bf85      	ittet	hi
 8007d88:	238a      	movhi	r3, #138	; 0x8a
 8007d8a:	6003      	strhi	r3, [r0, #0]
 8007d8c:	700a      	strbls	r2, [r1, #0]
 8007d8e:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d92:	bf98      	it	ls
 8007d94:	2001      	movls	r0, #1
 8007d96:	4770      	bx	lr
 8007d98:	4608      	mov	r0, r1
 8007d9a:	4770      	bx	lr

08007d9c <fiprintf>:
 8007d9c:	b40e      	push	{r1, r2, r3}
 8007d9e:	b503      	push	{r0, r1, lr}
 8007da0:	4601      	mov	r1, r0
 8007da2:	ab03      	add	r3, sp, #12
 8007da4:	4805      	ldr	r0, [pc, #20]	; (8007dbc <fiprintf+0x20>)
 8007da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007daa:	6800      	ldr	r0, [r0, #0]
 8007dac:	9301      	str	r3, [sp, #4]
 8007dae:	f7ff fcef 	bl	8007790 <_vfiprintf_r>
 8007db2:	b002      	add	sp, #8
 8007db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007db8:	b003      	add	sp, #12
 8007dba:	4770      	bx	lr
 8007dbc:	20000074 	.word	0x20000074

08007dc0 <abort>:
 8007dc0:	b508      	push	{r3, lr}
 8007dc2:	2006      	movs	r0, #6
 8007dc4:	f000 f834 	bl	8007e30 <raise>
 8007dc8:	2001      	movs	r0, #1
 8007dca:	f000 f855 	bl	8007e78 <_exit>

08007dce <_malloc_usable_size_r>:
 8007dce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dd2:	1f18      	subs	r0, r3, #4
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	bfbc      	itt	lt
 8007dd8:	580b      	ldrlt	r3, [r1, r0]
 8007dda:	18c0      	addlt	r0, r0, r3
 8007ddc:	4770      	bx	lr

08007dde <_raise_r>:
 8007dde:	291f      	cmp	r1, #31
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	4604      	mov	r4, r0
 8007de4:	460d      	mov	r5, r1
 8007de6:	d904      	bls.n	8007df2 <_raise_r+0x14>
 8007de8:	2316      	movs	r3, #22
 8007dea:	6003      	str	r3, [r0, #0]
 8007dec:	f04f 30ff 	mov.w	r0, #4294967295
 8007df0:	bd38      	pop	{r3, r4, r5, pc}
 8007df2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007df4:	b112      	cbz	r2, 8007dfc <_raise_r+0x1e>
 8007df6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007dfa:	b94b      	cbnz	r3, 8007e10 <_raise_r+0x32>
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	f000 f831 	bl	8007e64 <_getpid_r>
 8007e02:	462a      	mov	r2, r5
 8007e04:	4601      	mov	r1, r0
 8007e06:	4620      	mov	r0, r4
 8007e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e0c:	f000 b818 	b.w	8007e40 <_kill_r>
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d00a      	beq.n	8007e2a <_raise_r+0x4c>
 8007e14:	1c59      	adds	r1, r3, #1
 8007e16:	d103      	bne.n	8007e20 <_raise_r+0x42>
 8007e18:	2316      	movs	r3, #22
 8007e1a:	6003      	str	r3, [r0, #0]
 8007e1c:	2001      	movs	r0, #1
 8007e1e:	e7e7      	b.n	8007df0 <_raise_r+0x12>
 8007e20:	2400      	movs	r4, #0
 8007e22:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e26:	4628      	mov	r0, r5
 8007e28:	4798      	blx	r3
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	e7e0      	b.n	8007df0 <_raise_r+0x12>
	...

08007e30 <raise>:
 8007e30:	4b02      	ldr	r3, [pc, #8]	; (8007e3c <raise+0xc>)
 8007e32:	4601      	mov	r1, r0
 8007e34:	6818      	ldr	r0, [r3, #0]
 8007e36:	f7ff bfd2 	b.w	8007dde <_raise_r>
 8007e3a:	bf00      	nop
 8007e3c:	20000074 	.word	0x20000074

08007e40 <_kill_r>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	4d07      	ldr	r5, [pc, #28]	; (8007e60 <_kill_r+0x20>)
 8007e44:	2300      	movs	r3, #0
 8007e46:	4604      	mov	r4, r0
 8007e48:	4608      	mov	r0, r1
 8007e4a:	4611      	mov	r1, r2
 8007e4c:	602b      	str	r3, [r5, #0]
 8007e4e:	f000 f80b 	bl	8007e68 <_kill>
 8007e52:	1c43      	adds	r3, r0, #1
 8007e54:	d102      	bne.n	8007e5c <_kill_r+0x1c>
 8007e56:	682b      	ldr	r3, [r5, #0]
 8007e58:	b103      	cbz	r3, 8007e5c <_kill_r+0x1c>
 8007e5a:	6023      	str	r3, [r4, #0]
 8007e5c:	bd38      	pop	{r3, r4, r5, pc}
 8007e5e:	bf00      	nop
 8007e60:	200004c4 	.word	0x200004c4

08007e64 <_getpid_r>:
 8007e64:	f7fc bf68 	b.w	8004d38 <_getpid>

08007e68 <_kill>:
 8007e68:	4b02      	ldr	r3, [pc, #8]	; (8007e74 <_kill+0xc>)
 8007e6a:	2258      	movs	r2, #88	; 0x58
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e72:	4770      	bx	lr
 8007e74:	200004c4 	.word	0x200004c4

08007e78 <_exit>:
 8007e78:	e7fe      	b.n	8007e78 <_exit>
	...

08007e7c <_init>:
 8007e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e7e:	bf00      	nop
 8007e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e82:	bc08      	pop	{r3}
 8007e84:	469e      	mov	lr, r3
 8007e86:	4770      	bx	lr

08007e88 <_fini>:
 8007e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8a:	bf00      	nop
 8007e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e8e:	bc08      	pop	{r3}
 8007e90:	469e      	mov	lr, r3
 8007e92:	4770      	bx	lr
